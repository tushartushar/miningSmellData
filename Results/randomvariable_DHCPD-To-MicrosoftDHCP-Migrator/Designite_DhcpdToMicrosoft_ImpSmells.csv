Implementation smell,Namespace,Class,File,Method,Description
Long Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The method has 271 lines of code.
Long Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The method has 117 lines of code.
Complex Method,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitHostDeclaration,Cyclomatic complexity of the method is 8
Complex Method,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitOptionStatement,Cyclomatic complexity of the method is 21
Complex Method,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,Cyclomatic complexity of the method is 10
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,Cyclomatic complexity of the method is 101
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,Cyclomatic complexity of the method is 45
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,Cyclomatic complexity of the method is 8
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,Cyclomatic complexity of the method is 15
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,Cyclomatic complexity of the method is 12
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,Cyclomatic complexity of the method is 13
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,Cyclomatic complexity of the method is 43
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,Cyclomatic complexity of the method is 13
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,Cyclomatic complexity of the method is 9
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,Cyclomatic complexity of the method is 11
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,Cyclomatic complexity of the method is 9
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,Cyclomatic complexity of the method is 9
Complex Method,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,Cyclomatic complexity of the method is 29
Long Parameter List,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,GetNestedChildrenIterator,The method has 5 parameters.
Long Parameter List,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The method has 5 parameters.
Long Parameter List,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ExtractContiguousRanges,The method has 5 parameters.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitSharedNetworkDeclaration,The length of the statement  "	AddToNestedChildrenProperty (subnets' context.sharedNetwork ().STRING ().GetText ().ToString ()' ScopeIPv4SuperscopeNames); " is 123.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The length of the statement  "				logger.Warn ("Duplicate IP Address in lease: " + lease.IPAddress + " and MAC " + lease.ClientId + " with expiry time at " + (Leases.First (x => x.IPAddress == lease.IPAddress).LeaseExpiryTime)); " is 194.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The length of the statement  "				if (DateTime.Parse (Leases.First (x => x.IPAddress == lease.IPAddress).LeaseExpiryTime) < DateTime.Parse (lease.LeaseExpiryTime)) { " is 131.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The length of the statement  "					logger.Debug ("Replacement lease " + lease.IPAddress + " with hostname " + lease.HostName + " and MAC " + lease.ClientId + " expires later on " + lease.LeaseExpiryTime); " is 169.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The length of the statement  "				logger.Debug ("Lease " + lease.IPAddress + " with hostname " + lease.HostName + " and MAC " + lease.ClientId + " expires on " + lease.LeaseExpiryTime); " is 151.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseDeclaration,The length of the statement  "			logger.Debug ("Lease " + lease.IPAddress + " with hostname " + lease.HostName + " and MAC " + lease.ClientId + " expires on " + lease.LeaseExpiryTime); " is 151.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitLeaseParameter,The length of the statement  "		Ipv4LeaseClientIds.Put (context.parent.parent' normaliseMac (context.hardwareParameter ().ColonSeparatedList ().GetText ())); " is 125.
Long Statement,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,CompileXML,The length of the statement  "		foreach (KeyValuePair<IPAddress' IPAddress> dict in (exclusionRanges.Where (x => x.Key.IsInSameSubnet (scopeID' subnetMask)))) { " is 128.
Long Statement,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The length of the statement  "			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) { " is 1340.
Long Statement,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The length of the statement  "			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) { " is 1340.
Long Statement,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The length of the statement  "			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) { " is 379.
Long Statement,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The length of the statement  "			if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) { " is 159.
Long Statement,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetLastAddress,The length of the statement  "	broadcastAddress [broadcastAddress.Length - 1] = (byte)(ipAdressBytes [broadcastAddress.Length - 1] | (subnetMaskBytes [broadcastAddress.Length - 1] ^ 254)); " is 157.
Long Statement,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ExtractContiguousRanges,The length of the statement  "	IEnumerable<IEnumerable<uint>> IPNumberGroups = IPNumbers.Distinct ().GroupBy (num => NumberUtils.Range (num' uint.MaxValue - num + 1).TakeWhile (IPNumbers.Contains).Last ()).Where (seq => seq.Count () >= 3).Select (seq => seq.OrderBy (num => num)); " is 249.
Empty Catch Block,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitSubnetDeclaration,The method has an empty catch block.
Magic Number,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitHostDeclaration,The following statement contains a magic number: if (hardwareParameters != null) {  	filter.MacAddress = normaliseMac (hardwareParameters.First ().GetChild (2).GetText ());  }  
Magic Number,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitHostDeclaration,The following statement contains a magic number: filter.MacAddress = normaliseMac (hardwareParameters.First ().GetChild (2).GetText ());  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigLexer.cs,Action,The following statement contains a magic number: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigLexer.cs,Action,The following statement contains a magic number: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 109;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 106;  					statement ();  				}  			}  			State = 111;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: State = 109;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 106;  			statement ();  		}  	}  	State = 111;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: State = 106;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,config,The following statement contains a magic number: State = 111;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: EnterRule (_localctx' 2' RULE_stringParameter);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: try {  	State = 116;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 112;  			Match (QUOTE);  			State = 113;  			Match (STRING);  			State = 114;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 115;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: State = 116;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 112;  		Match (QUOTE);  		State = 113;  		Match (STRING);  		State = 114;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 115;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 112;  		Match (QUOTE);  		State = 113;  		Match (STRING);  		State = 114;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 115;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 112;  		Match (QUOTE);  		State = 113;  		Match (STRING);  		State = 114;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 115;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 112;  		Match (QUOTE);  		State = 113;  		Match (STRING);  		State = 114;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 115;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 112;  		Match (QUOTE);  		State = 113;  		Match (STRING);  		State = 114;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 115;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: State = 112;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: State = 113;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: State = 114;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,stringParameter,The following statement contains a magic number: State = 115;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterRule (_localctx' 4' RULE_parameter);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: try {  	State = 195;  	switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 118;  			Match (DEFAULT_LEASE_TIME);  			State = 119;  			leaseTime ();  			State = 120;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 122;  			Match (MAX_LEASE_TIME);  			State = 123;  			leaseTime ();  			State = 124;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 126;  			Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  			State = 127;  			Match (Date);  			State = 128;  			Match (SEMI);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 129;  			Match (DYNAMIC_BOOTP_LEASE_LENGTH);  			State = 130;  			leaseTime ();  			State = 131;  			Match (SEMI);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 133;  			Match (DDNS_UPDATE_STYLE);  			State = 134;  			stringParameter ();  			State = 135;  			Match (SEMI);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 137;  			Match (BOOT_UNKNOWN_CLIENTS);  			State = 138;  			Match (Boolean);  			State = 139;  			Match (SEMI);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 140;  			Match (ONE_LEASE_PER_CLIENT);  			State = 141;  			Match (Boolean);  			State = 142;  			Match (SEMI);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 143;  			Match (USE_HOST_DECL_NAME);  			State = 144;  			Match (Boolean);  			State = 145;  			Match (SEMI);  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 146;  			Match (NEXT_SERVER);  			State = 147;  			stringParameter ();  			State = 148;  			Match (SEMI);  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 150;  			Match (SERVER_IDENTIFIER);  			State = 151;  			stringParameter ();  			State = 152;  			Match (SEMI);  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 154;  			Match (FILENAME);  			State = 155;  			stringParameter ();  			State = 156;  			Match (SEMI);  		}  		break;  	case 12:  		EnterOuterAlt (_localctx' 12);  		{  			State = 158;  			hardwareParameter ();  			State = 159;  			Match (SEMI);  		}  		break;  	case 13:  		EnterOuterAlt (_localctx' 13);  		{  			State = 161;  			fixedAddressParameter ();  			State = 162;  			Match (SEMI);  		}  		break;  	case 14:  		EnterOuterAlt (_localctx' 14);  		{  			State = 164;  			Match (ALLOW);  			State = 165;  			Match (AllowDenyKeyword);  			State = 166;  			Match (SEMI);  		}  		break;  	case 15:  		EnterOuterAlt (_localctx' 15);  		{  			State = 167;  			Match (DENY);  			State = 168;  			Match (AllowDenyKeyword);  			State = 169;  			Match (SEMI);  		}  		break;  	case 16:  		EnterOuterAlt (_localctx' 16);  		{  			State = 170;  			Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  			State = 171;  			Match (Boolean);  			State = 172;  			Match (SEMI);  		}  		break;  	case 17:  		EnterOuterAlt (_localctx' 17);  		{  			State = 173;  			Match (AUTHORITATIVE);  			State = 174;  			Match (SEMI);  		}  		break;  	case 18:  		EnterOuterAlt (_localctx' 18);  		{  			State = 175;  			Match (NOT_AUTHORITATIVE);  			State = 176;  			Match (SEMI);  		}  		break;  	case 19:  		EnterOuterAlt (_localctx' 19);  		{  			State = 177;  			Match (PRIMARY);  			State = 178;  			Match (SEMI);  		}  		break;  	case 20:  		EnterOuterAlt (_localctx' 20);  		{  			State = 179;  			Match (SECONDARY);  			State = 180;  			Match (SEMI);  		}  		break;  	case 21:  		EnterOuterAlt (_localctx' 21);  		{  			State = 181;  			leaseParameter ();  			State = 182;  			Match (SEMI);  		}  		break;  	case 22:  		EnterOuterAlt (_localctx' 22);  		{  			State = 184;  			optionStatement ();  			State = 185;  			Match (SEMI);  		}  		break;  	case 23:  		EnterOuterAlt (_localctx' 23);  		{  			State = 187;  			peerStatement ();  			State = 188;  			Match (SEMI);  		}  		break;  	case 24:  		EnterOuterAlt (_localctx' 24);  		{  			State = 190;  			Match (SERVERDUIDSTRING);  		}  		break;  	case 25:  		EnterOuterAlt (_localctx' 25);  		{  			State = 191;  			Match (OPTION);  			State = 192;  			optionStatement ();  			State = 193;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 195;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 118;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 119;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 120;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 122;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 123;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 124;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 126;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 127;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 128;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 4);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 129;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 130;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 131;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 5);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 133;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 134;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 135;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 137;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 138;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 139;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 7);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 140;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 141;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 142;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 8);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 143;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 144;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 145;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 9);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 146;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 147;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 148;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 10);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 150;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 151;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 152;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 11);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 154;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 155;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 156;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 12);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 158;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 159;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 13);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 161;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 162;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 14);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 164;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 165;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 166;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 15);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 167;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 168;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 169;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 16);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 170;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 171;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 172;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 17);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 173;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 174;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 18);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 175;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 176;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 19);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 177;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 178;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 20);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 179;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 180;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 21);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 181;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 182;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 22);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 184;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 185;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 23);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 187;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 188;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 24);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 190;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 25);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 191;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 192;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following statement contains a magic number: State = 193;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterRule (_localctx' 6' RULE_declaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: try {  	State = 210;  	switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 197;  			hostDeclaration ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 198;  			groupDeclaration ();  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 199;  			sharedNetworkDeclaration ();  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 200;  			subnetDeclaration ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 201;  			Match (VENDOR_CLASS);  			State = 202;  			classDeclaration ();  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 203;  			Match (USER_CLASS);  			State = 204;  			classDeclaration ();  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 205;  			failoverDeclaration ();  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 206;  			failoverStateDeclaration ();  		}  		break;  	case 9:  		EnterOuterAlt (_localctx' 9);  		{  			State = 207;  			addressRangeDeclaration ();  		}  		break;  	case 10:  		EnterOuterAlt (_localctx' 10);  		{  			State = 208;  			leaseDeclaration ();  		}  		break;  	case 11:  		EnterOuterAlt (_localctx' 11);  		{  			State = 209;  			poolDeclaration ();  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 210;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 197;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 198;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 199;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 4);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 200;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 5);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 201;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 202;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 203;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 204;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 7);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 205;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 8);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 206;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 9);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 207;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 10);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 208;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 11);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following statement contains a magic number: State = 209;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: EnterRule (_localctx' 8' RULE_statement);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 214;  		switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  		case 1:  			{  				State = 212;  				parameter ();  			}  			break;  		case 2:  			{  				State = 213;  				declaration ();  			}  			break;  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 214;  		switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  		case 1:  			{  				State = 212;  				parameter ();  			}  			break;  		case 2:  			{  				State = 213;  				declaration ();  			}  			break;  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 214;  		switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  		case 1:  			{  				State = 212;  				parameter ();  			}  			break;  		case 2:  			{  				State = 213;  				declaration ();  			}  			break;  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 214;  		switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  		case 1:  			{  				State = 212;  				parameter ();  			}  			break;  		case 2:  			{  				State = 213;  				declaration ();  			}  			break;  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 214;  		switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  		case 1:  			{  				State = 212;  				parameter ();  			}  			break;  		case 2:  			{  				State = 213;  				declaration ();  			}  			break;  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: State = 214;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	{  		State = 212;  		parameter ();  	}  	break;  case 2:  	{  		State = 213;  		declaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	{  		State = 212;  		parameter ();  	}  	break;  case 2:  	{  		State = 213;  		declaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	{  		State = 212;  		parameter ();  	}  	break;  case 2:  	{  		State = 213;  		declaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	{  		State = 212;  		parameter ();  	}  	break;  case 2:  	{  		State = 213;  		declaration ();  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: State = 212;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following statement contains a magic number: State = 213;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: EnterRule (_localctx' 10' RULE_statements);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 219;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  			{  				{  					State = 216;  					statement ();  				}  			}  			State = 221;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: State = 219;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << HOST) | (1L << CLASS) | (1L << SHARED_NETWORK) | (1L << SUBNET) | (1L << GROUP) | (1L << FIXED_ADDRESS) | (1L << LEASE) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << POOL) | (1L << RANGE) | (1L << FAILOVER) | (1L << PEER) | (1L << ADDRESS) | (1L << PORT) | (1L << DEFAULT_LEASE_TIME) | (1L << MAX_LEASE_TIME) | (1L << DYNAMIC_BOOTP_LEASE_CUTOFF) | (1L << DYNAMIC_BOOTP_LEASE_LENGTH) | (1L << DDNS_UPDATE_STYLE) | (1L << BOOT_UNKNOWN_CLIENTS) | (1L << ONE_LEASE_PER_CLIENT) | (1L << USE_HOST_DECL_NAME) | (1L << NEXT_SERVER) | (1L << SERVER_IDENTIFIER) | (1L << FILENAME) | (1L << ALLOW) | (1L << DENY) | (1L << USE_LEASE_ADDR_FOR_DEFAULT_ROUTE) | (1L << AUTHORITATIVE) | (1L << NOT_AUTHORITATIVE) | (1L << PRIMARY) | (1L << SECONDARY) | (1L << OPTION) | (1L << VENDOR_CLASS) | (1L << USER_CLASS) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (Boolean - 64)) | (1L << (QUOTE - 64)) | (1L << (ColonSeparatedList - 64)) | (1L << (NUMBER - 64)) | (1L << (Ip4Address - 64)) | (1L << (UIDSTRING - 64)) | (1L << (SERVERDUIDSTRING - 64)) | (1L << (STRING - 64)))) != 0)) {  	{  		{  			State = 216;  			statement ();  		}  	}  	State = 221;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: State = 216;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statements,The following statement contains a magic number: State = 221;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: EnterRule (_localctx' 12' RULE_hostname);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: try {  	State = 227;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 222;  			Match (QUOTE);  			State = 223;  			Match (STRING);  			State = 224;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 225;  			Match (STRING);  		}  		break;  	case NUMBER:  		EnterOuterAlt (_localctx' 3);  		{  			State = 226;  			Match (NUMBER);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 227;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 222;  		Match (QUOTE);  		State = 223;  		Match (STRING);  		State = 224;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 225;  		Match (STRING);  	}  	break;  case NUMBER:  	EnterOuterAlt (_localctx' 3);  	{  		State = 226;  		Match (NUMBER);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 222;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 223;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 224;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 225;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostname,The following statement contains a magic number: State = 226;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: EnterRule (_localctx' 14' RULE_hostDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 229;  		Match (HOST);  		State = 230;  		hostname ();  		State = 231;  		Match (LBRACE);  		State = 232;  		statements ();  		State = 233;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 229;  		Match (HOST);  		State = 230;  		hostname ();  		State = 231;  		Match (LBRACE);  		State = 232;  		statements ();  		State = 233;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 229;  		Match (HOST);  		State = 230;  		hostname ();  		State = 231;  		Match (LBRACE);  		State = 232;  		statements ();  		State = 233;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 229;  		Match (HOST);  		State = 230;  		hostname ();  		State = 231;  		Match (LBRACE);  		State = 232;  		statements ();  		State = 233;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 229;  		Match (HOST);  		State = 230;  		hostname ();  		State = 231;  		Match (LBRACE);  		State = 232;  		statements ();  		State = 233;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: State = 229;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: State = 230;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: State = 231;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: State = 232;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostDeclaration,The following statement contains a magic number: State = 233;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: EnterRule (_localctx' 16' RULE_klass);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: try {  	State = 239;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 235;  			Match (QUOTE);  			State = 236;  			Match (STRING);  			State = 237;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 238;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: State = 239;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 235;  		Match (QUOTE);  		State = 236;  		Match (STRING);  		State = 237;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 238;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 235;  		Match (QUOTE);  		State = 236;  		Match (STRING);  		State = 237;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 238;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 235;  		Match (QUOTE);  		State = 236;  		Match (STRING);  		State = 237;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 238;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 235;  		Match (QUOTE);  		State = 236;  		Match (STRING);  		State = 237;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 238;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 235;  		Match (QUOTE);  		State = 236;  		Match (STRING);  		State = 237;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 238;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: State = 235;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: State = 236;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: State = 237;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,klass,The following statement contains a magic number: State = 238;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: EnterRule (_localctx' 18' RULE_classDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 241;  		Match (CLASS);  		State = 242;  		klass ();  		State = 243;  		Match (LBRACE);  		State = 244;  		statements ();  		State = 245;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 241;  		Match (CLASS);  		State = 242;  		klass ();  		State = 243;  		Match (LBRACE);  		State = 244;  		statements ();  		State = 245;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 241;  		Match (CLASS);  		State = 242;  		klass ();  		State = 243;  		Match (LBRACE);  		State = 244;  		statements ();  		State = 245;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 241;  		Match (CLASS);  		State = 242;  		klass ();  		State = 243;  		Match (LBRACE);  		State = 244;  		statements ();  		State = 245;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 241;  		Match (CLASS);  		State = 242;  		klass ();  		State = 243;  		Match (LBRACE);  		State = 244;  		statements ();  		State = 245;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: State = 241;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: State = 242;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: State = 243;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: State = 244;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,classDeclaration,The following statement contains a magic number: State = 245;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: EnterRule (_localctx' 20' RULE_sharedNetwork);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: try {  	State = 251;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 247;  			Match (QUOTE);  			State = 248;  			Match (STRING);  			State = 249;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 250;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: State = 251;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 247;  		Match (QUOTE);  		State = 248;  		Match (STRING);  		State = 249;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 250;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 247;  		Match (QUOTE);  		State = 248;  		Match (STRING);  		State = 249;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 250;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 247;  		Match (QUOTE);  		State = 248;  		Match (STRING);  		State = 249;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 250;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 247;  		Match (QUOTE);  		State = 248;  		Match (STRING);  		State = 249;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 250;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 247;  		Match (QUOTE);  		State = 248;  		Match (STRING);  		State = 249;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 250;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: State = 247;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: State = 248;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: State = 249;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetwork,The following statement contains a magic number: State = 250;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: EnterRule (_localctx' 22' RULE_sharedNetworkDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 253;  		Match (SHARED_NETWORK);  		State = 254;  		sharedNetwork ();  		State = 255;  		Match (LBRACE);  		State = 256;  		statements ();  		State = 257;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 253;  		Match (SHARED_NETWORK);  		State = 254;  		sharedNetwork ();  		State = 255;  		Match (LBRACE);  		State = 256;  		statements ();  		State = 257;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 253;  		Match (SHARED_NETWORK);  		State = 254;  		sharedNetwork ();  		State = 255;  		Match (LBRACE);  		State = 256;  		statements ();  		State = 257;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 253;  		Match (SHARED_NETWORK);  		State = 254;  		sharedNetwork ();  		State = 255;  		Match (LBRACE);  		State = 256;  		statements ();  		State = 257;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 253;  		Match (SHARED_NETWORK);  		State = 254;  		sharedNetwork ();  		State = 255;  		Match (LBRACE);  		State = 256;  		statements ();  		State = 257;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: State = 253;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: State = 254;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: State = 255;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: State = 256;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,sharedNetworkDeclaration,The following statement contains a magic number: State = 257;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet,The following statement contains a magic number: EnterRule (_localctx' 24' RULE_subnet);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 259;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet,The following statement contains a magic number: State = 259;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,netmask,The following statement contains a magic number: EnterRule (_localctx' 26' RULE_netmask);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,netmask,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 261;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,netmask,The following statement contains a magic number: State = 261;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: EnterRule (_localctx' 28' RULE_subnetDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 263;  		Match (SUBNET);  		State = 264;  		subnet ();  		State = 265;  		Match (NETMASK);  		State = 266;  		netmask ();  		State = 267;  		Match (LBRACE);  		State = 268;  		statements ();  		State = 269;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 263;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 264;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 265;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 266;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 267;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 268;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnetDeclaration,The following statement contains a magic number: State = 269;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: EnterRule (_localctx' 30' RULE_subnet6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: try {  	State = 275;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 271;  			Match (QUOTE);  			State = 272;  			Match (STRING);  			State = 273;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 274;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: State = 275;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 271;  		Match (QUOTE);  		State = 272;  		Match (STRING);  		State = 273;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 274;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 271;  		Match (QUOTE);  		State = 272;  		Match (STRING);  		State = 273;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 274;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 271;  		Match (QUOTE);  		State = 272;  		Match (STRING);  		State = 273;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 274;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 271;  		Match (QUOTE);  		State = 272;  		Match (STRING);  		State = 273;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 274;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 271;  		Match (QUOTE);  		State = 272;  		Match (STRING);  		State = 273;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 274;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: State = 271;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: State = 272;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: State = 273;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6,The following statement contains a magic number: State = 274;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: EnterRule (_localctx' 32' RULE_subnet6Declaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 277;  		Match (SUBNET6);  		State = 278;  		stringParameter ();  		State = 279;  		Match (LBRACE);  		State = 280;  		statements ();  		State = 281;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 277;  		Match (SUBNET6);  		State = 278;  		stringParameter ();  		State = 279;  		Match (LBRACE);  		State = 280;  		statements ();  		State = 281;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 277;  		Match (SUBNET6);  		State = 278;  		stringParameter ();  		State = 279;  		Match (LBRACE);  		State = 280;  		statements ();  		State = 281;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 277;  		Match (SUBNET6);  		State = 278;  		stringParameter ();  		State = 279;  		Match (LBRACE);  		State = 280;  		statements ();  		State = 281;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 277;  		Match (SUBNET6);  		State = 278;  		stringParameter ();  		State = 279;  		Match (LBRACE);  		State = 280;  		statements ();  		State = 281;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: State = 277;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: State = 278;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: State = 279;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: State = 280;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,subnet6Declaration,The following statement contains a magic number: State = 281;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: EnterRule (_localctx' 34' RULE_groupDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 283;  		Match (GROUP);  		State = 284;  		Match (LBRACE);  		State = 285;  		statements ();  		State = 286;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 283;  		Match (GROUP);  		State = 284;  		Match (LBRACE);  		State = 285;  		statements ();  		State = 286;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 283;  		Match (GROUP);  		State = 284;  		Match (LBRACE);  		State = 285;  		statements ();  		State = 286;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 283;  		Match (GROUP);  		State = 284;  		Match (LBRACE);  		State = 285;  		statements ();  		State = 286;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: State = 283;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: State = 284;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: State = 285;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,groupDeclaration,The following statement contains a magic number: State = 286;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddress,The following statement contains a magic number: EnterRule (_localctx' 36' RULE_fixedAddress);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddress,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 288;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddress,The following statement contains a magic number: State = 288;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddressParameter,The following statement contains a magic number: EnterRule (_localctx' 38' RULE_fixedAddressParameter);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddressParameter,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 290;  		Match (FIXED_ADDRESS);  		State = 291;  		fixedAddress ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddressParameter,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 290;  		Match (FIXED_ADDRESS);  		State = 291;  		fixedAddress ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddressParameter,The following statement contains a magic number: State = 290;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedAddressParameter,The following statement contains a magic number: State = 291;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: EnterRule (_localctx' 40' RULE_ipAddrOrHostnames);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 297;  		_errHandler.Sync (this);  		_la = _input.La (1);  		do {  			{  				State = 297;  				switch (_input.La (1)) {  				case QUOTE:  					{  						State = 293;  						Match (QUOTE);  						State = 294;  						Match (STRING);  						State = 295;  						Match (QUOTE);  					}  					break;  				case STRING:  					{  						State = 296;  						Match (STRING);  					}  					break;  				default:  					throw new NoViableAltException (this);  				}  			}  			State = 299;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		while (_la == QUOTE || _la == STRING);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 297;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: do {  	{  		State = 297;  		switch (_input.La (1)) {  		case QUOTE:  			{  				State = 293;  				Match (QUOTE);  				State = 294;  				Match (STRING);  				State = 295;  				Match (QUOTE);  			}  			break;  		case STRING:  			{  				State = 296;  				Match (STRING);  			}  			break;  		default:  			throw new NoViableAltException (this);  		}  	}  	State = 299;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  while (_la == QUOTE || _la == STRING);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 297;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	{  		State = 293;  		Match (QUOTE);  		State = 294;  		Match (STRING);  		State = 295;  		Match (QUOTE);  	}  	break;  case STRING:  	{  		State = 296;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	{  		State = 293;  		Match (QUOTE);  		State = 294;  		Match (STRING);  		State = 295;  		Match (QUOTE);  	}  	break;  case STRING:  	{  		State = 296;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	{  		State = 293;  		Match (QUOTE);  		State = 294;  		Match (STRING);  		State = 295;  		Match (QUOTE);  	}  	break;  case STRING:  	{  		State = 296;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	{  		State = 293;  		Match (QUOTE);  		State = 294;  		Match (STRING);  		State = 295;  		Match (QUOTE);  	}  	break;  case STRING:  	{  		State = 296;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 293;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 294;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 295;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 296;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddrOrHostnames,The following statement contains a magic number: State = 299;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: EnterRule (_localctx' 42' RULE_lease);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: try {  	State = 305;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 301;  			Match (QUOTE);  			State = 302;  			Match (STRING);  			State = 303;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 304;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: State = 305;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 301;  		Match (QUOTE);  		State = 302;  		Match (STRING);  		State = 303;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 304;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 301;  		Match (QUOTE);  		State = 302;  		Match (STRING);  		State = 303;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 304;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 301;  		Match (QUOTE);  		State = 302;  		Match (STRING);  		State = 303;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 304;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 301;  		Match (QUOTE);  		State = 302;  		Match (STRING);  		State = 303;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 304;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 301;  		Match (QUOTE);  		State = 302;  		Match (STRING);  		State = 303;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 304;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: State = 301;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: State = 302;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: State = 303;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,lease,The following statement contains a magic number: State = 304;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseAddress,The following statement contains a magic number: EnterRule (_localctx' 44' RULE_leaseAddress);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseAddress,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 307;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseAddress,The following statement contains a magic number: State = 307;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: EnterRule (_localctx' 46' RULE_leaseDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 309;  		Match (LEASE);  		State = 310;  		leaseAddress ();  		State = 311;  		Match (LBRACE);  		State = 312;  		leaseParameters ();  		State = 313;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 309;  		Match (LEASE);  		State = 310;  		leaseAddress ();  		State = 311;  		Match (LBRACE);  		State = 312;  		leaseParameters ();  		State = 313;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 309;  		Match (LEASE);  		State = 310;  		leaseAddress ();  		State = 311;  		Match (LBRACE);  		State = 312;  		leaseParameters ();  		State = 313;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 309;  		Match (LEASE);  		State = 310;  		leaseAddress ();  		State = 311;  		Match (LBRACE);  		State = 312;  		leaseParameters ();  		State = 313;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 309;  		Match (LEASE);  		State = 310;  		leaseAddress ();  		State = 311;  		Match (LBRACE);  		State = 312;  		leaseParameters ();  		State = 313;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: State = 309;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: State = 310;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: State = 311;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: State = 312;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseDeclaration,The following statement contains a magic number: State = 313;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: EnterRule (_localctx' 48' RULE_leaseParameters);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 318;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  			{  				{  					State = 315;  					leaseParameter ();  				}  			}  			State = 320;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: State = 318;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STARTS) | (1L << ENDS) | (1L << HARDWARE) | (1L << CLIENT_HOSTNAME) | (1L << DYNAMIC_BOOTP) | (1L << TSTP) | (1L << TSFP) | (1L << ATSFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BINDING - 64)) | (1L << (NEXT - 64)) | (1L << (CLTT - 64)) | (1L << (UIDSTRING - 64)))) != 0)) {  	{  		{  			State = 315;  			leaseParameter ();  		}  	}  	State = 320;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: State = 315;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameters,The following statement contains a magic number: State = 320;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: EnterRule (_localctx' 50' RULE_ip6net);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: try {  	State = 325;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 321;  			Match (QUOTE);  			State = 322;  			Match (STRING);  			State = 323;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 324;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: State = 325;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 321;  		Match (QUOTE);  		State = 322;  		Match (STRING);  		State = 323;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 324;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 321;  		Match (QUOTE);  		State = 322;  		Match (STRING);  		State = 323;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 324;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 321;  		Match (QUOTE);  		State = 322;  		Match (STRING);  		State = 323;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 324;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 321;  		Match (QUOTE);  		State = 322;  		Match (STRING);  		State = 323;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 324;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 321;  		Match (QUOTE);  		State = 322;  		Match (STRING);  		State = 323;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 324;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: State = 321;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: State = 322;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: State = 323;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6net,The following statement contains a magic number: State = 324;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip4Address,The following statement contains a magic number: EnterRule (_localctx' 52' RULE_ip4Address);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip4Address,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 327;  		Match (Ip4Address);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip4Address,The following statement contains a magic number: State = 327;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: EnterRule (_localctx' 54' RULE_hostnameOrIpAddress);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: try {  	State = 331;  	switch (_input.La (1)) {  	case QUOTE:  	case NUMBER:  	case STRING:  		EnterOuterAlt (_localctx' 1);  		{  			State = 329;  			hostname ();  		}  		break;  	case Ip4Address:  		EnterOuterAlt (_localctx' 2);  		{  			State = 330;  			ip4Address ();  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: try {  	State = 331;  	switch (_input.La (1)) {  	case QUOTE:  	case NUMBER:  	case STRING:  		EnterOuterAlt (_localctx' 1);  		{  			State = 329;  			hostname ();  		}  		break;  	case Ip4Address:  		EnterOuterAlt (_localctx' 2);  		{  			State = 330;  			ip4Address ();  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: try {  	State = 331;  	switch (_input.La (1)) {  	case QUOTE:  	case NUMBER:  	case STRING:  		EnterOuterAlt (_localctx' 1);  		{  			State = 329;  			hostname ();  		}  		break;  	case Ip4Address:  		EnterOuterAlt (_localctx' 2);  		{  			State = 330;  			ip4Address ();  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: try {  	State = 331;  	switch (_input.La (1)) {  	case QUOTE:  	case NUMBER:  	case STRING:  		EnterOuterAlt (_localctx' 1);  		{  			State = 329;  			hostname ();  		}  		break;  	case Ip4Address:  		EnterOuterAlt (_localctx' 2);  		{  			State = 330;  			ip4Address ();  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: State = 331;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  case NUMBER:  case STRING:  	EnterOuterAlt (_localctx' 1);  	{  		State = 329;  		hostname ();  	}  	break;  case Ip4Address:  	EnterOuterAlt (_localctx' 2);  	{  		State = 330;  		ip4Address ();  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  case NUMBER:  case STRING:  	EnterOuterAlt (_localctx' 1);  	{  		State = 329;  		hostname ();  	}  	break;  case Ip4Address:  	EnterOuterAlt (_localctx' 2);  	{  		State = 330;  		ip4Address ();  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  case NUMBER:  case STRING:  	EnterOuterAlt (_localctx' 1);  	{  		State = 329;  		hostname ();  	}  	break;  case Ip4Address:  	EnterOuterAlt (_localctx' 2);  	{  		State = 330;  		ip4Address ();  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: State = 329;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hostnameOrIpAddress,The following statement contains a magic number: State = 330;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: EnterRule (_localctx' 56' RULE_timestamp);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 333;  		_la = _input.La (1);  		if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 334;  		Match (NUMBER);  		State = 335;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: State = 333;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (TSTP - 61)) | (1L << (TSFP - 61)) | (1L << (ATSFP - 61)) | (1L << (CLTT - 61)))) != 0))) {  	_errHandler.RecoverInline (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: State = 334;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,timestamp,The following statement contains a magic number: State = 335;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: EnterRule (_localctx' 58' RULE_startEnd);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 337;  		_la = _input.La (1);  		if (!(_la == STARTS || _la == ENDS)) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 338;  		Match (NUMBER);  		State = 339;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 337;  		_la = _input.La (1);  		if (!(_la == STARTS || _la == ENDS)) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 338;  		Match (NUMBER);  		State = 339;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 337;  		_la = _input.La (1);  		if (!(_la == STARTS || _la == ENDS)) {  			_errHandler.RecoverInline (this);  		}  		Consume ();  		State = 338;  		Match (NUMBER);  		State = 339;  		Match (Date);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: State = 337;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: State = 338;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,startEnd,The following statement contains a magic number: State = 339;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterRule (_localctx' 60' RULE_leaseParameter);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: try {  	State = 371;  	switch (_input.La (1)) {  	case STARTS:  	case ENDS:  		EnterOuterAlt (_localctx' 1);  		{  			State = 341;  			startEnd ();  			State = 342;  			Match (SEMI);  		}  		break;  	case TSTP:  	case TSFP:  	case ATSFP:  	case CLTT:  		EnterOuterAlt (_localctx' 2);  		{  			State = 344;  			timestamp ();  			State = 345;  			Match (SEMI);  		}  		break;  	case HARDWARE:  		EnterOuterAlt (_localctx' 3);  		{  			State = 347;  			hardwareParameter ();  			State = 348;  			Match (SEMI);  		}  		break;  	case UIDSTRING:  		EnterOuterAlt (_localctx' 4);  		{  			State = 350;  			Match (UIDSTRING);  		}  		break;  	case CLIENT_HOSTNAME:  		EnterOuterAlt (_localctx' 5);  		{  			State = 351;  			Match (CLIENT_HOSTNAME);  			State = 352;  			stringParameter ();  			State = 353;  			Match (SEMI);  		}  		break;  	case BINDING:  		EnterOuterAlt (_localctx' 6);  		{  			State = 355;  			Match (BINDING);  			State = 356;  			Match (STATE);  			State = 357;  			state ();  			State = 358;  			Match (SEMI);  		}  		break;  	case NEXT:  		EnterOuterAlt (_localctx' 7);  		{  			State = 360;  			Match (NEXT);  			State = 361;  			Match (BINDING);  			State = 362;  			Match (STATE);  			State = 363;  			state ();  			State = 364;  			Match (SEMI);  		}  		break;  	case CLASS:  		EnterOuterAlt (_localctx' 8);  		{  			State = 366;  			Match (CLASS);  			State = 367;  			Match (STRING);  			State = 368;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 9);  		{  			State = 369;  			Match (DYNAMIC_BOOTP);  			State = 370;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 371;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: switch (_input.La (1)) {  case STARTS:  case ENDS:  	EnterOuterAlt (_localctx' 1);  	{  		State = 341;  		startEnd ();  		State = 342;  		Match (SEMI);  	}  	break;  case TSTP:  case TSFP:  case ATSFP:  case CLTT:  	EnterOuterAlt (_localctx' 2);  	{  		State = 344;  		timestamp ();  		State = 345;  		Match (SEMI);  	}  	break;  case HARDWARE:  	EnterOuterAlt (_localctx' 3);  	{  		State = 347;  		hardwareParameter ();  		State = 348;  		Match (SEMI);  	}  	break;  case UIDSTRING:  	EnterOuterAlt (_localctx' 4);  	{  		State = 350;  		Match (UIDSTRING);  	}  	break;  case CLIENT_HOSTNAME:  	EnterOuterAlt (_localctx' 5);  	{  		State = 351;  		Match (CLIENT_HOSTNAME);  		State = 352;  		stringParameter ();  		State = 353;  		Match (SEMI);  	}  	break;  case BINDING:  	EnterOuterAlt (_localctx' 6);  	{  		State = 355;  		Match (BINDING);  		State = 356;  		Match (STATE);  		State = 357;  		state ();  		State = 358;  		Match (SEMI);  	}  	break;  case NEXT:  	EnterOuterAlt (_localctx' 7);  	{  		State = 360;  		Match (NEXT);  		State = 361;  		Match (BINDING);  		State = 362;  		Match (STATE);  		State = 363;  		state ();  		State = 364;  		Match (SEMI);  	}  	break;  case CLASS:  	EnterOuterAlt (_localctx' 8);  	{  		State = 366;  		Match (CLASS);  		State = 367;  		Match (STRING);  		State = 368;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 9);  	{  		State = 369;  		Match (DYNAMIC_BOOTP);  		State = 370;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 341;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 342;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 344;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 345;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 347;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 348;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 4);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 350;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 5);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 351;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 352;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 353;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 355;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 356;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 357;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 358;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 7);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 360;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 361;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 362;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 363;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 364;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 8);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 366;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 367;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 368;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: EnterOuterAlt (_localctx' 9);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 369;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseParameter,The following statement contains a magic number: State = 370;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: EnterRule (_localctx' 62' RULE_poolDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 373;  		Match (POOL);  		State = 374;  		Match (LBRACE);  		State = 375;  		statements ();  		State = 376;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 373;  		Match (POOL);  		State = 374;  		Match (LBRACE);  		State = 375;  		statements ();  		State = 376;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 373;  		Match (POOL);  		State = 374;  		Match (LBRACE);  		State = 375;  		statements ();  		State = 376;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 373;  		Match (POOL);  		State = 374;  		Match (LBRACE);  		State = 375;  		statements ();  		State = 376;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: State = 373;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: State = 374;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: State = 375;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,poolDeclaration,The following statement contains a magic number: State = 376;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow,The following statement contains a magic number: EnterRule (_localctx' 64' RULE_rangeLow);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 378;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow,The following statement contains a magic number: State = 378;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh,The following statement contains a magic number: EnterRule (_localctx' 66' RULE_rangeHigh);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 380;  		ip4Address ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh,The following statement contains a magic number: State = 380;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: EnterRule (_localctx' 68' RULE_addressRangeDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: try {  	State = 392;  	switch (_input.La (1)) {  	case RANGE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 382;  			Match (RANGE);  			State = 383;  			rangeLow ();  			State = 384;  			rangeHigh ();  			State = 385;  			Match (SEMI);  		}  		break;  	case DYNAMIC_BOOTP:  		EnterOuterAlt (_localctx' 2);  		{  			State = 387;  			Match (DYNAMIC_BOOTP);  			State = 388;  			stringParameter ();  			State = 389;  			stringParameter ();  			State = 390;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 392;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: switch (_input.La (1)) {  case RANGE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 382;  		Match (RANGE);  		State = 383;  		rangeLow ();  		State = 384;  		rangeHigh ();  		State = 385;  		Match (SEMI);  	}  	break;  case DYNAMIC_BOOTP:  	EnterOuterAlt (_localctx' 2);  	{  		State = 387;  		Match (DYNAMIC_BOOTP);  		State = 388;  		stringParameter ();  		State = 389;  		stringParameter ();  		State = 390;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 382;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 383;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 384;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 385;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 387;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 388;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 389;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRangeDeclaration,The following statement contains a magic number: State = 390;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: EnterRule (_localctx' 70' RULE_rangeLow6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: try {  	State = 398;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 394;  			Match (QUOTE);  			State = 395;  			Match (STRING);  			State = 396;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 397;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: State = 398;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 394;  		Match (QUOTE);  		State = 395;  		Match (STRING);  		State = 396;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 397;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 394;  		Match (QUOTE);  		State = 395;  		Match (STRING);  		State = 396;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 397;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 394;  		Match (QUOTE);  		State = 395;  		Match (STRING);  		State = 396;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 397;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 394;  		Match (QUOTE);  		State = 395;  		Match (STRING);  		State = 396;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 397;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 394;  		Match (QUOTE);  		State = 395;  		Match (STRING);  		State = 396;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 397;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: State = 394;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: State = 395;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: State = 396;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeLow6,The following statement contains a magic number: State = 397;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: EnterRule (_localctx' 72' RULE_rangeHigh6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: try {  	State = 404;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 400;  			Match (QUOTE);  			State = 401;  			Match (STRING);  			State = 402;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 403;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: State = 404;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 400;  		Match (QUOTE);  		State = 401;  		Match (STRING);  		State = 402;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 403;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 400;  		Match (QUOTE);  		State = 401;  		Match (STRING);  		State = 402;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 403;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 400;  		Match (QUOTE);  		State = 401;  		Match (STRING);  		State = 402;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 403;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 400;  		Match (QUOTE);  		State = 401;  		Match (STRING);  		State = 402;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 403;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 400;  		Match (QUOTE);  		State = 401;  		Match (STRING);  		State = 402;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 403;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: State = 400;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: State = 401;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: State = 402;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,rangeHigh6,The following statement contains a magic number: State = 403;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: EnterRule (_localctx' 74' RULE_addressRange6Declaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: try {  	State = 423;  	switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 406;  			rangeLow6 ();  			State = 407;  			rangeHigh6 ();  			State = 408;  			Match (SEMI);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 410;  			stringParameter ();  			State = 411;  			Match (SLASH);  			State = 412;  			Match (NUMBER);  			State = 413;  			Match (SEMI);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 415;  			stringParameter ();  			State = 416;  			Match (LBRACKET);  			State = 417;  			Match (SLASH);  			State = 418;  			Match (NUMBER);  			State = 419;  			Match (RBRACKET);  			State = 420;  			Match (TEMPORARY);  			State = 421;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 423;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 406;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 407;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 408;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 410;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 411;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 412;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 413;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 415;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 416;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 417;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 418;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 419;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 420;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following statement contains a magic number: State = 421;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: EnterRule (_localctx' 76' RULE_ip6Address);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: try {  	State = 429;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 425;  			Match (QUOTE);  			State = 426;  			Match (STRING);  			State = 427;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 428;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: State = 429;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 425;  		Match (QUOTE);  		State = 426;  		Match (STRING);  		State = 427;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 428;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 425;  		Match (QUOTE);  		State = 426;  		Match (STRING);  		State = 427;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 428;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 425;  		Match (QUOTE);  		State = 426;  		Match (STRING);  		State = 427;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 428;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 425;  		Match (QUOTE);  		State = 426;  		Match (STRING);  		State = 427;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 428;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 425;  		Match (QUOTE);  		State = 426;  		Match (STRING);  		State = 427;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 428;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: State = 425;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: State = 426;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: State = 427;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Address,The following statement contains a magic number: State = 428;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: EnterRule (_localctx' 78' RULE_fixedPrefix6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 431;  		ip6Address ();  		State = 432;  		Match (SLASH);  		State = 433;  		Match (NUMBER);  		State = 434;  		Match (SEMI);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 431;  		ip6Address ();  		State = 432;  		Match (SLASH);  		State = 433;  		Match (NUMBER);  		State = 434;  		Match (SEMI);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 431;  		ip6Address ();  		State = 432;  		Match (SLASH);  		State = 433;  		Match (NUMBER);  		State = 434;  		Match (SEMI);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 431;  		ip6Address ();  		State = 432;  		Match (SLASH);  		State = 433;  		Match (NUMBER);  		State = 434;  		Match (SEMI);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: State = 431;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: State = 432;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: State = 433;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,fixedPrefix6,The following statement contains a magic number: State = 434;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: EnterRule (_localctx' 80' RULE_failoverDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: try {  	State = 448;  	switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 436;  			Match (FAILOVER);  			State = 437;  			Match (PEER);  			State = 438;  			hostnameOrIpAddress ();  			State = 439;  			Match (LBRACE);  			State = 440;  			statements ();  			State = 441;  			Match (RBRACE);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 443;  			Match (FAILOVER);  			State = 444;  			Match (PEER);  			State = 445;  			hostnameOrIpAddress ();  			State = 446;  			Match (SEMI);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 448;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 436;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 437;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 438;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 439;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 440;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 441;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 443;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 444;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 445;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following statement contains a magic number: State = 446;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: EnterRule (_localctx' 82' RULE_failoverStateDeclaration);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 450;  		Match (FAILOVER);  		State = 451;  		Match (PEER);  		State = 452;  		hostnameOrIpAddress ();  		State = 453;  		Match (STATE);  		State = 454;  		Match (LBRACE);  		State = 458;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == MY || _la == PARTNER) {  			{  				{  					State = 455;  					failoverStateStatement ();  				}  			}  			State = 460;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 461;  		Match (RBRACE);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 450;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 451;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 452;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 453;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 454;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 458;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: while (_la == MY || _la == PARTNER) {  	{  		{  			State = 455;  			failoverStateStatement ();  		}  	}  	State = 460;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: while (_la == MY || _la == PARTNER) {  	{  		{  			State = 455;  			failoverStateStatement ();  		}  	}  	State = 460;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 455;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 460;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateDeclaration,The following statement contains a magic number: State = 461;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: EnterRule (_localctx' 84' RULE_state);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: try {  	State = 467;  	switch (_input.La (1)) {  	case QUOTE:  		EnterOuterAlt (_localctx' 1);  		{  			State = 463;  			Match (QUOTE);  			State = 464;  			Match (STRING);  			State = 465;  			Match (QUOTE);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 466;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: State = 467;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 463;  		Match (QUOTE);  		State = 464;  		Match (STRING);  		State = 465;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 466;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 463;  		Match (QUOTE);  		State = 464;  		Match (STRING);  		State = 465;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 466;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 463;  		Match (QUOTE);  		State = 464;  		Match (STRING);  		State = 465;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 466;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 463;  		Match (QUOTE);  		State = 464;  		Match (STRING);  		State = 465;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 466;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: switch (_input.La (1)) {  case QUOTE:  	EnterOuterAlt (_localctx' 1);  	{  		State = 463;  		Match (QUOTE);  		State = 464;  		Match (STRING);  		State = 465;  		Match (QUOTE);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 466;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: State = 463;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: State = 464;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: State = 465;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,state,The following statement contains a magic number: State = 466;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: EnterRule (_localctx' 86' RULE_date);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: try {  	State = 472;  	switch (_input.La (1)) {  	case Date:  		EnterOuterAlt (_localctx' 1);  		{  			State = 469;  			Match (Date);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 470;  			Match (STRING);  			State = 471;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: try {  	State = 472;  	switch (_input.La (1)) {  	case Date:  		EnterOuterAlt (_localctx' 1);  		{  			State = 469;  			Match (Date);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 470;  			Match (STRING);  			State = 471;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: try {  	State = 472;  	switch (_input.La (1)) {  	case Date:  		EnterOuterAlt (_localctx' 1);  		{  			State = 469;  			Match (Date);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 470;  			Match (STRING);  			State = 471;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: try {  	State = 472;  	switch (_input.La (1)) {  	case Date:  		EnterOuterAlt (_localctx' 1);  		{  			State = 469;  			Match (Date);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 470;  			Match (STRING);  			State = 471;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: try {  	State = 472;  	switch (_input.La (1)) {  	case Date:  		EnterOuterAlt (_localctx' 1);  		{  			State = 469;  			Match (Date);  		}  		break;  	case STRING:  		EnterOuterAlt (_localctx' 2);  		{  			State = 470;  			Match (STRING);  			State = 471;  			Match (STRING);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: State = 472;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: switch (_input.La (1)) {  case Date:  	EnterOuterAlt (_localctx' 1);  	{  		State = 469;  		Match (Date);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 470;  		Match (STRING);  		State = 471;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: switch (_input.La (1)) {  case Date:  	EnterOuterAlt (_localctx' 1);  	{  		State = 469;  		Match (Date);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 470;  		Match (STRING);  		State = 471;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: switch (_input.La (1)) {  case Date:  	EnterOuterAlt (_localctx' 1);  	{  		State = 469;  		Match (Date);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 470;  		Match (STRING);  		State = 471;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: switch (_input.La (1)) {  case Date:  	EnterOuterAlt (_localctx' 1);  	{  		State = 469;  		Match (Date);  	}  	break;  case STRING:  	EnterOuterAlt (_localctx' 2);  	{  		State = 470;  		Match (STRING);  		State = 471;  		Match (STRING);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: State = 469;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: State = 470;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,date,The following statement contains a magic number: State = 471;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: EnterRule (_localctx' 88' RULE_failoverStateStatement);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: try {  	State = 490;  	switch (_input.La (1)) {  	case MY:  		EnterOuterAlt (_localctx' 1);  		{  			State = 474;  			Match (MY);  			State = 475;  			Match (STATE);  			State = 476;  			state ();  			State = 477;  			Match (AT);  			State = 478;  			Match (NUMBER);  			State = 479;  			date ();  			State = 480;  			Match (SEMI);  		}  		break;  	case PARTNER:  		EnterOuterAlt (_localctx' 2);  		{  			State = 482;  			Match (PARTNER);  			State = 483;  			Match (STATE);  			State = 484;  			state ();  			State = 485;  			Match (AT);  			State = 486;  			Match (NUMBER);  			State = 487;  			date ();  			State = 488;  			Match (SEMI);  		}  		break;  	default:  		throw new NoViableAltException (this);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 490;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: switch (_input.La (1)) {  case MY:  	EnterOuterAlt (_localctx' 1);  	{  		State = 474;  		Match (MY);  		State = 475;  		Match (STATE);  		State = 476;  		state ();  		State = 477;  		Match (AT);  		State = 478;  		Match (NUMBER);  		State = 479;  		date ();  		State = 480;  		Match (SEMI);  	}  	break;  case PARTNER:  	EnterOuterAlt (_localctx' 2);  	{  		State = 482;  		Match (PARTNER);  		State = 483;  		Match (STATE);  		State = 484;  		state ();  		State = 485;  		Match (AT);  		State = 486;  		Match (NUMBER);  		State = 487;  		date ();  		State = 488;  		Match (SEMI);  	}  	break;  default:  	throw new NoViableAltException (this);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 474;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 475;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 476;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 477;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 478;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 479;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 480;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 482;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 483;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 484;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 485;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 486;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 487;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverStateStatement,The following statement contains a magic number: State = 488;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: EnterRule (_localctx' 90' RULE_peerStatement);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: try {  	State = 498;  	switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 492;  			Match (PEER);  			State = 493;  			Match (ADDRESS);  			State = 494;  			hostnameOrIpAddress ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 495;  			Match (PEER);  			State = 496;  			Match (PORT);  			State = 497;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 498;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 492;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 493;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 494;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 495;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 496;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following statement contains a magic number: State = 497;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseTime,The following statement contains a magic number: EnterRule (_localctx' 92' RULE_leaseTime);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseTime,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 500;  		Match (NUMBER);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,leaseTime,The following statement contains a magic number: State = 500;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: EnterRule (_localctx' 94' RULE_ipAddressWithSubnet);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: try {  	State = 507;  	switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 502;  			stringParameter ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 503;  			stringParameter ();  			State = 504;  			Match (SLASH);  			State = 505;  			Match (NUMBER);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: State = 507;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: State = 502;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: State = 503;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: State = 504;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following statement contains a magic number: State = 505;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: EnterRule (_localctx' 96' RULE_ip6Prefix);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 509;  		stringParameter ();  		State = 510;  		Match (SLASH);  		State = 511;  		Match (NUMBER);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 509;  		stringParameter ();  		State = 510;  		Match (SLASH);  		State = 511;  		Match (NUMBER);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 509;  		stringParameter ();  		State = 510;  		Match (SLASH);  		State = 511;  		Match (NUMBER);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: State = 509;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: State = 510;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ip6Prefix,The following statement contains a magic number: State = 511;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: EnterRule (_localctx' 98' RULE_hardwareParameter);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 513;  		Match (HARDWARE);  		State = 514;  		Match (HARDWARE_TYPES);  		State = 515;  		Match (ColonSeparatedList);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 513;  		Match (HARDWARE);  		State = 514;  		Match (HARDWARE_TYPES);  		State = 515;  		Match (ColonSeparatedList);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 513;  		Match (HARDWARE);  		State = 514;  		Match (HARDWARE_TYPES);  		State = 515;  		Match (ColonSeparatedList);  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: State = 513;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: State = 514;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,hardwareParameter,The following statement contains a magic number: State = 515;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: EnterRule (_localctx' 100' RULE_optionParam);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: try {  	int _alt;  	EnterOuterAlt (_localctx' 1);  	{  		State = 520;  		_errHandler.Sync (this);  		_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		while (_alt != 2 && _alt != -1) {  			if (_alt == 1) {  				{  					{  						State = 517;  						stringParameter ();  					}  				}  			}  			State = 522;  			_errHandler.Sync (this);  			_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  		}  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: State = 520;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: _alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: while (_alt != 2 && _alt != -1) {  	if (_alt == 1) {  		{  			{  				State = 517;  				stringParameter ();  			}  		}  	}  	State = 522;  	_errHandler.Sync (this);  	_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: while (_alt != 2 && _alt != -1) {  	if (_alt == 1) {  		{  			{  				State = 517;  				stringParameter ();  			}  		}  	}  	State = 522;  	_errHandler.Sync (this);  	_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: while (_alt != 2 && _alt != -1) {  	if (_alt == 1) {  		{  			{  				State = 517;  				stringParameter ();  			}  		}  	}  	State = 522;  	_errHandler.Sync (this);  	_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: while (_alt != 2 && _alt != -1) {  	if (_alt == 1) {  		{  			{  				State = 517;  				stringParameter ();  			}  		}  	}  	State = 522;  	_errHandler.Sync (this);  	_alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: if (_alt == 1) {  	{  		{  			State = 517;  			stringParameter ();  		}  	}  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: State = 517;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: State = 522;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionParam,The following statement contains a magic number: _alt = Interpreter.AdaptivePredict (_input' 29' _ctx);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterRule (_localctx' 102' RULE_optionStatement);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: try {  	State = 540;  	switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 523;  			optionParam ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 524;  			optionParam ();  			State = 525;  			Match (NUMBER);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 527;  			optionParam ();  			State = 528;  			Match (Boolean);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 530;  			optionParam ();  			State = 531;  			hostnameOrIpAddress ();  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 533;  			optionParam ();  			State = 534;  			Match (ColonSeparatedList);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 536;  			Match (PORT);  			State = 537;  			Match (NUMBER);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 538;  			Match (ADDRESS);  			State = 539;  			Match (Ip4Address);  		}  		break;  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 540;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 523;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 524;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 525;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 527;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 528;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 4);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 530;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 531;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 5);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 533;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 534;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 6);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 536;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 537;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: EnterOuterAlt (_localctx' 7);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 538;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following statement contains a magic number: State = 539;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionOptionStatement,The following statement contains a magic number: EnterRule (_localctx' 104' RULE_optionOptionStatement);  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionOptionStatement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 542;  		Match (OPTION);  		State = 543;  		optionStatement ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionOptionStatement,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 542;  		Match (OPTION);  		State = 543;  		optionStatement ();  	}  }  catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  }  finally {  	ExitRule ();  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionOptionStatement,The following statement contains a magic number: State = 542;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionOptionStatement,The following statement contains a magic number: State = 543;  
Magic Number,DhcpdToMicrosoft.Parser,DHCPLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPLexer.cs,Action,The following statement contains a magic number: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Magic Number,DhcpdToMicrosoft.Parser,DHCPLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPLexer.cs,Action,The following statement contains a magic number: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetBroadcastAddress,The following statement contains a magic number: for (int i = 0; i < broadcastAddress.Length; i++) {  	broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetBroadcastAddress,The following statement contains a magic number: broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetLastAddress,The following statement contains a magic number: for (int i = 0; i < (broadcastAddress.Length - 1); i++) {  	broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetLastAddress,The following statement contains a magic number: broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetLastAddress,The following statement contains a magic number: broadcastAddress [broadcastAddress.Length - 1] = (byte)(ipAdressBytes [broadcastAddress.Length - 1] | (subnetMaskBytes [broadcastAddress.Length - 1] ^ 254));  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: ip [3]++;  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: if (ip [3] == 0) {  	ip [2]++;  	if (ip [2] == 0) {  		ip [1]++;  		if (ip [1] == 0)  			ip [0]++;  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: if (ip [3] == 0) {  	ip [2]++;  	if (ip [2] == 0) {  		ip [1]++;  		if (ip [1] == 0)  			ip [0]++;  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: if (ip [3] == 0) {  	ip [2]++;  	if (ip [2] == 0) {  		ip [1]++;  		if (ip [1] == 0)  			ip [0]++;  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: ip [2]++;  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,GetFirstUsuableAddress,The following statement contains a magic number: if (ip [2] == 0) {  	ip [1]++;  	if (ip [1] == 0)  		ip [0]++;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: foreach (byte b in ipBytes) {  	if (ipUint == 0) {  		ipUint = (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  		shift -= 8;  		continue;  	}  	if (shift >= 8)  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  	else  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint));  	shift -= 8;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: foreach (byte b in ipBytes) {  	if (ipUint == 0) {  		ipUint = (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  		shift -= 8;  		continue;  	}  	if (shift >= 8)  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  	else  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint));  	shift -= 8;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: foreach (byte b in ipBytes) {  	if (ipUint == 0) {  		ipUint = (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  		shift -= 8;  		continue;  	}  	if (shift >= 8)  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  	else  		ipUint += (uint)bConvert.ConvertTo (b' typeof(uint));  	shift -= 8;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: if (ipUint == 0) {  	ipUint = (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  	shift -= 8;  	continue;  }  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: shift -= 8;  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: if (shift >= 8)  	ipUint += (uint)bConvert.ConvertTo (b' typeof(uint)) << shift;  else  	ipUint += (uint)bConvert.ConvertTo (b' typeof(uint));  
Magic Number,DhcpdToMicrosoft.Utility,IPAddressExtensions,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\IPAddressExtensions.cs,ToUint,The following statement contains a magic number: shift -= 8;  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (netPartLength < 2)  	throw new ArgumentException ("Number of hosts is to large for IPv4");  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i * 8 + 8 <= netPartLength)  		binaryMask [i] = (byte)255;  	else if (i * 8 > netPartLength)  		binaryMask [i] = (byte)0;  	else {  		int oneLength = netPartLength - i * 8;  		string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  		binaryMask [i] = Convert.ToByte (binaryDigit' 2);  	}  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 + 8 <= netPartLength)  	binaryMask [i] = (byte)255;  else if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: binaryMask [i] = (byte)255;  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: if (i * 8 > netPartLength)  	binaryMask [i] = (byte)0;  else {  	int oneLength = netPartLength - i * 8;  	string binaryDigit = String.Empty.PadLeft (oneLength' '1').PadRight (8' '0');  	binaryMask [i] = Convert.ToByte (binaryDigit' 2);  }  
Magic Number,DhcpdToMicrosoft.Utility,SubnetMask,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Utility\SubnetMask.cs,CreateByHostBitLength,The following statement contains a magic number: binaryMask [i] = Convert.ToByte (binaryDigit' 2);  
Missing Default,DhcpdToMicrosoft.Compiler,DhcpdToMicrosoftCompiler,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Compiler\DhcpdToMicrosoftCompiler.cs,VisitOptionStatement,The following switch statement is missing a default case: switch (sc.STRING ().GetText ()) {  case "routers":  	string router = opt.hostnameOrIpAddress ().ip4Address ().Ip4Address ().GetText ();  	HashSet<string> values = new HashSet<string> ();  	values.Add (router);  	if (!ContextOptions.Get (topLevelParent).ContainsKey ("3")) {  		ContextOptions.Get (topLevelParent).Add ("3"' values);  	}  	break;  case "domain-name":  	IEnumerable<string> stringsA = opt.optionParam ().stringParameter ().Select (x => x.STRING ().GetText ());  	HashSet<string> exclusionStrings = new HashSet<string> ();  	exclusionStrings.Add ("'");  	exclusionStrings.Add ("domain-name");  	IEnumerable<string> selectedStrings = stringsA.Except (exclusionStrings);  	if (!ContextOptions.Get (topLevelParent).ContainsKey ("15")) {  		ContextOptions.Get (topLevelParent).Add ("15"' selectedStrings);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigLexer.cs,Action,The following switch statement is missing a default case: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigLexer.cs,WS_action,The following switch statement is missing a default case: switch (actionIndex) {  case 0:  	Skip ();  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigLexer.cs,COMMENT_action,The following switch statement is missing a default case: switch (actionIndex) {  case 1:  	Skip ();  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,parameter,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 118;  		Match (DEFAULT_LEASE_TIME);  		State = 119;  		leaseTime ();  		State = 120;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 122;  		Match (MAX_LEASE_TIME);  		State = 123;  		leaseTime ();  		State = 124;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 126;  		Match (DYNAMIC_BOOTP_LEASE_CUTOFF);  		State = 127;  		Match (Date);  		State = 128;  		Match (SEMI);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 129;  		Match (DYNAMIC_BOOTP_LEASE_LENGTH);  		State = 130;  		leaseTime ();  		State = 131;  		Match (SEMI);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 133;  		Match (DDNS_UPDATE_STYLE);  		State = 134;  		stringParameter ();  		State = 135;  		Match (SEMI);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 137;  		Match (BOOT_UNKNOWN_CLIENTS);  		State = 138;  		Match (Boolean);  		State = 139;  		Match (SEMI);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 140;  		Match (ONE_LEASE_PER_CLIENT);  		State = 141;  		Match (Boolean);  		State = 142;  		Match (SEMI);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 143;  		Match (USE_HOST_DECL_NAME);  		State = 144;  		Match (Boolean);  		State = 145;  		Match (SEMI);  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 146;  		Match (NEXT_SERVER);  		State = 147;  		stringParameter ();  		State = 148;  		Match (SEMI);  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 150;  		Match (SERVER_IDENTIFIER);  		State = 151;  		stringParameter ();  		State = 152;  		Match (SEMI);  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 154;  		Match (FILENAME);  		State = 155;  		stringParameter ();  		State = 156;  		Match (SEMI);  	}  	break;  case 12:  	EnterOuterAlt (_localctx' 12);  	{  		State = 158;  		hardwareParameter ();  		State = 159;  		Match (SEMI);  	}  	break;  case 13:  	EnterOuterAlt (_localctx' 13);  	{  		State = 161;  		fixedAddressParameter ();  		State = 162;  		Match (SEMI);  	}  	break;  case 14:  	EnterOuterAlt (_localctx' 14);  	{  		State = 164;  		Match (ALLOW);  		State = 165;  		Match (AllowDenyKeyword);  		State = 166;  		Match (SEMI);  	}  	break;  case 15:  	EnterOuterAlt (_localctx' 15);  	{  		State = 167;  		Match (DENY);  		State = 168;  		Match (AllowDenyKeyword);  		State = 169;  		Match (SEMI);  	}  	break;  case 16:  	EnterOuterAlt (_localctx' 16);  	{  		State = 170;  		Match (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);  		State = 171;  		Match (Boolean);  		State = 172;  		Match (SEMI);  	}  	break;  case 17:  	EnterOuterAlt (_localctx' 17);  	{  		State = 173;  		Match (AUTHORITATIVE);  		State = 174;  		Match (SEMI);  	}  	break;  case 18:  	EnterOuterAlt (_localctx' 18);  	{  		State = 175;  		Match (NOT_AUTHORITATIVE);  		State = 176;  		Match (SEMI);  	}  	break;  case 19:  	EnterOuterAlt (_localctx' 19);  	{  		State = 177;  		Match (PRIMARY);  		State = 178;  		Match (SEMI);  	}  	break;  case 20:  	EnterOuterAlt (_localctx' 20);  	{  		State = 179;  		Match (SECONDARY);  		State = 180;  		Match (SEMI);  	}  	break;  case 21:  	EnterOuterAlt (_localctx' 21);  	{  		State = 181;  		leaseParameter ();  		State = 182;  		Match (SEMI);  	}  	break;  case 22:  	EnterOuterAlt (_localctx' 22);  	{  		State = 184;  		optionStatement ();  		State = 185;  		Match (SEMI);  	}  	break;  case 23:  	EnterOuterAlt (_localctx' 23);  	{  		State = 187;  		peerStatement ();  		State = 188;  		Match (SEMI);  	}  	break;  case 24:  	EnterOuterAlt (_localctx' 24);  	{  		State = 190;  		Match (SERVERDUIDSTRING);  	}  	break;  case 25:  	EnterOuterAlt (_localctx' 25);  	{  		State = 191;  		Match (OPTION);  		State = 192;  		optionStatement ();  		State = 193;  		Match (SEMI);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,declaration,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 3' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 197;  		hostDeclaration ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 198;  		groupDeclaration ();  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 199;  		sharedNetworkDeclaration ();  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 200;  		subnetDeclaration ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 201;  		Match (VENDOR_CLASS);  		State = 202;  		classDeclaration ();  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 203;  		Match (USER_CLASS);  		State = 204;  		classDeclaration ();  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 205;  		failoverDeclaration ();  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 206;  		failoverStateDeclaration ();  	}  	break;  case 9:  	EnterOuterAlt (_localctx' 9);  	{  		State = 207;  		addressRangeDeclaration ();  	}  	break;  case 10:  	EnterOuterAlt (_localctx' 10);  	{  		State = 208;  		leaseDeclaration ();  	}  	break;  case 11:  	EnterOuterAlt (_localctx' 11);  	{  		State = 209;  		poolDeclaration ();  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,statement,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	{  		State = 212;  		parameter ();  	}  	break;  case 2:  	{  		State = 213;  		declaration ();  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,addressRange6Declaration,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 20' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 406;  		rangeLow6 ();  		State = 407;  		rangeHigh6 ();  		State = 408;  		Match (SEMI);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 410;  		stringParameter ();  		State = 411;  		Match (SLASH);  		State = 412;  		Match (NUMBER);  		State = 413;  		Match (SEMI);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 415;  		stringParameter ();  		State = 416;  		Match (LBRACKET);  		State = 417;  		Match (SLASH);  		State = 418;  		Match (NUMBER);  		State = 419;  		Match (RBRACKET);  		State = 420;  		Match (TEMPORARY);  		State = 421;  		Match (SEMI);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,failoverDeclaration,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 22' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 436;  		Match (FAILOVER);  		State = 437;  		Match (PEER);  		State = 438;  		hostnameOrIpAddress ();  		State = 439;  		Match (LBRACE);  		State = 440;  		statements ();  		State = 441;  		Match (RBRACE);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 443;  		Match (FAILOVER);  		State = 444;  		Match (PEER);  		State = 445;  		hostnameOrIpAddress ();  		State = 446;  		Match (SEMI);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,peerStatement,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 27' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 492;  		Match (PEER);  		State = 493;  		Match (ADDRESS);  		State = 494;  		hostnameOrIpAddress ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 495;  		Match (PEER);  		State = 496;  		Match (PORT);  		State = 497;  		Match (NUMBER);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,ipAddressWithSubnet,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 28' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 502;  		stringParameter ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 503;  		stringParameter ();  		State = 504;  		Match (SLASH);  		State = 505;  		Match (NUMBER);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPDConfigParser,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPDConfigParser.cs,optionStatement,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 30' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 523;  		optionParam ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 524;  		optionParam ();  		State = 525;  		Match (NUMBER);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 527;  		optionParam ();  		State = 528;  		Match (Boolean);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 530;  		optionParam ();  		State = 531;  		hostnameOrIpAddress ();  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 533;  		optionParam ();  		State = 534;  		Match (ColonSeparatedList);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 536;  		Match (PORT);  		State = 537;  		Match (NUMBER);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 538;  		Match (ADDRESS);  		State = 539;  		Match (Ip4Address);  	}  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPLexer.cs,Action,The following switch statement is missing a default case: switch (ruleIndex) {  case 79:  	WS_action (_localctx' actionIndex);  	break;  case 80:  	COMMENT_action (_localctx' actionIndex);  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPLexer.cs,WS_action,The following switch statement is missing a default case: switch (actionIndex) {  case 0:  	Skip ();  	break;  }  
Missing Default,DhcpdToMicrosoft.Parser,DHCPLexer,C:\repos\randomvariable_DHCPD-To-MicrosoftDHCP-Migrator\DHCPD-To-MicrosoftDHCP-Migrator\Parser\DHCPLexer.cs,COMMENT_action,The following switch statement is missing a default case: switch (actionIndex) {  case 1:  	Skip ();  	break;  }  
