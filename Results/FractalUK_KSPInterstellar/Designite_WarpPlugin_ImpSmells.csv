Implementation smell,Namespace,Class,File,Method,Description
Long Method,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The method has 168 lines of code.
Long Method,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The method has 127 lines of code.
Long Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The method has 100 lines of code.
Long Method,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The method has 136 lines of code.
Long Method,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The method has 109 lines of code.
Long Method,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The method has 144 lines of code.
Long Method,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The method has 128 lines of code.
Long Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The method has 117 lines of code.
Complex Method,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,Cyclomatic complexity of the method is 11
Complex Method,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,Cyclomatic complexity of the method is 17
Complex Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnStart,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,setupPropellants,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,Cyclomatic complexity of the method is 14
Complex Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,getIntakeAvailable,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,getFuelRateThermalJetsForVessel,Cyclomatic complexity of the method is 14
Complex Method,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,Cyclomatic complexity of the method is 11
Complex Method,FNPlugin,InterstellarResourcesConfiguration,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarResourcesConfiguration.cs,InterstellarResourcesConfiguration,Cyclomatic complexity of the method is 10
Complex Method,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,Cyclomatic complexity of the method is 12
Complex Method,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,Cyclomatic complexity of the method is 11
Complex Method,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnStart,Cyclomatic complexity of the method is 17
Complex Method,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnUpdate,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,Cyclomatic complexity of the method is 11
Complex Method,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,Cyclomatic complexity of the method is 26
Complex Method,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,Cyclomatic complexity of the method is 10
Complex Method,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,Cyclomatic complexity of the method is 15
Complex Method,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Start,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,Cyclomatic complexity of the method is 25
Complex Method,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnStart,Cyclomatic complexity of the method is 9
Complex Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,setupPropellants,Cyclomatic complexity of the method is 10
Complex Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,Cyclomatic complexity of the method is 16
Complex Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,getIntakeAvailable,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,getFuelRateThermalJetsForVessel,Cyclomatic complexity of the method is 14
Complex Method,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnStart,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnUpdate,Cyclomatic complexity of the method is 8
Complex Method,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,Cyclomatic complexity of the method is 13
Complex Method,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnStart,Cyclomatic complexity of the method is 10
Complex Method,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,Cyclomatic complexity of the method is 10
Complex Method,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,Cyclomatic complexity of the method is 21
Complex Method,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,Cyclomatic complexity of the method is 9
Long Parameter List,FNPlugin,ModableExperimentResultDialogPage,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModableExperimentResultDialogPage.cs,ModableExperimentResultDialogPage,The method has 12 parameters. Parameters: host' experimentData' xmitDataScalar' labDataBoost' showTransmitWarning' transmitWarningMessage' showResetOption' showLabOption' onDiscardData' onKeepData' onTransmitData' onSendToLab
Long Parameter List,FNPlugin,ModableExperimentResultDialogPage,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModableExperimentResultDialogPage.cs,setUpScienceData,The method has 7 parameters. Parameters: experiment_title' experiment_results' transmitValue' recoveryValue' data_size' xmitScalar' refValue
Long Identifier,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,,The length of the parameter _hydrogen_peroxide_production_rate is 34.
Long Identifier,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,,The length of the parameter _hydrogen_peroxide_consumption_rate is 35.
Long Identifier,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateFrame,The length of the parameter remaining_capacity_to_reprocess is 31.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter aluminiumElectrolysisEnergyPerTon is 33.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter aluminiumElectrolysisMassRatio is 30.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter baseUraniumAmmonolysisConsumption is 33.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter MAX_ANTIMATTER_TANK_STORED_CHARGE is 33.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter thorium_resource_burnrate_ratio is 31.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter thorium_actinides_ratio_factor is 30.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter thorium_temperature_ratio_factor is 32.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter atmospheric_non_precooled_limit is 31.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter initial_alcubierre_megajoules_required is 38.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter baseAnthraquiononePowerConsumption is 34.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter basePechineyUgineKuhlmannPowerConsumption is 41.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter pechineyUgineKuhlmannMassRatio is 30.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter pechineyUgineKuhlmannMassRatio2 is 31.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter pechineyUgineKuhlmannEnergyPerTon is 33.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter antimatter_initiated_antimatter_cons_constant is 45.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter antimatter_initiated_uf4_cons_constant is 38.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter antimatter_initiated_d_he3_cons_constant is 40.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter antimatter_initiated_upgraded_d_he3_cons_constant is 49.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter antimatter_initiated_upgraded_uf4_cons_constant is 47.
Long Identifier,FNPlugin,GameConstants,C:\repos\FractalUK_KSPInterstellar\FNPlugin\GameConstants.cs,,The length of the parameter baseHaberProcessPowerConsumption is 32.
Long Identifier,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,,The length of the parameter is_thermal_dissip_disabled_init is 31.
Long Identifier,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,,The length of the parameter installed_tech_tree_version_id is 30.
Long Identifier,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the parameter total_electrical_power_provided is 31.
Long Identifier,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,,The length of the parameter antimatterProductionEfficiency is 30.
Long Identifier,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,,The length of the parameter _uranium_tetraflouride_density is 30.
Long Identifier,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,,The length of the parameter _uranium_tetraflouride_consumption_rate is 39.
Long Identifier,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,,The length of the parameter _uranium_nitride_production_rate is 32.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the parameter resting_radiator_temp_at_100pcntStr is 35.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the parameter resting_radiator_temp_at_30pcntStr is 34.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,,The length of the parameter resting_radiator_temp_at_100pcnt is 32.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,,The length of the parameter resting_radiator_temp_at_30pcnt is 31.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,,The length of the parameter generator_efficiency_at_100pcnt is 31.
Long Identifier,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,,The length of the parameter generator_efficiency_at_30pcnt is 30.
Long Identifier,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the parameter electrical_power_currently_needed is 33.
Long Identifier,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the parameter thermal_power_currently_needed is 30.
Long Identifier,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the parameter charged_power_currently_needed is 30.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,ActivateWarpDrive,The length of the statement  "                ScreenMessages.PostScreenMessage("Cannot activate warp drive within the atmosphere!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 125.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,ActivateWarpDrive,The length of the statement  "            List<PartResource> resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.ExoticMatter).ToList(); " is 125.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,ActivateWarpDrive,The length of the statement  "            part.RequestResource(InterstellarResourcesConfiguration.Instance.ExoticMatter' megajoules_required * warp_factors[selected_factor]); " is 132.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,ActivateWarpDrive,The length of the statement  "            vessel.orbit.UpdateFromStateVectors(position' vessel.orbit.vel + heading' vessel.orbit.referenceBody' Planetarium.GetUniversalTime()); " is 134.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,DeactivateWarpDrive,The length of the statement  "				ScreenMessages.PostScreenMessage("Cannot deactivate warp drive within the atmosphere!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 127.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,DeactivateWarpDrive,The length of the statement  "            vessel.orbit.UpdateFromStateVectors(vessel.orbit.pos' vessel.orbit.vel + heading' vessel.orbit.referenceBody' Planetarium.GetUniversalTime()); " is 142.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The length of the statement  "			Actions["ActivateWarpDriveAction"].guiName = Events["ActivateWarpDrive"].guiName = String.Format("Activate Warp Drive"); " is 120.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The length of the statement  "            Actions["DeactivateWarpDriveAction"].guiName = Events["DeactivateWarpDrive"].guiName = String.Format("Deactivate Warp Drive"); " is 126.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnUpdate,The length of the statement  "				Events ["RetrofitDrive"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade; " is 126.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The length of the statement  "            List<PartResource> partresources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.ExoticMatter).ToList(); " is 129.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The length of the statement  "				float power_returned = consumeFNResource (Math.Min (maxPowerDrawForExoticMatter * TimeWarp.fixedDeltaTime' available_power * TimeWarp.fixedDeltaTime)' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 192.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The length of the statement  "                List<PartResource> resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.ExoticMatter).ToList(); " is 125.
Long Statement,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The length of the statement  "                    float electrical_current_pct = (float) (100.0f * exotic_matter_available / (megajoules_required * warp_factors[selected_factor])); " is 130.
Long Statement,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateFrame,The length of the statement  "            _alumina_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Alumina' _current_rate * TimeWarp.fixedDeltaTime / _alumina_density) / TimeWarp.fixedDeltaTime * _alumina_density; " is 216.
Long Statement,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateFrame,The length of the statement  "            _aluminium_production_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -_alumina_consumption_rate * TimeWarp.fixedDeltaTime / _aluminium_density) * _aluminium_density / TimeWarp.fixedDeltaTime; " is 236.
Long Statement,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateFrame,The length of the statement  "            _oxygen_production_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * _alumina_consumption_rate * TimeWarp.fixedDeltaTime / _oxygen_density) * _oxygen_density / TimeWarp.fixedDeltaTime; " is 271.
Long Statement,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,AntimatterCollector,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterCollector.cs,OnStart,The length of the statement  "                double flux = 0.5 * (vessel.mainBody.GetBeltAntiparticles(vessel_avg_alt' vessel_inclination) + vessel.mainBody.GetBeltAntiparticles(vessel_avg_alt' 0.0)); " is 155.
Long Statement,FNPlugin,AntimatterFactory,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterFactory.cs,produceAntimatterFrame,The length of the statement  "            double antimatter_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Antimatter).density; " is 135.
Long Statement,FNPlugin,AntimatterFactory,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterFactory.cs,produceAntimatterFrame,The length of the statement  "            double antimatter_mass = energy_provided / GameConstants.warpspeed / GameConstants.warpspeed / 200000.0f / antimatter_density*efficiency; " is 137.
Long Statement,FNPlugin,AntimatterFactory,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterFactory.cs,produceAntimatterFrame,The length of the statement  "            current_rate = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Antimatter' -antimatter_mass * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 179.
Long Statement,FNPlugin,AtmosphericIntake,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AtmosphericIntake.cs,OnStart,The length of the statement  "            _intake_atm = part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere) ? part.Resources[InterstellarResourcesConfiguration.Instance.IntakeAtmosphere] : null; " is 186.
Long Statement,FNPlugin,AtmosphericIntake,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AtmosphericIntake.cs,FixedUpdate,The length of the statement  "                double resourcedensity = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere).density; " is 138.
Long Statement,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateFrame,The length of the statement  "            _water_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Water' _current_rate * TimeWarp.fixedDeltaTime / _water_density) / TimeWarp.fixedDeltaTime * _water_density; " is 208.
Long Statement,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateFrame,The length of the statement  "            _hydrogen_peroxide_production_rate = -_part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -_water_consumption_rate * TimeWarp.fixedDeltaTime / _hydrogen_peroxide_density) * _hydrogen_peroxide_density / TimeWarp.fixedDeltaTime; " is 258.
Long Statement,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The length of the statement  "            GUILayout.Label((_water_consumption_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150)); " is 125.
Long Statement,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The length of the statement  "            GUILayout.Label((_hydrogen_peroxide_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150)); " is 136.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,OnStart,The length of the statement  "            List<IChargedParticleSource> source_list = part.attachNodes.Where(atn => atn.attachedPart != null).SelectMany(atn => atn.attachedPart.FindModulesImplementing<IChargedParticleSource>()).ToList(); " is 194.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The length of the statement  "            if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational) " is 125.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The length of the statement  "                double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor; " is 126.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The length of the statement  "                double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime; " is 196.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The length of the statement  "                double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime; " is 169.
Long Statement,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The length of the statement  "                    engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001); " is 208.
Long Statement,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The length of the statement  "            _ammonia_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * _current_rate * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / _ammonia_density) * _ammonia_density / TimeWarp.fixedDeltaTime; " is 275.
Long Statement,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The length of the statement  "            _hydrogen_peroxide_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * _current_rate * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / _hydrogen_peroxide_density) * _hydrogen_peroxide_density / TimeWarp.fixedDeltaTime; " is 308.
Long Statement,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The length of the statement  "                _hydrazine_production_rate = -_part.ImprovedRequestResource("MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / _hydrazine_density * GameConstants.pechineyUgineKuhlmannMassRatio2) * _hydrazine_density / TimeWarp.fixedDeltaTime; " is 248.
Long Statement,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The length of the statement  "                _water_production_rate = -_part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / _water_density * (1.0 - GameConstants.pechineyUgineKuhlmannMassRatio2)) * _water_density / TimeWarp.fixedDeltaTime; " is 277.
Long Statement,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The length of the statement  "            double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3)); " is 151.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The length of the statement  "            double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3)); " is 151.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The length of the statement  "            double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3)); " is 157.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The length of the statement  "            double Bmag = VanAllen.B0 / relrt * relmp * Math.Pow((rp / altituded)' 3) * Math.Sqrt(1 + 3 * Math.Pow(Math.Cos(mlat)' 2)) * body.specialMagneticFieldScaling(); " is 160.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldRadial,The length of the statement  "            double Bmag = -2 / relrt * relmp * VanAllen.B0 * Math.Pow((rp / altituded)' 3) * Math.Cos(mlat) * body.specialMagneticFieldScaling(); " is 133.
Long Statement,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,getBeltMagneticFieldAzimuthal,The length of the statement  "            double Bmag = -relmp * VanAllen.B0 / relrt * Math.Pow((rp / altituded)' 3) * Math.Sin(mlat) * body.specialMagneticFieldScaling(); " is 129.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,EditorSwapFuel,The length of the statement  "            foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) part.Resources[fuel.FuelName].amount = part.Resources[fuel.FuelName].maxAmount; " is 140.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,Refuel,The length of the statement  "                if (!part.Resources.Contains(fuel.FuelName) || !part.Resources.Contains(InterstellarResourcesConfiguration.Instance.Actinides)) return; // avoid exceptions' just in case " is 169.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,OnFixedUpdate,The length of the statement  "                if (part.Resources[InterstellarResourcesConfiguration.Instance.Actinides].amount >= part.Resources[InterstellarResourcesConfiguration.Instance.Actinides].maxAmount) " is 164.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,OnFixedUpdate,The length of the statement  "                    part.Resources[InterstellarResourcesConfiguration.Instance.Actinides].amount = part.Resources[InterstellarResourcesConfiguration.Instance.Actinides].maxAmount; " is 159.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,ReprocessFuel,The length of the statement  "                depleted_fuels_change = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.DepletedFuel' -depleted_fuels_change); " is 144.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,ReprocessFuel,The length of the statement  "                    double new_fuel_amount = Math.Min(fuel_resource.amount + depleted_fuels_change * 4.0*fraction' fuel_resource.maxAmount); " is 120.
Long Statement,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,consumeReactorFuel,The length of the statement  "                if (part.Resources.Contains(fuel.FuelName) && part.Resources.Contains(InterstellarResourcesConfiguration.Instance.Actinides)) " is 125.
Long Statement,FNPlugin,InterstellarFissionPBDP,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionPBDP.cs,consumeReactorFuel,The length of the statement  "                if (part.Resources.Contains(fuel.FuelName) && part.Resources.Contains(InterstellarResourcesConfiguration.Instance.DepletedFuel)) " is 128.
Long Statement,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnUpdate,The length of the statement  "            if (getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert) { " is 239.
Long Statement,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnUpdate,The length of the statement  "                ScreenMessages.PostScreenMessage("Warning: Fusion Reactor plasma heating cannot be guaranteed' reducing power requirements is recommended."' 10.0f' ScreenMessageStyle.UPPER_CENTER); " is 181.
Long Statement,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnFixedUpdate,The length of the statement  "                power_consumed = consumeFNResource(LaserPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 152.
Long Statement,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnFixedUpdate,The length of the statement  "                if (power_consumed < LaserPowerRequirements)  power_consumed += part.RequestResource("ElectricCharge"' (LaserPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000; " is 212.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,setupPropellants,The length of the statement  "                List<PartResource> totalpartresources = list_of_propellants.SelectMany(prop => part.GetConnectedResources(prop.name)).ToList(); " is 127.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,setupPropellants,The length of the statement  "                if (!list_of_propellants.All(prop => totalpartresources.Select(pr => pr.resourceName).Contains(prop.name)) && _rep < _propellants.Count) " is 136.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,OnUpdate,The length of the statement  "                Events["RetrofitEngine"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && _hasrequiredupgrade; " is 127.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                ElectricEngineControllerFX.getAllPropellants().ForEach(prop => part.Effect(prop.ParticleFXName' 0)); // set all FX to zero " is 122.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                    int engine_count = Math.Max(vessel.FindPartModulesImplementing<ElectricEngineControllerFX>().Count(ee => ee.IsOperational)'1); // max of operational electric engines and 1 " is 171.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                    double power_per_engine = Math.Min(0.5 * _attached_engine.currentThrottle * thrust_per_engine * _current_propellant.IspMultiplier * baseISP / 1000.0 * 9.81' maxPower * _current_propellant.Efficiency); " is 200.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                    double power_received = consumeFNResource(power_per_engine * TimeWarp.fixedDeltaTime / _current_propellant.Efficiency' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 186.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                    double heat_production = supplyFNResource(heat_to_produce * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime; " is 151.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                    double actual_max_thrust = _current_propellant.Efficiency * 2000.0f * power_received / (_current_propellant.IspMultiplier * baseISP * 9.81f * _attached_engine.currentThrottle); " is 176.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                        float fx_ratio = Mathf.Min(_electrical_consumption_f / maxPower' _attached_engine.finalThrust / _attached_engine.maxThrust); " is 124.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The length of the statement  "                        List<PartResource> vacuum_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.VacuumPlasma).ToList(); " is 132.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,GetInfo,The length of the statement  "                return_str = return_str + "---" + prop.PropellantGUIName + "---\nThrust: " + thrustProp.ToString("0.0000") + " kN per MW\nEfficiency: " + (prop.Efficiency * 100.0).ToString("0.00") + "%\nISP: " + ispProp.ToString("0.00") + "s\n"; " is 229.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,getResourceManagerDisplayName,The length of the statement  "            return engineTypeStr + " Thruster" + (_current_propellant != null ? "(" + _current_propellant.PropellantGUIName + ")" : ""); " is 124.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,evaluateMaxThrust,The length of the statement  "                double final_thrust_store = _current_propellant.Efficiency * 2000.0 * total_power_output / (baseISP * _current_propellant.IspMultiplier * 9.81f); " is 145.
Long Statement,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,getPropellants,The length of the statement  "                propellant_list = propellantlist.Select(prop => new ElectricEnginePropellant(prop)).Where(eep => (eep.SupportedEngines & type) == type).ToList(); " is 145.
Long Statement,FNPlugin,ElectricRCSController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricRCSController.cs,FixedUpdate,The length of the statement  "                double power_received = consumeFNResource(power_required * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 151.
Long Statement,FNPlugin,FlightUIStarter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FlightUIStarter.cs,Start,The length of the statement  "                button_position = new Rect(Screen.width - guibuttontexture.width' Screen.height - guibuttontexture.height - 150' guibuttontexture.width' guibuttontexture.height); " is 162.
Long Statement,FNPlugin,FlightUIStarter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FlightUIStarter.cs,OnGUI,The length of the statement  "                if (FNResourceOvermanager.getResourceOvermanagerForResource(resourcename).hasManagerForVessel(vessel) && !hide_button) { " is 120.
Long Statement,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The length of the statement  "                        net_science += (1.0 - Vector3d.Dot(surface_vector' net_vector.normalized)) * 50 * PluginHelper.getImpactorScienceMultiplier(body); " is 130.
Long Statement,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The length of the statement  "            net_science = Math.Min(net_science' initial_science * 3.5); // no more than 3.5x boost to science by using multiple detectors " is 125.
Long Statement,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The length of the statement  "                ScreenMessages.PostScreenMessage("Impact Recorded' science report can now be accessed from one of your accelerometers deployed on this body."' 5f' ScreenMessageStyle.UPPER_CENTER); " is 180.
Long Statement,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The length of the statement  "                    foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) { " is 141.
Long Statement,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The length of the statement  "                    foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) { " is 157.
Long Statement,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,OnFixedUpdate,The length of the statement  "                double charge = consumeFNResource(powerReqKW / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0; " is 131.
Long Statement,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,OnFixedUpdate,The length of the statement  "                    cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - boilOffRate * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount); " is 135.
Long Statement,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,OnFixedUpdate,The length of the statement  "                    cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - (boilOffRate + boilOffAddition) * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount*boilOffMultiplier); " is 173.
Long Statement,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,GetInfo,The length of the statement  "            return "Power Requirements: " + powerReqKW.ToString("0.0") + " KW\n Powered Boil Off Fraction: " + boilOffRate * 86400 + " /day\n Unpowered Boil Off Fraction: " + (boilOffRate + boilOffAddition)* boilOffMultiplier * 86400 + " /day"; " is 232.
Long Statement,FNPlugin,FNModulePreecooler,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModulePreecooler.cs,OnStart,The length of the statement  "                    List<ModuleResourceIntake> mres = attach_node.attachedPart.FindModulesImplementing<ModuleResourceIntake>().Where(mre => mre.resourceName == "IntakeAir").ToList(); " is 162.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnUpdate,The length of the statement  "				Events ["RetrofitEngine"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade; " is 127.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,setupPropellants,The length of the statement  "				if (partresources.Count == 0 || !PartResourceLibrary.Instance.resourceDefinitions.Contains(list_of_propellants[0].name)) { " is 122.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "                    int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count(); " is 123.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "                    float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1); " is 159.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "                        ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime; " is 198.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01); " is 166.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "                //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle); " is 136.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The length of the statement  "                    fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity; " is 137.
Long Statement,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,GetInfo,The length of the statement  "				return_str = return_str + "--" + guiname + "--\n" + "ISP: " + ispMultiplier.ToString ("0.00") + " x 17 x Sqrt(Core Temperature)" + "\n"; " is 136.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The length of the statement  "                    powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW"; " is 129.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The length of the statement  "                    powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW"; " is 136.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The length of the statement  "                    powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW"; " is 128.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The length of the statement  "                    powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW"; " is 127.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 125.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 161.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption); " is 126.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density; " is 129.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density; " is 133.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density; " is 127.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime; " is 124.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina; " is 217.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density; " is 176.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density; " is 215.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) { " is 202.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 161.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption); " is 126.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime; " is 135.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density; " is 124.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density; " is 122.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density; " is 125.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2); " is 149.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                            double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o); " is 141.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                            methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime; " is 187.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density; " is 124.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density; " is 122.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density; " is 123.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 161.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption); " is 126.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o; " is 205.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h); " is 151.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o); " is 148.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density; " is 123.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density; " is 135.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 172.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption); " is 137.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o; " is 199.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime; " is 207.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density; " is 135.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density; " is 123.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density; " is 129.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 179.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption); " is 144.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime; " is 120.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime; " is 272.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime; " is 266.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime; " is 187.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o); " is 172.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                            ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 145.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density; " is 129.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density; " is 138.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density; " is 131.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 171.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption); " is 136.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime); " is 158.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime); " is 149.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un; " is 206.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                            ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 150.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                    if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) { " is 195.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density; " is 129.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density; " is 132.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 170.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption); " is 135.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime; " is 166.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                        double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime; " is 261.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                            ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime; " is 220.
Long Statement,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The length of the statement  "                                ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 126.
Long Statement,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,ActivateProbe,The length of the statement  "                PopupDialog.SpawnPopupDialog("Seismic Probe"' "Surface will be monitored for impact events."' "OK"' false' HighLogic.Skin); " is 123.
Long Statement,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The length of the statement  "            //ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.SrfLanded' vessel.mainBody' "surface"); " is 143.
Long Statement,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The length of the statement  "                            ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.SrfLanded' vessel.mainBody' vessel.mainBody.name + "'s surface."); " is 168.
Long Statement,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The length of the statement  "                            result_string =  vessel_name + " impacted into " + vessel.mainBody.name + " producing seismic activity.  From this data' information on the structure of " + vessel.mainBody.name + "'s crust can be determined."; " is 210.
Long Statement,FNPlugin,FNThermalHeatExchanger,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNThermalHeatExchanger.cs,OnStart,The length of the statement  "			Actions["ActivateHeatExchangerAction"].guiName = Events["ActivateHeatExchanger"].guiName = String.Format("Activate Heat Exchanger"); " is 132.
Long Statement,FNPlugin,FNThermalHeatExchanger,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNThermalHeatExchanger.cs,OnStart,The length of the statement  "			Actions["DeactivateHeatExchangerAction"].guiName = Events["DeactivateHeatExchanger"].guiName = String.Format("Deactivate Heat Exchanger"); " is 138.
Long Statement,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,FixedUpdate,The length of the statement  "                double power_ratio = consumeFNResource(_current_activity.PowerRequirements*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime/_current_activity.PowerRequirements; " is 201.
Long Statement,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,generateScienceData,The length of the statement  "                ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.InSpaceHigh' vessel.mainBody' ""); " is 136.
Long Statement,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnUpdate,The length of the statement  "            double current_au = Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position) / Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position); " is 298.
Long Statement,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,calculateTimeToHeliumDepletion,The length of the statement  "            List<PartResource> helium_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Helium).ToList(); " is 126.
Long Statement,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateFrame,The length of the statement  "            double remaining_capacity_to_reprocess = GameConstants.baseReprocessingRate * TimeWarp.fixedDeltaTime / 86400.0 * rate_multiplier; " is 130.
Long Statement,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnStart,The length of the statement  "            String[] resources_to_supply = { FNResourceManager.FNRESOURCE_THERMALPOWER' FNResourceManager.FNRESOURCE_WASTEHEAT' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES }; " is 165.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnUpdate,The length of the statement  "            Events["RetrofitReactor"].active = ResearchAndDevelopment.Instance != null ? !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade : false; " is 177.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnUpdate,The length of the statement  "                        statusStr = current_fuel_mode.ReactorFuels.FirstOrDefault(fuel => getFuelAvailability(fuel) <= 0).FuelName + " Deprived"; " is 121.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                    if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 197.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0); " is 167.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES); " is 161.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER); " is 149.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel " is 144.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated " is 120.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                    PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium); " is 133.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                    PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium); " is 133.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                    double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate); " is 120.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                    tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime); " is 184.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER); " is 132.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The length of the statement  "                supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated " is 122.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The length of the statement  "            List<ReactorFuelMode> basic_fuelmodes = fuelmodes.Select(node => new ReactorFuelMode(node)).Where(fm => (fm.SupportedReactorTypes & reactorType) == reactorType).ToList(); " is 170.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The length of the statement  "            List<ReactorFuelMode> advanced_fuelmodes = fuelmodes.Select(node => new ReactorFuelMode(node)).Where(fm => (fm.SupportedReactorTypes & (upgradedReactorType > 0 ? upgradedReactorType : reactorType)) == (upgradedReactorType > 0 ? upgradedReactorType : reactorType)).ToList(); " is 273.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The length of the statement  "                    sb.AppendLine(fuel.FuelName + " " + fuel.FuelUsePerMJ * PowerOutput * fm.NormalisedReactionRate * 86400.0 / fuelEfficiency + fuel.Unit + "/day"); " is 145.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The length of the statement  "                        sb.AppendLine(fuel.FuelName + " " + fuel.FuelUsePerMJ * upgradedPowerOutput * fm.NormalisedReactionRate * 86400.0/upgradedFuelEfficiency + fuel.Unit + "/day"); " is 159.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "            foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' time_diff * ongoing_consumption_rate * fuel.FuelUsePerMJ); // consume fuel " is 160.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                PartResourceDefinition lithium_definition = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium); " is 140.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                PartResourceDefinition tritium_definition = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium); " is 140.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                List<PartResource> lithium_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Lithium).ToList(); " is 128.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                List<PartResource> tritium_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Tritium).ToList(); " is 128.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                double tritium_to_add = Math.Min(tritium_rate * time_diff * ongoing_consumption_rate' tritium_missing_amount) * lithium_definition.density / tritium_definition.density; ; " is 170.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' Math.Min(tritium_to_add' lithium_to_take)); " is 133.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The length of the statement  "                ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -Math.Min(tritium_to_add' lithium_to_take)); " is 134.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,getReactorFuelModes,The length of the statement  "            return fuelmodes.Select(node => new ReactorFuelMode(node)).Where(fm => (fm.SupportedReactorTypes & ReactorType) == ReactorType).ToList(); " is 137.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The length of the statement  "                    double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400; " is 146.
Long Statement,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The length of the statement  "                GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150)); " is 125.
Long Statement,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnUpdate,The length of the statement  "            if (getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert) { " is 239.
Long Statement,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnUpdate,The length of the statement  "                ScreenMessages.PostScreenMessage("Warning: Fusion Reactor plasma heating cannot be guaranteed' reducing power requirements is recommended."' 10.0f' ScreenMessageStyle.UPPER_CENTER); " is 181.
Long Statement,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnFixedUpdate,The length of the statement  "                power_consumed = consumeFNResource(HeatingPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 154.
Long Statement,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnFixedUpdate,The length of the statement  "                if (power_consumed < HeatingPowerRequirements) power_consumed += part.RequestResource("ElectricCharge"' (HeatingPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000; " is 215.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,ToggleResource,The length of the statement  "            if (ORSAtmosphericResourceHandler.getAtmosphericResourceName(vessel.mainBody.flightGlobalsIndex' currentresource) == null && ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource) > 0 && currentresource != 0) { " is 268.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,ToggleResource,The length of the statement  "            if (currentresource >= ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex).Count) { " is 130.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnUpdate,The length of the statement  "            double respcent = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource)*100; " is 135.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnUpdate,The length of the statement  "            string resname = ORSAtmosphericResourceHandler.getAtmosphericResourceDisplayName(vessel.mainBody.flightGlobalsIndex' currentresource); " is 134.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The length of the statement  "                string atmospheric_resource_name = ORSAtmosphericResourceHandler.getAtmosphericResourceName(vessel.mainBody.flightGlobalsIndex' currentresource); " is 145.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The length of the statement  "                    double respcent = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource); " is 131.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The length of the statement  "                    //double resourcedensity = PartResourceLibrary.Instance.GetDefinition(PluginHelper.atomspheric_resources_tocollect[currentresource]).density; " is 141.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The length of the statement  "                        float powerreceived = Math.Max(consumeFNResource(powerrequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES)' 0); " is 139.
Long Statement,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The length of the statement  "                        resflowf = (float)ORSHelper.fixedRequestResource(part'atmospheric_resource_name' -scoopedAtm * powerpcnt * TimeWarp.fixedDeltaTime); " is 132.
Long Statement,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The length of the statement  "            if (String.Equals(this.resource_name' FNResourceManager.FNRESOURCE_WASTEHEAT)) { // passive dissip of waste heat - a little bit of this " is 135.
Long Statement,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The length of the statement  "                if (my_vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(my_vessel.mainBody)) { // passive convection - a lot of this " is 125.
Long Statement,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The length of the statement  "                    double conv_power_dissip = pressure * delta_temp * vessel_mass * 2.0 * GameConstants.rad_const_h / 1e6 * TimeWarp.fixedDeltaTime; " is 129.
Long Statement,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The length of the statement  "                if (internl_power_extract < 0 && PluginHelper.isThermalDissipationDisabled()) { // set buildup/dissip of waste heat to 0 if waste heat is disabled " is 146.
Long Statement,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The length of the statement  "                GUILayout.Label((demand_stable_supply).ToString("P3")' net_style2' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 121.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 165.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops " is 127.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel " is 137.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) { " is 131.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy " is 252.
Long Statement,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The length of the statement  "								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position)); " is 178.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnStart,The length of the statement  "            String[] resources_to_supply = { FNResourceManager.FNRESOURCE_MEGAJOULES' FNResourceManager.FNRESOURCE_WASTEHEAT' FNResourceManager.FNRESOURCE_THERMALPOWER }; " is 158.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The length of the statement  "                        ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 164.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The length of the statement  "                    double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy " is 142.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The length of the statement  "                    double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency); " is 145.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The length of the statement  "                    double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime; " is 161.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The length of the statement  "                        ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower); " is 130.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "            //these two dictionaries store transmitters and relays and best currently known route to them which is replaced if better one is found.  " is 135.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "            foreach (VesselMicrowavePersistence transmitter in vmps) { //first check for direct connection from current vessel to transmitters' will always be optimal " is 154.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                            transmitterRouteDictionary[transmitter] = new MicrowaveRoute(efficiency' distance' facingFactor); //store in dictionary that optimal route to this transmitter is direct connection' can be replaced if better route is found " is 221.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "            var currentRelayGroup = new List<KeyValuePair<VesselRelayPersistence' int>>();//relays which are in line of sight' and we have not yet checked what they can see. Their index in relaysToCheck is also stored " is 205.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                        relayRouteDictionary[relay] = new MicrowaveRoute(efficiency' distance' facingFactor);//store in dictionary that optimal route to this relay is direct connection' can be replaced if better route is found " is 202.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                    var nextRelayGroup = new List<KeyValuePair<VesselRelayPersistence' int>>();//will put every relay which is in line of sight of any relay from currentRelayGroup here " is 164.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                    foreach (var relayEntry in currentRelayGroup) //relays visible from receiver in first iteration' then relays visible from them etc.... " is 134.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                                double newDistance = relayRoute.Distance + transmitterDistance;// total distance from receiver by this relay to transmitter " is 123.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                                        transmitterRouteDictionary[transmitter] = new MicrowaveRoute(efficiencyByThisRelay' newDistance' relayRouteFacingFactor' relay); " is 128.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "            var resultDictionary = new Dictionary<VesselMicrowavePersistence' KeyValuePair<double' IEnumerable<VesselRelayPersistence>>>(); " is 127.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                Stack<VesselRelayPersistence> relays = new Stack<VesselRelayPersistence>();//Last in' first out so relay visible from receiver will always be first " is 147.
Long Statement,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetConnectedTransmitters,The length of the statement  "                resultDictionary.Add(transmitterEntry.Key' new KeyValuePair<double' IEnumerable<VesselRelayPersistence>>(transmitterEntry.Value.Efficiency' relays)); " is 149.
Long Statement,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnStart,The length of the statement  "            Actions["ActivateTransmitterAction"].guiName = Events["ActivateTransmitter"].guiName = String.Format("Activate Transmitter"); " is 125.
Long Statement,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnStart,The length of the statement  "            Actions["DeactivateTransmitterAction"].guiName = Events["DeactivateTransmitter"].guiName = String.Format("Deactivate Transmitter"); " is 131.
Long Statement,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,The length of the statement  "                //float inputPowerFixedAlt = (float) ((double)inputPower * (Math.Pow(FlightGlobals.Bodies[0].GetAltitude(vessel.transform.position)' 2)) / PluginHelper.FIXED_SAT_ALTITUDE / PluginHelper.FIXED_SAT_ALTITUDE); " is 206.
Long Statement,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,The length of the statement  "					//inputPowerFixedAlt = inputPower / PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vessel.transform.position)); " is 152.
Long Statement,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The length of the statement  "                    double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2); " is 329.
Long Statement,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The length of the statement  "                        power_node.SetValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E")); " is 121.
Long Statement,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The length of the statement  "                        power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E")); " is 121.
Long Statement,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The length of the statement  "                    power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E")); " is 121.
Long Statement,FNPlugin,ModuleModableScienceGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleModableScienceGenerator.cs,ReviewData,The length of the statement  "                    ExperimentsResultDialog.DisplayResult(merdp = new ModableExperimentResultDialogPage(base.part' this.science_data' this.science_data.transmitValue' 0' false' ""' true' false' new Callback<ScienceData>(this.endExperiment)' new Callback<ScienceData>(this.keepData)' new Callback<ScienceData>(this.sendDataToComms)' new Callback<ScienceData>(this.sendDataToLab))); " is 360.
Long Statement,FNPlugin,ModuleModableScienceGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleModableScienceGenerator.cs,sendDataToComms,The length of the statement  "                list.OrderBy(new Func<IScienceDataTransmitter' float>(ScienceUtil.GetTransmitterScore)).First<IScienceDataTransmitter>().TransmitData(list2); " is 141.
Long Statement,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,OnStart,The length of the statement  "            List<ModuleEnginesFX> mefxs = part.FindModulesImplementing<ModuleEnginesFX>().Where(e => e.engineID == "AirBreathing").ToList(); " is 128.
Long Statement,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The length of the statement  "                            float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1); " is 159.
Long Statement,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The length of the statement  "                                ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The length of the statement  "                            float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1); " is 159.
Long Statement,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The length of the statement  "                                ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getScienceMultiplier,The length of the statement  "			} else if (refbody == REF_BODY_JOOL || refbody == REF_BODY_TYLO || refbody == REF_BODY_POL || refbody == REF_BODY_BOP) { " is 120.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getImpactorScienceMultiplier,The length of the statement  "            } else if (refbody == REF_BODY_JOOL || refbody == REF_BODY_TYLO || refbody == REF_BODY_POL || refbody == REF_BODY_BOP) { " is 120.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "                                    if (intake_air_resource != null && !prefab_available_part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere)) " is 139.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "                                ModuleDeployableSolarPanel panel = prefab_available_part.Modules["ModuleDeployableSolarPanel"] as ModuleDeployableSolarPanel; " is 125.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "                                            available_part.resourceInfo = available_part.resourceInfo + "\n" + pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount; " is 124.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().First().GetInfo(); " is 122.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "                                AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "Electric Engine Controller").First(); " is 134.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "                                AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "FNNozzle Controller").First(); " is 127.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The length of the statement  "							if(prefab_available_part.CrewCapacity > 0 || prefab_available_part.FindModulesImplementing<ModuleCommand>().Count > 0) { " is 120.
Long Statement,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,showInstallationErrorMessage,The length of the statement  "				PopupDialog.SpawnPopupDialog ("KSP Interstellar Installation Error"' "KSP Interstellar is unable to detect files required for proper functioning.  Please make sure that this mod has been installed to [Base KSP directory]/GameData/WarpPlugin."' "OK"' false' HighLogic.Skin); " is 273.
Long Statement,FNPlugin,RadiationDose,C:\repos\FractalUK_KSPInterstellar\FNPlugin\RadiationDose.cs,ToString,The length of the statement  "            return "{ Beta = " + BetaDose.ToString("E") + " Gamma " + GammaDose.ToString("E") + " Proton " + ProtonDose.ToString("E") + " Neutron " + NeutronDose.ToString("E") + "}"; " is 170.
Long Statement,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateFrame,The length of the statement  "            _hydrogen_consumption_rate = _part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' h_rate_temp * TimeWarp.fixedDeltaTime / _hydrogen_density / 2); " is 168.
Long Statement,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateFrame,The length of the statement  "                _oxygen_production_rate = _part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -o_rate_temp * TimeWarp.fixedDeltaTime / _oxygen_density) / TimeWarp.fixedDeltaTime / _oxygen_density; " is 202.
Long Statement,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateFrame,The length of the statement  "                _methane_production_rate = -_part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -o_rate_temp * 2.0 / _oxygen_density * TimeWarp.fixedDeltaTime / _methane_density) * _methane_density / TimeWarp.fixedDeltaTime; " is 231.
Long Statement,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the statement  "                    double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier)); " is 282.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the statement  "                    science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment; " is 130.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the statement  "                    List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList(); " is 134.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the statement  "                    float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6); " is 157.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The length of the statement  "                    double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0; " is 125.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The length of the statement  "                    powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW"; " is 121.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 156.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption); " is 123.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    science_rate_f = (float)(GameConstants.baseScienceRate * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / 86400.0f * global_rate_multipliers * stupidity / (Mathf.Sqrt(altitude_multiplier))); " is 238.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        //ResearchAndDevelopment.Instance.Science = ResearchAndDevelopment.Instance.Science + science_rate_f * TimeWarp.fixedDeltaTime; " is 127.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 156.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption); " is 123.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    double electrical_power_provided = consumeFNResource(GameConstants.baseAMFPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 159.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                    electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAMFPowerConsumption); " is 126.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        float electrical_power_provided = consumeFNResource(GameConstants.baseCentriPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 161.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseCentriPowerConsumption); " is 129.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        float deut_produced = (float)(global_rate_multipliers * GameConstants.deuterium_timescale * GameConstants.deuterium_abudance * 1000.0f); " is 136.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        deut_rate_f = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Deuterium' -deut_produced * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 175.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The length of the statement  "                        ScreenMessages.PostScreenMessage("You must be splashed down to perform this activity."' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 127.
Long Statement,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,generateScienceData,The length of the statement  "                ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ScienceUtil.GetExperimentSituation(vessel)' vessel.mainBody' ""); " is 146.
Long Statement,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,UpdateTechTree,The length of the statement  "                PopupDialog.SpawnPopupDialog("Restart KSP"' "Changes to the tech tree have been applied' please restart KSP before continuing."' "OK"' false' GUI.skin); " is 152.
Long Statement,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The length of the statement  "            _uranium_tetraflouride_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime)/_uranium_tetraflouride_density/TimeWarp.fixedDeltaTime; " is 230.
Long Statement,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The length of the statement  "            _ammonia_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' ammoniapersec * TimeWarp.fixedDeltaTime) / _ammonia_density / TimeWarp.fixedDeltaTime; " is 197.
Long Statement,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The length of the statement  "                _uranium_nitride_production_rate = -_part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.UraniumNitride' -_uranium_tetraflouride_consumption_rate / 1.24597 / _uranium_nitride_density*TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime * _uranium_nitride_density; " is 282.
Long Statement,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(_uranium_tetraflouride_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150)); " is 121.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "            resting_radiator_temp_at_100pcnt = ((!double.IsInfinity(rad_ratio) && !double.IsNaN(rad_ratio)) ? Math.Pow(rad_ratio'0.25) : 0) * average_rad_temp; " is 147.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "            resting_radiator_temp_at_30pcnt = ((!double.IsInfinity(rad_ratio) && !double.IsNaN(rad_ratio)) ? Math.Pow(rad_ratio_30pc' 0.25) : 0) * average_rad_temp; " is 152.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "                generator_efficiency_at_100pcnt = (double.MaxValue == source_temp_at_100pc || (double.IsInfinity(resting_radiator_temp_at_100pcnt) || double.IsNaN(resting_radiator_temp_at_100pcnt))) ? 0 : 1 - resting_radiator_temp_at_100pcnt / source_temp_at_100pc; " is 249.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "                generator_efficiency_at_100pcnt = Math.Max(((generators[0].isupgraded) ? generators[0].upgradedpCarnotEff : generators[0].pCarnotEff)*generator_efficiency_at_100pcnt'0); " is 169.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "                generator_efficiency_at_30pcnt = (double.MaxValue == source_temp_at_100pc || (double.IsInfinity(resting_radiator_temp_at_30pcnt) || double.IsNaN(resting_radiator_temp_at_30pcnt))) ? 0 : 1 - resting_radiator_temp_at_30pcnt / source_temp_at_100pc; " is 245.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The length of the statement  "                generator_efficiency_at_30pcnt = Math.Max(((generators[0].isupgraded) ? generators[0].upgradedpCarnotEff : generators[0].pCarnotEff) * generator_efficiency_at_30pcnt' 0); " is 170.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "            GUILayout.Label(getPowerFormatString(rad_max_dissip)' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 124.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "            string resting_radiator_temp_at_100pcntStr = (!double.IsInfinity(resting_radiator_temp_at_100pcnt) && !double.IsNaN(resting_radiator_temp_at_100pcnt)) ? resting_radiator_temp_at_100pcnt.ToString("0.0") + " K" : "N/A"; " is 217.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "            GUILayout.Label(resting_radiator_temp_at_100pcntStr' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 123.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "            string resting_radiator_temp_at_30pcntStr = (!double.IsInfinity(resting_radiator_temp_at_30pcnt) && !double.IsNaN(resting_radiator_temp_at_30pcnt)) ? resting_radiator_temp_at_30pcnt.ToString("0.0") + " K" : "N/A"; " is 213.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "            GUILayout.Label(resting_radiator_temp_at_30pcntStr' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 122.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "                GUILayout.Label((generator_efficiency_at_100pcnt*100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 148.
Long Statement,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The length of the statement  "                GUILayout.Label((generator_efficiency_at_30pcnt * 100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80)); " is 149.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnUpdate,The length of the statement  "				Events ["RetrofitEngine"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade; " is 127.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updatePropellantBar,The length of the statement  "            List<PartResource> partresources = part.GetConnectedResources(myAttachedEngine.propellants.FirstOrDefault().name).ToList(); " is 123.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,setupPropellants,The length of the statement  "                    if (partresources.Count == 0 || !PartResourceLibrary.Instance.resourceDefinitions.Contains(list_of_propellants[0].name)) { " is 122.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,setupPropellants,The length of the statement  "                if (!PartResourceLibrary.Instance.resourceDefinitions.Contains(list_of_propellants[0].name) && fuel_mode != 1) { // Still ignore propellants that don't exist " is 157.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                    int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count(); " is 123.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                    float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1); " is 159.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                        ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit; " is 128.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime; " is 142.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                    thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime; " is 188.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01); " is 166.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio; " is 145.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                    if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) { " is 132.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The length of the statement  "                    if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) { " is 132.
Long Statement,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,GetInfo,The length of the statement  "				return_str = return_str + "--" + guiname + "--\n" + "ISP: " + ispMultiplier.ToString ("0.00") + " x 17 x Sqrt(Core Temperature)" + "\n"; " is 136.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnEditorAttach,The length of the statement  "            List<IThermalSource> source_list = part.attachNodes.Where(atn => atn.attachedPart != null).SelectMany(atn => atn.attachedPart.FindModulesImplementing<IThermalSource>()).ToList(); " is 178.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnEditorAttach,The length of the statement  "            if (myAttachedReactor != null && myAttachedReactor is IChargedParticleSource && (myAttachedReactor as IChargedParticleSource).ChargedParticleRatio > 0) " is 151.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnStart,The length of the statement  "            List<IThermalSource> source_list = part.attachNodes.Where(atn => atn.attachedPart != null).SelectMany(atn => atn.attachedPart.FindModulesImplementing<IThermalSource>()).ToList(); " is 178.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnUpdate,The length of the statement  "				Events ["RetrofitGenerator"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade; " is 130.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the statement  "                double electrical_power_currently_needed = (getCurrentUnfilledResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) + currentmegajoules); " is 139.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the statement  "                    input_power = consumeFNResource(Math.Max(charged_power_currently_needed*TimeWarp.fixedDeltaTime'0)' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES); " is 148.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the statement  "				outputPower = -(float)supplyFNResourceFixedMax (electricdtps * TimeWarp.fixedDeltaTime' max_electricdtps * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 199.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The length of the statement  "						ScreenMessages.PostScreenMessage ("Generator Shutdown: No radiators available!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 120.
Long Statement,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,GetInfo,The length of the statement  "			return String.Format("Percent of Carnot Efficiency: {0}%\n-Upgrade Information-\n Upgraded Percent of Carnot Efficiency: {1}%"' pCarnotEff*100' upgradedpCarnotEff*100); " is 168.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The length of the statement  "                double science_to_increment = baseScienceRate * time_diff / 86400 * electrical_power_ratio * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier)); " is 230.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The length of the statement  "                science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment; " is 130.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnFixedUpdate,The length of the statement  "                float power_returned = consumeFNResource(megajouleRate * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 123.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnFixedUpdate,The length of the statement  "                float power_returned = consumeFNResource(upgradedMegajouleRate * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime; " is 157.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnFixedUpdate,The length of the statement  "                science_rate_f = (float) (baseScienceRate * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / GameConstants.KEBRIN_DAY_SECONDS * power_returned / upgradedMegajouleRate / Math.Sqrt(altitude_multiplier)); " is 249.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,generateScienceData,The length of the statement  "                ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ScienceUtil.GetExperimentSituation(vessel)' vessel.mainBody' ""); " is 146.
Long Statement,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,upgradePartModule,The length of the statement  "            _experiment_node = GameDatabase.Instance.GetConfigNodes("EXPERIMENT_DEFINITION").FirstOrDefault(nd => nd.GetValue("id") == experimentID); " is 137.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetTemperatureofColdestThermalSource,The length of the statement  "            List<IThermalSource> active_reactors = vess.FindPartModulesImplementing<IThermalSource>().Where(ts => ts.IsActive).ToList(); " is 124.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The length of the statement  "            ORSPlanetaryResourcePixel res_pixel = ORSPlanetaryResourceMapData.getResourceAvailability(vessel.mainBody.flightGlobalsIndex' InterstellarResourcesConfiguration.Instance.ThoriumTetraflouride' cur_ref_body.GetLatitude(vessel.transform.position)' cur_ref_body.GetLongitude(vessel.transform.position)); " is 299.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The length of the statement  "            double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2); " is 329.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The length of the statement  "            double mag_field_strength = cur_ref_body.GetBeltMagneticFieldMagnitude(FlightGlobals.ship_altitude' FlightGlobals.ship_latitude); " is 129.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The length of the statement  "                mag_field_strength += cur_ref_body.GetBeltMagneticFieldMagnitude(Vector3d.Distance(FlightGlobals.ship_position' cur_ref_body.transform.position) - cur_ref_body.Radius' FlightGlobals.ship_latitude); " is 197.
Long Statement,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The length of the statement  "            RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0); " is 168.
Long Statement,FNPlugin,VesselMicrowavePersistence,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselMicrowavePersistence.cs,getAvailablePower,The length of the statement  "                double inv_square_mult = Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2); " is 329.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnStart,The length of the statement  "            standard_deut_rate = curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Deuterium).ratio; " is 137.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnStart,The length of the statement  "            standard_lith_rate = curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Tritium).ratio; " is 135.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The length of the statement  "				ScreenMessages.PostScreenMessage("Engines throttled down as they presently pose a radiation hazard!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 141.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The length of the statement  "									ScreenMessages.PostScreenMessage(crew_member.name + " was killed by Neutron Radiation!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 128.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The length of the statement  "									ScreenMessages.PostScreenMessage(crew_member.name + " was killed by Neutron Radiation!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 128.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The length of the statement  "                curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Deuterium).ratio = (float)(standard_deut_rate / throttle / throttle); " is 168.
Long Statement,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The length of the statement  "                curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Tritium).ratio = (float)(standard_lith_rate / throttle / throttle); " is 166.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnUpdate,The length of the statement  "				Events ["RetrofitRadiator"].active = !isupgraded && ResearchAndDevelopment.Instance.Science >= upgradeCost && hasrequiredupgrade; " is 129.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "				convectedThermalPower = consumeFNResource (conv_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime; " is 128.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25); " is 130.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val); " is 167.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime; " is 151.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime; " is 130.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp)); " is 147.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7)); " is 161.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25); " is 130.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val); " is 166.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime; " is 151.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime; " is 130.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp)); " is 147.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The length of the statement  "                instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7)); " is 161.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The length of the statement  "            float thermal_power_dissip2 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(upgradedRadiatorTemp' 4) / 1e6); " is 123.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The length of the statement  "            return String.Format("Maximum Waste Heat Radiated\n Base: {0} MW\n Upgraded: {1} MW\n-----\nRadiator Performance at:\n600K: {2} MW\n1200K: {3} MW\n1800K: {4} MW\n2400K: {5} MW\n3000K: {6} MW\n"' thermal_power_dissip' thermal_power_dissip2' thermal_power_dissip3' thermal_power_dissip4' thermal_power_dissip5' thermal_power_dissip6' thermal_power_dissip7); " is 355.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The length of the statement  "                        renderer.material.SetTexture("_Emissive"' GameDatabase.Instance.GetTexture("WarpPlugin/Parts/Electrical/circradiatorKT/texture1_e"' false)); " is 140.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The length of the statement  "                        renderer.material.SetTexture("_BumpMap"' GameDatabase.Instance.GetTexture("WarpPlugin/Parts/Electrical/circradiatorKT/texture1_n"' false)); " is 139.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The length of the statement  "                        renderer.material.SetTexture("_Emissive"' GameDatabase.Instance.GetTexture("WarpPlugin/Parts/Electrical/RadialHeatRadiator/d_glow"' false)); " is 140.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The length of the statement  "                        renderer.material.SetTexture("_Emissive"' GameDatabase.Instance.GetTexture("WarpPlugin/Parts/Electrical/LargeFlatRadiator/glow"' false)); " is 137.
Long Statement,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The length of the statement  "                        renderer.material.SetTexture("_BumpMap"' GameDatabase.Instance.GetTexture("WarpPlugin/Parts/Electrical/LargeFlatRadiator/radtex_n"' false)); " is 140.
Long Statement,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The length of the statement  "                    double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2); " is 329.
Long Statement,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The length of the statement  "                    if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.98 && solarPanel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDED && solarPanel.sunTracking) " is 174.
Long Statement,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The length of the statement  "                            ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Solar Panel retraction occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER); " is 152.
Long Statement,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The length of the statement  "                    supplyFNResourceFixedMax(current_charge >= max_charge ? solar_rate / 1000.0f : 0' solar_rate / 1000.0f' FNResourceManager.FNRESOURCE_MEGAJOULES); " is 145.
Long Statement,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The length of the statement  "                    wasteheat_production_f = supplyFNResource(heat_rate' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime * 1000.0f; " is 129.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The length of the statement  "			chargeStatusStr = chargestatus.ToString ("0.0") + "/" + GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE.ToString ("0.0"); " is 121.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The length of the statement  "				ScreenMessages.PostScreenMessage("Warning!: Antimatter storage unpowered' tank explosion in: " + chargestatus.ToString("0") + "s"' 1.0f' ScreenMessageStyle.UPPER_CENTER); " is 170.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The length of the statement  "                    float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded; " is 168.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The length of the statement  "                        float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded; " is 147.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The length of the statement  "                            ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER); " is 143.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The length of the statement  "				lightGameObject.transform.localScale = new Vector3(Mathf.Sqrt(cur_explosion_size)' Mathf.Sqrt(cur_explosion_size)' Mathf.Sqrt(cur_explosion_size)); " is 147.
Long Statement,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,GetInfo,The length of the statement  "            return "Maximum Power Requirements: " + (chargeNeeded*2).ToString("0") + " KW\nMinimum Power Requirements: " + chargeNeeded.ToString("0") + " KW"; " is 146.
Long Statement,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,OnFixedUpdate,The length of the statement  "                        Orbit orbit2 = new Orbit(vessel.orbit.inclination' vessel.orbit.eccentricity' vessel.orbit.semiMajorAxis' vessel.orbit.LAN' vessel.orbit.argumentOfPeriapsis' vessel.orbit.meanAnomalyAtEpoch' vessel.orbit.epoch' vessel.orbit.referenceBody); " is 239.
Long Statement,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,OnFixedUpdate,The length of the statement  "                        orbit2.UpdateFromStateVectors(position' vessel.orbit.vel + solar_accel' vessel.orbit.referenceBody' Planetarium.GetUniversalTime()); " is 132.
Long Statement,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,OnFixedUpdate,The length of the statement  "                        if (!double.IsNaN(orbit2.inclination) && !double.IsNaN(orbit2.eccentricity) && !double.IsNaN(orbit2.semiMajorAxis) && orbit2.timeToAp > TimeWarp.fixedDeltaTime) { " is 162.
Long Statement,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,solarForceAtDistance,The length of the statement  "            double distance_from_sun = Vector3.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position' vessel.transform.position); " is 142.
Long Statement,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The length of the statement  "                        VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0); " is 151.
Long Statement,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The length of the statement  "                        VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0)); " is 145.
Long Statement,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The length of the statement  "                    VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0); " is 158.
Long Statement,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The length of the statement  "                    VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0)); " is 147.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateFrame,The length of the statement  "            _water_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Water' _current_rate * TimeWarp.fixedDeltaTime / _water_density) / TimeWarp.fixedDeltaTime * _water_density; " is 208.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateFrame,The length of the statement  "            _hydrogen_production_rate = -_part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -h_rate_temp * TimeWarp.fixedDeltaTime / _hydrogen_density) / TimeWarp.fixedDeltaTime*_hydrogen_density; " is 217.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateFrame,The length of the statement  "            _oxygen_production_rate = -_part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -o_rate_temp * TimeWarp.fixedDeltaTime / _oxygen_density) / TimeWarp.fixedDeltaTime*_oxygen_density; " is 209.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150)); " is 154.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label((_water_consumption_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150)); " is 125.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label((_hydrogen_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150)); " is 127.
Long Statement,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The length of the statement  "            GUILayout.Label((_oxygen_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150)); " is 125.
Complex Conditional,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The conditional expression  "HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational"  is complex.
Complex Conditional,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnUpdate,The conditional expression  "getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert"  is complex.
Complex Conditional,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnUpdate,The conditional expression  "getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert"  is complex.
Complex Conditional,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The conditional expression  "vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true"  is complex.
Complex Conditional,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The conditional expression  "(vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear""  is complex.
Complex Conditional,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getScienceMultiplier,The conditional expression  "refbody == REF_BODY_DUNA || refbody == REF_BODY_EVE || refbody == REF_BODY_IKE || refbody == REF_BODY_GILLY"  is complex.
Complex Conditional,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getScienceMultiplier,The conditional expression  "refbody == REF_BODY_JOOL || refbody == REF_BODY_TYLO || refbody == REF_BODY_POL || refbody == REF_BODY_BOP"  is complex.
Complex Conditional,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getImpactorScienceMultiplier,The conditional expression  "refbody == REF_BODY_DUNA || refbody == REF_BODY_EVE || refbody == REF_BODY_IKE || refbody == REF_BODY_GILLY"  is complex.
Complex Conditional,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getImpactorScienceMultiplier,The conditional expression  "refbody == REF_BODY_JOOL || refbody == REF_BODY_TYLO || refbody == REF_BODY_POL || refbody == REF_BODY_BOP"  is complex.
Complex Conditional,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The conditional expression  "totalEff <= 0 || coldBathTemp <= 0 || hotBathTemp <= 0 || maxThermalPower <= 0"  is complex.
Complex Conditional,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,OnFixedUpdate,The conditional expression  "!double.IsNaN(orbit2.inclination) && !double.IsNaN(orbit2.eccentricity) && !double.IsNaN(orbit2.semiMajorAxis) && orbit2.timeToAp > TimeWarp.fixedDeltaTime"  is complex.
Empty Catch Block,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnSave,The method has an empty catch block.
Empty Catch Block,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnLoad,The method has an empty catch block.
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures = new Texture[33];
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[2] = GameDatabase.Instance.GetTexture("WarpPlugin/warp3"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[3] = GameDatabase.Instance.GetTexture("WarpPlugin/warp4"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[4] = GameDatabase.Instance.GetTexture("WarpPlugin/warp5"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[5] = GameDatabase.Instance.GetTexture("WarpPlugin/warp6"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[6] = GameDatabase.Instance.GetTexture("WarpPlugin/warp7"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[7] = GameDatabase.Instance.GetTexture("WarpPlugin/warp8"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[8] = GameDatabase.Instance.GetTexture("WarpPlugin/warp9"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[9] = GameDatabase.Instance.GetTexture("WarpPlugin/warp10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[10] = GameDatabase.Instance.GetTexture("WarpPlugin/warp11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[11] = GameDatabase.Instance.GetTexture("WarpPlugin/warp10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[12] = GameDatabase.Instance.GetTexture("WarpPlugin/warp11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[13] = GameDatabase.Instance.GetTexture("WarpPlugin/warp12"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[14] = GameDatabase.Instance.GetTexture("WarpPlugin/warp13"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[15] = GameDatabase.Instance.GetTexture("WarpPlugin/warp14"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[16] = GameDatabase.Instance.GetTexture("WarpPlugin/warp15"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[17] = GameDatabase.Instance.GetTexture("WarpPlugin/warp16"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[18] = GameDatabase.Instance.GetTexture("WarpPlugin/warp15"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[19] = GameDatabase.Instance.GetTexture("WarpPlugin/warp14"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[20] = GameDatabase.Instance.GetTexture("WarpPlugin/warp13"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[21] = GameDatabase.Instance.GetTexture("WarpPlugin/warp12"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[22] = GameDatabase.Instance.GetTexture("WarpPlugin/warp11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[23] = GameDatabase.Instance.GetTexture("WarpPlugin/warp10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[24] = GameDatabase.Instance.GetTexture("WarpPlugin/warp9"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[25] = GameDatabase.Instance.GetTexture("WarpPlugin/warp8"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[26] = GameDatabase.Instance.GetTexture("WarpPlugin/warp7"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[27] = GameDatabase.Instance.GetTexture("WarpPlugin/warp6"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[28] = GameDatabase.Instance.GetTexture("WarpPlugin/warp5"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[29] = GameDatabase.Instance.GetTexture("WarpPlugin/warp4"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[30] = GameDatabase.Instance.GetTexture("WarpPlugin/warp3"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[31] = GameDatabase.Instance.GetTexture("WarpPlugin/warp2"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures[32] = GameDatabase.Instance.GetTexture("WarpPlugin/warp"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2 = new Texture[33];
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[2] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr3"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[3] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr4"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[4] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr5"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[5] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr6"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[6] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr7"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[7] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr8"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[8] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr9"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[9] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[10] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[11] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[12] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[13] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr12"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[14] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr13"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[15] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr14"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[16] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr15"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[17] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr16"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[18] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr15"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[19] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr14"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[20] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr13"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[21] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr12"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[22] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr11"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[23] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr10"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[24] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr9"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[25] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr8"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[26] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr7"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[27] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr6"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[28] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr5"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[29] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr4"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[30] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr3"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[31] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr2"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_textures2[32] = GameDatabase.Instance.GetTexture("WarpPlugin/warpr"' false);
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_effect2.renderer.material.renderQueue = 1000;
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnStart,The following statement contains a magic number: warp_effect.renderer.material.renderQueue = 1001;
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The following statement contains a magic number: warp_effect2.renderer.material.mainTexture = warp_textures2[((int)tex_count+8) % warp_textures.Length];
Magic Number,FNPlugin,AlcubierreDrive,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AlcubierreDrive.cs,OnFixedUpdate,The following statement contains a magic number: if (IsCharging) {  				float maxPowerDrawForExoticMatter = (maxExoticMatter - currentExoticMatter) * 1000;  				float available_power = getStableResourceSupply (FNResourceManager.FNRESOURCE_MEGAJOULES);  				float power_returned = consumeFNResource (Math.Min (maxPowerDrawForExoticMatter * TimeWarp.fixedDeltaTime' available_power * TimeWarp.fixedDeltaTime)' FNResourceManager.FNRESOURCE_MEGAJOULES);                  part.RequestResource(InterstellarResourcesConfiguration.Instance.ExoticMatter' -power_returned / 1000.0f);  			}
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Alumina Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_alumina_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Aluminium Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_aluminium_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Oxygen Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_oxygen_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,AluminiumElectrolyser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AluminiumElectrolyser.cs,updateStatusMessage,The following statement contains a magic number: if (_aluminium_production_rate > 0 && _oxygen_production_rate > 0)              {                  _status = "Electrolysing";              } else if (_alumina_consumption_rate > 0)              {                  _status = "Electrolysing: Insufficient Oxygen Storage";              } else if (_oxygen_production_rate > 0)              {                  _status = "Electrolysing: Insufficient Aluminium Storage";              } else if (CurrentPower <= 0.01 * PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  _status = "Insufficient Storage";              }
Magic Number,FNPlugin,AntimatterCollector,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterCollector.cs,OnStart,The following statement contains a magic number: if (last_active_time != 0 && vessel.orbit.eccentricity < 1) {                  double lat = vessel.mainBody.GetLatitude(vessel.transform.position);                  double vessel_avg_alt = (vessel.orbit.ApR + vessel.orbit.PeR) / 2.0f;                  double vessel_inclination = vessel.orbit.inclination;                  double flux = 0.5 * (vessel.mainBody.GetBeltAntiparticles(vessel_avg_alt' vessel_inclination) + vessel.mainBody.GetBeltAntiparticles(vessel_avg_alt' 0.0));                  double antimatter_to_add = time_diff*flux;                  part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Antimatter' -antimatter_to_add);              }
Magic Number,FNPlugin,AntimatterCollector,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterCollector.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  drawCount++;                  double lat = vessel.mainBody.GetLatitude(this.vessel.GetWorldPos3D());                  double flux = vessel.mainBody.GetBeltAntiparticles(vessel.altitude' lat);                  part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Antimatter' -flux * TimeWarp.fixedDeltaTime);                  last_active_time = (float)Planetarium.GetUniversalTime();                  collection_rate_d = flux * 86400;              }
Magic Number,FNPlugin,AntimatterFactory,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterFactory.cs,AntimatterFactory,The following statement contains a magic number: if (HighLogic.CurrentGame != null) {                  if (HighLogic.CurrentGame.Mode == Game.Modes.CAREER) {                      if (PluginHelper.hasTech("interstellarTechAntimatterPower")) {                                                } else if (PluginHelper.hasTech("interstellarTechAccelerator")) {                          efficiency = efficiency / 100;                      } else {                          efficiency = efficiency / 10000;                      }                  }              }
Magic Number,FNPlugin,AntimatterFactory,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterFactory.cs,AntimatterFactory,The following statement contains a magic number: if (HighLogic.CurrentGame != null) {                  if (HighLogic.CurrentGame.Mode == Game.Modes.CAREER) {                      if (PluginHelper.hasTech("interstellarTechAntimatterPower")) {                                                } else if (PluginHelper.hasTech("interstellarTechAccelerator")) {                          efficiency = efficiency / 100;                      } else {                          efficiency = efficiency / 10000;                      }                  }              }
Magic Number,FNPlugin,AtmosphericIntake,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AtmosphericIntake.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _intake_atm != null)              {                  double resourcedensity = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere).density;                  double airdensity = part.vessel.atmDensity / 1000;                  double airspeed = part.vessel.srf_velocity.magnitude + 100.0;                  double air = airspeed * airdensity * area / resourcedensity * TimeWarp.fixedDeltaTime;                  airf = (float)(1000.0 * air / TimeWarp.fixedDeltaTime * resourcedensity);                    air = _intake_atm.amount = Math.Min(air / TimeWarp.fixedDeltaTime' _intake_atm.maxAmount);                  part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere' -air);              }
Magic Number,FNPlugin,AtmosphericIntake,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AtmosphericIntake.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _intake_atm != null)              {                  double resourcedensity = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere).density;                  double airdensity = part.vessel.atmDensity / 1000;                  double airspeed = part.vessel.srf_velocity.magnitude + 100.0;                  double air = airspeed * airdensity * area / resourcedensity * TimeWarp.fixedDeltaTime;                  airf = (float)(1000.0 * air / TimeWarp.fixedDeltaTime * resourcedensity);                    air = _intake_atm.amount = Math.Min(air / TimeWarp.fixedDeltaTime' _intake_atm.maxAmount);                  part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere' -air);              }
Magic Number,FNPlugin,AtmosphericIntake,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AtmosphericIntake.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _intake_atm != null)              {                  double resourcedensity = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere).density;                  double airdensity = part.vessel.atmDensity / 1000;                  double airspeed = part.vessel.srf_velocity.magnitude + 100.0;                  double air = airspeed * airdensity * area / resourcedensity * TimeWarp.fixedDeltaTime;                  airf = (float)(1000.0 * air / TimeWarp.fixedDeltaTime * resourcedensity);                    air = _intake_atm.amount = Math.Min(air / TimeWarp.fixedDeltaTime' _intake_atm.maxAmount);                  part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere' -air);              }
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Water Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label((_water_consumption_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Hydrogen Peroxide Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label((_hydrogen_peroxide_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,AnthraquinoneProcessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AnthraquinoneProcessor.cs,updateStatusMessage,The following statement contains a magic number: if (_hydrogen_peroxide_production_rate > 0)              {                  _status = "Electrolysing";              } else if (CurrentPower <= 0.01 * PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  _status = "Insufficient Storage";              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,InterstellarMagneticNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarMagneticNozzleControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && _attached_engine != null && _attached_reactor != null && _attached_engine.isOperational)              {                  double max_power = _attached_reactor.MaximumChargedPower;                  if (_attached_reactor is InterstellarFusionReactor) max_power *= 0.9;                  double dilution_factor = 15000.0;                  double joules_per_amu = _attached_reactor.CurrentMeVPerChargedProduct * 1e6 * GameConstants.ELECTRON_CHARGE / dilution_factor;                  double isp = Math.Sqrt(joules_per_amu * 2.0 / GameConstants.ATOMIC_MASS_UNIT) / GameConstants.STANDARD_GRAVITY;                  FloatCurve new_isp = new FloatCurve();                  new_isp.Add(0' (float)isp' 0' 0);                  _attached_engine.atmosphereCurve = new_isp;                    double charged_power_received = consumeFNResource(max_power * TimeWarp.fixedDeltaTime * _attached_engine.currentThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                    double megajoules_received = consumeFNResource(charged_power_received * TimeWarp.fixedDeltaTime * 0.01' FNResourceManager.FNRESOURCE_MEGAJOULES)/TimeWarp.fixedDeltaTime;                  double megajoules_ratio = megajoules_received / charged_power_received / 0.01;                  megajoules_ratio = (double.IsNaN(megajoules_ratio) || double.IsInfinity(megajoules_ratio)) ? 0 : megajoules_ratio;                    double atmo_thrust_factor = Math.Min(1.0'Math.Max(1.0 - Math.Pow(vessel.atmDensity'0.2)'0));                    double exchanger_thrust_divisor = 1;                  if (radius > _attached_reactor.getRadius())                  {                      exchanger_thrust_divisor = _attached_reactor.getRadius() * _attached_reactor.getRadius() / radius / radius;                  } else                  {                      exchanger_thrust_divisor = radius * radius / _attached_reactor.getRadius() / _attached_reactor.getRadius();                  }                    double engineMaxThrust = 0.000000001;                  float power_ratio;                  if (max_power > 0)                  {                      power_ratio = (float)(charged_power_received / max_power);                      engineMaxThrust = Math.Max(2000.0 * charged_power_received*megajoules_ratio*atmo_thrust_factor*exchanger_thrust_divisor / isp / GameConstants.STANDARD_GRAVITY / _attached_engine.currentThrottle' 0.000000001);                  }                    if (!double.IsInfinity(engineMaxThrust) && !double.IsNaN(engineMaxThrust))                  {                      _attached_engine.maxThrust = (float)engineMaxThrust;                  } else                  {                      _attached_engine.maxThrust = 0.000000001f;                  }              } else if (_attached_engine != null)              {                  _attached_engine.maxThrust = 0.000000001f;              }
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The following statement contains a magic number: _ammonia_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * _current_rate * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / _ammonia_density) * _ammonia_density / TimeWarp.fixedDeltaTime;
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateFrame,The following statement contains a magic number: _hydrogen_peroxide_consumption_rate = _part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * _current_rate * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / _hydrogen_peroxide_density) * _hydrogen_peroxide_density / TimeWarp.fixedDeltaTime;
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Ammona Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_ammonia_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Hydrogen Peroxide Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_hydrogen_peroxide_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Water Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_water_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Hydrazine (Monopropellant) Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_hydrazine_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,MonopropellantProducer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MonopropellantProducer.cs,updateStatusMessage,The following statement contains a magic number: if (_water_production_rate > 0 && _hydrazine_production_rate > 0)              {                  _status = "Peroxide Process Ongoing";              } else if (_hydrazine_production_rate > 0)              {                  _status = "Ongoing: Insufficient Monopropellant Storage";              } else if (_water_production_rate > 0)              {                  _status = "Ongoing: Insufficient Water Storage";              } else if (CurrentPower <= 0.01*PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  if (_ammonia_consumption_rate > 0 && _hydrogen_peroxide_consumption_rate > 0)                  {                      _status = "Insufficient Storage";                  } else if (_ammonia_consumption_rate > 0)                  {                      _status = "Hydrogen Peroxide Deprived";                  } else if (_hydrogen_peroxide_consumption_rate > 0)                  {                      _status = "Ammonia Deprived";                  } else                  {                      _status = "Hydrogen Peroxide and Ammonia Deprived";                  }              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: lat = (lat / 180 * Math.PI);
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double peakbelt = 1.5 * crefkerbin.Radius * relrp;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double a = peakbelt / Math.Sqrt(2);
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: beltparticles = beltparticles * relmp * relrp / relrt * 50.0;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltAntiparticles,The following statement contains a magic number: if (body.flightGlobalsIndex == 0) beltparticles = beltparticles / 1000;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: lat = lat / 180 * Math.PI;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double a = peakbelt / Math.Sqrt(2);
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: double beltparticles = Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(a' 2))) / (Math.Pow(a' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: beltparticles = beltparticles * relrp / relrt * 50.0;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetProtonRadiationLevel,The following statement contains a magic number: if (body.flightGlobalsIndex == 0)              {                  beltparticles = beltparticles / 1000;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetPeakProtonBeltAltitude,The following statement contains a magic number: lat = lat / 180 * Math.PI;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetPeakProtonBeltAltitude,The following statement contains a magic number: double peakbelt = 1.5 * crefkerbin.Radius * relrp;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: lat = lat / 180 * Math.PI;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double b = peakbelt2 / Math.Sqrt(2);
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: double beltparticles = 0.9 * Math.Sqrt(2 / Math.PI) * Math.Pow(altituded' 2) * Math.Exp(-Math.Pow(altituded' 2) / (2.0 * Math.Pow(b' 2))) / (Math.Pow(b' 3));
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: beltparticles = beltparticles * relrp / relrt * 50.0;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetElectronRadiationLevel,The following statement contains a magic number: if (body.flightGlobalsIndex == 0)              {                  beltparticles = beltparticles / 1000;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetPeakElectronBeltAltitude,The following statement contains a magic number: lat = lat / 180 * Math.PI;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetPeakElectronBeltAltitude,The following statement contains a magic number: double peakbelt = 6.0 * crefkerbin.Radius * relrp;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,specialMagneticFieldScaling,The following statement contains a magic number: switch (body.flightGlobalsIndex)              {                  case (PluginHelper.REF_BODY_TYLO):                      special_scaling = 7;                      break;                  case(PluginHelper.REF_BODY_LAYTHE):                      special_scaling = 5;                      break;                  case(PluginHelper.REF_BODY_MOHO):                  case(PluginHelper.REF_BODY_EVE):                      special_scaling = 2;                      break;                  case(PluginHelper.REF_BODY_JOOL):                      special_scaling = 3;                      break;                  case(PluginHelper.REF_BODY_MUN):                  case(PluginHelper.REF_BODY_IKE):                      special_scaling = 0.2;                      break;                  case(PluginHelper.REF_BODY_GILLY):                  case(PluginHelper.REF_BODY_BOP):                  case(PluginHelper.REF_BODY_POL):                      special_scaling = 0.05;                      break;                  default:                      special_scaling = 1.0;                      break;              }
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The following statement contains a magic number: double Bmag = VanAllen.B0 / relrt * relmp * Math.Pow((rp / altituded)' 3) * Math.Sqrt(1 + 3 * Math.Pow(Math.Cos(mlat)' 2)) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The following statement contains a magic number: double Bmag = VanAllen.B0 / relrt * relmp * Math.Pow((rp / altituded)' 3) * Math.Sqrt(1 + 3 * Math.Pow(Math.Cos(mlat)' 2)) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldMagnitude,The following statement contains a magic number: double Bmag = VanAllen.B0 / relrt * relmp * Math.Pow((rp / altituded)' 3) * Math.Sqrt(1 + 3 * Math.Pow(Math.Cos(mlat)' 2)) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldRadial,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldRadial,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldRadial,The following statement contains a magic number: double Bmag = -2 / relrt * relmp * VanAllen.B0 * Math.Pow((rp / altituded)' 3) * Math.Cos(mlat) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,GetBeltMagneticFieldRadial,The following statement contains a magic number: double Bmag = -2 / relrt * relmp * VanAllen.B0 * Math.Pow((rp / altituded)' 3) * Math.Cos(mlat) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,getBeltMagneticFieldAzimuthal,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,getBeltMagneticFieldAzimuthal,The following statement contains a magic number: double mlat = lat / 180 * Math.PI + Math.PI / 2;
Magic Number,FNPlugin,InterstellarCelestialBodyExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarCelestialBodyExtensions.cs,getBeltMagneticFieldAzimuthal,The following statement contains a magic number: double Bmag = -relmp * VanAllen.B0 / relrt * Math.Pow((rp / altituded)' 3) * Math.Sin(mlat) * body.specialMagneticFieldScaling();
Magic Number,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,SwapFuelMode,The following statement contains a magic number: if (part.Resources[InterstellarResourcesConfiguration.Instance.Actinides].amount <= 0.01)              {                  defuelCurrentFuel();                  if (isCurrentFuelDepleted())                  {                      fuel_mode++;                      if (fuel_mode >= fuel_modes.Count) fuel_mode = 0;                      current_fuel_mode = fuel_modes[fuel_mode];                      Refuel();                  }              }
Magic Number,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,ManualRestart,The following statement contains a magic number: if (current_fuel_mode.ReactorFuels.All(fuel => getFuelAvailability(fuel) > 0.0001)) IsEnabled = true;
Magic Number,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,ReprocessFuel,The following statement contains a magic number: if (part.Resources.Contains(InterstellarResourcesConfiguration.Instance.Actinides))              {                  PartResource actinides = part.Resources[InterstellarResourcesConfiguration.Instance.Actinides];                  double new_actinides_amount = Math.Max(actinides.amount - rate' 0);                  double actinides_change = actinides.amount - new_actinides_amount;                  actinides.amount = new_actinides_amount;                    double depleted_fuels_change = actinides_change * 0.2;                  depleted_fuels_change = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.DepletedFuel' -depleted_fuels_change);                    double sum_useage_per_mw = current_fuel_mode.ReactorFuels.Sum(fuel => fuel.FuelUsePerMJ);                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels)                  {                      PartResource fuel_resource = part.Resources[fuel.FuelName];                      double fraction = sum_useage_per_mw > 0.0 ? fuel.FuelUsePerMJ / sum_useage_per_mw : 1;                      double new_fuel_amount = Math.Min(fuel_resource.amount + depleted_fuels_change * 4.0*fraction' fuel_resource.maxAmount);                      fuel_resource.amount = new_fuel_amount;                  }                    return actinides_change;              }
Magic Number,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,ReprocessFuel,The following statement contains a magic number: if (part.Resources.Contains(InterstellarResourcesConfiguration.Instance.Actinides))              {                  PartResource actinides = part.Resources[InterstellarResourcesConfiguration.Instance.Actinides];                  double new_actinides_amount = Math.Max(actinides.amount - rate' 0);                  double actinides_change = actinides.amount - new_actinides_amount;                  actinides.amount = new_actinides_amount;                    double depleted_fuels_change = actinides_change * 0.2;                  depleted_fuels_change = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.DepletedFuel' -depleted_fuels_change);                    double sum_useage_per_mw = current_fuel_mode.ReactorFuels.Sum(fuel => fuel.FuelUsePerMJ);                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels)                  {                      PartResource fuel_resource = part.Resources[fuel.FuelName];                      double fraction = sum_useage_per_mw > 0.0 ? fuel.FuelUsePerMJ / sum_useage_per_mw : 1;                      double new_fuel_amount = Math.Min(fuel_resource.amount + depleted_fuels_change * 4.0*fraction' fuel_resource.maxAmount);                      fuel_resource.amount = new_fuel_amount;                  }                    return actinides_change;              }
Magic Number,FNPlugin,InterstellarFissionMSRGC,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionMSRGC.cs,isCurrentFuelDepleted,The following statement contains a magic number: return current_fuel_mode.ReactorFuels.Any(fuel => getFuelAvailability(fuel) < 0.001);
Magic Number,FNPlugin,InterstellarFissionPBDP,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionPBDP.cs,GetCoreTempAtRadiatorTemp,The following statement contains a magic number: if (!isupgraded)              {                  if (!double.IsNaN(rad_temp) && !double.IsInfinity(rad_temp))                  {                      pfr_temp = (float)Math.Min(Math.Max(rad_temp * 1.5' optimalPebbleTemp)' tempZeroPower);                  } else                  {                      pfr_temp = optimalPebbleTemp;                  }              } else              {                  return ReactorTemp;              }
Magic Number,FNPlugin,InterstellarFissionPBDP,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarFissionPBDP.cs,GetThermalPowerAtTemp,The following statement contains a magic number: if (temp > optimalPebbleTemp && temp < tempZeroPower && !isupgraded)              {                  rel_temp_diff = (float)Math.Pow((tempZeroPower - temp) / (tempZeroPower - optimalPebbleTemp)' 0.81);              } else              {                  rel_temp_diff = 1;              }
Magic Number,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnUpdate,The following statement contains a magic number: if (getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert) {                  ScreenMessages.PostScreenMessage("Warning: Fusion Reactor plasma heating cannot be guaranteed' reducing power requirements is recommended."' 10.0f' ScreenMessageStyle.UPPER_CENTER);                  fusion_alert = true;              } else {                  fusion_alert = false;              }
Magic Number,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled)              {                  power_consumed = consumeFNResource(LaserPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  if (power_consumed < LaserPowerRequirements)  power_consumed += part.RequestResource("ElectricCharge"' (LaserPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000;                  plasma_ratio = (float)(power_consumed / LaserPowerRequirements);              }
Magic Number,FNPlugin,InterstellarInertialConfinementReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarInertialConfinementReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled)              {                  power_consumed = consumeFNResource(LaserPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  if (power_consumed < LaserPowerRequirements)  power_consumed += part.RequestResource("ElectricCharge"' (LaserPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000;                  plasma_ratio = (float)(power_consumed / LaserPowerRequirements);              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,OnUpdate,The following statement contains a magic number: if (this.IsOperational)              {                  Fields["electricalPowerConsumptionStr"].guiActive = true;                  Fields["heatProductionStr"].guiActive = true;                  Fields["efficiencyStr"].guiActive = true;                  electricalPowerConsumptionStr = _electrical_consumption_f.ToString("0.00") + " MW";                  heatProductionStr = _heat_production_f.ToString("0.00") + " MW";                  efficiencyStr = _current_propellant != null ? (_current_propellant.Efficiency * 100.0).ToString("0.0") + "%" : "";              } else              {                  Fields["electricalPowerConsumptionStr"].guiActive = false;                  Fields["heatProductionStr"].guiActive = false;                  Fields["efficiencyStr"].guiActive = false;              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  ElectricEngineControllerFX.getAllPropellants().ForEach(prop => part.Effect(prop.ParticleFXName' 0)); // set all FX to zero                    if (_current_propellant != null && _attached_engine != null)                  {                      updateISP();                      int engine_count = Math.Max(vessel.FindPartModulesImplementing<ElectricEngineControllerFX>().Count(ee => ee.IsOperational)'1); // max of operational electric engines and 1                      double total_max_thrust = evaluateMaxThrust();                      double thrust_per_engine = total_max_thrust / (double)engine_count;                      double power_per_engine = Math.Min(0.5 * _attached_engine.currentThrottle * thrust_per_engine * _current_propellant.IspMultiplier * baseISP / 1000.0 * 9.81' maxPower * _current_propellant.Efficiency);                      double power_received = consumeFNResource(power_per_engine * TimeWarp.fixedDeltaTime / _current_propellant.Efficiency' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                      double heat_to_produce = power_received * (1.0 - _current_propellant.Efficiency);                      double heat_production = supplyFNResource(heat_to_produce * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                      // update GUI Values                      _electrical_consumption_f = (float)power_received;                      _heat_production_f = (float)heat_production;                      // thrust values                      double thrust_ratio = power_per_engine > 0 ? Math.Min(power_received / power_per_engine' 1.0) : 1;                      double actual_max_thrust = _current_propellant.Efficiency * 2000.0f * power_received / (_current_propellant.IspMultiplier * baseISP * 9.81f * _attached_engine.currentThrottle);                        if (_attached_engine.currentThrottle > 0)                      {                          if (!double.IsNaN(actual_max_thrust) && !double.IsInfinity(actual_max_thrust))                          {                              _attached_engine.maxThrust = Mathf.Max((float)actual_max_thrust' 0.00001f);                          } else                          {                              _attached_engine.maxThrust = 0.00001f;                          }                          float fx_ratio = Mathf.Min(_electrical_consumption_f / maxPower' _attached_engine.finalThrust / _attached_engine.maxThrust);                          part.Effect(_current_propellant.ParticleFXName' fx_ratio);                      }                        if (isupgraded)                      {                          List<PartResource> vacuum_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.VacuumPlasma).ToList();                          double vacuum_plasma_needed = vacuum_resources.Sum(vc => vc.maxAmount - vc.amount);                          double vacuum_plasma_current = vacuum_resources.Sum(vc => vc.amount);                            if (vessel.IsInAtmosphere())                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' vacuum_plasma_current);                          else                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' -vacuum_plasma_needed);                      }                  }              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  ElectricEngineControllerFX.getAllPropellants().ForEach(prop => part.Effect(prop.ParticleFXName' 0)); // set all FX to zero                    if (_current_propellant != null && _attached_engine != null)                  {                      updateISP();                      int engine_count = Math.Max(vessel.FindPartModulesImplementing<ElectricEngineControllerFX>().Count(ee => ee.IsOperational)'1); // max of operational electric engines and 1                      double total_max_thrust = evaluateMaxThrust();                      double thrust_per_engine = total_max_thrust / (double)engine_count;                      double power_per_engine = Math.Min(0.5 * _attached_engine.currentThrottle * thrust_per_engine * _current_propellant.IspMultiplier * baseISP / 1000.0 * 9.81' maxPower * _current_propellant.Efficiency);                      double power_received = consumeFNResource(power_per_engine * TimeWarp.fixedDeltaTime / _current_propellant.Efficiency' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                      double heat_to_produce = power_received * (1.0 - _current_propellant.Efficiency);                      double heat_production = supplyFNResource(heat_to_produce * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                      // update GUI Values                      _electrical_consumption_f = (float)power_received;                      _heat_production_f = (float)heat_production;                      // thrust values                      double thrust_ratio = power_per_engine > 0 ? Math.Min(power_received / power_per_engine' 1.0) : 1;                      double actual_max_thrust = _current_propellant.Efficiency * 2000.0f * power_received / (_current_propellant.IspMultiplier * baseISP * 9.81f * _attached_engine.currentThrottle);                        if (_attached_engine.currentThrottle > 0)                      {                          if (!double.IsNaN(actual_max_thrust) && !double.IsInfinity(actual_max_thrust))                          {                              _attached_engine.maxThrust = Mathf.Max((float)actual_max_thrust' 0.00001f);                          } else                          {                              _attached_engine.maxThrust = 0.00001f;                          }                          float fx_ratio = Mathf.Min(_electrical_consumption_f / maxPower' _attached_engine.finalThrust / _attached_engine.maxThrust);                          part.Effect(_current_propellant.ParticleFXName' fx_ratio);                      }                        if (isupgraded)                      {                          List<PartResource> vacuum_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.VacuumPlasma).ToList();                          double vacuum_plasma_needed = vacuum_resources.Sum(vc => vc.maxAmount - vc.amount);                          double vacuum_plasma_current = vacuum_resources.Sum(vc => vc.amount);                            if (vessel.IsInAtmosphere())                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' vacuum_plasma_current);                          else                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' -vacuum_plasma_needed);                      }                  }              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  ElectricEngineControllerFX.getAllPropellants().ForEach(prop => part.Effect(prop.ParticleFXName' 0)); // set all FX to zero                    if (_current_propellant != null && _attached_engine != null)                  {                      updateISP();                      int engine_count = Math.Max(vessel.FindPartModulesImplementing<ElectricEngineControllerFX>().Count(ee => ee.IsOperational)'1); // max of operational electric engines and 1                      double total_max_thrust = evaluateMaxThrust();                      double thrust_per_engine = total_max_thrust / (double)engine_count;                      double power_per_engine = Math.Min(0.5 * _attached_engine.currentThrottle * thrust_per_engine * _current_propellant.IspMultiplier * baseISP / 1000.0 * 9.81' maxPower * _current_propellant.Efficiency);                      double power_received = consumeFNResource(power_per_engine * TimeWarp.fixedDeltaTime / _current_propellant.Efficiency' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                      double heat_to_produce = power_received * (1.0 - _current_propellant.Efficiency);                      double heat_production = supplyFNResource(heat_to_produce * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                      // update GUI Values                      _electrical_consumption_f = (float)power_received;                      _heat_production_f = (float)heat_production;                      // thrust values                      double thrust_ratio = power_per_engine > 0 ? Math.Min(power_received / power_per_engine' 1.0) : 1;                      double actual_max_thrust = _current_propellant.Efficiency * 2000.0f * power_received / (_current_propellant.IspMultiplier * baseISP * 9.81f * _attached_engine.currentThrottle);                        if (_attached_engine.currentThrottle > 0)                      {                          if (!double.IsNaN(actual_max_thrust) && !double.IsInfinity(actual_max_thrust))                          {                              _attached_engine.maxThrust = Mathf.Max((float)actual_max_thrust' 0.00001f);                          } else                          {                              _attached_engine.maxThrust = 0.00001f;                          }                          float fx_ratio = Mathf.Min(_electrical_consumption_f / maxPower' _attached_engine.finalThrust / _attached_engine.maxThrust);                          part.Effect(_current_propellant.ParticleFXName' fx_ratio);                      }                        if (isupgraded)                      {                          List<PartResource> vacuum_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.VacuumPlasma).ToList();                          double vacuum_plasma_needed = vacuum_resources.Sum(vc => vc.maxAmount - vc.amount);                          double vacuum_plasma_current = vacuum_resources.Sum(vc => vc.amount);                            if (vessel.IsInAtmosphere())                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' vacuum_plasma_current);                          else                              part.RequestResource(InterstellarResourcesConfiguration.Instance.VacuumPlasma' -vacuum_plasma_needed);                      }                  }              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,upgradePartModule,The following statement contains a magic number: if (!vacplasmaadded && type == (int)ElectricEngineType.VACUUMTHRUSTER)              {                  vacplasmaadded = true;                  ConfigNode node = new ConfigNode("RESOURCE");                  node.AddValue("name"' InterstellarResourcesConfiguration.Instance.VacuumPlasma);                  node.AddValue("maxAmount"' 10);                  node.AddValue("amount"' 10);                  part.AddResource(node);              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,upgradePartModule,The following statement contains a magic number: if (!vacplasmaadded && type == (int)ElectricEngineType.VACUUMTHRUSTER)              {                  vacplasmaadded = true;                  ConfigNode node = new ConfigNode("RESOURCE");                  node.AddValue("name"' InterstellarResourcesConfiguration.Instance.VacuumPlasma);                  node.AddValue("maxAmount"' 10);                  node.AddValue("amount"' 10);                  part.AddResource(node);              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,GetInfo,The following statement contains a magic number: double thrust_per_mw = 2e6 / 9.81 / baseISP / 1000.0;
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,GetInfo,The following statement contains a magic number: double thrust_per_mw = 2e6 / 9.81 / baseISP / 1000.0;
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,GetInfo,The following statement contains a magic number: double thrust_per_mw = 2e6 / 9.81 / baseISP / 1000.0;
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,GetInfo,The following statement contains a magic number: props.ForEach(prop =>              {                  double ispProp = baseISP * prop.IspMultiplier;                  double thrustProp = thrust_per_mw / prop.IspMultiplier * prop.Efficiency;                  return_str = return_str + "---" + prop.PropellantGUIName + "---\nThrust: " + thrustProp.ToString("0.0000") + " kN per MW\nEfficiency: " + (prop.Efficiency * 100.0).ToString("0.00") + "%\nISP: " + ispProp.ToString("0.00") + "s\n";              });
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,evaluateMaxThrust,The following statement contains a magic number: if (_current_propellant != null)              {                  double total_power_output = getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES);                  double final_thrust_store = _current_propellant.Efficiency * 2000.0 * total_power_output / (baseISP * _current_propellant.IspMultiplier * 9.81f);                  return final_thrust_store;              }
Magic Number,FNPlugin,ElectricEngineControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricEngineControllerFX.cs,updatePropellantBar,The following statement contains a magic number: if (_current_propellant != null)              {                  List<PartResource> partresources = part.GetConnectedResources(_current_propellant.Propellant.name).ToList();                  float currentpropellant = (float)partresources.Sum(pr => pr.amount);                  float maxpropellant = (float)partresources.Sum(pr => pr.maxAmount);                  if (fuel_gauge != null && fuel_gauge.infoBoxRef != null)                  {                      if (_attached_engine.isOperational)                      {                          if (!fuel_gauge.infoBoxRef.expanded) fuel_gauge.infoBoxRef.Expand();                          fuel_gauge.length = 2;                          fuel_gauge.SetMessage(_current_propellant.PropellantGUIName);                          fuel_gauge.SetValue(maxpropellant > 0 ? currentpropellant / maxpropellant : 0);                      } else                      {                          if (!fuel_gauge.infoBoxRef.collapsed) fuel_gauge.infoBoxRef.Collapse();                      }                  }              } else              {                  if (fuel_gauge != null && fuel_gauge.infoBoxRef != null)                  {                      if (!fuel_gauge.infoBoxRef.collapsed) fuel_gauge.infoBoxRef.Collapse();                  }              }
Magic Number,FNPlugin,ElectricRCSController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricRCSController.cs,FixedUpdate,The following statement contains a magic number: if (attachedRCS != null && HighLogic.LoadedSceneIsFlight && vessel.ActionGroups[KSPActionGroup.RCS]) {                  double total_thrust = attachedRCS.thrustForces.Sum(frc => frc);                  float curve_eval_point = (float)Math.Min(FlightGlobals.getStaticPressure(vessel.transform.position)' 1.0);                  double currentIsp = attachedRCS.atmosphereCurve.Evaluate(curve_eval_point);                    double power_required = total_thrust * currentIsp * 9.82 * 0.5 / 1000.0;                  double power_received = consumeFNResource(power_required * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  electrical_consumption_f = (float)power_received;                  double power_ratio = power_required > 0 ? Math.Min(power_received / power_required' 1.0) : 1;                  attachedRCS.thrusterPower = Mathf.Max(maxThrust * ((float)power_ratio)' 0.0001f);                  float thrust_ratio = Mathf.Min(Mathf.Min((float)power_ratio' (float)(total_thrust / maxThrust))' 1.0f)*0.125f;              }
Magic Number,FNPlugin,ElectricRCSController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricRCSController.cs,FixedUpdate,The following statement contains a magic number: if (attachedRCS != null && HighLogic.LoadedSceneIsFlight && vessel.ActionGroups[KSPActionGroup.RCS]) {                  double total_thrust = attachedRCS.thrustForces.Sum(frc => frc);                  float curve_eval_point = (float)Math.Min(FlightGlobals.getStaticPressure(vessel.transform.position)' 1.0);                  double currentIsp = attachedRCS.atmosphereCurve.Evaluate(curve_eval_point);                    double power_required = total_thrust * currentIsp * 9.82 * 0.5 / 1000.0;                  double power_received = consumeFNResource(power_required * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  electrical_consumption_f = (float)power_received;                  double power_ratio = power_required > 0 ? Math.Min(power_received / power_required' 1.0) : 1;                  attachedRCS.thrusterPower = Mathf.Max(maxThrust * ((float)power_ratio)' 0.0001f);                  float thrust_ratio = Mathf.Min(Mathf.Min((float)power_ratio' (float)(total_thrust / maxThrust))' 1.0f)*0.125f;              }
Magic Number,FNPlugin,ElectricRCSController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ElectricRCSController.cs,FixedUpdate,The following statement contains a magic number: if (attachedRCS != null && HighLogic.LoadedSceneIsFlight && vessel.ActionGroups[KSPActionGroup.RCS]) {                  double total_thrust = attachedRCS.thrustForces.Sum(frc => frc);                  float curve_eval_point = (float)Math.Min(FlightGlobals.getStaticPressure(vessel.transform.position)' 1.0);                  double currentIsp = attachedRCS.atmosphereCurve.Evaluate(curve_eval_point);                    double power_required = total_thrust * currentIsp * 9.82 * 0.5 / 1000.0;                  double power_received = consumeFNResource(power_required * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  electrical_consumption_f = (float)power_received;                  double power_ratio = power_required > 0 ? Math.Min(power_received / power_required' 1.0) : 1;                  attachedRCS.thrusterPower = Mathf.Max(maxThrust * ((float)power_ratio)' 0.0001f);                  float thrust_ratio = Mathf.Min(Mathf.Min((float)power_ratio' (float)(total_thrust / maxThrust))' 1.0f)*0.125f;              }
Magic Number,FNPlugin,FlightUIStarter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FlightUIStarter.cs,Start,The following statement contains a magic number: if (!PluginHelper.using_toolbar) {                  button_position = new Rect(Screen.width - guibuttontexture.width' Screen.height - guibuttontexture.height - 150' guibuttontexture.width' guibuttontexture.height);              }
Magic Number,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The following statement contains a magic number: foreach (Vessel conf_vess in FlightGlobals.Vessels) {                  String vessel_probe_node_string = string.Concat("VESSEL_SEISMIC_PROBE_"' conf_vess.id.ToString());                    if (config.HasNode(vessel_probe_node_string)) {                      ConfigNode probe_node = config.GetNode(vessel_probe_node_string);                        // If the seismometer is inactive' skip it.                      bool is_active = false;                      if (probe_node.HasValue("is_active")) {                          bool.TryParse(probe_node.GetValue("is_active")' out is_active);                          if (!is_active) {                              continue;                          }                      }                        // If the seismometer is on another planet' skip it.                      int planet = -1;                      if (probe_node.HasValue("celestial_body")) {                          int.TryParse(probe_node.GetValue("celestial_body")' out planet);                          if (planet != body) {                              continue;                          }                      }                        // do sciency stuff                      Vector3d surface_vector = (conf_vess.transform.position - FlightGlobals.Bodies[body].transform.position);                      surface_vector = surface_vector.normalized;                      if (first) {                          first = false;                          net_vector = surface_vector;                          net_science = 50 * PluginHelper.getImpactorScienceMultiplier(body);                          initial_science = net_science;                      } else {                          net_science += (1.0 - Vector3d.Dot(surface_vector' net_vector.normalized)) * 50 * PluginHelper.getImpactorScienceMultiplier(body);                          net_vector = net_vector + surface_vector;                      }                  }              }
Magic Number,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The following statement contains a magic number: foreach (Vessel conf_vess in FlightGlobals.Vessels) {                  String vessel_probe_node_string = string.Concat("VESSEL_SEISMIC_PROBE_"' conf_vess.id.ToString());                    if (config.HasNode(vessel_probe_node_string)) {                      ConfigNode probe_node = config.GetNode(vessel_probe_node_string);                        // If the seismometer is inactive' skip it.                      bool is_active = false;                      if (probe_node.HasValue("is_active")) {                          bool.TryParse(probe_node.GetValue("is_active")' out is_active);                          if (!is_active) {                              continue;                          }                      }                        // If the seismometer is on another planet' skip it.                      int planet = -1;                      if (probe_node.HasValue("celestial_body")) {                          int.TryParse(probe_node.GetValue("celestial_body")' out planet);                          if (planet != body) {                              continue;                          }                      }                        // do sciency stuff                      Vector3d surface_vector = (conf_vess.transform.position - FlightGlobals.Bodies[body].transform.position);                      surface_vector = surface_vector.normalized;                      if (first) {                          first = false;                          net_vector = surface_vector;                          net_science = 50 * PluginHelper.getImpactorScienceMultiplier(body);                          initial_science = net_science;                      } else {                          net_science += (1.0 - Vector3d.Dot(surface_vector' net_vector.normalized)) * 50 * PluginHelper.getImpactorScienceMultiplier(body);                          net_vector = net_vector + surface_vector;                      }                  }              }
Magic Number,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The following statement contains a magic number: net_science = Math.Min(net_science' initial_science * 3.5);
Magic Number,FNPlugin,FNImpactorModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNImpactorModule.cs,onVesselAboutToBeDestroyed,The following statement contains a magic number: if (net_science > 0 && !double.IsInfinity(net_science) && !double.IsNaN(net_science)) {                    double science_coeff = -science_experiment_number / 2.0;                  net_science = net_science * Math.Exp(science_coeff);                  ScreenMessages.PostScreenMessage("Impact Recorded' science report can now be accessed from one of your accelerometers deployed on this body."' 5f' ScreenMessageStyle.UPPER_CENTER);                  this.lastImpactTime = Planetarium.GetUniversalTime();                  Debug.Log("[KSP Interstellar] Impactor: Impact registered!");                    ConfigNode impact_node = new ConfigNode(vessel_impact_node_string);                  impact_node.AddValue(string.Intern("transmitted")' bool.FalseString);                  impact_node.AddValue(string.Intern("vesselname")' vessel.vesselName);                  impact_node.AddValue(string.Intern("science")' net_science);                  impact_node.AddValue(string.Intern("number")' (science_experiment_number + 1).ToString("0"));                  science_node.AddNode(impact_node);                    config.Save(PluginHelper.getPluginSaveFilePath());              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNLCMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNLCMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.Splashed) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Liquid"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSOceanicResource oceanic_resource in ORSOceanicResourceHandler.getOceanicCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(oceanic_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (oceanic_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (oceanic_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (oceanic_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (oceanic_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length * 100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                } else {                  GUILayout.Label("--No Ocean to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNMassSpectrometer,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNMassSpectrometer.cs,Window,The following statement contains a magic number: if (vessel.altitude < PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                  if (analysis_count > analysis_length) {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Gas"' bold_label' GUILayout.Width(150));                      GUILayout.Label("Abundance"' bold_label' GUILayout.Width(150));                      GUILayout.EndHorizontal();                      GUILayout.Space(5);                      foreach (ORSAtmosphericResource atmospheric_resource in ORSAtmosphericResourceHandler.getAtmosphericCompositionForBody(vessel.mainBody.flightGlobalsIndex)) {                          GUILayout.BeginHorizontal();                          GUILayout.Label(atmospheric_resource.getDisplayName()' GUILayout.Width(150));                          string resource_abundance_str;                          if (atmospheric_resource.getResourceAbundance() > 0.001) {                              resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 100.0).ToString() + "%";                          } else {                              if (atmospheric_resource.getResourceAbundance() > 0.000001) {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e6).ToString() + " ppm";                              } else {                                  resource_abundance_str = (atmospheric_resource.getResourceAbundance() * 1e9).ToString() + " ppb";                              }                          }                          GUILayout.Label(resource_abundance_str' GUILayout.Width(150));                          GUILayout.EndHorizontal();                      }                  } else {                      double percent_analysed = (double)analysis_count / analysis_length*100;                      GUILayout.BeginHorizontal();                      GUILayout.Label("Analysing..."' GUILayout.Width(150));                      GUILayout.Label(percent_analysed.ToString("0.00") + "%"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                                } else {                  GUILayout.Label("--No Atmosphere to Sample--"' GUILayout.ExpandWidth(true));                  analysis_count = 0;              }
Magic Number,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,OnFixedUpdate,The following statement contains a magic number: if (cryostat_resource != null && cryostat_resource.amount > 0) {                  double charge = consumeFNResource(powerReqKW / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0;                  if (charge <= powerReqKW * TimeWarp.fixedDeltaTime) {                      double rem_charge = powerReqKW * TimeWarp.fixedDeltaTime - charge;                      charge += ORSHelper.fixedRequestResource(part' "ElectricCharge"' rem_charge);                  }                  power_d = charge/TimeWarp.fixedDeltaTime;                    if (charge >= powerReqKW) {                      cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - boilOffRate * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount);                  } else {                      cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - (boilOffRate + boilOffAddition) * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount*boilOffMultiplier);                  }              }
Magic Number,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,OnFixedUpdate,The following statement contains a magic number: if (cryostat_resource != null && cryostat_resource.amount > 0) {                  double charge = consumeFNResource(powerReqKW / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0;                  if (charge <= powerReqKW * TimeWarp.fixedDeltaTime) {                      double rem_charge = powerReqKW * TimeWarp.fixedDeltaTime - charge;                      charge += ORSHelper.fixedRequestResource(part' "ElectricCharge"' rem_charge);                  }                  power_d = charge/TimeWarp.fixedDeltaTime;                    if (charge >= powerReqKW) {                      cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - boilOffRate * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount);                  } else {                      cryostat_resource.amount = Math.Max(0' cryostat_resource.amount - (boilOffRate + boilOffAddition) * TimeWarp.fixedDeltaTime * cryostat_resource.maxAmount*boilOffMultiplier);                  }              }
Magic Number,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,getPowerPriority,The following statement contains a magic number: return 2;
Magic Number,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,GetInfo,The following statement contains a magic number: return "Power Requirements: " + powerReqKW.ToString("0.0") + " KW\n Powered Boil Off Fraction: " + boilOffRate * 86400 + " /day\n Unpowered Boil Off Fraction: " + (boilOffRate + boilOffAddition)* boilOffMultiplier * 86400 + " /day";
Magic Number,FNPlugin,FNModuleCryostat,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleCryostat.cs,GetInfo,The following statement contains a magic number: return "Power Requirements: " + powerReqKW.ToString("0.0") + " KW\n Powered Boil Off Fraction: " + boilOffRate * 86400 + " /day\n Unpowered Boil Off Fraction: " + (boilOffRate + boilOffAddition)* boilOffMultiplier * 86400 + " /day";
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,updatePropellantBar,The following statement contains a magic number: if (fuel_gauge != null  && fuel_gauge.infoBoxRef != null) {    				if (myAttachedEngine.isOperational) {  					if (!fuel_gauge.infoBoxRef.expanded) {  						fuel_gauge.infoBoxRef.Expand ();  					}  					fuel_gauge.length = 2;  					if (maxpropellant > 0) {  						fuel_gauge.SetValue (currentpropellant / maxpropellant);  					} else {  						fuel_gauge.SetValue (0);  					}  				} else {  					if (!fuel_gauge.infoBoxRef.collapsed) {  						fuel_gauge.infoBoxRef.Collapse ();  					}  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,setupPropellants,The following statement contains a magic number: for (int i = 0; i < assprops.Length; ++i) {  				fuelmode = chosenpropellant.GetValue("guiName");  				ispMultiplier = float.Parse(chosenpropellant.GetValue("ispMultiplier"));  				isLFO = bool.Parse(chosenpropellant.GetValue("isLFO"));  				currentpropellant_is_jet = false;  				if(chosenpropellant.HasValue("isJet")) {  					currentpropellant_is_jet = bool.Parse(chosenpropellant.GetValue("isJet"));  				}  				//print (currentpropellant_is_jet);    				Propellant curprop = new Propellant();  				curprop.Load(assprops[i]);  				if (curprop.drawStackGauge) {  					curprop.drawStackGauge = false;  					if (currentpropellant_is_jet) {  						fuel_gauge.SetMessage("Atmosphere");  					}else {  						fuel_gauge.SetMessage(curprop.name);                          myAttachedEngine.thrustPercentage = 100;                          part.temperature = 1;  					}  					fuel_gauge.SetMsgBgColor(XKCDColors.DarkLime);  					fuel_gauge.SetMsgTextColor(XKCDColors.ElectricLime);  					fuel_gauge.SetProgressBarColor(XKCDColors.Yellow);  					fuel_gauge.SetProgressBarBgColor(XKCDColors.DarkLime);  					fuel_gauge.SetValue(0f);  				}  				list_of_propellants.Add(curprop);  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;  				newISP.Add (0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 0.7f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 0.9f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;  				newISP.Add (0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 0.7f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 0.9f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;  				newISP.Add (0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 0.7f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 0.9f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;  				newISP.Add (0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 0.7f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 0.9f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                  }  				double thermal_power_received = consumeFNResource (assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle);  				double engine_thrust = engineMaxThrust;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.0 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime/vcurve_at_current_velocity;                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,getIntakeAvailable,The following statement contains a magic number: return 0.00001;
Magic Number,FNPlugin,FNNozzleControllerFX,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleControllerFX.cs,getFuelRateThermalJetsForVessel,The following statement contains a magic number: return 0.1;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,ActivateSabatier,The following statement contains a magic number: active_mode = 2;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,ElectrolyseWater,The following statement contains a magic number: active_mode = 3;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,AnthraquinoneProcess,The following statement contains a magic number: active_mode = 4;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,ProduceMonoprop,The following statement contains a magic number: active_mode = 5;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,UraniumAmmonolysis,The following statement contains a magic number: active_mode = 6;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,HaberProcess,The following statement contains a magic number: active_mode = 7;
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnStart,The following statement contains a magic number: if (anim != null) {                  anim[animName].layer = 1;                  if (IsEnabled) {                      anim.Blend(animName' 2' 0);                  } else {                      play_down = false;                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName' 0' 1);                  }              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Events["StopActivity"].guiName = "Stop " + modes[active_mode];                  Fields["powerStr"].guiActive = true;                  statusTitle = modes[active_mode] + "...";                  if (active_mode == 0) { // Fuel Reprocessing                      double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                      Fields["reprocessingRate"].guiActive = true;                      reprocessingRate = reprocessing_rate_d.ToString("0.0") + " Hours Remaining";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 1) { // Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 2) { // Sabatier ISRU                      Fields["sabatierRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                      sabatierRate = "CH4 " + (methane_rate_d * 86400).ToString("0.00") + " mT/day";                  } else if (active_mode == 3) { // Water Electrolysis                      Fields["electrolysisRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      double electrolysisratetmp = -electrolysis_rate_d * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + " mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Anthraquinone Process                      Fields["anthraquinoneRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseAnthraquiononePowerConsumption;                      double anthraratetmp = anthra_rate_d * 3600;                      anthraquinoneRate = anthraratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAnthraquiononePowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 5) { // Produce MonoProp                      Fields["monopropellantRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.basePechineyUgineKuhlmannPowerConsumption;                      double monoratetmp = monoprop_rate_d * 3600;                      monopropellantRate = monoratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePechineyUgineKuhlmannPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 6) { // Uranium Ammonolysis                      Fields["uraniumNitrideRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseUraniumAmmonolysisConsumption;                      double uraniumnitrideratetmp = uranium_nitride_rate_d * 3600;                      uraniumNitrideRate = uraniumnitrideratetmp.ToString("0.0") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseUraniumAmmonolysisConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 7) { // Haber Process                      Fields["ammoniaRate"].guiActive = true;                      double currentpowertmp = electrical_power_ratio * GameConstants.baseHaberProcessPowerConsumption;                      double ammoniaratetmp = ammonia_rate_d * 3600;                      ammoniaRate = ammoniaratetmp.ToString("0.00") + " mT/hour";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseHaberProcessPowerConsumption.ToString("0.00") + "MW";                  }              } else {                  if (play_down && anim != null) {                      anim[animName].speed = -1f;                      anim[animName].normalizedTime = 0f;                      anim.Blend(animName'0'1);                      play_down = false;                  }                  statusTitle = "Offline";              }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRefinery.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(reprocessor.PowerRequirements' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / reprocessor.PowerRequirements);                      reprocessor.UpdateFrame(electrical_power_ratio);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_d = reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour();                      } else {                          ScreenMessages.PostScreenMessage("Unable to Reprocess Nuclear Fuel"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                                      } else if (active_mode == 1) { // Aluminium Electrolysis                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      double density_alumina = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Alumina).density;                      double aluminium_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Aluminium).density;                      double oxygen_density = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      electrolysis_rate_d = electrical_power_provided / GameConstants.aluminiumElectrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double alumina_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Alumina' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_alumina) / TimeWarp.fixedDeltaTime * density_alumina;                      double mass_rate = alumina_consumption_rate;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Aluminium' -mass_rate * TimeWarp.fixedDeltaTime / aluminium_density) * aluminium_density;                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -GameConstants.aluminiumElectrolysisMassRatio * mass_rate * TimeWarp.fixedDeltaTime / oxygen_density) * oxygen_density;                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime;                  } else if (active_mode == 2) { // Sabatier ISRU                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Carbon Dioxide") >= 0.01) {                          double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                          electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon * vessel.atmDensity / TimeWarp.fixedDeltaTime;                          double hydrogen_rate = electrolysis_rate_d / (1 + GameConstants.electrolysisMassRatio);                          double oxygen_rate = hydrogen_rate * (GameConstants.electrolysisMassRatio-1);                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                          double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                          double density_ch4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Methane).density;                          double h2_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate * TimeWarp.fixedDeltaTime / density_h / 2);                          if (h2_rate > 0) {                              double o_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                              double methane_rate = oxygen_rate * 2;                              methane_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -methane_rate * TimeWarp.fixedDeltaTime / density_ch4) * density_ch4 / TimeWarp.fixedDeltaTime;                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient C02 insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 3) { // Water Electrolysis                      double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Hydrogen).density;                      double density_o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Oxygen).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseELCPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseELCPowerConsumption);                      electrolysis_rate_d = electrical_power_provided / GameConstants.electrolysisEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' electrolysis_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      double hydrogen_rate = water_consumption_rate / (1 + GameConstants.electrolysisMassRatio);                      double oxygen_rate = hydrogen_rate * GameConstants.electrolysisMassRatio;                      electrolysis_rate_d = part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' -hydrogen_rate * TimeWarp.fixedDeltaTime / density_h);                      electrolysis_rate_d += part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -oxygen_rate * TimeWarp.fixedDeltaTime / density_o);                      electrolysis_rate_d = electrolysis_rate_d / TimeWarp.fixedDeltaTime * density_h;                  } else if (active_mode == 4) { // Anthraquinone Process                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseAnthraquiononePowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAnthraquiononePowerConsumption);                      anthra_rate_d = electrical_power_provided / GameConstants.anthraquinoneEnergyPerTon / TimeWarp.fixedDeltaTime;                      double water_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Water' anthra_rate_d * TimeWarp.fixedDeltaTime / density_h2o) / TimeWarp.fixedDeltaTime * density_h2o;                      anthra_rate_d = -part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' -water_consumption_rate * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (water_consumption_rate <= 0 && electrical_power_ratio > 0) {                          ScreenMessages.PostScreenMessage("Water is required to perform the Anthraquinone Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  } else if (active_mode == 5) { // Monoprop Production                      double density_h2o2 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                      double density_h2o = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Water).density;                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double electrical_power_provided = consumeFNResource((GameConstants.basePechineyUgineKuhlmannPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePechineyUgineKuhlmannPowerConsumption);                      monoprop_rate_d = electrical_power_provided / GameConstants.pechineyUgineKuhlmannEnergyPerTon / TimeWarp.fixedDeltaTime;                      double ammonia_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.Ammonia' 0.5 * monoprop_rate_d * (1 - GameConstants.pechineyUgineKuhlmannMassRatio) * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                      double h202_consumption_rate = part.RequestResource(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide' 0.5 * monoprop_rate_d * GameConstants.pechineyUgineKuhlmannMassRatio * TimeWarp.fixedDeltaTime / density_h2o2) * density_h2o2 / TimeWarp.fixedDeltaTime;                      if (ammonia_consumption_rate > 0 && h202_consumption_rate > 0) {                          double mono_prop_produciton_rate = ammonia_consumption_rate + h202_consumption_rate;                          double density_monoprop = PartResourceLibrary.Instance.GetDefinition("MonoPropellant").density;                          monoprop_rate_d = -ORSHelper.fixedRequestResource(part'"MonoPropellant"' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime / density_monoprop)*density_monoprop/TimeWarp.fixedDeltaTime;                          ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Water' -mono_prop_produciton_rate * TimeWarp.fixedDeltaTime * 1.12436683185 / density_h2o);                      } else {                          if (electrical_power_ratio > 0) {                              monoprop_rate_d = 0;                              ScreenMessages.PostScreenMessage("Ammonia and Hydrogen Peroxide are required to produce Monopropellant."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                  } else if (active_mode == 6) {                      double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                      double density_uf4 = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumTetraflouride).density;                      double density_un = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.UraniumNitride).density;                      double electrical_power_provided = consumeFNResource((GameConstants.baseUraniumAmmonolysisConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseUraniumAmmonolysisConsumption);                      double lpersec = GameConstants.baseUraniumAmmonolysisRate * electrical_power_ratio;                      double uf4persec = lpersec * 1.24597 / density_uf4;                      double unpersec = lpersec / density_un;                      double ammoniapersec = lpersec * 0.901 / density_ammonia;                      double uf4_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumTetraflouride' uf4persec * TimeWarp.fixedDeltaTime);                      double ammonia_rate = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' uf4persec * TimeWarp.fixedDeltaTime);                      if (uf4_rate > 0 && ammonia_rate > 0) {                          uranium_nitride_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.UraniumNitride' -uf4_rate * density_uf4 / 1.24597 / density_un)/TimeWarp.fixedDeltaTime*density_un;                      } else {                          if (electrical_power_ratio > 0) {                              uranium_nitride_rate_d = 0;                              ScreenMessages.PostScreenMessage("Uranium Tetraflouride and Ammonia are required to produce Uranium Nitride."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                              IsEnabled = false;                          }                      }                    } else if (active_mode == 7) {                      if (FlightGlobals.getStaticPressure(vessel.transform.position) * ORSAtmosphericResourceHandler.getAtmosphericResourceContentByDisplayName(vessel.mainBody.flightGlobalsIndex' "Nitrogen") >= 0.1) {                          double density_ammonia = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Ammonia).density;                          double density_h = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.HydrogenPeroxide).density;                          double electrical_power_provided = consumeFNResource((GameConstants.baseHaberProcessPowerConsumption) * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseHaberProcessPowerConsumption);                          double hydrogen_rate_t = electrical_power_provided / GameConstants.baseHaberProcessEnergyPerTon * GameConstants.ammoniaHydrogenFractionByMass/TimeWarp.fixedDeltaTime;                          double ammonia_rate_to_add_t = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Hydrogen' hydrogen_rate_t * TimeWarp.fixedDeltaTime / density_h) * density_h / GameConstants.ammoniaHydrogenFractionByMass / TimeWarp.fixedDeltaTime;                          if (ammonia_rate_to_add_t > 0) {                              ammonia_rate_d = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Ammonia' -ammonia_rate_to_add_t * TimeWarp.fixedDeltaTime / density_ammonia) * density_ammonia / TimeWarp.fixedDeltaTime;                          } else {                              if (electrical_power_ratio > 0) {                                  ScreenMessages.PostScreenMessage("Hydrogen is required to perform the Haber Process."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  IsEnabled = false;                              }                          }                      } else {                          ScreenMessages.PostScreenMessage("Ambient Nitrogen Insufficient."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                    }              } else {                                }
Magic Number,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The following statement contains a magic number: if (config.HasNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper())) {                  ConfigNode planet_data = config.GetNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper());                  foreach (ConfigNode probe_data in planet_data.nodes) {                      if (probe_data.name.Contains("IMPACT_")) {                          science_vess_ref = probe_data.name;                          bool transmitted = false;                          string vessel_name = "";                          float science_amount = 0;                          int exp_number = 1;                          if (probe_data.HasValue("transmitted")) {                              transmitted = bool.Parse(probe_data.GetValue("transmitted"));                          }                          if (probe_data.HasValue("vesselname")) {                              vessel_name = probe_data.GetValue("vesselname");                          }                          if (probe_data.HasValue("science")) {                              science_amount = float.Parse(probe_data.GetValue("science"));                          }                          if (probe_data.HasValue("number")) {                              exp_number = int.Parse(probe_data.GetValue("number"));                          }                          if (!transmitted) {                              ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.SrfLanded' vessel.mainBody' vessel.mainBody.name + "'s surface.");                              if (subject == null) {                                  return false;                              }                              result_string =  vessel_name + " impacted into " + vessel.mainBody.name + " producing seismic activity.  From this data' information on the structure of " + vessel.mainBody.name + "'s crust can be determined.";                              transmit_value = science_amount;                              recovery_value = science_amount;                              subject.subjectValue = 1;                              subject.scientificValue = 1;                              subject.scienceCap = 50 * PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex)*10;                              //subject.science = 0;                              data_size = science_amount * 2.5f;                              science_data = new ScienceData(science_amount' 1' 0' subject.id' "Impactor Data");                              ref_value = 50*PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex);                              return true;                          }                      }                  }              }
Magic Number,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The following statement contains a magic number: if (config.HasNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper())) {                  ConfigNode planet_data = config.GetNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper());                  foreach (ConfigNode probe_data in planet_data.nodes) {                      if (probe_data.name.Contains("IMPACT_")) {                          science_vess_ref = probe_data.name;                          bool transmitted = false;                          string vessel_name = "";                          float science_amount = 0;                          int exp_number = 1;                          if (probe_data.HasValue("transmitted")) {                              transmitted = bool.Parse(probe_data.GetValue("transmitted"));                          }                          if (probe_data.HasValue("vesselname")) {                              vessel_name = probe_data.GetValue("vesselname");                          }                          if (probe_data.HasValue("science")) {                              science_amount = float.Parse(probe_data.GetValue("science"));                          }                          if (probe_data.HasValue("number")) {                              exp_number = int.Parse(probe_data.GetValue("number"));                          }                          if (!transmitted) {                              ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.SrfLanded' vessel.mainBody' vessel.mainBody.name + "'s surface.");                              if (subject == null) {                                  return false;                              }                              result_string =  vessel_name + " impacted into " + vessel.mainBody.name + " producing seismic activity.  From this data' information on the structure of " + vessel.mainBody.name + "'s crust can be determined.";                              transmit_value = science_amount;                              recovery_value = science_amount;                              subject.subjectValue = 1;                              subject.scientificValue = 1;                              subject.scienceCap = 50 * PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex)*10;                              //subject.science = 0;                              data_size = science_amount * 2.5f;                              science_data = new ScienceData(science_amount' 1' 0' subject.id' "Impactor Data");                              ref_value = 50*PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex);                              return true;                          }                      }                  }              }
Magic Number,FNPlugin,FNSeismicProbe,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSeismicProbe.cs,generateScienceData,The following statement contains a magic number: if (config.HasNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper())) {                  ConfigNode planet_data = config.GetNode("SEISMIC_SCIENCE_" + vessel.mainBody.name.ToUpper());                  foreach (ConfigNode probe_data in planet_data.nodes) {                      if (probe_data.name.Contains("IMPACT_")) {                          science_vess_ref = probe_data.name;                          bool transmitted = false;                          string vessel_name = "";                          float science_amount = 0;                          int exp_number = 1;                          if (probe_data.HasValue("transmitted")) {                              transmitted = bool.Parse(probe_data.GetValue("transmitted"));                          }                          if (probe_data.HasValue("vesselname")) {                              vessel_name = probe_data.GetValue("vesselname");                          }                          if (probe_data.HasValue("science")) {                              science_amount = float.Parse(probe_data.GetValue("science"));                          }                          if (probe_data.HasValue("number")) {                              exp_number = int.Parse(probe_data.GetValue("number"));                          }                          if (!transmitted) {                              ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.SrfLanded' vessel.mainBody' vessel.mainBody.name + "'s surface.");                              if (subject == null) {                                  return false;                              }                              result_string =  vessel_name + " impacted into " + vessel.mainBody.name + " producing seismic activity.  From this data' information on the structure of " + vessel.mainBody.name + "'s crust can be determined.";                              transmit_value = science_amount;                              recovery_value = science_amount;                              subject.subjectValue = 1;                              subject.scientificValue = 1;                              subject.scienceCap = 50 * PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex)*10;                              //subject.science = 0;                              data_size = science_amount * 2.5f;                              science_data = new ScienceData(science_amount' 1' 0' subject.id' "Impactor Data");                              ref_value = 50*PluginHelper.getImpactorScienceMultiplier(vessel.mainBody.flightGlobalsIndex);                              return true;                          }                      }                  }              }
Magic Number,FNPlugin,FNThermalHeatExchanger,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNThermalHeatExchanger.cs,getCoreTemp,The following statement contains a magic number: return 1500;
Magic Number,FNPlugin,FNThermalHeatExchanger,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNThermalHeatExchanger.cs,GetCoreTempAtRadiatorTemp,The following statement contains a magic number: return 1500;
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(_window_position.width - 20' 2' 18' 18)' "x"))              {                  _render_window = false;              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(_window_position.width - 20' 2' 18' 18)' "x"))              {                  _render_window = false;              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(_window_position.width - 20' 2' 18' 18)' "x"))              {                  _render_window = false;              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(_window_position.width - 20' 2' 18' 18)' "x"))              {                  _render_window = false;              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (_current_activity == null || !refinery_is_enabled)              {                  _refinery_activities.ForEach(act =>                  {                      GUILayout.BeginHorizontal();                      if (GUILayout.Button(act.ActivityName' GUILayout.ExpandWidth(true)) && act.HasActivityRequirements)                      {                          _current_activity = act;                          refinery_is_enabled = true;                      }                      GUILayout.EndHorizontal();                  });              } else              {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Activity"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.ActivityName' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Status"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.Status' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  _current_activity.UpdateGUI();                  GUILayout.BeginHorizontal();                  if (GUILayout.Button("Deactivate"' GUILayout.ExpandWidth(true)))                  {                      refinery_is_enabled = false;                      _current_activity = null;                  }                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (_current_activity == null || !refinery_is_enabled)              {                  _refinery_activities.ForEach(act =>                  {                      GUILayout.BeginHorizontal();                      if (GUILayout.Button(act.ActivityName' GUILayout.ExpandWidth(true)) && act.HasActivityRequirements)                      {                          _current_activity = act;                          refinery_is_enabled = true;                      }                      GUILayout.EndHorizontal();                  });              } else              {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Activity"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.ActivityName' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Status"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.Status' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  _current_activity.UpdateGUI();                  GUILayout.BeginHorizontal();                  if (GUILayout.Button("Deactivate"' GUILayout.ExpandWidth(true)))                  {                      refinery_is_enabled = false;                      _current_activity = null;                  }                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (_current_activity == null || !refinery_is_enabled)              {                  _refinery_activities.ForEach(act =>                  {                      GUILayout.BeginHorizontal();                      if (GUILayout.Button(act.ActivityName' GUILayout.ExpandWidth(true)) && act.HasActivityRequirements)                      {                          _current_activity = act;                          refinery_is_enabled = true;                      }                      GUILayout.EndHorizontal();                  });              } else              {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Activity"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.ActivityName' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Status"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.Status' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  _current_activity.UpdateGUI();                  GUILayout.BeginHorizontal();                  if (GUILayout.Button("Deactivate"' GUILayout.ExpandWidth(true)))                  {                      refinery_is_enabled = false;                      _current_activity = null;                  }                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarRefinery,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarRefinery.cs,Window,The following statement contains a magic number: if (_current_activity == null || !refinery_is_enabled)              {                  _refinery_activities.ForEach(act =>                  {                      GUILayout.BeginHorizontal();                      if (GUILayout.Button(act.ActivityName' GUILayout.ExpandWidth(true)) && act.HasActivityRequirements)                      {                          _current_activity = act;                          refinery_is_enabled = true;                      }                      GUILayout.EndHorizontal();                  });              } else              {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Activity"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.ActivityName' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Status"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(_current_activity.Status' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  _current_activity.UpdateGUI();                  GUILayout.BeginHorizontal();                  if (GUILayout.Button("Deactivate"' GUILayout.ExpandWidth(true)))                  {                      refinery_is_enabled = false;                      _current_activity = null;                  }                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnStart,The following statement contains a magic number: if (telescopeIsEnabled && lastActiveTime > 0)              {                  calculateTimeToHeliumDepletion();                    double t0 = lastActiveTime - lastMaintained;                  double t1 = Math.Min(Planetarium.GetUniversalTime()' helium_depleted_time) - lastMaintained;                  if (t1 > t0)                  {                      double a = -GameConstants.telescopePerformanceTimescale;                      double base_science = dpo ? GameConstants.telescopeGLensScience : GameConstants.telescopeBaseScience;                      double time_diff = Math.Min(Planetarium.GetUniversalTime()' helium_depleted_time) - lastActiveTime;                      double avg_science_rate = 0.5*base_science * ( Math.Exp(a * t1)  + Math.Exp(a * t0) );                      double science_to_add = avg_science_rate / 28800 * time_diff;                      lastActiveTime = (float)Planetarium.GetUniversalTime();                      science_awaiting_addition += (float)science_to_add;                  }              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnStart,The following statement contains a magic number: if (telescopeIsEnabled && lastActiveTime > 0)              {                  calculateTimeToHeliumDepletion();                    double t0 = lastActiveTime - lastMaintained;                  double t1 = Math.Min(Planetarium.GetUniversalTime()' helium_depleted_time) - lastMaintained;                  if (t1 > t0)                  {                      double a = -GameConstants.telescopePerformanceTimescale;                      double base_science = dpo ? GameConstants.telescopeGLensScience : GameConstants.telescopeBaseScience;                      double time_diff = Math.Min(Planetarium.GetUniversalTime()' helium_depleted_time) - lastActiveTime;                      double avg_science_rate = 0.5*base_science * ( Math.Exp(a * t1)  + Math.Exp(a * t0) );                      double science_to_add = avg_science_rate / 28800 * time_diff;                      lastActiveTime = (float)Planetarium.GetUniversalTime();                      science_awaiting_addition += (float)science_to_add;                  }              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,generateScienceData,The following statement contains a magic number: if (science_awaiting_addition > 0)              {                  result_title = "Infrared Telescope Experiment";                  result_string = "Infrared telescope observations were recovered from the vicinity of " + vessel.mainBody.name + ".";                    transmit_value = science_awaiting_addition;                  recovery_value = science_awaiting_addition;                  data_size = science_awaiting_addition * 1.25f;                  xmit_scalar = 1;                    ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ExperimentSituations.InSpaceHigh' vessel.mainBody' "");                  subject.scienceCap = 167*PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex'false);                  ref_value = subject.scienceCap;                    science_data = new ScienceData(science_awaiting_addition' 1' 0' subject.id' "Infrared Telescope Data");                    return true;              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnUpdate,The following statement contains a magic number: performPcnt = (perform_factor_d * 100).ToString("0.0") + "%";
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnUpdate,The following statement contains a magic number: sciencePerDay = (science_rate * 28800).ToString("0.00") + " Science/Day";
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnUpdate,The following statement contains a magic number: if (telescope_controllers.Any(tscp => tscp.CanProvideTelescopeControl))              {                  if (current_au >= 548 && !vessel.IsInAtmosphere())                  {                      if (vessel.orbit.eccentricity < 0.8)                      {                          Events["beginOberservations2"].active = true;                          gLensStr = (telescopeIsEnabled && dpo) ? "Ongoing." : "Available";                      } else                      {                          Events["beginOberservations2"].active = false;                          gLensStr = "Eccentricity: " + vessel.orbit.eccentricity.ToString("0.0") + "; < 0.8 Required";                      }                  } else                  {                      Events["beginOberservations2"].active = false;                      gLensStr = current_au.ToString("0.0") + " AU; Required 548 AU";                  }              } else              {                  Events["beginOberservations2"].active = false;                  gLensStr = "Science Lab/Computer Core required";              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,OnUpdate,The following statement contains a magic number: if (telescope_controllers.Any(tscp => tscp.CanProvideTelescopeControl))              {                  if (current_au >= 548 && !vessel.IsInAtmosphere())                  {                      if (vessel.orbit.eccentricity < 0.8)                      {                          Events["beginOberservations2"].active = true;                          gLensStr = (telescopeIsEnabled && dpo) ? "Ongoing." : "Available";                      } else                      {                          Events["beginOberservations2"].active = false;                          gLensStr = "Eccentricity: " + vessel.orbit.eccentricity.ToString("0.0") + "; < 0.8 Required";                      }                  } else                  {                      Events["beginOberservations2"].active = false;                      gLensStr = current_au.ToString("0.0") + " AU; Required 548 AU";                  }              } else              {                  Events["beginOberservations2"].active = false;                  gLensStr = "Science Lab/Computer Core required";              }
Magic Number,FNPlugin,InterstellarTelescope,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTelescope.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  calculateTimeToHeliumDepletion();                    if (ResearchAndDevelopment.Instance != null)                  {                      if (helium_time_scale <= 0) telescopeIsEnabled = false;                        perform_exponent = -(Planetarium.GetUniversalTime() - lastMaintained) * GameConstants.telescopePerformanceTimescale;                      perform_factor_d = Math.Exp(perform_exponent);                        if (telescopeIsEnabled)                      {                          double base_science = dpo ? GameConstants.telescopeGLensScience : GameConstants.telescopeBaseScience;                          science_rate = base_science * perform_factor_d / 28800;                          if (!double.IsNaN(science_rate) && !double.IsInfinity(science_rate))                          {                              science_awaiting_addition += (float)(science_rate * TimeWarp.fixedDeltaTime);                          }                          lastActiveTime = (float)Planetarium.GetUniversalTime();                      }                  }              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateFrame,The following statement contains a magic number: double remaining_capacity_to_reprocess = GameConstants.baseReprocessingRate * TimeWarp.fixedDeltaTime / 86400.0 * rate_multiplier;
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,UpdateGUI,The following statement contains a magic number: if (_remaining_seconds > 0 && !double.IsNaN(_remaining_seconds) && !double.IsInfinity(_remaining_seconds))              {                  int hrs = (int) (_remaining_seconds / 3600);                  int mins = (int) ((_remaining_seconds - hrs*3600)/60);                  int secs = (hrs * 60 + mins) % ((int)(_remaining_seconds / 60));                  GUILayout.Label("Time Remaining"' _bold_label' GUILayout.Width(150));                  GUILayout.Label(hrs + " hours " + mins + " minutes " + secs + " seconds"' GUILayout.Width(150));              }
Magic Number,FNPlugin,NuclearFuelReprocessor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\NuclearFuelReprocessor.cs,getActinidesRemovedPerHour,The following statement contains a magic number: return _current_rate / TimeWarp.fixedDeltaTime * 3600.0;
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnStart,The following statement contains a magic number: if (!reactorInit && startDisabled)               {                  last_active_time = (float)(Planetarium.GetUniversalTime() - 4.0 * 86400.0);                  IsEnabled = false;                  startDisabled = false;                  reactorInit = true;              } else if (!reactorInit)               {                  IsEnabled = true;                  reactorInit = true;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnStart,The following statement contains a magic number: if (!reactorInit && startDisabled)               {                  last_active_time = (float)(Planetarium.GetUniversalTime() - 4.0 * 86400.0);                  IsEnabled = false;                  startDisabled = false;                  reactorInit = true;              } else if (!reactorInit)               {                  IsEnabled = true;                  reactorInit = true;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnUpdate,The following statement contains a magic number: if (update_count - last_draw_update > 10)               {                  if (IsEnabled)                   {                      if (current_fuel_mode != null && !current_fuel_mode.ReactorFuels.Any(fuel => getFuelAvailability(fuel) <= 0))                      {                          if (ongoing_thermal_power_f > 0) currentTPwr = PluginHelper.getFormattedPowerString(ongoing_thermal_power_f) + "_th";                          if (ongoing_charged_power_f > 0) currentCPwr = PluginHelper.getFormattedPowerString(ongoing_charged_power_f) + "_cp";                          statusStr = "Active (" + powerPcnt.ToString("0.00") + "%)";                      } else if (current_fuel_mode != null)                      {                          statusStr = current_fuel_mode.ReactorFuels.FirstOrDefault(fuel => getFuelAvailability(fuel) <= 0).FuelName + " Deprived";                      }                  } else {                      if (powerPcnt > 0) statusStr = "Decay Heating (" + powerPcnt.ToString("0.00") + "%)";                      else statusStr = "Offline";                  }                    last_draw_update = update_count;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && MaximumPower > 0) {                  if (reactorIsOverheating()) {                      if(FlightGlobals.ActiveVessel == vessel) ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency reactor shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      IsEnabled = false;                      return;                  }                    // Max Power                  double max_power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime' 0);                  double fuel_ratio = Math.Min(current_fuel_mode.ReactorFuels.Min(fuel => getFuelAvailability(fuel) / fuel.GetFuelUseForPower(FuelEfficiency'max_power_to_supply))' 1.0);                  double min_throttle = fuel_ratio > 0 ? minimumThrottle / fuel_ratio : 1;                  max_power_to_supply = max_power_to_supply * fuel_ratio;                  // Charged Power                  double max_charged_to_supply = Math.Max(MaximumChargedPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double charged_particles_to_supply = max_charged_to_supply;                  double charged_power_received = supplyManagedFNResourceWithMinimum(charged_particles_to_supply' minimumThrottle' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                  double charged_power_ratio = ChargedParticleRatio > 0 ? charged_power_received / max_charged_to_supply : 0;                  ongoing_charged_power_f = (float)(charged_power_received / TimeWarp.fixedDeltaTime);                  // Thermal Power                  double max_thermal_to_supply = Math.Max(MaximumThermalPower * TimeWarp.fixedDeltaTime' 0) * fuel_ratio;                  double thermal_power_to_supply = max_thermal_to_supply;                  double thermal_power_received = supplyManagedFNResourceWithMinimum(thermal_power_to_supply' min_throttle' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double thermal_power_ratio = (1 - ChargedParticleRatio) > 0 ? thermal_power_received / max_thermal_to_supply : 0;                  ongoing_thermal_power_f = (float) (thermal_power_received / TimeWarp.fixedDeltaTime);                  // Total                  double total_power_received = thermal_power_received + charged_power_received;                  total_power_per_frame = total_power_received;                  double total_power_ratio = total_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                    foreach (ReactorFuel fuel in current_fuel_mode.ReactorFuels) consumeReactorFuel(fuel' total_power_received * fuel.FuelUsePerMJ); // consume fuel                                     ongoing_total_power_f = ongoing_charged_power_f + ongoing_thermal_power_f;                  // Waste Heat                  supplyFNResource(total_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  //                  powerPcnt = 100.0 * total_power_ratio;                    if (min_throttle > 1.05) IsEnabled = false;                  if (breedtritium)                   {                      PartResourceDefinition lithium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                      PartResourceDefinition tritium_def = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                      double breed_rate = thermal_power_received / TimeWarp.fixedDeltaTime / 100000.0 / GameConstants.tritiumBreedRate;                      double lith_rate = breed_rate * TimeWarp.fixedDeltaTime / lithium_def.density;                      double lith_used = ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' lith_rate);                      double lt_density_ratio = lithium_def.density / tritium_def.density;                      tritium_produced_f = (float)(-ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -lith_used*3.0/7.0*lt_density_ratio) / TimeWarp.fixedDeltaTime);                      if (tritium_produced_f <= 0) breedtritium = false;                  }                    if(Planetarium.GetUniversalTime() != 0)                  {                      last_active_time = (float)(Planetarium.GetUniversalTime());                  }                } else if (MaximumPower > 0 && Planetarium.GetUniversalTime() - last_active_time <= 3 * 86400 && IsNuclear)              {                  double daughter_half_life = 86400.0 / 24.0 * 9.0;                  double time_t = Planetarium.GetUniversalTime() - last_active_time;                  double power_fraction = 0.1 * Math.Exp(-time_t / daughter_half_life);                  double power_to_supply = Math.Max(MaximumPower * TimeWarp.fixedDeltaTime * power_fraction' 0);                  double thermal_power_received = supplyManagedFNResourceWithMinimum(power_to_supply' 1.0' FNResourceManager.FNRESOURCE_THERMALPOWER);                  double total_power_ratio = thermal_power_received / MaximumPower / TimeWarp.fixedDeltaTime;                  ongoing_consumption_rate = (float)total_power_ratio;                  supplyFNResource(thermal_power_received' FNResourceManager.FNRESOURCE_WASTEHEAT); // generate heat that must be dissipated                  powerPcnt = 100.0 * total_power_ratio;                  decay_ongoing = true;              } else {                  powerPcnt = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The following statement contains a magic number: sb.AppendLine("Fuel Burnup: " + (fuelEfficiency * 100.0).ToString("0.00") + "%");
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The following statement contains a magic number: basic_fuelmodes.ForEach(fm => {                  sb.AppendLine("---");                  sb.AppendLine(fm.ModeGUIName);                  sb.AppendLine("Power Multiplier: " + fm.NormalisedReactionRate.ToString("0.00"));                  sb.AppendLine("Charged Particle Ratio: " + fm.ChargedPowerRatio.ToString("0.00"));                  sb.AppendLine("Total Energy Density: " + fm.ReactorFuels.Sum(fuel => fuel.EnergyDensity).ToString("0.00") + " MJ/kg");                  foreach (ReactorFuel fuel in fm.ReactorFuels)                  {                      sb.AppendLine(fuel.FuelName + " " + fuel.FuelUsePerMJ * PowerOutput * fm.NormalisedReactionRate * 86400.0 / fuelEfficiency + fuel.Unit + "/day");                  }                  sb.AppendLine("---");              });
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The following statement contains a magic number: if (IsUpgradeable) {                  sb.AppendLine("-----");                  sb.AppendLine("UPGRADED REACTOR INFO");                  sb.AppendLine(upgradedName);                  sb.AppendLine("Thermal Power: " + PluginHelper.getFormattedPowerString(upgradedPowerOutput));                  sb.AppendLine("Heat Exchanger Temperature: " + upgradedReactorTemp.ToString("0") + "K");                  sb.AppendLine("Fuel Burnup: " + (upgradedFuelEfficiency * 100.0).ToString("0.00") + "%");                  sb.AppendLine("UPGRADED FUEL MODES");                  advanced_fuelmodes.ForEach(fm => {                      sb.AppendLine("---");                      sb.AppendLine(fm.ModeGUIName);                      sb.AppendLine("Power Multiplier: " + fm.NormalisedReactionRate.ToString("0.00"));                      sb.AppendLine("Charged Particle Ratio: " + fm.ChargedPowerRatio.ToString("0.00"));                      sb.AppendLine("Total Energy Density: " + fm.ReactorFuels.Sum(fuel => fuel.EnergyDensity).ToString("0.00") + " MJ/kg");                      foreach (ReactorFuel fuel in fm.ReactorFuels) {                          sb.AppendLine(fuel.FuelName + " " + fuel.FuelUsePerMJ * upgradedPowerOutput * fm.NormalisedReactionRate * 86400.0/upgradedFuelEfficiency + fuel.Unit + "/day");                      }                      sb.AppendLine("---");                  });              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,GetInfo,The following statement contains a magic number: if (IsUpgradeable) {                  sb.AppendLine("-----");                  sb.AppendLine("UPGRADED REACTOR INFO");                  sb.AppendLine(upgradedName);                  sb.AppendLine("Thermal Power: " + PluginHelper.getFormattedPowerString(upgradedPowerOutput));                  sb.AppendLine("Heat Exchanger Temperature: " + upgradedReactorTemp.ToString("0") + "K");                  sb.AppendLine("Fuel Burnup: " + (upgradedFuelEfficiency * 100.0).ToString("0.00") + "%");                  sb.AppendLine("UPGRADED FUEL MODES");                  advanced_fuelmodes.ForEach(fm => {                      sb.AppendLine("---");                      sb.AppendLine(fm.ModeGUIName);                      sb.AppendLine("Power Multiplier: " + fm.NormalisedReactionRate.ToString("0.00"));                      sb.AppendLine("Charged Particle Ratio: " + fm.ChargedPowerRatio.ToString("0.00"));                      sb.AppendLine("Total Energy Density: " + fm.ReactorFuels.Sum(fuel => fuel.EnergyDensity).ToString("0.00") + " MJ/kg");                      foreach (ReactorFuel fuel in fm.ReactorFuels) {                          sb.AppendLine(fuel.FuelName + " " + fuel.FuelUsePerMJ * upgradedPowerOutput * fm.NormalisedReactionRate * 86400.0/upgradedFuelEfficiency + fuel.Unit + "/day");                      }                      sb.AppendLine("---");                  });              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,doPersistentResourceUpdate,The following statement contains a magic number: if (breedtritium)               {                  tritium_rate = MaximumPower / 1000.0 / GameConstants.tritiumBreedRate;                  PartResourceDefinition lithium_definition = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Lithium);                  PartResourceDefinition tritium_definition = PartResourceLibrary.Instance.GetDefinition(InterstellarResourcesConfiguration.Instance.Tritium);                  List<PartResource> lithium_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Lithium).ToList();                  List<PartResource> tritium_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Tritium).ToList();                  double lithium_current_amount = lithium_resources.Sum(rs => rs.amount);                  double tritium_missing_amount = tritium_resources.Sum(rs => rs.maxAmount - rs.amount);                  double lithium_to_take = Math.Min(tritium_rate * time_diff * ongoing_consumption_rate' lithium_current_amount);                  double tritium_to_add = Math.Min(tritium_rate * time_diff * ongoing_consumption_rate' tritium_missing_amount) * lithium_definition.density / tritium_definition.density; ;                  ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Lithium' Math.Min(tritium_to_add' lithium_to_take));                  ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Tritium' -Math.Min(tritium_to_add' lithium_to_take));              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,reactorIsOverheating,The following statement contains a magic number: if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && canShutdown)               {                  deactivate_timer++;                  if (deactivate_timer > 3) return true;              } else               {                  deactivate_timer = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,reactorIsOverheating,The following statement contains a magic number: if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && canShutdown)               {                  deactivate_timer++;                  if (deactivate_timer > 3) return true;              } else               {                  deactivate_timer = 0;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio < 1.0)              {                  GUILayout.Label("Current Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentTPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumThermalPower) + "_th"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio < 1.0)              {                  GUILayout.Label("Current Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentTPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumThermalPower) + "_th"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio < 1.0)              {                  GUILayout.Label("Current Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentTPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumThermalPower) + "_th"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio < 1.0)              {                  GUILayout.Label("Current Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentTPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Thermal Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumThermalPower) + "_th"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio > 0) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentCPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumChargedPower) + "_cp"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio > 0) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentCPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumChargedPower) + "_cp"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio > 0) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentCPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumChargedPower) + "_cp"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (ChargedParticleRatio > 0) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(currentCPwr' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Max Charged Power"' bold_label' GUILayout.Width(150));                  GUILayout.Label(PluginHelper.getFormattedPowerString(MaximumChargedPower) + "_cp"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarReactor.cs,Window,The following statement contains a magic number: if (current_fuel_mode != null & current_fuel_mode.ReactorFuels != null) {                  if (!current_fuel_mode.Aneutronic && breedtritium)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label("Tritium Breed Rate"' bold_label' GUILayout.Width(150));                      GUILayout.Label((tritium_produced_f*86400.0).ToString("0.000") + " l/day" ' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Fuel"' bold_label' GUILayout.Width(150));                  GUILayout.Label("Usage"' bold_label' GUILayout.Width(150));                  GUILayout.EndHorizontal();                  double fuel_lifetime_d = double.MaxValue;                  foreach(ReactorFuel fuel in current_fuel_mode.ReactorFuels)                   {                      double availability = getFuelAvailability(fuel);                      double fuel_use = total_power_per_frame * fuel.FuelUsePerMJ/TimeWarp.fixedDeltaTime/FuelEfficiency*current_fuel_mode.NormalisedReactionRate*86400;                      fuel_lifetime_d = Math.Min(fuel_lifetime_d' availability / fuel_use);                      GUILayout.BeginHorizontal();                      GUILayout.Label(fuel.FuelName' bold_label' GUILayout.Width(150));                      GUILayout.Label(fuel_use.ToString("0.0000") + " " + fuel.Unit + "/day"' GUILayout.Width(150));                      GUILayout.EndHorizontal();                  }                  GUILayout.BeginHorizontal();                  GUILayout.Label("Current Lifetime");                  GUILayout.Label( (double.IsNaN(fuel_lifetime_d) ? "-" : (fuel_lifetime_d).ToString("0.00")) + " days"' GUILayout.Width(150));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnUpdate,The following statement contains a magic number: if (getCurrentResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) > getStableResourceSupply(FNResourceManager.FNRESOURCE_MEGAJOULES) && getResourceBarRatio(FNResourceManager.FNRESOURCE_MEGAJOULES) < 0.1 && IsEnabled && !fusion_alert) {                  ScreenMessages.PostScreenMessage("Warning: Fusion Reactor plasma heating cannot be guaranteed' reducing power requirements is recommended."' 10.0f' ScreenMessageStyle.UPPER_CENTER);                  fusion_alert = true;              } else {                  fusion_alert = false;              }
Magic Number,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  power_consumed = consumeFNResource(HeatingPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  if (power_consumed < HeatingPowerRequirements) power_consumed += part.RequestResource("ElectricCharge"' (HeatingPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000;                  plasma_ratio = (float)(power_consumed / HeatingPowerRequirements);              }
Magic Number,FNPlugin,InterstellarTokamakFusionReator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\InterstellarTokomakFusionReator.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  power_consumed = consumeFNResource(HeatingPowerRequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  if (power_consumed < HeatingPowerRequirements) power_consumed += part.RequestResource("ElectricCharge"' (HeatingPowerRequirements - power_consumed) * 1000 * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime / 1000;                  plasma_ratio = (float)(power_consumed / HeatingPowerRequirements);              }
Magic Number,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnUpdate,The following statement contains a magic number: double respcent = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource)*100;
Magic Number,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The following statement contains a magic number: if (scoopIsEnabled) {                  string atmospheric_resource_name = ORSAtmosphericResourceHandler.getAtmosphericResourceName(vessel.mainBody.flightGlobalsIndex' currentresource);                  if (atmospheric_resource_name != null) {                      double resourcedensity = PartResourceLibrary.Instance.GetDefinition(atmospheric_resource_name).density;                      double respcent = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource);                      //double resourcedensity = PartResourceLibrary.Instance.GetDefinition(PluginHelper.atomspheric_resources_tocollect[currentresource]).density;                      //double respcent = PluginHelper.getAtmosphereResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource);                        double airdensity = part.vessel.atmDensity / 1000;                      double powerrequirements = scoopair / 0.15f * 6f;                        double airspeed = part.vessel.srf_velocity.magnitude + 40.0;                      double air = airspeed * airdensity * scoopair / resourcedensity;                        if (respcent > 0 && vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                          double scoopedAtm = air * respcent;                            float powerreceived = Math.Max(consumeFNResource(powerrequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES)' 0);                          float powerpcnt = (float)(powerreceived / powerrequirements / TimeWarp.fixedDeltaTime);                            //resflowf = (float)part.RequestResource(atmospheric_resource_name' -scoopedAtm * powerpcnt * TimeWarp.fixedDeltaTime);                          resflowf = (float)ORSHelper.fixedRequestResource(part'atmospheric_resource_name' -scoopedAtm * powerpcnt * TimeWarp.fixedDeltaTime);                          resflowf = -resflowf / TimeWarp.fixedDeltaTime;                      }                  } else {                    }              }
Magic Number,FNPlugin,ISRUScoop,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ISRUScoop.cs,OnFixedUpdate,The following statement contains a magic number: if (scoopIsEnabled) {                  string atmospheric_resource_name = ORSAtmosphericResourceHandler.getAtmosphericResourceName(vessel.mainBody.flightGlobalsIndex' currentresource);                  if (atmospheric_resource_name != null) {                      double resourcedensity = PartResourceLibrary.Instance.GetDefinition(atmospheric_resource_name).density;                      double respcent = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource);                      //double resourcedensity = PartResourceLibrary.Instance.GetDefinition(PluginHelper.atomspheric_resources_tocollect[currentresource]).density;                      //double respcent = PluginHelper.getAtmosphereResourceContent(vessel.mainBody.flightGlobalsIndex' currentresource);                        double airdensity = part.vessel.atmDensity / 1000;                      double powerrequirements = scoopair / 0.15f * 6f;                        double airspeed = part.vessel.srf_velocity.magnitude + 40.0;                      double air = airspeed * airdensity * scoopair / resourcedensity;                        if (respcent > 0 && vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {                          double scoopedAtm = air * respcent;                            float powerreceived = Math.Max(consumeFNResource(powerrequirements * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES)' 0);                          float powerpcnt = (float)(powerreceived / powerrequirements / TimeWarp.fixedDeltaTime);                            //resflowf = (float)part.RequestResource(atmospheric_resource_name' -scoopedAtm * powerpcnt * TimeWarp.fixedDeltaTime);                          resflowf = (float)ORSHelper.fixedRequestResource(part'atmospheric_resource_name' -scoopedAtm * powerpcnt * TimeWarp.fixedDeltaTime);                          resflowf = -resflowf / TimeWarp.fixedDeltaTime;                      }                  } else {                    }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,FNResourceManager,The following statement contains a magic number: windowPosition = new Rect(200' 200' 350' 100);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,FNResourceManager,The following statement contains a magic number: windowPosition = new Rect(200' 200' 350' 100);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,FNResourceManager,The following statement contains a magic number: windowPosition = new Rect(200' 200' 350' 100);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,FNResourceManager,The following statement contains a magic number: windowPosition = new Rect(200' 200' 350' 100);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The following statement contains a magic number: if (String.Equals(this.resource_name' FNResourceManager.FNRESOURCE_WASTEHEAT)) { // passive dissip of waste heat - a little bit of this                  double vessel_mass = my_vessel.GetTotalMass();                  double passive_dissip = passive_temp_p4 * GameConstants.stefan_const * vessel_mass * 2.0;                  internl_power_extract += passive_dissip * TimeWarp.fixedDeltaTime;                    if (my_vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(my_vessel.mainBody)) { // passive convection - a lot of this                      double pressure = FlightGlobals.getStaticPressure(my_vessel.transform.position);                      double delta_temp = 20;                      double conv_power_dissip = pressure * delta_temp * vessel_mass * 2.0 * GameConstants.rad_const_h / 1e6 * TimeWarp.fixedDeltaTime;                      internl_power_extract += conv_power_dissip;                  }                    if (internl_power_extract < 0 && PluginHelper.isThermalDissipationDisabled()) { // set buildup/dissip of waste heat to 0 if waste heat is disabled                      internl_power_extract = 0;                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The following statement contains a magic number: if (String.Equals(this.resource_name' FNResourceManager.FNRESOURCE_WASTEHEAT)) { // passive dissip of waste heat - a little bit of this                  double vessel_mass = my_vessel.GetTotalMass();                  double passive_dissip = passive_temp_p4 * GameConstants.stefan_const * vessel_mass * 2.0;                  internl_power_extract += passive_dissip * TimeWarp.fixedDeltaTime;                    if (my_vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(my_vessel.mainBody)) { // passive convection - a lot of this                      double pressure = FlightGlobals.getStaticPressure(my_vessel.transform.position);                      double delta_temp = 20;                      double conv_power_dissip = pressure * delta_temp * vessel_mass * 2.0 * GameConstants.rad_const_h / 1e6 * TimeWarp.fixedDeltaTime;                      internl_power_extract += conv_power_dissip;                  }                    if (internl_power_extract < 0 && PluginHelper.isThermalDissipationDisabled()) { // set buildup/dissip of waste heat to 0 if waste heat is disabled                      internl_power_extract = 0;                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The following statement contains a magic number: if (String.Equals(this.resource_name' FNResourceManager.FNRESOURCE_WASTEHEAT)) { // passive dissip of waste heat - a little bit of this                  double vessel_mass = my_vessel.GetTotalMass();                  double passive_dissip = passive_temp_p4 * GameConstants.stefan_const * vessel_mass * 2.0;                  internl_power_extract += passive_dissip * TimeWarp.fixedDeltaTime;                    if (my_vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(my_vessel.mainBody)) { // passive convection - a lot of this                      double pressure = FlightGlobals.getStaticPressure(my_vessel.transform.position);                      double delta_temp = 20;                      double conv_power_dissip = pressure * delta_temp * vessel_mass * 2.0 * GameConstants.rad_const_h / 1e6 * TimeWarp.fixedDeltaTime;                      internl_power_extract += conv_power_dissip;                  }                    if (internl_power_extract < 0 && PluginHelper.isThermalDissipationDisabled()) { // set buildup/dissip of waste heat to 0 if waste heat is disabled                      internl_power_extract = 0;                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,pluginSpecificImpl,The following statement contains a magic number: if (String.Equals(this.resource_name' FNResourceManager.FNRESOURCE_WASTEHEAT)) { // passive dissip of waste heat - a little bit of this                  double vessel_mass = my_vessel.GetTotalMass();                  double passive_dissip = passive_temp_p4 * GameConstants.stefan_const * vessel_mass * 2.0;                  internl_power_extract += passive_dissip * TimeWarp.fixedDeltaTime;                    if (my_vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(my_vessel.mainBody)) { // passive convection - a lot of this                      double pressure = FlightGlobals.getStaticPressure(my_vessel.transform.position);                      double delta_temp = 20;                      double conv_power_dissip = pressure * delta_temp * vessel_mass * 2.0 * GameConstants.rad_const_h / 1e6 * TimeWarp.fixedDeltaTime;                      internl_power_extract += conv_power_dissip;                  }                    if (internl_power_extract < 0 && PluginHelper.isThermalDissipationDisabled()) { // set buildup/dissip of waste heat to 0 if waste heat is disabled                      internl_power_extract = 0;                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(stored_stable_supply)' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(stored_supply)' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(stored_resource_demand)' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (demand_supply < -0.001) {                  net_style = red_label;              } else {                  net_style = green_label;              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(demand_supply)' net_style' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (!double.IsNaN(demand_stable_supply) && !double.IsInfinity(demand_stable_supply)) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Utilisation"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((demand_stable_supply).ToString("P3")' net_style2' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Space(5);
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label("Demand"' bold_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label("Priority"' bold_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(50));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (power_draw_list_archive != null) {                  foreach (KeyValuePair<ORSResourceSuppliable' double> power_kvp in power_draw_list_archive) {                      GUILayout.BeginHorizontal();                      GUILayout.Label(power_kvp.Key.getResourceManagerDisplayName()' GUILayout.ExpandWidth(true));                      GUILayout.Label(getPowerFormatString(power_kvp.Value)' GUILayout.ExpandWidth(false)'GUILayout.MinWidth(80));                      GUILayout.Label(power_kvp.Key.getPowerPriority().ToString()' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(50));                      GUILayout.EndHorizontal();                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: if (power_draw_list_archive != null) {                  foreach (KeyValuePair<ORSResourceSuppliable' double> power_kvp in power_draw_list_archive) {                      GUILayout.BeginHorizontal();                      GUILayout.Label(power_kvp.Key.getResourceManagerDisplayName()' GUILayout.ExpandWidth(true));                      GUILayout.Label(getPowerFormatString(power_kvp.Value)' GUILayout.ExpandWidth(false)'GUILayout.MinWidth(80));                      GUILayout.Label(power_kvp.Key.getPowerPriority().ToString()' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(50));                      GUILayout.EndHorizontal();                  }              }
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(stored_charge_demand)' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,FNResourceManager,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNResourceManager.cs,doWindow,The following statement contains a magic number: GUILayout.Label("0"' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(50));
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {  				if (powerInput > 1000) {  					beamedpower = (powerInput/1000).ToString () + "MW";  				} else {  					beamedpower = powerInput.ToString () + "KW";  				}  			} else {  				beamedpower = "Offline.";  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {  				if (powerInput > 1000) {  					beamedpower = (powerInput/1000).ToString () + "MW";  				} else {  					beamedpower = powerInput.ToString () + "KW";  				}  			} else {  				beamedpower = "Offline.";  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (config != null && IsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95) {  					IsEnabled = false;  					deactivate_timer++;  					if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {  						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  					return;  				}  				deactivate_timer = 0;    				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops  				String aid = vessel.id.ToString ();  				if (config.HasValue (aid) == true) {  					String agenType = config.GetValue (aid + "type");  					if (agenType == "relay") {  						aIsRelay = true;  					} else {  						aIsRelay = false;  					}  				}                    //if (activeCount % 100 == 0) {                      List<Vessel> vessels = FlightGlobals.Vessels;                      //print(vessels.Count.ToString() + "\n");    					//loop through vessels and attempt to add any active sattilites                      foreach (Vessel vess in vessels) {  						String vid = vess.id.ToString();  						String vname = vess.vesselName.ToString().ToLower();                          //print(vid + "\n");    						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel  						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) {  							String powerinputsat = config.GetValue (vid);  							String vgenType = config.GetValue (vid + "type");  							// if sat is not relay/nuclear check that it has line of site to sun  							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy  							if((vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear") {  								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position));  								float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  								float powerdissip = (float)(Math.Tan (angle) * distance * Math.Tan (angle) * distance);  								powerdissip = Math.Max (powerdissip/collectorArea' 1);   								if (vgenType != "relay" && inputPowerFixedAlt > 0) {  									rangelosses += powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputIncr += inputPowerFixedAlt / powerdissip*facing_factor;  									activeSatsIncr++;  									connectedrelaysf = 0;  									//print ("warp: sat added - genType: " + vgenType);  								}  								// only attach to one relay IF no sattilites are available for direct connection  								else if(aIsRelay == false && activeSatsIncr < 1 && inputPowerFixedAlt > 0){  									rangelosses = powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputRelay = inputPowerFixedAlt / powerdissip*facing_factor;  									connectedrelaysf = 1;  									activeSatsIncr = 0;  									//print ("warp: relay added");  								}  							}  						}                      }                        float atmosphericefficiency = (float) Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);    					if (activeSatsIncr > 0 && powerInputIncr > 0) {  						this.rangelosses = rangelosses / activeSatsIncr;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputIncr * efficiency * atmosphericefficiency;  						connectedsatsf = activeSatsIncr;  						//print ("warp: connected sat");  					}  					else if (connectedrelaysf > 0 && powerInputRelay > 0) {  						this.rangelosses = rangelosses / connectedrelaysf;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputRelay * efficiency * atmosphericefficiency;  						connectedsatsf = 0;  						//print("warp: connected relay");  					}  					else {  						connectedrelaysf = 0;  						connectedsatsf = 0;  						powerInput = 0;  						//print ("warp: no active sats or relays available");  					}                  //}              }else{  				connectedrelaysf = 0;  				connectedsatsf = 0;  				powerInput = 0;  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (config != null && IsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95) {  					IsEnabled = false;  					deactivate_timer++;  					if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {  						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  					return;  				}  				deactivate_timer = 0;    				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops  				String aid = vessel.id.ToString ();  				if (config.HasValue (aid) == true) {  					String agenType = config.GetValue (aid + "type");  					if (agenType == "relay") {  						aIsRelay = true;  					} else {  						aIsRelay = false;  					}  				}                    //if (activeCount % 100 == 0) {                      List<Vessel> vessels = FlightGlobals.Vessels;                      //print(vessels.Count.ToString() + "\n");    					//loop through vessels and attempt to add any active sattilites                      foreach (Vessel vess in vessels) {  						String vid = vess.id.ToString();  						String vname = vess.vesselName.ToString().ToLower();                          //print(vid + "\n");    						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel  						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) {  							String powerinputsat = config.GetValue (vid);  							String vgenType = config.GetValue (vid + "type");  							// if sat is not relay/nuclear check that it has line of site to sun  							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy  							if((vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear") {  								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position));  								float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  								float powerdissip = (float)(Math.Tan (angle) * distance * Math.Tan (angle) * distance);  								powerdissip = Math.Max (powerdissip/collectorArea' 1);   								if (vgenType != "relay" && inputPowerFixedAlt > 0) {  									rangelosses += powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputIncr += inputPowerFixedAlt / powerdissip*facing_factor;  									activeSatsIncr++;  									connectedrelaysf = 0;  									//print ("warp: sat added - genType: " + vgenType);  								}  								// only attach to one relay IF no sattilites are available for direct connection  								else if(aIsRelay == false && activeSatsIncr < 1 && inputPowerFixedAlt > 0){  									rangelosses = powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputRelay = inputPowerFixedAlt / powerdissip*facing_factor;  									connectedrelaysf = 1;  									activeSatsIncr = 0;  									//print ("warp: relay added");  								}  							}  						}                      }                        float atmosphericefficiency = (float) Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);    					if (activeSatsIncr > 0 && powerInputIncr > 0) {  						this.rangelosses = rangelosses / activeSatsIncr;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputIncr * efficiency * atmosphericefficiency;  						connectedsatsf = activeSatsIncr;  						//print ("warp: connected sat");  					}  					else if (connectedrelaysf > 0 && powerInputRelay > 0) {  						this.rangelosses = rangelosses / connectedrelaysf;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputRelay * efficiency * atmosphericefficiency;  						connectedsatsf = 0;  						//print("warp: connected relay");  					}  					else {  						connectedrelaysf = 0;  						connectedsatsf = 0;  						powerInput = 0;  						//print ("warp: no active sats or relays available");  					}                  //}              }else{  				connectedrelaysf = 0;  				connectedsatsf = 0;  				powerInput = 0;  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (config != null && IsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95) {  					IsEnabled = false;  					deactivate_timer++;  					if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {  						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  					return;  				}  				deactivate_timer = 0;    				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops  				String aid = vessel.id.ToString ();  				if (config.HasValue (aid) == true) {  					String agenType = config.GetValue (aid + "type");  					if (agenType == "relay") {  						aIsRelay = true;  					} else {  						aIsRelay = false;  					}  				}                    //if (activeCount % 100 == 0) {                      List<Vessel> vessels = FlightGlobals.Vessels;                      //print(vessels.Count.ToString() + "\n");    					//loop through vessels and attempt to add any active sattilites                      foreach (Vessel vess in vessels) {  						String vid = vess.id.ToString();  						String vname = vess.vesselName.ToString().ToLower();                          //print(vid + "\n");    						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel  						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) {  							String powerinputsat = config.GetValue (vid);  							String vgenType = config.GetValue (vid + "type");  							// if sat is not relay/nuclear check that it has line of site to sun  							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy  							if((vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear") {  								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position));  								float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  								float powerdissip = (float)(Math.Tan (angle) * distance * Math.Tan (angle) * distance);  								powerdissip = Math.Max (powerdissip/collectorArea' 1);   								if (vgenType != "relay" && inputPowerFixedAlt > 0) {  									rangelosses += powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputIncr += inputPowerFixedAlt / powerdissip*facing_factor;  									activeSatsIncr++;  									connectedrelaysf = 0;  									//print ("warp: sat added - genType: " + vgenType);  								}  								// only attach to one relay IF no sattilites are available for direct connection  								else if(aIsRelay == false && activeSatsIncr < 1 && inputPowerFixedAlt > 0){  									rangelosses = powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputRelay = inputPowerFixedAlt / powerdissip*facing_factor;  									connectedrelaysf = 1;  									activeSatsIncr = 0;  									//print ("warp: relay added");  								}  							}  						}                      }                        float atmosphericefficiency = (float) Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);    					if (activeSatsIncr > 0 && powerInputIncr > 0) {  						this.rangelosses = rangelosses / activeSatsIncr;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputIncr * efficiency * atmosphericefficiency;  						connectedsatsf = activeSatsIncr;  						//print ("warp: connected sat");  					}  					else if (connectedrelaysf > 0 && powerInputRelay > 0) {  						this.rangelosses = rangelosses / connectedrelaysf;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputRelay * efficiency * atmosphericefficiency;  						connectedsatsf = 0;  						//print("warp: connected relay");  					}  					else {  						connectedrelaysf = 0;  						connectedsatsf = 0;  						powerInput = 0;  						//print ("warp: no active sats or relays available");  					}                  //}              }else{  				connectedrelaysf = 0;  				connectedsatsf = 0;  				powerInput = 0;  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (config != null && IsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95) {  					IsEnabled = false;  					deactivate_timer++;  					if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {  						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  					return;  				}  				deactivate_timer = 0;    				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops  				String aid = vessel.id.ToString ();  				if (config.HasValue (aid) == true) {  					String agenType = config.GetValue (aid + "type");  					if (agenType == "relay") {  						aIsRelay = true;  					} else {  						aIsRelay = false;  					}  				}                    //if (activeCount % 100 == 0) {                      List<Vessel> vessels = FlightGlobals.Vessels;                      //print(vessels.Count.ToString() + "\n");    					//loop through vessels and attempt to add any active sattilites                      foreach (Vessel vess in vessels) {  						String vid = vess.id.ToString();  						String vname = vess.vesselName.ToString().ToLower();                          //print(vid + "\n");    						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel  						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) {  							String powerinputsat = config.GetValue (vid);  							String vgenType = config.GetValue (vid + "type");  							// if sat is not relay/nuclear check that it has line of site to sun  							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy  							if((vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear") {  								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position));  								float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  								float powerdissip = (float)(Math.Tan (angle) * distance * Math.Tan (angle) * distance);  								powerdissip = Math.Max (powerdissip/collectorArea' 1);   								if (vgenType != "relay" && inputPowerFixedAlt > 0) {  									rangelosses += powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputIncr += inputPowerFixedAlt / powerdissip*facing_factor;  									activeSatsIncr++;  									connectedrelaysf = 0;  									//print ("warp: sat added - genType: " + vgenType);  								}  								// only attach to one relay IF no sattilites are available for direct connection  								else if(aIsRelay == false && activeSatsIncr < 1 && inputPowerFixedAlt > 0){  									rangelosses = powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputRelay = inputPowerFixedAlt / powerdissip*facing_factor;  									connectedrelaysf = 1;  									activeSatsIncr = 0;  									//print ("warp: relay added");  								}  							}  						}                      }                        float atmosphericefficiency = (float) Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);    					if (activeSatsIncr > 0 && powerInputIncr > 0) {  						this.rangelosses = rangelosses / activeSatsIncr;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputIncr * efficiency * atmosphericefficiency;  						connectedsatsf = activeSatsIncr;  						//print ("warp: connected sat");  					}  					else if (connectedrelaysf > 0 && powerInputRelay > 0) {  						this.rangelosses = rangelosses / connectedrelaysf;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputRelay * efficiency * atmosphericefficiency;  						connectedsatsf = 0;  						//print("warp: connected relay");  					}  					else {  						connectedrelaysf = 0;  						connectedsatsf = 0;  						powerInput = 0;  						//print ("warp: no active sats or relays available");  					}                  //}              }else{  				connectedrelaysf = 0;  				connectedsatsf = 0;  				powerInput = 0;  			}
Magic Number,FNPlugin,MicrowavePowerReceiverBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiverBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (config != null && IsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95) {  					IsEnabled = false;  					deactivate_timer++;  					if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {  						ScreenMessages.PostScreenMessage ("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  					return;  				}  				deactivate_timer = 0;    				//Check to see if active vessel is a relay - for now we do not want a relay to connect to another relay to prevent energy loops  				String aid = vessel.id.ToString ();  				if (config.HasValue (aid) == true) {  					String agenType = config.GetValue (aid + "type");  					if (agenType == "relay") {  						aIsRelay = true;  					} else {  						aIsRelay = false;  					}  				}                    //if (activeCount % 100 == 0) {                      List<Vessel> vessels = FlightGlobals.Vessels;                      //print(vessels.Count.ToString() + "\n");    					//loop through vessels and attempt to add any active sattilites                      foreach (Vessel vess in vessels) {  						String vid = vess.id.ToString();  						String vname = vess.vesselName.ToString().ToLower();                          //print(vid + "\n");    						//prevent adding active vessel as sat' skip calculations on debris' only add vessels with config value and line of sight to active vessel  						if (vess.isActiveVessel == false && vname.IndexOf("debris") == -1 && config.HasValue(vid) == true && lineOfSightTo(vess) == true) {  							String powerinputsat = config.GetValue (vid);  							String vgenType = config.GetValue (vid + "type");  							// if sat is not relay/nuclear check that it has line of site to sun  							// NOTE: we need to add a check for relay to check lineOfSiteToSource(vess)' and if solar a lineOfSiteFromSourceToSun - to check that the source which it is relaying is still attached to it' and if it is a solar source that it is recieving solar energy  							if((vgenType == "solar" && PluginHelper.lineOfSightToSun(vess)) || vgenType == "relay" || vgenType == "nuclear") {  								float inputPowerFixedAlt = 0;// = float.Parse (powerinputsat) * PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vess.transform.position));  								float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  								float powerdissip = (float)(Math.Tan (angle) * distance * Math.Tan (angle) * distance);  								powerdissip = Math.Max (powerdissip/collectorArea' 1);   								if (vgenType != "relay" && inputPowerFixedAlt > 0) {  									rangelosses += powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputIncr += inputPowerFixedAlt / powerdissip*facing_factor;  									activeSatsIncr++;  									connectedrelaysf = 0;  									//print ("warp: sat added - genType: " + vgenType);  								}  								// only attach to one relay IF no sattilites are available for direct connection  								else if(aIsRelay == false && activeSatsIncr < 1 && inputPowerFixedAlt > 0){  									rangelosses = powerdissip;  									//Scale energy reception based on angle of reciever to transmitter  									Vector3d direction_vector = (vess.transform.position-vessel.transform.position).normalized;  									float facing_factor = Vector3.Dot (part.transform.up' direction_vector);  									facing_factor = Mathf.Max (0' facing_factor);  									powerInputRelay = inputPowerFixedAlt / powerdissip*facing_factor;  									connectedrelaysf = 1;  									activeSatsIncr = 0;  									//print ("warp: relay added");  								}  							}  						}                      }                        float atmosphericefficiency = (float) Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);    					if (activeSatsIncr > 0 && powerInputIncr > 0) {  						this.rangelosses = rangelosses / activeSatsIncr;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputIncr * efficiency * atmosphericefficiency;  						connectedsatsf = activeSatsIncr;  						//print ("warp: connected sat");  					}  					else if (connectedrelaysf > 0 && powerInputRelay > 0) {  						this.rangelosses = rangelosses / connectedrelaysf;  						totefff = efficiency * atmosphericefficiency*100/rangelosses;  						powerInput = powerInputRelay * efficiency * atmosphericefficiency;  						connectedsatsf = 0;  						//print("warp: connected relay");  					}  					else {  						connectedrelaysf = 0;  						connectedsatsf = 0;  						powerInput = 0;  						//print ("warp: no active sats or relays available");  					}                  //}              }else{  				connectedrelaysf = 0;  				connectedsatsf = 0;  				powerInput = 0;  			}
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,ActivateReceiver,The following statement contains a magic number: receiptPower = 100;
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (powerInput > 1000) {                      beamedpower = (powerInput / 1000).ToString("0.00") + "MW";                  } else {                      beamedpower = powerInput.ToString("0.00") + "KW";                  }              } else {                  beamedpower = "Offline.";              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (powerInput > 1000) {                      beamedpower = (powerInput / 1000).ToString("0.00") + "MW";                  } else {                      beamedpower = powerInput.ToString("0.00") + "KW";                  }              } else {                  beamedpower = "Offline.";              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnUpdate,The following statement contains a magic number: toteff = (efficiency_d * 100).ToString("0.00") + "%";
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && !isThermalReceiver) {                      receiverIsEnabled = false;                      deactivate_timer++;                      if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {                          ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      }                      return;                  }                  double atmosphericefficiency = Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);                  efficiency_d = GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  deactivate_timer = 0;                      HashSet<VesselRelayPersistence> usedRelays = new HashSet<VesselRelayPersistence>();                  //Transmitters power calculation                  foreach (var connectedTransmitterEntry in GetConnectedTransmitters()) {                      VesselMicrowavePersistence transmitter = connectedTransmitterEntry.Key;                      Vessel transmitterVessel = connectedTransmitterEntry.Key.getVessel();                      double routeEfficiency = connectedTransmitterEntry.Value.Key;                      IEnumerable<VesselRelayPersistence> relays = connectedTransmitterEntry.Value.Value;                        received_power[transmitterVessel] = 0;                        // calculate maximum power receivable from satellite                      double satPowerCap = transmitter.getAvailablePower() * efficiency_d;                      double currentPowerFromSat = MicrowavePowerReceiver.getEnumeratedPowerFromSatelliteForAllVesssels(transmitter);                      double powerAvailableFromSat = (satPowerCap - currentPowerFromSat);                      double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy                      received_power[transmitterVessel] = satPower * atmosphericefficiency;                      total_power += satPower;                      if (satPower > 0) {                          activeSatsIncr++;                          if (relays != null) {                              foreach (var relay in relays) {                                  usedRelays.Add(relay);                              }                              networkDepth = Math.Max(networkDepth' relays.Count());                          }                      }                  }                      connectedsatsi = activeSatsIncr;                  connectedrelaysi = usedRelays.Count;                    double powerInputMegajoules = total_power / 1000.0 * GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  powerInput = powerInputMegajoules * 1000.0f * receiptPower/100.0f;                      float animateTemp = (float)powerInputMegajoules / 3000;                  if (animateTemp > 1) {                      animateTemp = 1;                  }                    if (animT != null) {                      animT[animTName].speed = 0.001f;                      animT[animTName].normalizedTime = animateTemp;                      animT.Blend(animTName' 2f);                  }                    if (!isThermalReceiver) {                      supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency);                      supplyFNResource(waste_head_production * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                  } else {                      double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                      if (ThermalPower <= 0) {                          ThermalPower = (float)(cur_thermal_power);                      } else {                          ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower);                      }                  }              } else {                  received_power.Clear();              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && !isThermalReceiver) {                      receiverIsEnabled = false;                      deactivate_timer++;                      if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {                          ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      }                      return;                  }                  double atmosphericefficiency = Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);                  efficiency_d = GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  deactivate_timer = 0;                      HashSet<VesselRelayPersistence> usedRelays = new HashSet<VesselRelayPersistence>();                  //Transmitters power calculation                  foreach (var connectedTransmitterEntry in GetConnectedTransmitters()) {                      VesselMicrowavePersistence transmitter = connectedTransmitterEntry.Key;                      Vessel transmitterVessel = connectedTransmitterEntry.Key.getVessel();                      double routeEfficiency = connectedTransmitterEntry.Value.Key;                      IEnumerable<VesselRelayPersistence> relays = connectedTransmitterEntry.Value.Value;                        received_power[transmitterVessel] = 0;                        // calculate maximum power receivable from satellite                      double satPowerCap = transmitter.getAvailablePower() * efficiency_d;                      double currentPowerFromSat = MicrowavePowerReceiver.getEnumeratedPowerFromSatelliteForAllVesssels(transmitter);                      double powerAvailableFromSat = (satPowerCap - currentPowerFromSat);                      double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy                      received_power[transmitterVessel] = satPower * atmosphericefficiency;                      total_power += satPower;                      if (satPower > 0) {                          activeSatsIncr++;                          if (relays != null) {                              foreach (var relay in relays) {                                  usedRelays.Add(relay);                              }                              networkDepth = Math.Max(networkDepth' relays.Count());                          }                      }                  }                      connectedsatsi = activeSatsIncr;                  connectedrelaysi = usedRelays.Count;                    double powerInputMegajoules = total_power / 1000.0 * GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  powerInput = powerInputMegajoules * 1000.0f * receiptPower/100.0f;                      float animateTemp = (float)powerInputMegajoules / 3000;                  if (animateTemp > 1) {                      animateTemp = 1;                  }                    if (animT != null) {                      animT[animTName].speed = 0.001f;                      animT[animTName].normalizedTime = animateTemp;                      animT.Blend(animTName' 2f);                  }                    if (!isThermalReceiver) {                      supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency);                      supplyFNResource(waste_head_production * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                  } else {                      double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                      if (ThermalPower <= 0) {                          ThermalPower = (float)(cur_thermal_power);                      } else {                          ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower);                      }                  }              } else {                  received_power.Clear();              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && !isThermalReceiver) {                      receiverIsEnabled = false;                      deactivate_timer++;                      if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {                          ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      }                      return;                  }                  double atmosphericefficiency = Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);                  efficiency_d = GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  deactivate_timer = 0;                      HashSet<VesselRelayPersistence> usedRelays = new HashSet<VesselRelayPersistence>();                  //Transmitters power calculation                  foreach (var connectedTransmitterEntry in GetConnectedTransmitters()) {                      VesselMicrowavePersistence transmitter = connectedTransmitterEntry.Key;                      Vessel transmitterVessel = connectedTransmitterEntry.Key.getVessel();                      double routeEfficiency = connectedTransmitterEntry.Value.Key;                      IEnumerable<VesselRelayPersistence> relays = connectedTransmitterEntry.Value.Value;                        received_power[transmitterVessel] = 0;                        // calculate maximum power receivable from satellite                      double satPowerCap = transmitter.getAvailablePower() * efficiency_d;                      double currentPowerFromSat = MicrowavePowerReceiver.getEnumeratedPowerFromSatelliteForAllVesssels(transmitter);                      double powerAvailableFromSat = (satPowerCap - currentPowerFromSat);                      double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy                      received_power[transmitterVessel] = satPower * atmosphericefficiency;                      total_power += satPower;                      if (satPower > 0) {                          activeSatsIncr++;                          if (relays != null) {                              foreach (var relay in relays) {                                  usedRelays.Add(relay);                              }                              networkDepth = Math.Max(networkDepth' relays.Count());                          }                      }                  }                      connectedsatsi = activeSatsIncr;                  connectedrelaysi = usedRelays.Count;                    double powerInputMegajoules = total_power / 1000.0 * GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  powerInput = powerInputMegajoules * 1000.0f * receiptPower/100.0f;                      float animateTemp = (float)powerInputMegajoules / 3000;                  if (animateTemp > 1) {                      animateTemp = 1;                  }                    if (animT != null) {                      animT[animTName].speed = 0.001f;                      animT[animTName].normalizedTime = animateTemp;                      animT.Blend(animTName' 2f);                  }                    if (!isThermalReceiver) {                      supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency);                      supplyFNResource(waste_head_production * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                  } else {                      double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                      if (ThermalPower <= 0) {                          ThermalPower = (float)(cur_thermal_power);                      } else {                          ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower);                      }                  }              } else {                  received_power.Clear();              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && !isThermalReceiver) {                      receiverIsEnabled = false;                      deactivate_timer++;                      if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {                          ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      }                      return;                  }                  double atmosphericefficiency = Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);                  efficiency_d = GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  deactivate_timer = 0;                      HashSet<VesselRelayPersistence> usedRelays = new HashSet<VesselRelayPersistence>();                  //Transmitters power calculation                  foreach (var connectedTransmitterEntry in GetConnectedTransmitters()) {                      VesselMicrowavePersistence transmitter = connectedTransmitterEntry.Key;                      Vessel transmitterVessel = connectedTransmitterEntry.Key.getVessel();                      double routeEfficiency = connectedTransmitterEntry.Value.Key;                      IEnumerable<VesselRelayPersistence> relays = connectedTransmitterEntry.Value.Value;                        received_power[transmitterVessel] = 0;                        // calculate maximum power receivable from satellite                      double satPowerCap = transmitter.getAvailablePower() * efficiency_d;                      double currentPowerFromSat = MicrowavePowerReceiver.getEnumeratedPowerFromSatelliteForAllVesssels(transmitter);                      double powerAvailableFromSat = (satPowerCap - currentPowerFromSat);                      double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy                      received_power[transmitterVessel] = satPower * atmosphericefficiency;                      total_power += satPower;                      if (satPower > 0) {                          activeSatsIncr++;                          if (relays != null) {                              foreach (var relay in relays) {                                  usedRelays.Add(relay);                              }                              networkDepth = Math.Max(networkDepth' relays.Count());                          }                      }                  }                      connectedsatsi = activeSatsIncr;                  connectedrelaysi = usedRelays.Count;                    double powerInputMegajoules = total_power / 1000.0 * GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  powerInput = powerInputMegajoules * 1000.0f * receiptPower/100.0f;                      float animateTemp = (float)powerInputMegajoules / 3000;                  if (animateTemp > 1) {                      animateTemp = 1;                  }                    if (animT != null) {                      animT[animTName].speed = 0.001f;                      animT[animTName].normalizedTime = animateTemp;                      animT.Blend(animTName' 2f);                  }                    if (!isThermalReceiver) {                      supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency);                      supplyFNResource(waste_head_production * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                  } else {                      double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                      if (ThermalPower <= 0) {                          ThermalPower = (float)(cur_thermal_power);                      } else {                          ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower);                      }                  }              } else {                  received_power.Clear();              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,OnFixedUpdate,The following statement contains a magic number: if (receiverIsEnabled) {                  if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.95 && !isThermalReceiver) {                      receiverIsEnabled = false;                      deactivate_timer++;                      if (FlightGlobals.ActiveVessel == vessel && deactivate_timer > 2) {                          ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Emergency microwave power shutdown occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                      }                      return;                  }                  double atmosphericefficiency = Math.Exp(-FlightGlobals.getStaticPressure(vessel.transform.position) / 5);                  efficiency_d = GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  deactivate_timer = 0;                      HashSet<VesselRelayPersistence> usedRelays = new HashSet<VesselRelayPersistence>();                  //Transmitters power calculation                  foreach (var connectedTransmitterEntry in GetConnectedTransmitters()) {                      VesselMicrowavePersistence transmitter = connectedTransmitterEntry.Key;                      Vessel transmitterVessel = connectedTransmitterEntry.Key.getVessel();                      double routeEfficiency = connectedTransmitterEntry.Value.Key;                      IEnumerable<VesselRelayPersistence> relays = connectedTransmitterEntry.Value.Value;                        received_power[transmitterVessel] = 0;                        // calculate maximum power receivable from satellite                      double satPowerCap = transmitter.getAvailablePower() * efficiency_d;                      double currentPowerFromSat = MicrowavePowerReceiver.getEnumeratedPowerFromSatelliteForAllVesssels(transmitter);                      double powerAvailableFromSat = (satPowerCap - currentPowerFromSat);                      double satPower = Math.Min(GetSatPower(transmitter' routeEfficiency)' powerAvailableFromSat); // get sat power and make sure we conserve enegy                      received_power[transmitterVessel] = satPower * atmosphericefficiency;                      total_power += satPower;                      if (satPower > 0) {                          activeSatsIncr++;                          if (relays != null) {                              foreach (var relay in relays) {                                  usedRelays.Add(relay);                              }                              networkDepth = Math.Max(networkDepth' relays.Count());                          }                      }                  }                      connectedsatsi = activeSatsIncr;                  connectedrelaysi = usedRelays.Count;                    double powerInputMegajoules = total_power / 1000.0 * GameConstants.microwave_dish_efficiency * atmosphericefficiency;                  powerInput = powerInputMegajoules * 1000.0f * receiptPower/100.0f;                      float animateTemp = (float)powerInputMegajoules / 3000;                  if (animateTemp > 1) {                      animateTemp = 1;                  }                    if (animT != null) {                      animT[animTName].speed = 0.001f;                      animT[animTName].normalizedTime = animateTemp;                      animT.Blend(animTName' 2f);                  }                    if (!isThermalReceiver) {                      supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      double waste_head_production = powerInputMegajoules / GameConstants.microwave_dish_efficiency * (1.0f - GameConstants.microwave_dish_efficiency);                      supplyFNResource(waste_head_production * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);                  } else {                      double cur_thermal_power = supplyFNResource(powerInputMegajoules * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                      if (ThermalPower <= 0) {                          ThermalPower = (float)(cur_thermal_power);                      } else {                          ThermalPower = (float)(cur_thermal_power * GameConstants.microwave_alpha + (1.0f - GameConstants.microwave_alpha) * ThermalPower);                      }                  }              } else {                  received_power.Clear();              }
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,getMegajoules,The following statement contains a magic number: return (float)(powerInput / 1000);
Magic Number,FNPlugin,MicrowavePowerReceiver,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerReceiver.cs,GetCoreTempAtRadiatorTemp,The following statement contains a magic number: if (isThermalReceiver) {                  return 1500;              } else {                  return float.MaxValue;              }
Magic Number,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {  				beamedpower = (inputPower / 1000).ToString ("0.000") + "MW";  			} else {  				beamedpower = inputPower.ToString ("0.000") + "KW";  			}
Magic Number,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {  				beamedpower = (inputPower / 1000).ToString ("0.000") + "MW";  			} else {  				beamedpower = inputPower.ToString ("0.000") + "KW";  			}
Magic Number,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {  				List<Part> vesselparts = vessel.parts;  				float electrical_current_available = 0;  				for (int i = 0; i < vesselparts.Count; ++i) {  					Part cPart = vesselparts.ElementAt (i);  					PartModuleList pml = cPart.Modules;  					for (int j = 0; j < pml.Count; ++j) {  						var curFNGen = pml.GetModule (j) as FNGenerator;  						var curMwRec = pml.GetModule (j) as MicrowavePowerReceiver;  						var curSolarPan = pml.GetModule (j) as ModuleDeployableSolarPanel;  						if (curFNGen != null) {  							float consumeMJ = curFNGen.getMaxPowerOutput () * TimeWarp.fixedDeltaTime;  							float cvalue = consumeFNResource(consumeMJ'FNResourceManager.FNRESOURCE_MEGAJOULES);  							electrical_current_available = cvalue*1000/TimeWarp.fixedDeltaTime;  							nuclear = true;  						}   						else if (curMwRec != null && nuclear == false) {  							//electrical_current_available = curMwRec.powerInput;  							part.RequestResource ("ElectricCharge"' electrical_current_available * TimeWarp.fixedDeltaTime);  							microwave = true;  						}  						else if (curSolarPan != null && nuclear == false && microwave == false) {  							electrical_current_available += curSolarPan.flowRate;  							part.RequestResource ("ElectricCharge"' electrical_current_available * TimeWarp.fixedDeltaTime);  							solar = true;  						}  					}  				}  				inputPower = electrical_current_available;  			} else {  				inputPower = 0;  			}
Magic Number,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (activeCount % 1000 == 9) {  				ConfigNode config = PluginHelper.getPluginSaveFile ();  				string genType = "undefined";                                    //float inputPowerFixedAlt = (float) ((double)inputPower * (Math.Pow(FlightGlobals.Bodies[0].GetAltitude(vessel.transform.position)' 2)) / PluginHelper.FIXED_SAT_ALTITUDE / PluginHelper.FIXED_SAT_ALTITUDE);  				float inputPowerFixedAlt = 0;  				if (nuclear == true) {  					inputPowerFixedAlt = inputPower;  					//print ("warp: nuclear inputPower " + inputPowerFixedAlt);  					genType = "nuclear";  				} else if (microwave == true) {  					inputPowerFixedAlt = inputPower;  					//print ("warp: relay inputPower " + inputPowerFixedAlt);  					genType = "relay";  				} else if (solar == true) {  					//inputPowerFixedAlt = inputPower / PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vessel.transform.position));  					//print ("warp: solar inputPower " + inputPowerFixedAlt);  					genType = "solar";  				}                    				if (genType != "undefined") {  					string vesselIDSolar = vessel.id.ToString ();  					string outputPower = inputPowerFixedAlt.ToString ("0.000");  					if (!config.HasValue (vesselIDSolar)) {  						config.AddValue (vesselIDSolar' outputPower);  					} else {  						config.SetValue (vesselIDSolar' outputPower);  					}    					if (!config.HasValue (vesselIDSolar + "type")) {  						config.AddValue (vesselIDSolar + "type"' genType);  					} else {  						config.SetValue (vesselIDSolar + "type"' genType);  					}                    					config.Save (PluginHelper.getPluginSaveFilePath ());  				}              }
Magic Number,FNPlugin,MicrowavePowerTransmitterBackup,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitterBackup.cs,OnFixedUpdate,The following statement contains a magic number: if (activeCount % 1000 == 9) {  				ConfigNode config = PluginHelper.getPluginSaveFile ();  				string genType = "undefined";                                    //float inputPowerFixedAlt = (float) ((double)inputPower * (Math.Pow(FlightGlobals.Bodies[0].GetAltitude(vessel.transform.position)' 2)) / PluginHelper.FIXED_SAT_ALTITUDE / PluginHelper.FIXED_SAT_ALTITUDE);  				float inputPowerFixedAlt = 0;  				if (nuclear == true) {  					inputPowerFixedAlt = inputPower;  					//print ("warp: nuclear inputPower " + inputPowerFixedAlt);  					genType = "nuclear";  				} else if (microwave == true) {  					inputPowerFixedAlt = inputPower;  					//print ("warp: relay inputPower " + inputPowerFixedAlt);  					genType = "relay";  				} else if (solar == true) {  					//inputPowerFixedAlt = inputPower / PluginHelper.getSatFloatCurve ().Evaluate ((float)FlightGlobals.Bodies [0].GetAltitude (vessel.transform.position));  					//print ("warp: solar inputPower " + inputPowerFixedAlt);  					genType = "solar";  				}                    				if (genType != "undefined") {  					string vesselIDSolar = vessel.id.ToString ();  					string outputPower = inputPowerFixedAlt.ToString ("0.000");  					if (!config.HasValue (vesselIDSolar)) {  						config.AddValue (vesselIDSolar' outputPower);  					} else {  						config.SetValue (vesselIDSolar' outputPower);  					}    					if (!config.HasValue (vesselIDSolar + "type")) {  						config.AddValue (vesselIDSolar + "type"' genType);  					} else {  						config.SetValue (vesselIDSolar + "type"' genType);  					}                    					config.Save (PluginHelper.getPluginSaveFilePath ());  				}              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,ActivateTransmitter,The following statement contains a magic number: transmitPower = 100;
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,ActivateTransmitter,The following statement contains a magic number: activeCount = 8;
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,DeactivateTransmitter,The following statement contains a magic number: activeCount = 8;
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,ActivateRelay,The following statement contains a magic number: activeCount = 8;
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,DeactivateRelay,The following statement contains a magic number: activeCount = 8;
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {                  if (inputPower > 1e6) {                      beamedpower = (inputPower / 1e6).ToString("0.000") + " GW";                  } else {                      beamedpower = (inputPower / 1000).ToString("0.000") + " MW";                  }              } else {                  beamedpower = inputPower.ToString("0.000") + " KW";              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {                  if (inputPower > 1e6) {                      beamedpower = (inputPower / 1e6).ToString("0.000") + " GW";                  } else {                      beamedpower = (inputPower / 1000).ToString("0.000") + " MW";                  }              } else {                  beamedpower = inputPower.ToString("0.000") + " KW";              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {                  if (inputPower > 1e6) {                      beamedpower = (inputPower / 1e6).ToString("0.000") + " GW";                  } else {                      beamedpower = (inputPower / 1000).ToString("0.000") + " MW";                  }              } else {                  beamedpower = inputPower.ToString("0.000") + " KW";              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnUpdate,The following statement contains a magic number: if (inputPower > 1000) {                  if (inputPower > 1e6) {                      beamedpower = (inputPower / 1e6).ToString("0.000") + " GW";                  } else {                      beamedpower = (inputPower / 1000).ToString("0.000") + " MW";                  }              } else {                  beamedpower = inputPower.ToString("0.000") + " KW";              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && !relay) {                  foreach (FNGenerator generator in generators) {                      if (generator.isActive()) {                          IThermalSource thermal_source = generator.getThermalSource();                          if (thermal_source != null && !thermal_source.IsVolatileSource) {                              double output = generator.getMaxPowerOutput();                              if (thermal_source is InterstellarFusionReactor) {                                  InterstellarFusionReactor fusion_reactor = thermal_source as InterstellarFusionReactor;                                  output = output * 0.92;                              }                              output = output * transmitPower / 100.0;                              double gpower = consumeFNResource(output * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                              nuclear_power += gpower * 1000 / TimeWarp.fixedDeltaTime;                          }                      }                  }                    foreach (ModuleDeployableSolarPanel panel in panels) {                      double output = panel.flowRate;                      double spower = part.RequestResource("ElectricCharge"' output * TimeWarp.fixedDeltaTime);                      double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      displayed_solar_power += spower / TimeWarp.fixedDeltaTime;                      //scale solar power to what it would be in Kerbin orbit for file storage                      solar_power += spower / TimeWarp.fixedDeltaTime/inv_square_mult;                  }              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && !relay) {                  foreach (FNGenerator generator in generators) {                      if (generator.isActive()) {                          IThermalSource thermal_source = generator.getThermalSource();                          if (thermal_source != null && !thermal_source.IsVolatileSource) {                              double output = generator.getMaxPowerOutput();                              if (thermal_source is InterstellarFusionReactor) {                                  InterstellarFusionReactor fusion_reactor = thermal_source as InterstellarFusionReactor;                                  output = output * 0.92;                              }                              output = output * transmitPower / 100.0;                              double gpower = consumeFNResource(output * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                              nuclear_power += gpower * 1000 / TimeWarp.fixedDeltaTime;                          }                      }                  }                    foreach (ModuleDeployableSolarPanel panel in panels) {                      double output = panel.flowRate;                      double spower = part.RequestResource("ElectricCharge"' output * TimeWarp.fixedDeltaTime);                      double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      displayed_solar_power += spower / TimeWarp.fixedDeltaTime;                      //scale solar power to what it would be in Kerbin orbit for file storage                      solar_power += spower / TimeWarp.fixedDeltaTime/inv_square_mult;                  }              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && !relay) {                  foreach (FNGenerator generator in generators) {                      if (generator.isActive()) {                          IThermalSource thermal_source = generator.getThermalSource();                          if (thermal_source != null && !thermal_source.IsVolatileSource) {                              double output = generator.getMaxPowerOutput();                              if (thermal_source is InterstellarFusionReactor) {                                  InterstellarFusionReactor fusion_reactor = thermal_source as InterstellarFusionReactor;                                  output = output * 0.92;                              }                              output = output * transmitPower / 100.0;                              double gpower = consumeFNResource(output * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                              nuclear_power += gpower * 1000 / TimeWarp.fixedDeltaTime;                          }                      }                  }                    foreach (ModuleDeployableSolarPanel panel in panels) {                      double output = panel.flowRate;                      double spower = part.RequestResource("ElectricCharge"' output * TimeWarp.fixedDeltaTime);                      double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      displayed_solar_power += spower / TimeWarp.fixedDeltaTime;                      //scale solar power to what it would be in Kerbin orbit for file storage                      solar_power += spower / TimeWarp.fixedDeltaTime/inv_square_mult;                  }              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && !relay) {                  foreach (FNGenerator generator in generators) {                      if (generator.isActive()) {                          IThermalSource thermal_source = generator.getThermalSource();                          if (thermal_source != null && !thermal_source.IsVolatileSource) {                              double output = generator.getMaxPowerOutput();                              if (thermal_source is InterstellarFusionReactor) {                                  InterstellarFusionReactor fusion_reactor = thermal_source as InterstellarFusionReactor;                                  output = output * 0.92;                              }                              output = output * transmitPower / 100.0;                              double gpower = consumeFNResource(output * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                              nuclear_power += gpower * 1000 / TimeWarp.fixedDeltaTime;                          }                      }                  }                    foreach (ModuleDeployableSolarPanel panel in panels) {                      double output = panel.flowRate;                      double spower = part.RequestResource("ElectricCharge"' output * TimeWarp.fixedDeltaTime);                      double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      displayed_solar_power += spower / TimeWarp.fixedDeltaTime;                      //scale solar power to what it would be in Kerbin orbit for file storage                      solar_power += spower / TimeWarp.fixedDeltaTime/inv_square_mult;                  }              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && !relay) {                  foreach (FNGenerator generator in generators) {                      if (generator.isActive()) {                          IThermalSource thermal_source = generator.getThermalSource();                          if (thermal_source != null && !thermal_source.IsVolatileSource) {                              double output = generator.getMaxPowerOutput();                              if (thermal_source is InterstellarFusionReactor) {                                  InterstellarFusionReactor fusion_reactor = thermal_source as InterstellarFusionReactor;                                  output = output * 0.92;                              }                              output = output * transmitPower / 100.0;                              double gpower = consumeFNResource(output * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                              nuclear_power += gpower * 1000 / TimeWarp.fixedDeltaTime;                          }                      }                  }                    foreach (ModuleDeployableSolarPanel panel in panels) {                      double output = panel.flowRate;                      double spower = part.RequestResource("ElectricCharge"' output * TimeWarp.fixedDeltaTime);                      double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      displayed_solar_power += spower / TimeWarp.fixedDeltaTime;                      //scale solar power to what it would be in Kerbin orbit for file storage                      solar_power += spower / TimeWarp.fixedDeltaTime/inv_square_mult;                  }              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (activeCount % 1000 == 9) {                  ConfigNode config = PluginHelper.getPluginSaveFile();                  string vesselID = vessel.id.ToString();                  if (config.HasNode("VESSEL_MICROWAVE_POWER_" + vesselID)) {                      ConfigNode power_node = config.GetNode("VESSEL_MICROWAVE_POWER_" + vesselID);                      if (power_node.HasValue("nuclear_power")) {                          power_node.SetValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      } else {                          power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      }                      if (power_node.HasValue("solar_power")) {                          power_node.SetValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                      } else {                          power_node.AddValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                      }                    } else {                      ConfigNode power_node = config.AddNode("VESSEL_MICROWAVE_POWER_" + vesselID);                      power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      power_node.AddValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                  }                    if (config.HasNode("VESSEL_MICROWAVE_RELAY_" + vesselID)) {                      ConfigNode relay_node = config.GetNode("VESSEL_MICROWAVE_RELAY_" + vesselID);                      if (relay_node.HasValue("relay")) {                          relay_node.SetValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                      } else {                          relay_node.AddValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                      }                  } else {                      ConfigNode relay_node = config.AddNode("VESSEL_MICROWAVE_RELAY_" + vesselID);                      relay_node.AddValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                  }                    config.Save(PluginHelper.getPluginSaveFilePath());              }
Magic Number,FNPlugin,MicrowavePowerTransmitter,C:\repos\FractalUK_KSPInterstellar\FNPlugin\MicrowavePowerTransmitter.cs,OnFixedUpdate,The following statement contains a magic number: if (activeCount % 1000 == 9) {                  ConfigNode config = PluginHelper.getPluginSaveFile();                  string vesselID = vessel.id.ToString();                  if (config.HasNode("VESSEL_MICROWAVE_POWER_" + vesselID)) {                      ConfigNode power_node = config.GetNode("VESSEL_MICROWAVE_POWER_" + vesselID);                      if (power_node.HasValue("nuclear_power")) {                          power_node.SetValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      } else {                          power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      }                      if (power_node.HasValue("solar_power")) {                          power_node.SetValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                      } else {                          power_node.AddValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                      }                    } else {                      ConfigNode power_node = config.AddNode("VESSEL_MICROWAVE_POWER_" + vesselID);                      power_node.AddValue("nuclear_power"' MicrowavePowerTransmitter.getEnumeratedNuclearPowerForVessel(vessel).ToString("E"));                      power_node.AddValue("solar_power"' MicrowavePowerTransmitter.getEnumeratedSolarPowerForVessel(vessel).ToString("E"));                  }                    if (config.HasNode("VESSEL_MICROWAVE_RELAY_" + vesselID)) {                      ConfigNode relay_node = config.GetNode("VESSEL_MICROWAVE_RELAY_" + vesselID);                      if (relay_node.HasValue("relay")) {                          relay_node.SetValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                      } else {                          relay_node.AddValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                      }                  } else {                      ConfigNode relay_node = config.AddNode("VESSEL_MICROWAVE_RELAY_" + vesselID);                      relay_node.AddValue("relay"' MicrowavePowerTransmitter.vesselIsRelay(vessel).ToString());                  }                    config.Save(PluginHelper.getPluginSaveFilePath());              }
Magic Number,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  try                  {                      pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                        double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      proportion = (!double.IsNaN(proportion) && !double.IsInfinity(proportion)) ? proportion : 1;                        if (rapier_engine != null)                      {                          if (rapier_engine.isOperational && rapier_engine.currentThrottle > 0 && rapier_engine.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                        if (rapier_engine2 != null)                      {                          if (rapier_engine2.isOperational && rapier_engine2.currentThrottle > 0 && rapier_engine2.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine2.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                  } catch (Exception ex)                  {                      Debug.Log("[KSP Interstellar] ModuleSabreHeating threw Exception in OnFixedUpdate(): " + ex);                  }              }
Magic Number,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  try                  {                      pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                        double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      proportion = (!double.IsNaN(proportion) && !double.IsInfinity(proportion)) ? proportion : 1;                        if (rapier_engine != null)                      {                          if (rapier_engine.isOperational && rapier_engine.currentThrottle > 0 && rapier_engine.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                        if (rapier_engine2 != null)                      {                          if (rapier_engine2.isOperational && rapier_engine2.currentThrottle > 0 && rapier_engine2.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine2.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                  } catch (Exception ex)                  {                      Debug.Log("[KSP Interstellar] ModuleSabreHeating threw Exception in OnFixedUpdate(): " + ex);                  }              }
Magic Number,FNPlugin,ModuleSabreHeating,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSabreHeating.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  try                  {                      pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                        double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      proportion = (!double.IsNaN(proportion) && !double.IsInfinity(proportion)) ? proportion : 1;                        if (rapier_engine != null)                      {                          if (rapier_engine.isOperational && rapier_engine.currentThrottle > 0 && rapier_engine.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                        if (rapier_engine2 != null)                      {                          if (rapier_engine2.isOperational && rapier_engine2.currentThrottle > 0 && rapier_engine2.useVelocityCurve)                          {                              float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                              if (temp >= (part.maxTemp - 10.0f))                              {                                  ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                                  rapier_engine2.Shutdown();                                  part.temperature = 1;                                  return;                              }                              part.temperature = temp;                          } else                          {                              part.temperature = 1;                          }                      }                  } catch (Exception ex)                  {                      Debug.Log("[KSP Interstellar] ModuleSabreHeating threw Exception in OnFixedUpdate(): " + ex);                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,getFormattedPowerString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0") + " GW";                  } else {                      return (power / 1000).ToString("0.0") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.0") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The following statement contains a magic number: if (!plugin_init) {                  gdb = GameDatabase.Instance;  				plugin_init = true;                    AvailablePart kerbalRadiationPart = PartLoader.getPartInfoByName("kerbalEVA");                  if (kerbalRadiationPart.partPrefab.Modules != null) {                      if (kerbalRadiationPart.partPrefab.FindModulesImplementing<FNModuleRadiation>().Count == 0) {                          kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                      }                  } else {                      kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                  }    				List<AvailablePart> available_parts = PartLoader.LoadedPartsList;  				foreach (AvailablePart available_part in available_parts) {  					Part prefab_available_part = available_part.partPrefab;  					try {  						if(prefab_available_part.Modules != null) {  														  							if(prefab_available_part.FindModulesImplementing<ModuleResourceIntake>().Count > 0) {  								ModuleResourceIntake intake = prefab_available_part.Modules["ModuleResourceIntake"] as ModuleResourceIntake;  								if(intake.resourceName == "IntakeAir") {  									Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "AtmosphericIntake");  									AtmosphericIntake pm = null;  									if(type != null) {  										pm = prefab_available_part.gameObject.AddComponent(type) as AtmosphericIntake;  										prefab_available_part.Modules.Add(pm);  										pm.area = intake.area*intake.unitScalar*intake.maxIntakeSpeed/20;  									}                                        PartResource intake_air_resource = prefab_available_part.Resources["IntakeAir"];                                        if (intake_air_resource != null && !prefab_available_part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere))                                      {  										ConfigNode node = new ConfigNode("RESOURCE");                                          node.AddValue("name"' InterstellarResourcesConfiguration.Instance.IntakeAtmosphere);  										node.AddValue("maxAmount"' intake_air_resource.maxAmount);  										node.AddValue("amount"' intake_air_resource.amount);  										prefab_available_part.AddResource(node);  									}  								}    							}                                if (prefab_available_part.FindModulesImplementing<ModuleDeployableSolarPanel>().Count > 0) {                                  ModuleDeployableSolarPanel panel = prefab_available_part.Modules["ModuleDeployableSolarPanel"] as ModuleDeployableSolarPanel;                                  if (panel.chargeRate > 0) {                                      Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNSolarPanelWasteHeatModule");                                      FNSolarPanelWasteHeatModule pm = null;                                      if (type != null) {                                          pm = prefab_available_part.gameObject.AddComponent(type) as FNSolarPanelWasteHeatModule;                                          prefab_available_part.Modules.Add(pm);                                      }                                  }                                                                                                                                      if (!prefab_available_part.Resources.Contains("WasteHeat") && panel.chargeRate > 0) {                                      ConfigNode node = new ConfigNode("RESOURCE");                                      node.AddValue("name"' "WasteHeat");                                      node.AddValue("maxAmount"' panel.chargeRate * 100);                                      node.AddValue("amount"' 0);                                      PartResource pr = prefab_available_part.AddResource(node);                                        if (available_part.resourceInfo != null && pr != null) {                                          if (available_part.resourceInfo.Length == 0) {                                              available_part.resourceInfo = pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          } else {                                              available_part.resourceInfo = available_part.resourceInfo + "\n" + pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          }                                      }                                  }                                }    							if(prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "Electric Engine Controller").First();                                  mod_info.moduleName = "Electric Engine";  							}    							if(prefab_available_part.FindModulesImplementing<FNNozzleController>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<FNNozzleController>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "FNNozzle Controller").First();                                  mod_info.moduleName = "Thermal Nozzle";  							}                                							if(prefab_available_part.CrewCapacity > 0 || prefab_available_part.FindModulesImplementing<ModuleCommand>().Count > 0) {  								Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNModuleRadiation");  								FNModuleRadiation pm = null;  								if(type != null) {  									pm = prefab_available_part.gameObject.AddComponent(type) as FNModuleRadiation;  									prefab_available_part.Modules.Add(pm);  									double rad_hardness = prefab_available_part.mass /(Math.Max(prefab_available_part.CrewCapacity'0.1))*7.5;  									pm.rad_hardness = rad_hardness;                                      AvailablePart.ModuleInfo minfo = new AvailablePart.ModuleInfo();                                      minfo.moduleName = "Radiation Status";                                      minfo.info = pm.GetInfo();                                      available_part.moduleInfos.Add(minfo);  								}                                  print("Adding ModuleRadiation to " + prefab_available_part.name);  							}  						}  					}catch(Exception ex) {                          if (prefab_available_part != null) {                              print("[KSP Interstellar] Exception caught adding to: " + prefab_available_part.name + " part: " + ex.ToString());                          } else {                              print("[KSP Interstellar] Exception caught adding to unknown module");                          }  					}      				}  			}
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The following statement contains a magic number: if (!plugin_init) {                  gdb = GameDatabase.Instance;  				plugin_init = true;                    AvailablePart kerbalRadiationPart = PartLoader.getPartInfoByName("kerbalEVA");                  if (kerbalRadiationPart.partPrefab.Modules != null) {                      if (kerbalRadiationPart.partPrefab.FindModulesImplementing<FNModuleRadiation>().Count == 0) {                          kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                      }                  } else {                      kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                  }    				List<AvailablePart> available_parts = PartLoader.LoadedPartsList;  				foreach (AvailablePart available_part in available_parts) {  					Part prefab_available_part = available_part.partPrefab;  					try {  						if(prefab_available_part.Modules != null) {  														  							if(prefab_available_part.FindModulesImplementing<ModuleResourceIntake>().Count > 0) {  								ModuleResourceIntake intake = prefab_available_part.Modules["ModuleResourceIntake"] as ModuleResourceIntake;  								if(intake.resourceName == "IntakeAir") {  									Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "AtmosphericIntake");  									AtmosphericIntake pm = null;  									if(type != null) {  										pm = prefab_available_part.gameObject.AddComponent(type) as AtmosphericIntake;  										prefab_available_part.Modules.Add(pm);  										pm.area = intake.area*intake.unitScalar*intake.maxIntakeSpeed/20;  									}                                        PartResource intake_air_resource = prefab_available_part.Resources["IntakeAir"];                                        if (intake_air_resource != null && !prefab_available_part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere))                                      {  										ConfigNode node = new ConfigNode("RESOURCE");                                          node.AddValue("name"' InterstellarResourcesConfiguration.Instance.IntakeAtmosphere);  										node.AddValue("maxAmount"' intake_air_resource.maxAmount);  										node.AddValue("amount"' intake_air_resource.amount);  										prefab_available_part.AddResource(node);  									}  								}    							}                                if (prefab_available_part.FindModulesImplementing<ModuleDeployableSolarPanel>().Count > 0) {                                  ModuleDeployableSolarPanel panel = prefab_available_part.Modules["ModuleDeployableSolarPanel"] as ModuleDeployableSolarPanel;                                  if (panel.chargeRate > 0) {                                      Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNSolarPanelWasteHeatModule");                                      FNSolarPanelWasteHeatModule pm = null;                                      if (type != null) {                                          pm = prefab_available_part.gameObject.AddComponent(type) as FNSolarPanelWasteHeatModule;                                          prefab_available_part.Modules.Add(pm);                                      }                                  }                                                                                                                                      if (!prefab_available_part.Resources.Contains("WasteHeat") && panel.chargeRate > 0) {                                      ConfigNode node = new ConfigNode("RESOURCE");                                      node.AddValue("name"' "WasteHeat");                                      node.AddValue("maxAmount"' panel.chargeRate * 100);                                      node.AddValue("amount"' 0);                                      PartResource pr = prefab_available_part.AddResource(node);                                        if (available_part.resourceInfo != null && pr != null) {                                          if (available_part.resourceInfo.Length == 0) {                                              available_part.resourceInfo = pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          } else {                                              available_part.resourceInfo = available_part.resourceInfo + "\n" + pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          }                                      }                                  }                                }    							if(prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "Electric Engine Controller").First();                                  mod_info.moduleName = "Electric Engine";  							}    							if(prefab_available_part.FindModulesImplementing<FNNozzleController>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<FNNozzleController>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "FNNozzle Controller").First();                                  mod_info.moduleName = "Thermal Nozzle";  							}                                							if(prefab_available_part.CrewCapacity > 0 || prefab_available_part.FindModulesImplementing<ModuleCommand>().Count > 0) {  								Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNModuleRadiation");  								FNModuleRadiation pm = null;  								if(type != null) {  									pm = prefab_available_part.gameObject.AddComponent(type) as FNModuleRadiation;  									prefab_available_part.Modules.Add(pm);  									double rad_hardness = prefab_available_part.mass /(Math.Max(prefab_available_part.CrewCapacity'0.1))*7.5;  									pm.rad_hardness = rad_hardness;                                      AvailablePart.ModuleInfo minfo = new AvailablePart.ModuleInfo();                                      minfo.moduleName = "Radiation Status";                                      minfo.info = pm.GetInfo();                                      available_part.moduleInfos.Add(minfo);  								}                                  print("Adding ModuleRadiation to " + prefab_available_part.name);  							}  						}  					}catch(Exception ex) {                          if (prefab_available_part != null) {                              print("[KSP Interstellar] Exception caught adding to: " + prefab_available_part.name + " part: " + ex.ToString());                          } else {                              print("[KSP Interstellar] Exception caught adding to unknown module");                          }  					}      				}  			}
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The following statement contains a magic number: if (!plugin_init) {                  gdb = GameDatabase.Instance;  				plugin_init = true;                    AvailablePart kerbalRadiationPart = PartLoader.getPartInfoByName("kerbalEVA");                  if (kerbalRadiationPart.partPrefab.Modules != null) {                      if (kerbalRadiationPart.partPrefab.FindModulesImplementing<FNModuleRadiation>().Count == 0) {                          kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                      }                  } else {                      kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                  }    				List<AvailablePart> available_parts = PartLoader.LoadedPartsList;  				foreach (AvailablePart available_part in available_parts) {  					Part prefab_available_part = available_part.partPrefab;  					try {  						if(prefab_available_part.Modules != null) {  														  							if(prefab_available_part.FindModulesImplementing<ModuleResourceIntake>().Count > 0) {  								ModuleResourceIntake intake = prefab_available_part.Modules["ModuleResourceIntake"] as ModuleResourceIntake;  								if(intake.resourceName == "IntakeAir") {  									Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "AtmosphericIntake");  									AtmosphericIntake pm = null;  									if(type != null) {  										pm = prefab_available_part.gameObject.AddComponent(type) as AtmosphericIntake;  										prefab_available_part.Modules.Add(pm);  										pm.area = intake.area*intake.unitScalar*intake.maxIntakeSpeed/20;  									}                                        PartResource intake_air_resource = prefab_available_part.Resources["IntakeAir"];                                        if (intake_air_resource != null && !prefab_available_part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere))                                      {  										ConfigNode node = new ConfigNode("RESOURCE");                                          node.AddValue("name"' InterstellarResourcesConfiguration.Instance.IntakeAtmosphere);  										node.AddValue("maxAmount"' intake_air_resource.maxAmount);  										node.AddValue("amount"' intake_air_resource.amount);  										prefab_available_part.AddResource(node);  									}  								}    							}                                if (prefab_available_part.FindModulesImplementing<ModuleDeployableSolarPanel>().Count > 0) {                                  ModuleDeployableSolarPanel panel = prefab_available_part.Modules["ModuleDeployableSolarPanel"] as ModuleDeployableSolarPanel;                                  if (panel.chargeRate > 0) {                                      Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNSolarPanelWasteHeatModule");                                      FNSolarPanelWasteHeatModule pm = null;                                      if (type != null) {                                          pm = prefab_available_part.gameObject.AddComponent(type) as FNSolarPanelWasteHeatModule;                                          prefab_available_part.Modules.Add(pm);                                      }                                  }                                                                                                                                      if (!prefab_available_part.Resources.Contains("WasteHeat") && panel.chargeRate > 0) {                                      ConfigNode node = new ConfigNode("RESOURCE");                                      node.AddValue("name"' "WasteHeat");                                      node.AddValue("maxAmount"' panel.chargeRate * 100);                                      node.AddValue("amount"' 0);                                      PartResource pr = prefab_available_part.AddResource(node);                                        if (available_part.resourceInfo != null && pr != null) {                                          if (available_part.resourceInfo.Length == 0) {                                              available_part.resourceInfo = pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          } else {                                              available_part.resourceInfo = available_part.resourceInfo + "\n" + pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          }                                      }                                  }                                }    							if(prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "Electric Engine Controller").First();                                  mod_info.moduleName = "Electric Engine";  							}    							if(prefab_available_part.FindModulesImplementing<FNNozzleController>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<FNNozzleController>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "FNNozzle Controller").First();                                  mod_info.moduleName = "Thermal Nozzle";  							}                                							if(prefab_available_part.CrewCapacity > 0 || prefab_available_part.FindModulesImplementing<ModuleCommand>().Count > 0) {  								Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNModuleRadiation");  								FNModuleRadiation pm = null;  								if(type != null) {  									pm = prefab_available_part.gameObject.AddComponent(type) as FNModuleRadiation;  									prefab_available_part.Modules.Add(pm);  									double rad_hardness = prefab_available_part.mass /(Math.Max(prefab_available_part.CrewCapacity'0.1))*7.5;  									pm.rad_hardness = rad_hardness;                                      AvailablePart.ModuleInfo minfo = new AvailablePart.ModuleInfo();                                      minfo.moduleName = "Radiation Status";                                      minfo.info = pm.GetInfo();                                      available_part.moduleInfos.Add(minfo);  								}                                  print("Adding ModuleRadiation to " + prefab_available_part.name);  							}  						}  					}catch(Exception ex) {                          if (prefab_available_part != null) {                              print("[KSP Interstellar] Exception caught adding to: " + prefab_available_part.name + " part: " + ex.ToString());                          } else {                              print("[KSP Interstellar] Exception caught adding to unknown module");                          }  					}      				}  			}
Magic Number,FNPlugin,PluginHelper,C:\repos\FractalUK_KSPInterstellar\FNPlugin\PluginHelper.cs,Update,The following statement contains a magic number: if (!plugin_init) {                  gdb = GameDatabase.Instance;  				plugin_init = true;                    AvailablePart kerbalRadiationPart = PartLoader.getPartInfoByName("kerbalEVA");                  if (kerbalRadiationPart.partPrefab.Modules != null) {                      if (kerbalRadiationPart.partPrefab.FindModulesImplementing<FNModuleRadiation>().Count == 0) {                          kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                      }                  } else {                      kerbalRadiationPart.partPrefab.gameObject.AddComponent<FNModuleRadiation>();                  }    				List<AvailablePart> available_parts = PartLoader.LoadedPartsList;  				foreach (AvailablePart available_part in available_parts) {  					Part prefab_available_part = available_part.partPrefab;  					try {  						if(prefab_available_part.Modules != null) {  														  							if(prefab_available_part.FindModulesImplementing<ModuleResourceIntake>().Count > 0) {  								ModuleResourceIntake intake = prefab_available_part.Modules["ModuleResourceIntake"] as ModuleResourceIntake;  								if(intake.resourceName == "IntakeAir") {  									Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "AtmosphericIntake");  									AtmosphericIntake pm = null;  									if(type != null) {  										pm = prefab_available_part.gameObject.AddComponent(type) as AtmosphericIntake;  										prefab_available_part.Modules.Add(pm);  										pm.area = intake.area*intake.unitScalar*intake.maxIntakeSpeed/20;  									}                                        PartResource intake_air_resource = prefab_available_part.Resources["IntakeAir"];                                        if (intake_air_resource != null && !prefab_available_part.Resources.Contains(InterstellarResourcesConfiguration.Instance.IntakeAtmosphere))                                      {  										ConfigNode node = new ConfigNode("RESOURCE");                                          node.AddValue("name"' InterstellarResourcesConfiguration.Instance.IntakeAtmosphere);  										node.AddValue("maxAmount"' intake_air_resource.maxAmount);  										node.AddValue("amount"' intake_air_resource.amount);  										prefab_available_part.AddResource(node);  									}  								}    							}                                if (prefab_available_part.FindModulesImplementing<ModuleDeployableSolarPanel>().Count > 0) {                                  ModuleDeployableSolarPanel panel = prefab_available_part.Modules["ModuleDeployableSolarPanel"] as ModuleDeployableSolarPanel;                                  if (panel.chargeRate > 0) {                                      Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNSolarPanelWasteHeatModule");                                      FNSolarPanelWasteHeatModule pm = null;                                      if (type != null) {                                          pm = prefab_available_part.gameObject.AddComponent(type) as FNSolarPanelWasteHeatModule;                                          prefab_available_part.Modules.Add(pm);                                      }                                  }                                                                                                                                      if (!prefab_available_part.Resources.Contains("WasteHeat") && panel.chargeRate > 0) {                                      ConfigNode node = new ConfigNode("RESOURCE");                                      node.AddValue("name"' "WasteHeat");                                      node.AddValue("maxAmount"' panel.chargeRate * 100);                                      node.AddValue("amount"' 0);                                      PartResource pr = prefab_available_part.AddResource(node);                                        if (available_part.resourceInfo != null && pr != null) {                                          if (available_part.resourceInfo.Length == 0) {                                              available_part.resourceInfo = pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          } else {                                              available_part.resourceInfo = available_part.resourceInfo + "\n" + pr.resourceName + ":" + pr.amount + " / " + pr.maxAmount;                                          }                                      }                                  }                                }    							if(prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<ElectricEngineControllerFX>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "Electric Engine Controller").First();                                  mod_info.moduleName = "Electric Engine";  							}    							if(prefab_available_part.FindModulesImplementing<FNNozzleController>().Count() > 0) {  								available_part.moduleInfo = prefab_available_part.FindModulesImplementing<FNNozzleController>().First().GetInfo();                                  available_part.moduleInfos.RemoveAll(modi => modi.moduleName == "Engine");                                  AvailablePart.ModuleInfo mod_info = available_part.moduleInfos.Where(modi => modi.moduleName == "FNNozzle Controller").First();                                  mod_info.moduleName = "Thermal Nozzle";  							}                                							if(prefab_available_part.CrewCapacity > 0 || prefab_available_part.FindModulesImplementing<ModuleCommand>().Count > 0) {  								Type type = AssemblyLoader.GetClassByName(typeof(PartModule)' "FNModuleRadiation");  								FNModuleRadiation pm = null;  								if(type != null) {  									pm = prefab_available_part.gameObject.AddComponent(type) as FNModuleRadiation;  									prefab_available_part.Modules.Add(pm);  									double rad_hardness = prefab_available_part.mass /(Math.Max(prefab_available_part.CrewCapacity'0.1))*7.5;  									pm.rad_hardness = rad_hardness;                                      AvailablePart.ModuleInfo minfo = new AvailablePart.ModuleInfo();                                      minfo.moduleName = "Radiation Status";                                      minfo.info = pm.GetInfo();                                      available_part.moduleInfos.Add(minfo);  								}                                  print("Adding ModuleRadiation to " + prefab_available_part.name);  							}  						}  					}catch(Exception ex) {                          if (prefab_available_part != null) {                              print("[KSP Interstellar] Exception caught adding to: " + prefab_available_part.name + " part: " + ex.ToString());                          } else {                              print("[KSP Interstellar] Exception caught adding to unknown module");                          }  					}      				}  			}
Magic Number,FNPlugin,RadiationDose,C:\repos\FractalUK_KSPInterstellar\FNPlugin\RadiationDose.cs,GetDoseWithMaterialShielding,The following statement contains a magic number: return new RadiationDose(BetaDose * factor * 0.1' GammaDose * factor' ProtonDose' NeutronDose);
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateFrame,The following statement contains a magic number: _hydrogen_consumption_rate = _part.RequestResource(InterstellarResourcesConfiguration.Instance.Hydrogen' h_rate_temp * TimeWarp.fixedDeltaTime / _hydrogen_density / 2);
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateFrame,The following statement contains a magic number: if (_hydrogen_consumption_rate > 0)              {                  _oxygen_production_rate = _part.RequestResource(InterstellarResourcesConfiguration.Instance.Oxygen' -o_rate_temp * TimeWarp.fixedDeltaTime / _oxygen_density) / TimeWarp.fixedDeltaTime / _oxygen_density;                  _methane_production_rate = -_part.RequestResource(InterstellarResourcesConfiguration.Instance.Methane' -o_rate_temp * 2.0 / _oxygen_density * TimeWarp.fixedDeltaTime / _methane_density) * _methane_density / TimeWarp.fixedDeltaTime;              }
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Hydrogen Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_hydrogen_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Methane Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_methane_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Oxygen Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_oxygen_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,SabatierReactor,C:\repos\FractalUK_KSPInterstellar\FNPlugin\SabatierReactor.cs,updateStatusMessage,The following statement contains a magic number: if (_methane_production_rate > 0 && _oxygen_production_rate > 0)              {                  _status = "Sabatier Process Ongoing";              } else if (_oxygen_production_rate > 0)              {                  _status = "Ongoing: Insufficient Oxygen Storage";              } else if (_methane_production_rate > 0)              {                  _status = "Ongoing: Insufficient Methane Storage";              } else if (CurrentPower <= 0.01*PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  _status = "Insufficient Storage";              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,ActivateFactory,The following statement contains a magic number: active_mode = 2;
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,ActivateElectrolysis,The following statement contains a magic number: active_mode = 3;
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,ActivateCentrifuge,The following statement contains a magic number: active_mode = 4;
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The following statement contains a magic number: if (IsEnabled && last_active_time != 0) {                  float global_rate_multipliers = 1;                  crew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);                  global_rate_multipliers = global_rate_multipliers * crew_capacity_ratio;                    if (active_mode == 0) { // Science persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                      science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                      science_to_add += (float)science_to_increment;                    } else if (active_mode == 2) { // Antimatter persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                        List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList();                      float currentAntimatter_missing = (float) antimatter_resources.Sum(ar => ar.maxAmount-ar.amount);                        float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6);                      double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0;                      float antimatter_peristence_to_add = (float)-Math.Min(currentAntimatter_missing' antimatter_mass * time_diff);                      part.RequestResource("Antimatter"' antimatter_peristence_to_add);                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The following statement contains a magic number: if (IsEnabled && last_active_time != 0) {                  float global_rate_multipliers = 1;                  crew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);                  global_rate_multipliers = global_rate_multipliers * crew_capacity_ratio;                    if (active_mode == 0) { // Science persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                      science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                      science_to_add += (float)science_to_increment;                    } else if (active_mode == 2) { // Antimatter persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                        List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList();                      float currentAntimatter_missing = (float) antimatter_resources.Sum(ar => ar.maxAmount-ar.amount);                        float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6);                      double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0;                      float antimatter_peristence_to_add = (float)-Math.Min(currentAntimatter_missing' antimatter_mass * time_diff);                      part.RequestResource("Antimatter"' antimatter_peristence_to_add);                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The following statement contains a magic number: if (IsEnabled && last_active_time != 0) {                  float global_rate_multipliers = 1;                  crew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);                  global_rate_multipliers = global_rate_multipliers * crew_capacity_ratio;                    if (active_mode == 0) { // Science persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                      science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                      science_to_add += (float)science_to_increment;                    } else if (active_mode == 2) { // Antimatter persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                        List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList();                      float currentAntimatter_missing = (float) antimatter_resources.Sum(ar => ar.maxAmount-ar.amount);                        float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6);                      double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0;                      float antimatter_peristence_to_add = (float)-Math.Min(currentAntimatter_missing' antimatter_mass * time_diff);                      part.RequestResource("Antimatter"' antimatter_peristence_to_add);                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The following statement contains a magic number: if (IsEnabled && last_active_time != 0) {                  float global_rate_multipliers = 1;                  crew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);                  global_rate_multipliers = global_rate_multipliers * crew_capacity_ratio;                    if (active_mode == 0) { // Science persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                      science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                      science_to_add += (float)science_to_increment;                    } else if (active_mode == 2) { // Antimatter persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                        List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList();                      float currentAntimatter_missing = (float) antimatter_resources.Sum(ar => ar.maxAmount-ar.amount);                        float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6);                      double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0;                      float antimatter_peristence_to_add = (float)-Math.Min(currentAntimatter_missing' antimatter_mass * time_diff);                      part.RequestResource("Antimatter"' antimatter_peristence_to_add);                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnStart,The following statement contains a magic number: if (IsEnabled && last_active_time != 0) {                  float global_rate_multipliers = 1;                  crew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);                  global_rate_multipliers = global_rate_multipliers * crew_capacity_ratio;                    if (active_mode == 0) { // Science persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      double science_to_increment = GameConstants.baseScienceRate * time_diff / 86400 * electrical_power_ratio * stupidity * global_rate_multipliers * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                      science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                      science_to_add += (float)science_to_increment;                    } else if (active_mode == 2) { // Antimatter persistence                      double now = Planetarium.GetUniversalTime();                      double time_diff = now - last_active_time;                        List<PartResource> antimatter_resources = part.GetConnectedResources(InterstellarResourcesConfiguration.Instance.Antimatter).ToList();                      float currentAntimatter_missing = (float) antimatter_resources.Sum(ar => ar.maxAmount-ar.amount);                        float total_electrical_power_provided = (float)(electrical_power_ratio * (GameConstants.baseAMFPowerConsumption + GameConstants.basePowerConsumption) * 1E6);                      double antimatter_mass = total_electrical_power_provided / GameConstants.warpspeed / GameConstants.warpspeed * 1E6 / 20000.0;                      float antimatter_peristence_to_add = (float)-Math.Min(currentAntimatter_missing' antimatter_mass * time_diff);                      part.RequestResource("Antimatter"' antimatter_peristence_to_add);                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  //anim [animName1].normalizedTime = 1f;                  statusTitle = modes[active_mode] + "...";                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  Fields["powerStr"].guiActive = true;                    double currentpowertmp = electrical_power_ratio * GameConstants.basePowerConsumption;                  powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.basePowerConsumption.ToString("0.00") + "MW";                  if (active_mode == 0) { // Research                      Fields["scienceRate"].guiActive = true;                      float scienceratetmp = science_rate_f * 86400;                      scienceRate = scienceratetmp.ToString("0.000") + "/Day";                  } else if (active_mode == 1) { // Fuel Reprocessing                      Fields["reprocessingRate"].guiActive = true;                      float reprocessratetmp = reprocessing_rate_f;                      reprocessingRate = reprocessratetmp.ToString("0.0") + " Hours Remaining";                  } else if (active_mode == 2) { // Antimatter                      currentpowertmp = electrical_power_ratio * GameConstants.baseAMFPowerConsumption;                      Fields["antimatterRate"].guiActive = true;                      Fields["antimatterProductionEfficiency"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseAMFPowerConsumption.ToString("0.00") + "MW";                      antimatterProductionEfficiency = (anti_factory.getAntimatterProductionEfficiency() * 100).ToString("0.000") + "%";                      double antimatter_rate_per_day = antimatter_rate_f * 86400;                      if (antimatter_rate_per_day > 0.1) {                          antimatterRate = (antimatter_rate_per_day).ToString("0.000") + " mg/day";                      } else {                          if (antimatter_rate_per_day > 0.1e-3) {                              antimatterRate = (antimatter_rate_per_day*1e3).ToString("0.000") + " ug/day";                          } else {                              antimatterRate = (antimatter_rate_per_day*1e6).ToString("0.000") + " ng/day";                          }                      }                  } else if (active_mode == 3) { // Electrolysis                      currentpowertmp = electrical_power_ratio * GameConstants.baseELCPowerConsumption;                      Fields["electrolysisRate"].guiActive = true;                      float electrolysisratetmp = -electrolysis_rate_f * 86400;                      electrolysisRate = electrolysisratetmp.ToString("0.0") + "mT/day";                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseELCPowerConsumption.ToString("0.00") + "MW";                  } else if (active_mode == 4) { // Centrifuge                      currentpowertmp = electrical_power_ratio * GameConstants.baseCentriPowerConsumption;                      Fields["centrifugeRate"].guiActive = true;                      powerStr = currentpowertmp.ToString("0.00") + "MW / " + GameConstants.baseCentriPowerConsumption.ToString("0.00") + "MW";                      float deut_per_hour = deut_rate_f * 3600;                      centrifugeRate = deut_per_hour.ToString("0.00") + " Kg Deuterium/Hour";                  } else {                    }              } else {                  if (play_down) {                      anim[animName1].speed = -1f;                      anim[animName1].normalizedTime = 1f;                      anim.Blend(animName1' 2f);                      anim2[animName2].speed = -1f;                      anim2[animName2].normalizedTime = 1f;                      anim2.Blend(animName2' 2f);                      play_down = false;                  }                  //anim [animName1].normalizedTime = 0f;                  Fields["scienceRate"].guiActive = false;                  Fields["reprocessingRate"].guiActive = false;                  Fields["antimatterRate"].guiActive = false;                  Fields["powerStr"].guiActive = false;                  Fields["centrifugeRate"].guiActive = false;                  Fields["electrolysisRate"].guiActive = false;                  Fields["antimatterProductionEfficiency"].guiActive = false;                  if (crew_capacity_ratio > 0) {                      statusTitle = "Idle";                  } else {                      statusTitle = "Not enough crew";                  }              }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Research                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      science_rate_f = (float)(GameConstants.baseScienceRate * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / 86400.0f * global_rate_multipliers * stupidity / (Mathf.Sqrt(altitude_multiplier)));                      if (ResearchAndDevelopment.Instance != null && !double.IsNaN(science_rate_f) && !double.IsInfinity(science_rate_f))                      {                          //ResearchAndDevelopment.Instance.Science = ResearchAndDevelopment.Instance.Science + science_rate_f * TimeWarp.fixedDeltaTime;                          science_to_add += science_rate_f * TimeWarp.fixedDeltaTime;                      }                  } else if (active_mode == 1) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      reprocessor.UpdateFrame(global_rate_multipliers);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_f = (float)(reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour());                      } else {                          IsEnabled = false;                      }                  } else if (active_mode == 2) { //Antimatter                      double electrical_power_provided = consumeFNResource(GameConstants.baseAMFPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAMFPowerConsumption);                      global_rate_multipliers = crew_capacity_ratio * electrical_power_ratio;                      anti_factory.produceAntimatterFrame(global_rate_multipliers);                      antimatter_rate_f = (float)anti_factory.getAntimatterProductionRate();                  } else if (active_mode == 3) {                      IsEnabled = false;                  } else if (active_mode == 4) { // Centrifuge                      if (vessel.Splashed) {                          float electrical_power_provided = consumeFNResource(GameConstants.baseCentriPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseCentriPowerConsumption);                          global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                          float deut_produced = (float)(global_rate_multipliers * GameConstants.deuterium_timescale * GameConstants.deuterium_abudance * 1000.0f);                          deut_rate_f = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Deuterium' -deut_produced * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime;                      } else {                          ScreenMessages.PostScreenMessage("You must be splashed down to perform this activity."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  }                    if (electrical_power_ratio <= 0) {                      deut_rate_f = 0;                      electrolysis_rate_f = 0;                      science_rate_f = 0;                      antimatter_rate_f = 0;                      reprocessing_rate_f = 0;                  }                    last_active_time = (float)Planetarium.GetUniversalTime();              } else {                }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Research                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      science_rate_f = (float)(GameConstants.baseScienceRate * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / 86400.0f * global_rate_multipliers * stupidity / (Mathf.Sqrt(altitude_multiplier)));                      if (ResearchAndDevelopment.Instance != null && !double.IsNaN(science_rate_f) && !double.IsInfinity(science_rate_f))                      {                          //ResearchAndDevelopment.Instance.Science = ResearchAndDevelopment.Instance.Science + science_rate_f * TimeWarp.fixedDeltaTime;                          science_to_add += science_rate_f * TimeWarp.fixedDeltaTime;                      }                  } else if (active_mode == 1) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      reprocessor.UpdateFrame(global_rate_multipliers);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_f = (float)(reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour());                      } else {                          IsEnabled = false;                      }                  } else if (active_mode == 2) { //Antimatter                      double electrical_power_provided = consumeFNResource(GameConstants.baseAMFPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAMFPowerConsumption);                      global_rate_multipliers = crew_capacity_ratio * electrical_power_ratio;                      anti_factory.produceAntimatterFrame(global_rate_multipliers);                      antimatter_rate_f = (float)anti_factory.getAntimatterProductionRate();                  } else if (active_mode == 3) {                      IsEnabled = false;                  } else if (active_mode == 4) { // Centrifuge                      if (vessel.Splashed) {                          float electrical_power_provided = consumeFNResource(GameConstants.baseCentriPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseCentriPowerConsumption);                          global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                          float deut_produced = (float)(global_rate_multipliers * GameConstants.deuterium_timescale * GameConstants.deuterium_abudance * 1000.0f);                          deut_rate_f = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Deuterium' -deut_produced * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime;                      } else {                          ScreenMessages.PostScreenMessage("You must be splashed down to perform this activity."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  }                    if (electrical_power_ratio <= 0) {                      deut_rate_f = 0;                      electrolysis_rate_f = 0;                      science_rate_f = 0;                      antimatter_rate_f = 0;                      reprocessing_rate_f = 0;                  }                    last_active_time = (float)Planetarium.GetUniversalTime();              } else {                }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled) {                  if (active_mode == 0) { // Research                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      float stupidity = 0;                      foreach (ProtoCrewMember proto_crew_member in part.protoModuleCrew) {                          stupidity += proto_crew_member.stupidity;                      }                      stupidity = 1.5f - stupidity / 2.0f;                      float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                      altitude_multiplier = Math.Max(altitude_multiplier' 1);                      science_rate_f = (float)(GameConstants.baseScienceRate * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / 86400.0f * global_rate_multipliers * stupidity / (Mathf.Sqrt(altitude_multiplier)));                      if (ResearchAndDevelopment.Instance != null && !double.IsNaN(science_rate_f) && !double.IsInfinity(science_rate_f))                      {                          //ResearchAndDevelopment.Instance.Science = ResearchAndDevelopment.Instance.Science + science_rate_f * TimeWarp.fixedDeltaTime;                          science_to_add += science_rate_f * TimeWarp.fixedDeltaTime;                      }                  } else if (active_mode == 1) { // Fuel Reprocessing                      double electrical_power_provided = consumeFNResource(GameConstants.basePowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.basePowerConsumption);                      global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                      reprocessor.UpdateFrame(global_rate_multipliers);                      if (reprocessor.getActinidesRemovedPerHour() > 0) {                          reprocessing_rate_f = (float)(reprocessor.getRemainingAmountToReprocess() / reprocessor.getActinidesRemovedPerHour());                      } else {                          IsEnabled = false;                      }                  } else if (active_mode == 2) { //Antimatter                      double electrical_power_provided = consumeFNResource(GameConstants.baseAMFPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                      electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseAMFPowerConsumption);                      global_rate_multipliers = crew_capacity_ratio * electrical_power_ratio;                      anti_factory.produceAntimatterFrame(global_rate_multipliers);                      antimatter_rate_f = (float)anti_factory.getAntimatterProductionRate();                  } else if (active_mode == 3) {                      IsEnabled = false;                  } else if (active_mode == 4) { // Centrifuge                      if (vessel.Splashed) {                          float electrical_power_provided = consumeFNResource(GameConstants.baseCentriPowerConsumption * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                          electrical_power_ratio = (float)(electrical_power_provided / TimeWarp.fixedDeltaTime / GameConstants.baseCentriPowerConsumption);                          global_rate_multipliers = global_rate_multipliers * electrical_power_ratio;                          float deut_produced = (float)(global_rate_multipliers * GameConstants.deuterium_timescale * GameConstants.deuterium_abudance * 1000.0f);                          deut_rate_f = -ORSHelper.fixedRequestResource(part' InterstellarResourcesConfiguration.Instance.Deuterium' -deut_produced * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime;                      } else {                          ScreenMessages.PostScreenMessage("You must be splashed down to perform this activity."' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          IsEnabled = false;                      }                  }                    if (electrical_power_ratio <= 0) {                      deut_rate_f = 0;                      electrolysis_rate_f = 0;                      science_rate_f = 0;                      antimatter_rate_f = 0;                      reprocessing_rate_f = 0;                  }                    last_active_time = (float)Planetarium.GetUniversalTime();              } else {                }
Magic Number,FNPlugin,ScienceModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ScienceModule.cs,generateScienceData,The following statement contains a magic number: if (science_to_add > 0)              {                  result_title = experiment.experimentTitle;                  result_string = "Science experiments were conducted in the vicinity of " + vessel.mainBody.name + ".";                    transmit_value = science_to_add;                  recovery_value = science_to_add;                  data_size = science_to_add * 1.25f;                  xmit_scalar = 1;                                    ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ScienceUtil.GetExperimentSituation(vessel)' vessel.mainBody' "");                  subject.scienceCap = 167 * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' false);                  ref_value = subject.scienceCap;                    science_data = new ScienceData(science_to_add' 1' 0' subject.id' "Science Lab Data");                    return true;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUILayout.Button("Install Update"'GUILayout.Width(160))) {                  UpdateTechTree();                  render_window = false;              }
Magic Number,FNPlugin,TechUpdateWindow,C:\repos\FractalUK_KSPInterstellar\FNPlugin\TechUpdateWindow.cs,Window,The following statement contains a magic number: if (GUILayout.Button("Dismiss"' GUILayout.Width(160))) {                  render_window = false;              }
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The following statement contains a magic number: double uf4persec = _current_rate * 1.24597 / _uranium_tetraflouride_density;
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The following statement contains a magic number: double ammoniapersec = _current_rate * 0.901 / _ammonia_density;
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateFrame,The following statement contains a magic number: if(_ammonia_consumption_rate > 0 && _uranium_tetraflouride_consumption_rate > 0)                   _uranium_nitride_production_rate = -_part.ImprovedRequestResource(InterstellarResourcesConfiguration.Instance.UraniumNitride' -_uranium_tetraflouride_consumption_rate / 1.24597 / _uranium_nitride_density*TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime * _uranium_nitride_density;
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Ammona Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_ammonia_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Uranium Tetraflouride Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_uranium_tetraflouride_consumption_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Uranium Nitride Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(_uranium_nitride_production_rate * GameConstants.HOUR_SECONDS + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,UF4Ammonolysiser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\UF4Ammonolysiser.cs,updateStatusMessage,The following statement contains a magic number: if (_uranium_nitride_production_rate > 0)              {                  _status = "Uranium Tetraflouride Ammonolysis Process Ongoing";              } else if (CurrentPower <= 0.01*PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  if (_ammonia_consumption_rate > 0 && _uranium_tetraflouride_consumption_rate > 0)                  {                      _status = "Insufficient Storage";                  } else if (_ammonia_consumption_rate > 0)                  {                      _status = "Uranium Tetraflouride Deprived";                  } else if (_uranium_tetraflouride_consumption_rate > 0)                  {                      _status = "Ammonia Deprived";                  } else                  {                      _status = "UF4 and Ammonia Deprived";                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: foreach (IThermalSource tsource in thermal_sources) {                  float r_temp_100 = tsource.GetCoreTempAtRadiatorTemp((float)resting_radiator_temp_at_100pcnt);                  float r_temp_30 = tsource.GetCoreTempAtRadiatorTemp((float)resting_radiator_temp_at_30pcnt);                  total_source_power += tsource.GetThermalPowerAtTemp(r_temp_100);                  source_temp_at_100pc = Math.Min(r_temp_100' source_temp_at_100pc);                  source_temp_at_30pc = Math.Min(r_temp_30' source_temp_at_30pc);                  min_source_power += tsource.GetThermalPowerAtTemp(r_temp_30) * 0.3 ;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: foreach (ModuleDeployableSolarPanel panel in panels) {                  total_source_power += panel.chargeRate * 0.0005/au_scale/au_scale;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: foreach (FNRadiator radiator in radiators) {                  double area = radiator.radiatorArea;                  double temp = radiator.isupgraded ? radiator.upgradedRadiatorTemp : radiator.radiatorTemp;                  temp = Math.Min(temp' source_temp_at_100pc);                  n_rads += 1;                  rad_max_dissip += GameConstants.stefan_const * area * Math.Pow(temp' 4) / 1e6;                  average_rad_temp += temp;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: foreach (FNRadiator radiator in radiators) {                  double area = radiator.radiatorArea;                  double temp = radiator.isupgraded ? radiator.upgradedRadiatorTemp : radiator.radiatorTemp;                  temp = Math.Min(temp' source_temp_at_100pc);                  n_rads += 1;                  rad_max_dissip += GameConstants.stefan_const * area * Math.Pow(temp' 4) / 1e6;                  average_rad_temp += temp;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: resting_radiator_temp_at_100pcnt = ((!double.IsInfinity(rad_ratio) && !double.IsNaN(rad_ratio)) ? Math.Pow(rad_ratio'0.25) : 0) * average_rad_temp;
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Update,The following statement contains a magic number: resting_radiator_temp_at_30pcnt = ((!double.IsInfinity(rad_ratio) && !double.IsNaN(rad_ratio)) ? Math.Pow(rad_ratio_30pc' 0.25) : 0) * average_rad_temp;
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (GUI.Button(new Rect(windowPosition.width - 20' 2' 18' 18)' "x")) {                  render_window = false;              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(au_scale.ToString("0.000")+ " AU"' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(total_source_power)' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(source_temp_string' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(source_temp_string2' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(getPowerFormatString(rad_max_dissip)' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(resting_radiator_temp_at_100pcntStr' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: GUILayout.Label(resting_radiator_temp_at_30pcntStr' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (has_generators) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 100% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_100pcnt*100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 30% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_30pcnt * 100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (has_generators) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 100% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_100pcnt*100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 30% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_30pcnt * 100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (has_generators) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 100% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_100pcnt*100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 30% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_30pcnt * 100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,Window,The following statement contains a magic number: if (has_generators) {                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 100% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_100pcnt*100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.Label("Resting Generator Efficiency at 30% Power:"' bold_label' GUILayout.ExpandWidth(true));                  GUILayout.Label((generator_efficiency_at_30pcnt * 100).ToString("0.00") + "%"' radiator_label' GUILayout.ExpandWidth(false)' GUILayout.MinWidth(80));                  GUILayout.EndHorizontal();              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,VABThermalUI,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VABThermalUI.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updatePropellantBar,The following statement contains a magic number: if (fuel_gauge != null  && fuel_gauge.infoBoxRef != null) {    				if (myAttachedEngine.isOperational) {  					if (!fuel_gauge.infoBoxRef.expanded) {  						fuel_gauge.infoBoxRef.Expand ();  					}  					fuel_gauge.length = 2;  					if (maxpropellant > 0) {  						fuel_gauge.SetValue (currentpropellant / maxpropellant);  					} else {  						fuel_gauge.SetValue (0);  					}  				} else {  					if (!fuel_gauge.infoBoxRef.collapsed) {  						fuel_gauge.infoBoxRef.Collapse ();  					}  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,setupPropellants,The following statement contains a magic number: foreach(ConfigNode prop_node in assprops)               {  				fuelmode = chosenpropellant.GetValue("guiName");  				ispMultiplier = float.Parse(chosenpropellant.GetValue("ispMultiplier"));  				isLFO = bool.Parse(chosenpropellant.GetValue("isLFO"));  				currentpropellant_is_jet = false;  				if(chosenpropellant.HasValue("isJet")) {  					currentpropellant_is_jet = bool.Parse(chosenpropellant.GetValue("isJet"));  				}  				//print (currentpropellant_is_jet);    				Propellant curprop = new Propellant();  				curprop.Load(prop_node);  				if (curprop.drawStackGauge && HighLogic.LoadedSceneIsFlight) {  					curprop.drawStackGauge = false;  					if (currentpropellant_is_jet) {  						fuel_gauge.SetMessage("Atmosphere");  					}else {  						fuel_gauge.SetMessage(curprop.name);                          myAttachedEngine.thrustPercentage = 100;                          part.temperature = 1;  					}  					fuel_gauge.SetMsgBgColor(XKCDColors.DarkLime);  					fuel_gauge.SetMsgTextColor(XKCDColors.ElectricLime);  					fuel_gauge.SetProgressBarColor(XKCDColors.Yellow);  					fuel_gauge.SetProgressBarBgColor(XKCDColors.DarkLime);  					fuel_gauge.SetValue(0f);  				}  				list_of_propellants.Add(curprop);  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;                  newISP.Add(0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 1.0f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 1.0f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;                  newISP.Add(0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 1.0f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 1.0f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;                  newISP.Add(0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 1.0f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 1.0f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,updateIspEngineParams,The following statement contains a magic number: if (!currentpropellant_is_jet) {  				minISP = maxISP * 0.4f;                  newISP.Add(0' Mathf.Min(maxISP' 2997.13f)' 0' 0);                  newISP.Add(1' Mathf.Min(minISP' 2997.13f)' 0' 0);  				myAttachedEngine.useVelocityCurve = false;  				myAttachedEngine.useEngineResponseTime = false;  			} else {  				if (myAttachedReactor.shouldScaleDownJetISP ()) {  					maxISP = maxISP*2.0f/3.0f;  					if (maxISP > 300) {  						maxISP = maxISP / 2.5f;  					}  				}                  newISP.Add(0' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(0.15f' Mathf.Min(maxISP' 2997.13f));                  newISP.Add(0.3f' Mathf.Min(maxISP * 4.0f / 5.0f' 2997.13f));                  newISP.Add(1' Mathf.Min(maxISP * 2.0f / 3.0f' 2997.13f));  				vCurve.Add(0' 1.0f);  				vCurve.Add((float)(maxISP*g0*1.0/3.0)' 1.0f);  				vCurve.Add((float)(maxISP*g0)' 1.0f);  				vCurve.Add ((float)(maxISP*g0*4.0/3.0)' 0);  				myAttachedEngine.useVelocityCurve = true;  				myAttachedEngine.useEngineResponseTime = true;  				myAttachedEngine.ignitionThreshold = 0.01f;  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,estimateEditorPerformance,The following statement contains a magic number: if (myAttachedReactor != null) {                  if (myAttachedReactor is IUpgradeableModule) {                      IUpgradeableModule upmod = myAttachedReactor as IUpgradeableModule;                      if (upmod.HasTechsRequiredToUpgrade()) {                          attached_reactor_upgraded = true;                      }                  }                  maxISP = (float)(Math.Sqrt((double)myAttachedReactor.CoreTemperature) * isp_temp_rat * ispMultiplier);                  minISP = maxISP * 0.4f;                  atmospherecurve.Add(0' maxISP' 0' 0);                  atmospherecurve.Add(1' minISP' 0' 0);                  thrust = (float)(2 * myAttachedReactor.MaximumPower * 1000 / g0 / maxISP);                  myAttachedEngine.maxThrust = thrust;                  myAttachedEngine.atmosphereCurve = atmospherecurve;              } else {                  atmospherecurve.Add(0' 0.00001f' 0' 0);                  myAttachedEngine.maxThrust = thrust;                  myAttachedEngine.atmosphereCurve = atmospherecurve;              }
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,estimateEditorPerformance,The following statement contains a magic number: if (myAttachedReactor != null) {                  if (myAttachedReactor is IUpgradeableModule) {                      IUpgradeableModule upmod = myAttachedReactor as IUpgradeableModule;                      if (upmod.HasTechsRequiredToUpgrade()) {                          attached_reactor_upgraded = true;                      }                  }                  maxISP = (float)(Math.Sqrt((double)myAttachedReactor.CoreTemperature) * isp_temp_rat * ispMultiplier);                  minISP = maxISP * 0.4f;                  atmospherecurve.Add(0' maxISP' 0' 0);                  atmospherecurve.Add(1' minISP' 0' 0);                  thrust = (float)(2 * myAttachedReactor.MaximumPower * 1000 / g0 / maxISP);                  myAttachedEngine.maxThrust = thrust;                  myAttachedEngine.atmosphereCurve = atmospherecurve;              } else {                  atmospherecurve.Add(0' 0.00001f' 0' 0);                  myAttachedEngine.maxThrust = thrust;                  myAttachedEngine.atmosphereCurve = atmospherecurve;              }
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,OnFixedUpdate,The following statement contains a magic number: if (myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0 && myAttachedReactor != null) {  				if (!myAttachedReactor.IsActive) {  					myAttachedReactor.enableIfPossible();  				}  				updateIspEngineParams ();  				float curve_eval_point = (float)Math.Min (FlightGlobals.getStaticPressure (vessel.transform.position)' 1.0);  				float currentIsp = myAttachedEngine.atmosphereCurve.Evaluate (curve_eval_point);  				double ispratio = currentIsp / maxISP;  				this.current_isp = currentIsp;  				// scale down thrust if it's attached to the wrong sized reactor  				float heat_exchanger_thrust_divisor = 1;  				if (radius > myAttachedReactor.getRadius ()) {  					heat_exchanger_thrust_divisor = myAttachedReactor.getRadius () * myAttachedReactor.getRadius () / radius / radius;  				} else {  					heat_exchanger_thrust_divisor = radius * radius / myAttachedReactor.getRadius () / myAttachedReactor.getRadius ();  				}    				if (myAttachedReactor.getRadius () == 0 || radius == 0) {  					heat_exchanger_thrust_divisor = 1;  				}  				// get the flameout safety limit  				atmospheric_limit = getAtmosphericLimit ();                  double thrust_limit = myAttachedEngine.thrustPercentage / 100;                  if (currentpropellant_is_jet) {                      int pre_coolers_active = vessel.FindPartModulesImplementing<FNModulePreecooler>().Where(prc => prc.isFunctional()).Count();                      int intakes_open = vessel.FindPartModulesImplementing<ModuleResourceIntake>().Where(mre => mre.intakeEnabled).Count();                      double proportion = Math.Pow((double)(intakes_open - pre_coolers_active) / (double)intakes_open' 0.1);                      if (double.IsNaN(proportion) || double.IsInfinity(proportion)) {                          proportion = 1;                      }                      float temp = (float)Math.Max((Math.Sqrt(vessel.srf_velocity.magnitude) * 20.0 / GameConstants.atmospheric_non_precooled_limit) * part.maxTemp * proportion' 1);                      if (temp > part.maxTemp - 10.0f)                      {                          ScreenMessages.PostScreenMessage("Engine Shutdown: Catastrophic overheating was imminent!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          myAttachedEngine.Shutdown();                          part.temperature = 1;                      } else                      {                          part.temperature = temp;                      }                      //myAttachedEngine.DeactivateRunningFX();                  } else {                      //myAttachedEngine.ActivateRunningFX();                  }                  double thermal_consume_total = assThermalPower * TimeWarp.fixedDeltaTime * myAttachedEngine.currentThrottle * atmospheric_limit;                  double thermal_power_received = consumeFNResource(thermal_consume_total' FNResourceManager.FNRESOURCE_THERMALPOWER) / TimeWarp.fixedDeltaTime;                  if (thermal_power_received * TimeWarp.fixedDeltaTime < thermal_consume_total) {                      thermal_power_received += consumeFNResource(thermal_consume_total-thermal_power_received*TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES) / TimeWarp.fixedDeltaTime;                  }  				consumeFNResource (thermal_power_received * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_WASTEHEAT);  				float power_ratio = 0.0f;  				double engineMaxThrust = 0.01;  				if (assThermalPower > 0) {  					power_ratio = (float)(thermal_power_received / assThermalPower);  					engineMaxThrust = Math.Max(thrust_limit*2000.0 * thermal_power_received / maxISP / g0 * heat_exchanger_thrust_divisor*ispratio/myAttachedEngine.currentThrottle'0.01);  				}   				//print ("B: " + engineMaxThrust);  				// set up TWR limiter if on                  //double additional_thrust_compensator = myAttachedEngine.finalThrust / (myAttachedEngine.maxThrust * myAttachedEngine.currentThrottle)/ispratio;  				double engine_thrust = engineMaxThrust/myAttachedEngine.thrustPercentage*100;  				// engine thrust fixed  				//print ("A: " + engine_thrust*myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude));                  if (!double.IsInfinity(engine_thrust) && !double.IsNaN(engine_thrust)) {                      if (isLFO) {                          myAttachedEngine.maxThrust = (float)(2.2222 * engine_thrust);                      } else {                          myAttachedEngine.maxThrust = (float)engine_thrust;                      }                  } else {                      myAttachedEngine.maxThrust = 0.000001f;                  }  								  				// amount of fuel being used at max throttle with no atmospheric limits                  if (current_isp > 0) {                      double vcurve_at_current_velocity = 1;                                            if (myAttachedEngine.useVelocityCurve && myAttachedEngine.velocityCurve != null) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      //if (!double.IsNaN(additional_thrust_compensator) && !double.IsInfinity(additional_thrust_compensator)) {                          //vcurve_at_current_velocity = additional_thrust_compensator;                      //}                      fuel_flow_rate = engine_thrust / current_isp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                        if (atmospheric_limit > 0 && !double.IsInfinity(atmospheric_limit) && !double.IsNaN(atmospheric_limit)) {                          fuel_flow_rate = fuel_flow_rate / atmospheric_limit;                      }                  }    			} else {                  if (myAttachedEngine.realIsp > 0) {                      atmospheric_limit = getAtmosphericLimit();                      double vcurve_at_current_velocity = 1;                      if (myAttachedEngine.useVelocityCurve) {                          vcurve_at_current_velocity = myAttachedEngine.velocityCurve.Evaluate((float)vessel.srf_velocity.magnitude);                      }                      fuel_flow_rate = myAttachedEngine.maxThrust / myAttachedEngine.realIsp / g0 / 0.005 * TimeWarp.fixedDeltaTime;                      if (vcurve_at_current_velocity > 0 && !double.IsInfinity(vcurve_at_current_velocity) && !double.IsNaN(vcurve_at_current_velocity)) {                          fuel_flow_rate = fuel_flow_rate / vcurve_at_current_velocity;                      }                  }else {                      fuel_flow_rate = 0;                  }                    if (currentpropellant_is_jet) {                      part.temperature = 1;                  }                    				if (myAttachedReactor == null && myAttachedEngine.isOperational && myAttachedEngine.currentThrottle > 0) {  					myAttachedEngine.Events ["Shutdown"].Invoke ();  					ScreenMessages.PostScreenMessage ("Engine Shutdown: No reactor attached!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  				}  			}
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,getIntakeAvailable,The following statement contains a magic number: return 0.00001;
Magic Number,FNPlugin,FNNozzleController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNNozzleController.cs,getFuelRateThermalJetsForVessel,The following statement contains a magic number: return 0.1;
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {  				float percentOutputPower = (float) (totalEff * 100.0);  				float outputPowerReport = -outputPower;  				if (update_count - last_draw_update > 10) {                      OutputPower = getPowerFormatString(outputPowerReport) + "_e";  					OverallEfficiency = percentOutputPower.ToString ("0.0") + "%";  					if (totalEff >= 0) {                          if (!chargedParticleMode) {                              MaxPowerStr = getPowerFormatString(maxThermalPower * totalEff) + "_e";                          } else {                              MaxPowerStr = getPowerFormatString(maxChargedPower * totalEff) + "_e";                          }  					} else {  						MaxPowerStr = (0).ToString() + "MW";  					}                      last_draw_update = update_count;  				}  			} else {  				OutputPower = "Generator Offline";  			}
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {  				float percentOutputPower = (float) (totalEff * 100.0);  				float outputPowerReport = -outputPower;  				if (update_count - last_draw_update > 10) {                      OutputPower = getPowerFormatString(outputPowerReport) + "_e";  					OverallEfficiency = percentOutputPower.ToString ("0.0") + "%";  					if (totalEff >= 0) {                          if (!chargedParticleMode) {                              MaxPowerStr = getPowerFormatString(maxThermalPower * totalEff) + "_e";                          } else {                              MaxPowerStr = getPowerFormatString(maxChargedPower * totalEff) + "_e";                          }  					} else {  						MaxPowerStr = (0).ToString() + "MW";  					}                      last_draw_update = update_count;  				}  			} else {  				OutputPower = "Generator Offline";  			}
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,OnFixedUpdate,The following statement contains a magic number: if (IsEnabled && myAttachedReactor != null && FNRadiator.hasRadiatorsForVessel (vessel)) {  				updateGeneratorPower ();                  double electricdt = 0;                  double electricdtps = 0;                  double max_electricdtps = 0;                  double input_power = 0;                  double currentmegajoules = getSpareResourceCapacity(FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;                  double electrical_power_currently_needed = (getCurrentUnfilledResourceDemand(FNResourceManager.FNRESOURCE_MEGAJOULES) + currentmegajoules);                  if (!chargedParticleMode) {                      double carnotEff = 1.0 - coldBathTemp / hotBathTemp;                      totalEff = carnotEff * pCarnotEff;                      if (totalEff <= 0 || coldBathTemp <= 0 || hotBathTemp <= 0 || maxThermalPower <= 0) {                          return;                      }                      double thermal_power_currently_needed = electrical_power_currently_needed / totalEff;                      double thermaldt = Math.Max(Math.Min(maxThermalPower' thermal_power_currently_needed) * TimeWarp.fixedDeltaTime' 0.0);                      input_power = consumeFNResource(thermaldt' FNResourceManager.FNRESOURCE_THERMALPOWER);                      if (input_power < thermaldt) {                          input_power += consumeFNResource(thermaldt-input_power' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                      }                      double wastedt = input_power * totalEff;                      consumeFNResource(wastedt' FNResourceManager.FNRESOURCE_WASTEHEAT);                      electricdt = input_power * totalEff;                      electricdtps = Math.Max(electricdt / TimeWarp.fixedDeltaTime' 0.0);                      max_electricdtps = maxThermalPower * totalEff;                  } else {                      totalEff = 0.85;                      double charged_power_currently_needed = electrical_power_currently_needed / totalEff;                      input_power = consumeFNResource(Math.Max(charged_power_currently_needed*TimeWarp.fixedDeltaTime'0)' FNResourceManager.FNRESOURCE_CHARGED_PARTICLES);                      electricdt = input_power * totalEff;                      electricdtps = Math.Max(electricdt / TimeWarp.fixedDeltaTime' 0.0);                      double wastedt = input_power * totalEff;                      max_electricdtps = maxChargedPower * totalEff;                      consumeFNResource(wastedt' FNResourceManager.FNRESOURCE_WASTEHEAT);                      //supplyFNResource(wastedt' FNResourceManager.FNRESOURCE_WASTEHEAT);                  }  				outputPower = -(float)supplyFNResourceFixedMax (electricdtps * TimeWarp.fixedDeltaTime' max_electricdtps * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) / TimeWarp.fixedDeltaTime;  			} else {  				if (IsEnabled && !vessel.packed) {  					if (!FNRadiator.hasRadiatorsForVessel (vessel)) {  						IsEnabled = false;  						Debug.Log ("[WarpPlugin] Generator Shutdown: No radiators available!");  						ScreenMessages.PostScreenMessage ("Generator Shutdown: No radiators available!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}    					if (myAttachedReactor == null) {  						IsEnabled = false;  						Debug.Log ("[WarpPlugin] Generator Shutdown: No reactor available!");  						ScreenMessages.PostScreenMessage ("Generator Shutdown: No reactor available!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  					}  				}  			}
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,GetInfo,The following statement contains a magic number: return String.Format("Percent of Carnot Efficiency: {0}%\n-Upgrade Information-\n Upgraded Percent of Carnot Efficiency: {1}%"' pCarnotEff*100' upgradedpCarnotEff*100);
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,GetInfo,The following statement contains a magic number: return String.Format("Percent of Carnot Efficiency: {0}%\n-Upgrade Information-\n Upgraded Percent of Carnot Efficiency: {1}%"' pCarnotEff*100' upgradedpCarnotEff*100);
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,FNGenerator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNGenerator.cs,getPowerFormatString,The following statement contains a magic number: if (power > 1000) {                  if (power > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (power > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (power > 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.0") + " KW";                      }                  }              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The following statement contains a magic number: if (isupgraded || !PluginHelper.TechnologyIsInUse)              {                  upgradePartModule();                    double now = Planetarium.GetUniversalTime();                  double time_diff = now - last_active_time;                  float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                  altitude_multiplier = Math.Max(altitude_multiplier' 1);                    double science_to_increment = baseScienceRate * time_diff / 86400 * electrical_power_ratio * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                  science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                  science_to_add += (float)science_to_increment;                    var curReaction = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  curReaction.PitchTorque = 5;                  curReaction.RollTorque = 5;                  curReaction.YawTorque = 5;              } else              {                  computercoreType = originalName;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The following statement contains a magic number: if (isupgraded || !PluginHelper.TechnologyIsInUse)              {                  upgradePartModule();                    double now = Planetarium.GetUniversalTime();                  double time_diff = now - last_active_time;                  float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                  altitude_multiplier = Math.Max(altitude_multiplier' 1);                    double science_to_increment = baseScienceRate * time_diff / 86400 * electrical_power_ratio * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                  science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                  science_to_add += (float)science_to_increment;                    var curReaction = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  curReaction.PitchTorque = 5;                  curReaction.RollTorque = 5;                  curReaction.YawTorque = 5;              } else              {                  computercoreType = originalName;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The following statement contains a magic number: if (isupgraded || !PluginHelper.TechnologyIsInUse)              {                  upgradePartModule();                    double now = Planetarium.GetUniversalTime();                  double time_diff = now - last_active_time;                  float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                  altitude_multiplier = Math.Max(altitude_multiplier' 1);                    double science_to_increment = baseScienceRate * time_diff / 86400 * electrical_power_ratio * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                  science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                  science_to_add += (float)science_to_increment;                    var curReaction = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  curReaction.PitchTorque = 5;                  curReaction.RollTorque = 5;                  curReaction.YawTorque = 5;              } else              {                  computercoreType = originalName;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,OnStart,The following statement contains a magic number: if (isupgraded || !PluginHelper.TechnologyIsInUse)              {                  upgradePartModule();                    double now = Planetarium.GetUniversalTime();                  double time_diff = now - last_active_time;                  float altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));                  altitude_multiplier = Math.Max(altitude_multiplier' 1);                    double science_to_increment = baseScienceRate * time_diff / 86400 * electrical_power_ratio * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' vessel.LandedOrSplashed) / ((float)Math.Sqrt(altitude_multiplier));                  science_to_increment = (double.IsNaN(science_to_increment) || double.IsInfinity(science_to_increment)) ? 0 : science_to_increment;                  science_to_add += (float)science_to_increment;                    var curReaction = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  curReaction.PitchTorque = 5;                  curReaction.RollTorque = 5;                  curReaction.YawTorque = 5;              } else              {                  computercoreType = originalName;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,generateScienceData,The following statement contains a magic number: if (science_to_add > 0)              {                  result_title = experiment.experimentTitle;                  //result_string = "Science experiments were conducted in the vicinity of " + vessel.mainBody.name + ".";                    result_string = this.nameStr + " " + getRandomExperimentResult();                    transmit_value = science_to_add;                  recovery_value = science_to_add;                  data_size = science_to_add * 1.25f;                  xmit_scalar = 1;                    ScienceSubject subject = ResearchAndDevelopment.GetExperimentSubject(experiment' ScienceUtil.GetExperimentSituation(vessel)' vessel.mainBody' "");                    subject.scienceCap = 167 * PluginHelper.getScienceMultiplier(vessel.mainBody.flightGlobalsIndex' false);                  ref_value = subject.scienceCap;                    science_data = new ScienceData(science_to_add' 1' 0' subject.id' "Science Lab Data");                    return true;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,upgradePartModule,The following statement contains a magic number: if (part.Modules.Contains("ModuleReactionWheel"))              {                  ModuleReactionWheel reaction_wheel = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  reaction_wheel.PitchTorque = 5;                  reaction_wheel.RollTorque = 5;                  reaction_wheel.YawTorque = 5;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,upgradePartModule,The following statement contains a magic number: if (part.Modules.Contains("ModuleReactionWheel"))              {                  ModuleReactionWheel reaction_wheel = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  reaction_wheel.PitchTorque = 5;                  reaction_wheel.RollTorque = 5;                  reaction_wheel.YawTorque = 5;              }
Magic Number,FNPlugin,ComputerCore,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ComputerCore.cs,upgradePartModule,The following statement contains a magic number: if (part.Modules.Contains("ModuleReactionWheel"))              {                  ModuleReactionWheel reaction_wheel = this.part.Modules["ModuleReactionWheel"] as ModuleReactionWheel;                  reaction_wheel.PitchTorque = 5;                  reaction_wheel.RollTorque = 5;                  reaction_wheel.YawTorque = 5;              }
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double ground_rad = Math.Sqrt(res_pixel.getAmount() * 9e6) / 24 / 365.25 / Math.Max(vessel.altitude / 870' 1);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double ground_rad = Math.Sqrt(res_pixel.getAmount() * 9e6) / 24 / 365.25 / Math.Max(vessel.altitude / 870' 1);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double ground_rad = Math.Sqrt(res_pixel.getAmount() * 9e6) / 24 / 365.25 / Math.Max(vessel.altitude / 870' 1);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double ground_rad = Math.Sqrt(res_pixel.getAmount() * 9e6) / 24 / 365.25 / Math.Max(vessel.altitude / 870' 1);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double divisor = Math.Pow(cur_ref_body.Radius / crefkerbin.Radius' 2.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: double solar_radiation = 0.19 * inv_square_mult;
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: if (vessel.mainBody != FlightGlobals.fetch.bodies[PluginHelper.REF_BODY_KERBOL])                  solar_radiation = solar_radiation * Math.Exp(-73840.5645666 * mag_field_strength) * Math.Exp(-vessel.atmDensity * 4.5);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: if (vessel.mainBody != FlightGlobals.fetch.bodies[PluginHelper.REF_BODY_KERBOL])                  solar_radiation = solar_radiation * Math.Exp(-73840.5645666 * mag_field_strength) * Math.Exp(-vessel.atmDensity * 4.5);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselExtensions,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselExtensions.cs,GetRadiationDose,The following statement contains a magic number: RadiationDose dose = new RadiationDose(Math.Pow(electron_rad_level / 3e-5' 3.0) * 3.2' ground_rad' solar_radiation + Math.Pow(proton_rad_level / 3e-5' 3.0) * 3.2' 0.0);
Magic Number,FNPlugin,VesselMicrowavePersistence,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselMicrowavePersistence.cs,getAvailablePower,The following statement contains a magic number: if (PluginHelper.lineOfSightToSun(vessel) && solar_power > 0) {                  double inv_square_mult = Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                  power = nuclear_power + solar_power/inv_square_mult;              } else {                  power = nuclear_power;              }
Magic Number,FNPlugin,VesselMicrowavePersistence,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VesselMicrowavePersistence.cs,getAvailablePower,The following statement contains a magic number: if (PluginHelper.lineOfSightToSun(vessel) && solar_power > 0) {                  double inv_square_mult = Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                  power = nuclear_power + solar_power/inv_square_mult;              } else {                  power = nuclear_power;              }
Magic Number,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnUpdate,The following statement contains a magic number: foreach (Vessel vess in vessels) {  				float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  				if (distance < 2000 && vess != this.vessel) {  					kerbal_hazard_count += vess.GetCrewCount ();  				}  			}
Magic Number,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The following statement contains a magic number: if (radhazard && throttle > 0 && !rad_safety_features) {  				foreach (Vessel vess in vessels) {  					float distance = (float)Vector3d.Distance (vessel.transform.position' vess.transform.position);  					if (distance < 2000 && vess != this.vessel && vess.GetCrewCount() > 0) {  						float inv_sq_dist = distance / 50.0f;  						float inv_sq_mult = 1.0f / inv_sq_dist / inv_sq_dist;  						List<ProtoCrewMember> vessel_crew = vess.GetVesselCrew ();  						foreach (ProtoCrewMember crew_member in vessel_crew) {  							if (UnityEngine.Random.value >= (1.0 - death_prob*inv_sq_mult)) {  								if(!vess.isEVA) {  									ScreenMessages.PostScreenMessage(crew_member.name + " was killed by Neutron Radiation!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  									crew_to_remove.Add (crew_member);  								}else{  									ScreenMessages.PostScreenMessage(crew_member.name + " was killed by Neutron Radiation!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);  									vessels_to_remove.Add (vess);  								}  							}  						}  					}  				}    				foreach (Vessel vess in vessels_to_remove) {  					vess.rootPart.Die ();  				}    				foreach (ProtoCrewMember crew_member in crew_to_remove) {  					Vessel vess = FlightGlobals.Vessels.Find (p => p.GetVesselCrew ().Contains (crew_member));  					Part part = vess.Parts.Find(p => p.protoModuleCrew.Contains(crew_member));  					part.RemoveCrewmember (crew_member);  					crew_member.Die ();  				}  			}
Magic Number,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The following statement contains a magic number: if (throttle > 0) {                  double power = consumeFNResource(2500.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Deuterium).ratio = (float)(standard_deut_rate / throttle / throttle);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Tritium).ratio = (float)(standard_lith_rate / throttle / throttle);                  //curEngineT.propellants[1].ratio = (float)(standard_deut_rate / throttle / throttle);                  //curEngineT.propellants[2].ratio = (float)(standard_lith_rate / throttle / throttle);                  FloatCurve newISP = new FloatCurve();                  newISP.Add(0' (float)(minISP / throttle));                  curEngineT.atmosphereCurve = newISP;                  if (power >= 2500 * TimeWarp.fixedDeltaTime) {                      curEngineT.maxThrust = 1100;                  } else {                      curEngineT.maxThrust = 0.0001f;                  }  			}
Magic Number,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The following statement contains a magic number: if (throttle > 0) {                  double power = consumeFNResource(2500.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Deuterium).ratio = (float)(standard_deut_rate / throttle / throttle);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Tritium).ratio = (float)(standard_lith_rate / throttle / throttle);                  //curEngineT.propellants[1].ratio = (float)(standard_deut_rate / throttle / throttle);                  //curEngineT.propellants[2].ratio = (float)(standard_lith_rate / throttle / throttle);                  FloatCurve newISP = new FloatCurve();                  newISP.Add(0' (float)(minISP / throttle));                  curEngineT.atmosphereCurve = newISP;                  if (power >= 2500 * TimeWarp.fixedDeltaTime) {                      curEngineT.maxThrust = 1100;                  } else {                      curEngineT.maxThrust = 0.0001f;                  }  			}
Magic Number,FNPlugin,VistaEngineController,C:\repos\FractalUK_KSPInterstellar\FNPlugin\VistaEngineController.cs,OnFixedUpdate,The following statement contains a magic number: if (throttle > 0) {                  double power = consumeFNResource(2500.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Deuterium).ratio = (float)(standard_deut_rate / throttle / throttle);                  curEngineT.propellants.FirstOrDefault(pr => pr.name == InterstellarResourcesConfiguration.Instance.Tritium).ratio = (float)(standard_lith_rate / throttle / throttle);                  //curEngineT.propellants[1].ratio = (float)(standard_deut_rate / throttle / throttle);                  //curEngineT.propellants[2].ratio = (float)(standard_lith_rate / throttle / throttle);                  FloatCurve newISP = new FloatCurve();                  newISP.Add(0' (float)(minISP / throttle));                  curEngineT.atmosphereCurve = newISP;                  if (power >= 2500 * TimeWarp.fixedDeltaTime) {                      curEngineT.maxThrust = 1100;                  } else {                      curEngineT.maxThrust = 0.0001f;                  }  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnUpdate,The following statement contains a magic number: if (update_count - last_draw_update > 8) {                  thermalPowerDissipStr = radiatedThermalPower.ToString("0.000") + "MW";                  thermalPowerConvStr = convectedThermalPower.ToString("0.000") + "MW";                  radiatorTempStr = current_rad_temp.ToString("0.0") + "K / " + radiatorTemp.ToString("0.0") + "K";                    last_draw_update = update_count;              }
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {  				float pressure = (float) FlightGlobals.getStaticPressure (vessel.transform.position);  				float dynamic_pressure = (float) (0.5*pressure*1.2041*vessel.srf_velocity.sqrMagnitude/101325.0);  				pressure += dynamic_pressure;  				float low_temp = FlightGlobals.getExternalTemperature (vessel.transform.position);    				float delta_temp = Mathf.Max(0'radiatorTemp - low_temp);  				conv_power_dissip = pressure * delta_temp * radiatorArea * rad_const_h/1e6f * TimeWarp.fixedDeltaTime*convectiveBonus;  				if (!radiatorIsEnabled) {  					conv_power_dissip = conv_power_dissip / 2.0f;  				}  				convectedThermalPower = consumeFNResource (conv_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;    				if (radiatorIsEnabled && dynamic_pressure > 1.4854428818159388107574636072046e-3 && isDeployable) {  					part.deactivate();    					//part.breakingForce = 1;  					//part.breakingTorque = 1;  					part.decouple (1);  				}  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {  				float pressure = (float) FlightGlobals.getStaticPressure (vessel.transform.position);  				float dynamic_pressure = (float) (0.5*pressure*1.2041*vessel.srf_velocity.sqrMagnitude/101325.0);  				pressure += dynamic_pressure;  				float low_temp = FlightGlobals.getExternalTemperature (vessel.transform.position);    				float delta_temp = Mathf.Max(0'radiatorTemp - low_temp);  				conv_power_dissip = pressure * delta_temp * radiatorArea * rad_const_h/1e6f * TimeWarp.fixedDeltaTime*convectiveBonus;  				if (!radiatorIsEnabled) {  					conv_power_dissip = conv_power_dissip / 2.0f;  				}  				convectedThermalPower = consumeFNResource (conv_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;    				if (radiatorIsEnabled && dynamic_pressure > 1.4854428818159388107574636072046e-3 && isDeployable) {  					part.deactivate();    					//part.breakingForce = 1;  					//part.breakingTorque = 1;  					part.decouple (1);  				}  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {  				float pressure = (float) FlightGlobals.getStaticPressure (vessel.transform.position);  				float dynamic_pressure = (float) (0.5*pressure*1.2041*vessel.srf_velocity.sqrMagnitude/101325.0);  				pressure += dynamic_pressure;  				float low_temp = FlightGlobals.getExternalTemperature (vessel.transform.position);    				float delta_temp = Mathf.Max(0'radiatorTemp - low_temp);  				conv_power_dissip = pressure * delta_temp * radiatorArea * rad_const_h/1e6f * TimeWarp.fixedDeltaTime*convectiveBonus;  				if (!radiatorIsEnabled) {  					conv_power_dissip = conv_power_dissip / 2.0f;  				}  				convectedThermalPower = consumeFNResource (conv_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;    				if (radiatorIsEnabled && dynamic_pressure > 1.4854428818159388107574636072046e-3 && isDeployable) {  					part.deactivate();    					//part.breakingForce = 1;  					//part.breakingTorque = 1;  					part.decouple (1);  				}  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (vessel.altitude <= PluginHelper.getMaxAtmosphericAltitude(vessel.mainBody)) {  				float pressure = (float) FlightGlobals.getStaticPressure (vessel.transform.position);  				float dynamic_pressure = (float) (0.5*pressure*1.2041*vessel.srf_velocity.sqrMagnitude/101325.0);  				pressure += dynamic_pressure;  				float low_temp = FlightGlobals.getExternalTemperature (vessel.transform.position);    				float delta_temp = Mathf.Max(0'radiatorTemp - low_temp);  				conv_power_dissip = pressure * delta_temp * radiatorArea * rad_const_h/1e6f * TimeWarp.fixedDeltaTime*convectiveBonus;  				if (!radiatorIsEnabled) {  					conv_power_dissip = conv_power_dissip / 2.0f;  				}  				convectedThermalPower = consumeFNResource (conv_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;    				if (radiatorIsEnabled && dynamic_pressure > 1.4854428818159388107574636072046e-3 && isDeployable) {  					part.deactivate();    					//part.breakingForce = 1;  					//part.breakingTorque = 1;  					part.decouple (1);  				}  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,OnFixedUpdate,The following statement contains a magic number: if (radiatorIsEnabled) {  				if (getResourceBarRatio (FNResourceManager.FNRESOURCE_WASTEHEAT) >= 1 && current_rad_temp >= radiatorTemp) {  					explode_counter ++;  					if (explode_counter > 25) {  						part.explode ();  					}  				} else {  					explode_counter = 0;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);                  if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min(vessel.GetTemperatureofColdestThermalSource() / 1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e6) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e6 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }    				if (isDeployable) {  					Vector3 pivrot = pivot.rotation.eulerAngles;    					pivot.Rotate (Vector3.up * 5f * TimeWarp.fixedDeltaTime * directionrotate);    					Vector3 sunpos = FlightGlobals.Bodies [0].transform.position;  					Vector3 flatVectorToTarget = sunpos - transform.position;    					flatVectorToTarget = flatVectorToTarget.normalized;  					float dot = Mathf.Asin (Vector3.Dot (pivot.transform.right' flatVectorToTarget)) / Mathf.PI * 180.0f;    					float anglediff = -dot;  					oldangle = dot;  					//print (dot);  					directionrotate = anglediff / 5 / TimeWarp.fixedDeltaTime;  					directionrotate = Mathf.Min (3' directionrotate);  					directionrotate = Mathf.Max (-3' directionrotate);  			  					part.maximum_drag = 0.8f;  					part.minimum_drag = 0.8f;  				}    			} else {  				if (isDeployable) {  					pivot.transform.localEulerAngles = original_eulers;  				}                    double radiator_temperature_temp_val = radiatorTemp * Math.Pow(getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT)' 0.25);  				if (vessel.HasAnyActiveThermalSources()) radiator_temperature_temp_val = Math.Min (vessel.GetTemperatureofColdestThermalSource()/1.01' radiator_temperature_temp_val);                    double thermal_power_dissip = (GameConstants.stefan_const * radiatorArea * Math.Pow(radiator_temperature_temp_val' 4) / 1e7) * TimeWarp.fixedDeltaTime;  				radiatedThermalPower = consumeFNResource (thermal_power_dissip' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime;                  double instantaneous_rad_temp = (Math.Min(Math.Pow(radiatedThermalPower * 1e7 / (GameConstants.stefan_const * radiatorArea)' 0.25)' radiatorTemp));                  instantaneous_rad_temp = Math.Max(instantaneous_rad_temp' Math.Max(FlightGlobals.getExternalTemperature((float)vessel.altitude' vessel.mainBody) + 273.16' 2.7));                  if (current_rad_temp <= 0) {                      current_rad_temp = instantaneous_rad_temp;                  } else {                      current_rad_temp = instantaneous_rad_temp * alpha + (1.0 - alpha) * instantaneous_rad_temp;                  }                    				part.maximum_drag = 0.2f;  				part.minimum_drag = 0.2f;  			}
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(radiatorTemp' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(radiatorTemp' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip2 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(upgradedRadiatorTemp' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip2 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(upgradedRadiatorTemp' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip3 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(600' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip3 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(600' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip3 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(600' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip4 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1200' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip4 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1200' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip4 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1200' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip5 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1800' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip5 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1800' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip5 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(1800' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip6 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(2400' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip6 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(2400' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip6 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(2400' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip7 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(3000' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip7 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(3000' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,GetInfo,The following statement contains a magic number: float thermal_power_dissip7 = (float)(GameConstants.stefan_const * radiatorArea * Math.Pow(3000' 4) / 1e6);
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,getPowerPriority,The following statement contains a magic number: return 3;
Magic Number,FNPlugin,FNRadiator,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNRadiator.cs,colorHeat,The following statement contains a magic number: Color emissiveColor = new Color((float)(Math.Pow(temperatureRatio' 3))' 0.0f' 0.0f' 1.0f);
Magic Number,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!active)                  {                      base.OnFixedUpdate();                  }                    if (solarPanel != null)                  {                      float solar_rate = solarPanel.flowRate * TimeWarp.fixedDeltaTime;                      float heat_rate = solar_rate * 0.5f / 1000.0f;                        double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      FloatCurve satcurve = new FloatCurve();                      satcurve.Add(0.0f' (float)inv_square_mult);                      solarPanel.powerCurve = satcurve;                        if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.98 && solarPanel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDED && solarPanel.sunTracking)                      {                          solarPanel.Retract();                          if (FlightGlobals.ActiveVessel == vessel)                          {                              ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Solar Panel retraction occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          }                          return;                      }                        List<PartResource> prl = part.GetConnectedResources("ElectricCharge").ToList();                      double current_charge = prl.Sum(pr => pr.amount);                      double max_charge = prl.Sum(pr => pr.maxAmount);                        supplyFNResourceFixedMax(current_charge >= max_charge ? solar_rate / 1000.0f : 0' solar_rate / 1000.0f' FNResourceManager.FNRESOURCE_MEGAJOULES);                      wasteheat_production_f = supplyFNResource(heat_rate' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime * 1000.0f;                  }              }
Magic Number,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!active)                  {                      base.OnFixedUpdate();                  }                    if (solarPanel != null)                  {                      float solar_rate = solarPanel.flowRate * TimeWarp.fixedDeltaTime;                      float heat_rate = solar_rate * 0.5f / 1000.0f;                        double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      FloatCurve satcurve = new FloatCurve();                      satcurve.Add(0.0f' (float)inv_square_mult);                      solarPanel.powerCurve = satcurve;                        if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.98 && solarPanel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDED && solarPanel.sunTracking)                      {                          solarPanel.Retract();                          if (FlightGlobals.ActiveVessel == vessel)                          {                              ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Solar Panel retraction occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          }                          return;                      }                        List<PartResource> prl = part.GetConnectedResources("ElectricCharge").ToList();                      double current_charge = prl.Sum(pr => pr.amount);                      double max_charge = prl.Sum(pr => pr.maxAmount);                        supplyFNResourceFixedMax(current_charge >= max_charge ? solar_rate / 1000.0f : 0' solar_rate / 1000.0f' FNResourceManager.FNRESOURCE_MEGAJOULES);                      wasteheat_production_f = supplyFNResource(heat_rate' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime * 1000.0f;                  }              }
Magic Number,FNPlugin,FNSolarPanelWasteHeatModule,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNSolarPanelWasteHeatModule.cs,FixedUpdate,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!active)                  {                      base.OnFixedUpdate();                  }                    if (solarPanel != null)                  {                      float solar_rate = solarPanel.flowRate * TimeWarp.fixedDeltaTime;                      float heat_rate = solar_rate * 0.5f / 1000.0f;                        double inv_square_mult = Math.Pow(Vector3d.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBIN].transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2) / Math.Pow(Vector3d.Distance(vessel.transform.position' FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position)' 2);                      FloatCurve satcurve = new FloatCurve();                      satcurve.Add(0.0f' (float)inv_square_mult);                      solarPanel.powerCurve = satcurve;                        if (getResourceBarRatio(FNResourceManager.FNRESOURCE_WASTEHEAT) >= 0.98 && solarPanel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDED && solarPanel.sunTracking)                      {                          solarPanel.Retract();                          if (FlightGlobals.ActiveVessel == vessel)                          {                              ScreenMessages.PostScreenMessage("Warning Dangerous Overheating Detected: Solar Panel retraction occuring NOW!"' 5.0f' ScreenMessageStyle.UPPER_CENTER);                          }                          return;                      }                        List<PartResource> prl = part.GetConnectedResources("ElectricCharge").ToList();                      double current_charge = prl.Sum(pr => pr.amount);                      double max_charge = prl.Sum(pr => pr.maxAmount);                        supplyFNResourceFixedMax(current_charge >= max_charge ? solar_rate / 1000.0f : 0' solar_rate / 1000.0f' FNResourceManager.FNRESOURCE_MEGAJOULES);                      wasteheat_production_f = supplyFNResource(heat_rate' FNResourceManager.FNRESOURCE_WASTEHEAT) / TimeWarp.fixedDeltaTime * 1000.0f;                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The following statement contains a magic number: Events ["StartCharge"].active = current_antimatter <= 0.1 && !should_charge;
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The following statement contains a magic number: Events ["StopCharge"].active = current_antimatter <= 0.1 && should_charge;
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The following statement contains a magic number: if (chargestatus <= 60 && !charging && current_antimatter > 0.1) {  				ScreenMessages.PostScreenMessage("Warning!: Antimatter storage unpowered' tank explosion in: " + chargestatus.ToString("0") + "s"' 1.0f' ScreenMessageStyle.UPPER_CENTER);  			}
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The following statement contains a magic number: if (chargestatus <= 60 && !charging && current_antimatter > 0.1) {  				ScreenMessages.PostScreenMessage("Warning!: Antimatter storage unpowered' tank explosion in: " + chargestatus.ToString("0") + "s"' 1.0f' ScreenMessageStyle.UPPER_CENTER);  			}
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnUpdate,The following statement contains a magic number: if (current_antimatter > 0.1) {  				if (charging) {  					statusStr = "Charging.";  				} else {  					statusStr = "Discharging!";  				}  			} else {  				if (should_charge) {  					statusStr = "Charging.";  				} else {  					statusStr = "No Power Required.";  				}  			}
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,OnFixedUpdate,The following statement contains a magic number: if (antimatter != null) {                  float mult = 1;                  current_antimatter = (float)antimatter.amount;                  explosion_size = Mathf.Sqrt(current_antimatter) * 5.0f;                  if (chargestatus > 0 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                      chargestatus -= 1.0f * TimeWarp.fixedDeltaTime;                  }                  if (chargestatus >= GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                      mult = 0.5f;                  }                  if (should_charge || (current_antimatter > 0.00001*antimatter.maxAmount)) {                      float charge_to_add = consumeFNResource(mult * 2.0 * chargeNeeded / 1000.0 * TimeWarp.fixedDeltaTime' FNResourceManager.FNRESOURCE_MEGAJOULES) * 1000.0f / chargeNeeded;                      chargestatus += charge_to_add;                        if (charge_to_add < 2f * TimeWarp.fixedDeltaTime) {                          float more_charge_to_add = ORSHelper.fixedRequestResource(part'"ElectricCharge"' mult * 2 * chargeNeeded * TimeWarp.fixedDeltaTime) / chargeNeeded;                          charge_to_add += more_charge_to_add;                          chargestatus += more_charge_to_add;                      }                        if (charge_to_add >= 1f * TimeWarp.fixedDeltaTime) {                          charging = true;                      } else {                          charging = false;                          if (TimeWarp.CurrentRateIndex > 3 && (current_antimatter > 0.00001 * antimatter.maxAmount)) {                              TimeWarp.SetRate(3' true);                              ScreenMessages.PostScreenMessage("Cannot Time Warp faster than 50x while Antimatter Tank is Unpowered"' 1.0f' ScreenMessageStyle.UPPER_CENTER);                          }                      }                      //print (chargestatus);                      if (chargestatus <= 0) {                          chargestatus = 0;                          if (current_antimatter > 0.00001*antimatter.maxAmount) {                              explode_counter++;                              if (explode_counter > 5) {                                  doExplode();                              }                          }                      } else {                          explode_counter = 0;                      }                        if (chargestatus > GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE) {                          chargestatus = GameConstants.MAX_ANTIMATTER_TANK_STORED_CHARGE;                      }                  } else {                    }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,GetInfo,The following statement contains a magic number: return "Maximum Power Requirements: " + (chargeNeeded*2).ToString("0") + " KW\nMinimum Power Requirements: " + chargeNeeded.ToString("0") + " KW";
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,AntimatterStorageTank,C:\repos\FractalUK_KSPInterstellar\FNPlugin\AntimatterStorageTank.cs,formatAntimatterMassStr,The following statement contains a magic number: if (amount >= 1000) {                  return (amount/1000).ToString("0.00") + " g";              } else {                  if (amount >= 1) {                      return (amount).ToString("0.00") + " mg";                  } else {                      if (amount >= 1e-3) {                          return (amount * 1e3).ToString("0.00") + " ug";                      } else {                          if (amount > 1e-6) {                              return (amount * 1e6).ToString("0.00") + " ng";                          } else {                              return (amount * 1e9).ToString("0.00") + " pg";                          }                      }                  }              }
Magic Number,FNPlugin,ModuleSolarSail,C:\repos\FractalUK_KSPInterstellar\FNPlugin\ModuleSolarSail.cs,OnFixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch != null) {                  solar_force_d = 0;                  if (!IsEnabled) { return; }                  double sunlightFactor = 1.0;                  Vector3 sunVector = FlightGlobals.fetch.bodies[0].position - part.orgPos;                    if (!PluginHelper.lineOfSightToSun(vessel)) {                      sunlightFactor = 0.0f;                  }                    //Debug.Log("Detecting sunlight: " + sunlightFactor.ToString());                  Vector3d solarForce = CalculateSolarForce() * sunlightFactor;                  //print(surfaceArea);                    Vector3d solar_accel = solarForce / vessel.GetTotalMass() / 1000.0 * TimeWarp.fixedDeltaTime;                  if (!this.vessel.packed) {                      vessel.ChangeWorldVelocity(solar_accel);                  } else {                      if (sunlightFactor > 0) {                          double temp1 = solar_accel.y;                          solar_accel.y = solar_accel.z;                          solar_accel.z = temp1;                          Vector3d position = vessel.orbit.getRelativePositionAtUT(Planetarium.GetUniversalTime());                          Orbit orbit2 = new Orbit(vessel.orbit.inclination' vessel.orbit.eccentricity' vessel.orbit.semiMajorAxis' vessel.orbit.LAN' vessel.orbit.argumentOfPeriapsis' vessel.orbit.meanAnomalyAtEpoch' vessel.orbit.epoch' vessel.orbit.referenceBody);                          orbit2.UpdateFromStateVectors(position' vessel.orbit.vel + solar_accel' vessel.orbit.referenceBody' Planetarium.GetUniversalTime());                          //print(orbit2.timeToAp);                          if (!double.IsNaN(orbit2.inclination) && !double.IsNaN(orbit2.eccentricity) && !double.IsNaN(orbit2.semiMajorAxis) && orbit2.timeToAp > TimeWarp.fixedDeltaTime) {                              vessel.orbit.inclination = orbit2.inclination;                              vessel.orbit.eccentricity = orbit2.eccentricity;                              vessel.orbit.semiMajorAxis = orbit2.semiMajorAxis;                              vessel.orbit.LAN = orbit2.LAN;                              vessel.orbit.argumentOfPeriapsis = orbit2.argumentOfPeriapsis;                              vessel.orbit.meanAnomalyAtEpoch = orbit2.meanAnomalyAtEpoch;                              vessel.orbit.epoch = orbit2.epoch;                              vessel.orbit.referenceBody = orbit2.referenceBody;                              vessel.orbit.Init();                                //vessel.orbit.UpdateFromOrbitAtUT(orbit2' Planetarium.GetUniversalTime()' orbit2.referenceBody);                              vessel.orbit.UpdateFromUT(Planetarium.GetUniversalTime());                          }                        }                  }                  solar_force_d = solarForce.magnitude;                  solar_acc_d = solar_accel.magnitude / TimeWarp.fixedDeltaTime;                  //print(solarForce.x.ToString() + "' " + solarForce.y.ToString() + "' " + solarForce.z.ToString());              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: double rad_level_yr = radiation_level * 24 * 365.25;
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: double rad_level_yr = radiation_level * 24 * 365.25;
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (radiation_level >= 1000) {                  radiationLevel = (radiation_level / 1000).ToString("0.00") + " Sv/h";              } else {                  if (radiation_level >= 1) {                      radiationLevel = radiation_level.ToString("0.00") + " mSv/hr";                  } else {                      if (radiation_level >= 0.001) {                          radiationLevel = (radiation_level * 1000.0).ToString("0.00") + " uSv/h";                      } else {                          radiationLevel = (radiation_level * 1000000.0).ToString("0.00") + " nSv/h";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (radiation_level >= 1000) {                  radiationLevel = (radiation_level / 1000).ToString("0.00") + " Sv/h";              } else {                  if (radiation_level >= 1) {                      radiationLevel = radiation_level.ToString("0.00") + " mSv/hr";                  } else {                      if (radiation_level >= 0.001) {                          radiationLevel = (radiation_level * 1000.0).ToString("0.00") + " uSv/h";                      } else {                          radiationLevel = (radiation_level * 1000000.0).ToString("0.00") + " nSv/h";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (radiation_level >= 1000) {                  radiationLevel = (radiation_level / 1000).ToString("0.00") + " Sv/h";              } else {                  if (radiation_level >= 1) {                      radiationLevel = radiation_level.ToString("0.00") + " mSv/hr";                  } else {                      if (radiation_level >= 0.001) {                          radiationLevel = (radiation_level * 1000.0).ToString("0.00") + " uSv/h";                      } else {                          radiationLevel = (radiation_level * 1000000.0).ToString("0.00") + " nSv/h";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (radiation_level >= 1000) {                  radiationLevel = (radiation_level / 1000).ToString("0.00") + " Sv/h";              } else {                  if (radiation_level >= 1) {                      radiationLevel = radiation_level.ToString("0.00") + " mSv/hr";                  } else {                      if (radiation_level >= 0.001) {                          radiationLevel = (radiation_level * 1000.0).ToString("0.00") + " uSv/h";                      } else {                          radiationLevel = (radiation_level * 1000000.0).ToString("0.00") + " nSv/h";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (radiation_level >= 1000) {                  radiationLevel = (radiation_level / 1000).ToString("0.00") + " Sv/h";              } else {                  if (radiation_level >= 1) {                      radiationLevel = radiation_level.ToString("0.00") + " mSv/hr";                  } else {                      if (radiation_level >= 0.001) {                          radiationLevel = (radiation_level * 1000.0).ToString("0.00") + " uSv/h";                      } else {                          radiationLevel = (radiation_level * 1000000.0).ToString("0.00") + " nSv/h";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr >= 1e9) {                  radiationLevel = radiationLevel + " " + (rad_level_yr / 1e9).ToString("0.00") + " MSv/yr";              } else {                  if (rad_level_yr >= 1e6) {                      radiationLevel = radiationLevel + " " + (rad_level_yr / 1e6).ToString("0.00") + " KSv/yr";                  } else {                      if (rad_level_yr >= 1e3) {                          radiationLevel = radiationLevel + " " + (rad_level_yr / 1e3).ToString("0.00") + " Sv/yr";                      } else {                          radiationLevel = radiationLevel + " " + (rad_level_yr).ToString("0.00") + " mSv/yr";                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                  double tot_rad_exp = VanAllen.crew_rad_exposure[vessel.vesselName];                  if (tot_rad_exp >= 1000) {                      radiationLevel2 = (tot_rad_exp / 1000).ToString("0.00") + " Sv";                  } else {                      if (tot_rad_exp >= 1) {                          radiationLevel2 = tot_rad_exp.ToString("0.00") + " mSv";                      } else {                          if (tot_rad_exp >= 0.001) {                              radiationLevel2 = (tot_rad_exp * 1000.0).ToString("0.00") + " uSv";                          } else {                              if (tot_rad_exp >= 1e-6) {                                  radiationLevel2 = (tot_rad_exp * 1000000.0).ToString("0.00") + " nSv";                              } else {                                  radiationLevel2 = (tot_rad_exp * 1000000000.0).ToString("0.00") + " pSv";                              }                          }                      }                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr <= 50) {                  radiationStatus = "Safe.";              } else {                  if (rad_level_yr <= 200) {                      radiationStatus = "Elevated.";                  } else if (rad_level_yr <= 2000) {                      radiationStatus = "High.";                  } else if (radiation_level <= 100) {                      radiationStatus = "Dangerous.";                  } else {                      radiationStatus = "Deadly.";                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr <= 50) {                  radiationStatus = "Safe.";              } else {                  if (rad_level_yr <= 200) {                      radiationStatus = "Elevated.";                  } else if (rad_level_yr <= 2000) {                      radiationStatus = "High.";                  } else if (radiation_level <= 100) {                      radiationStatus = "Dangerous.";                  } else {                      radiationStatus = "Deadly.";                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr <= 50) {                  radiationStatus = "Safe.";              } else {                  if (rad_level_yr <= 200) {                      radiationStatus = "Elevated.";                  } else if (rad_level_yr <= 2000) {                      radiationStatus = "High.";                  } else if (radiation_level <= 100) {                      radiationStatus = "Dangerous.";                  } else {                      radiationStatus = "Deadly.";                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (rad_level_yr <= 50) {                  radiationStatus = "Safe.";              } else {                  if (rad_level_yr <= 200) {                      radiationStatus = "Elevated.";                  } else if (rad_level_yr <= 2000) {                      radiationStatus = "High.";                  } else if (radiation_level <= 100) {                      radiationStatus = "Dangerous.";                  } else {                      radiationStatus = "Deadly.";                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: double rad_level_sec = radiation_level / 3600.0;
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,FNModuleRadiation,C:\repos\FractalUK_KSPInterstellar\FNPlugin\FNModuleRadiation.cs,OnUpdate,The following statement contains a magic number: if (!vessel.isEVA) {                  foreach (ProtoCrewMember crewmember in crew_members) {                      if (VanAllen.crew_rad_exposure.ContainsKey(crewmember.name)) {                          double current_rad = VanAllen.crew_rad_exposure[crewmember.name];                          VanAllen.crew_rad_exposure[crewmember.name] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0/31557600.0*TimeWarp.fixedDeltaTime)'0);                      } else {                          VanAllen.crew_rad_exposure.Add(crewmember.name' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                      }                  }              } else {                  if (VanAllen.crew_rad_exposure.ContainsKey(vessel.vesselName)) {                      double current_rad = VanAllen.crew_rad_exposure[vessel.vesselName];                      VanAllen.crew_rad_exposure[vessel.vesselName] = Math.Max(current_rad + rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0);                  } else {                      VanAllen.crew_rad_exposure.Add(vessel.vesselName' Math.Max(rad_level_sec * TimeWarp.deltaTime - (50.0 / 31557600.0 * TimeWarp.fixedDeltaTime)' 0));                  }              }
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Power"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label(PluginHelper.getFormattedPowerString(CurrentPower) + "/" + PluginHelper.getFormattedPowerString(PowerRequirements)' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Water Consumption Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label((_water_consumption_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Hydrogen Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label((_hydrogen_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label("Oxygen Production Rate"' _bold_label' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,UpdateGUI,The following statement contains a magic number: GUILayout.Label((_oxygen_production_rate * GameConstants.HOUR_SECONDS).ToString("0.000") + " mT/hour"' GUILayout.Width(150));
Magic Number,FNPlugin,WaterElectroliser,C:\repos\FractalUK_KSPInterstellar\FNPlugin\WaterElectroliser.cs,updateStatusMessage,The following statement contains a magic number: if (_hydrogen_production_rate > 0 && _oxygen_production_rate > 0)              {                  _status = "Electrolysing";              } else if (_hydrogen_production_rate > 0)              {                  _status = "Electrolysing: Insufficient Oxygen Storage";              } else if (_oxygen_production_rate > 0)              {                  _status = "Electrolysing: Insufficient Hydrogen Storage";              } else if (CurrentPower <= 0.01 * PowerRequirements)              {                  _status = "Insufficient Power";              } else              {                  _status = "Insufficient Storage";              }
