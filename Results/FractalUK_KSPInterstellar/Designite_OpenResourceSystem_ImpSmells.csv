Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The method has 128 lines of code.
Complex Method,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,Cyclomatic complexity of the method is 15
Complex Method,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,Cyclomatic complexity of the method is 19
Long Identifier,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,,The length of the parameter body_atmospheric_resource_list is 30.
Long Identifier,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,OnUpdate,The length of the parameter current_resource_abundance_pixel is 32.
Long Identifier,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,FixedUpdate,The length of the parameter current_resource_abundance_pixel is 32.
Long Identifier,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The length of the parameter planetary_resource_config_node is 30.
Long Identifier,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The length of the parameter high_priority_demand_supply_ratio is 33.
Long Identifier,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,,The length of the parameter FNRESOURCE_FLOWTYPE_SMALLEST_FIRST is 34.
Long Statement,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnUpdate,The length of the statement  "            double resource_abundance = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' resourceName); " is 138.
Long Statement,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnUpdate,The length of the statement  "                powerStr = (power_required * electrical_power_ratio).ToString("0.000") + " MW / " + power_required.ToString("0.000") + " MW"; " is 125.
Long Statement,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnFixedUpdate,The length of the statement  "                double resource_abundance = ORSAtmosphericResourceHandler.getAtmosphericResourceContent(vessel.mainBody.flightGlobalsIndex' resourceName); " is 138.
Long Statement,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnFixedUpdate,The length of the statement  "                    //extraction_rate_d = -part.RequestResource(resourceName' -extraction_rate / resource_density * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 147.
Long Statement,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnFixedUpdate,The length of the statement  "                    extraction_rate_d = -ORSHelper.fixedRequestResource(part'resourceName' -extraction_rate / resource_density * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 160.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericResourceContent,The length of the statement  "            ORSAtmosphericResource resource = bodyAtmosphericComposition.FirstOrDefault(oor => oor.getResourceName() == resourcename); " is 122.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericResourceContentByDisplayName,The length of the statement  "            ORSAtmosphericResource resource = bodyAtmosphericComposition.FirstOrDefault(oor => oor.getDisplayName() == resourcename); " is 121.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericCompositionForBody,The length of the statement  "                    ConfigNode atmospheric_resource_pack = GameDatabase.Instance.GetConfigNodes("ATMOSPHERIC_RESOURCE_PACK_DEFINITION").FirstOrDefault(); " is 133.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericCompositionForBody,The length of the statement  "                    Debug.Log("[ORS] Loading atmospheric data from pack: " + (atmospheric_resource_pack.HasValue("name") ? atmospheric_resource_pack.GetValue("name") : "unknown pack")); " is 165.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericCompositionForBody,The length of the statement  "                        List<ConfigNode> atmospheric_resource_list = atmospheric_resource_pack.nodes.Cast<ConfigNode>().Where(res => res.GetValue("celestialBodyName") == FlightGlobals.Bodies[refBody].name).ToList(); " is 191.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericCompositionForBody,The length of the statement  "                            bodyAtmosphericComposition = atmospheric_resource_list.Select(orsc => new ORSAtmosphericResource(orsc.HasValue("resourceName") ? orsc.GetValue("resourceName") : null' double.Parse(orsc.GetValue("abundance"))' orsc.GetValue("guiName"))).ToList(); " is 245.
Long Statement,OpenResourceSystem,ORSAtmosphericResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericResourceHandler.cs,getAtmosphericCompositionForBody,The length of the statement  "                                bodyAtmosphericComposition = bodyAtmosphericComposition.OrderByDescending(bacd => bacd.getResourceAbundance()).ToList(); " is 120.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,OnUpdate,The length of the statement  "                ORSPlanetaryResourcePixel current_resource_abundance_pixel = ORSPlanetaryResourceMapData.getResourceAvailabilityByRealResourceName(vessel.mainBody.flightGlobalsIndex' resourceName' vessel.latitude' vessel.longitude); " is 216.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,OnUpdate,The length of the statement  "                resource_abundance = ORSOceanicResourceHandler.getOceanicResourceContent(vessel.mainBody.flightGlobalsIndex' resourceName); " is 123.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,OnUpdate,The length of the statement  "                powerStr = (power_required * electrical_power_ratio).ToString("0.000") + " MW / " + power_required.ToString("0.000") + " MW"; " is 125.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,FixedUpdate,The length of the statement  "                    ORSPlanetaryResourcePixel current_resource_abundance_pixel = ORSPlanetaryResourceMapData.getResourceAvailabilityByRealResourceName(vessel.mainBody.flightGlobalsIndex' resourceName' vessel.latitude' vessel.longitude); " is 216.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,FixedUpdate,The length of the statement  "                    resource_abundance = ORSOceanicResourceHandler.getOceanicResourceContent(vessel.mainBody.flightGlobalsIndex' resourceName); " is 123.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,FixedUpdate,The length of the statement  "                    //extraction_rate_d = -part.RequestResource(resourceName' -extraction_rate / resource_density * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 147.
Long Statement,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,FixedUpdate,The length of the statement  "                    extraction_rate_d = -ORSHelper.fixedRequestResource(part'resourceName' -extraction_rate / resource_density * TimeWarp.fixedDeltaTime) / TimeWarp.fixedDeltaTime; " is 160.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The length of the statement  "                if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) { " is 132.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,getResourceAvailabilityByRealResourceName,The length of the statement  "                ORSPlanetaryResourceInfo resource_info = body_resource_maps.Where(ri => ri.Value.getResourceName() == resourcename).FirstOrDefault().Value; " is 139.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,getResourceAvailability,The length of the statement  "                ORSPlanetaryResourcePixel resource_pixel = new ORSPlanetaryResourcePixel(resource_info.getName()' resource_val' resource_info.getBody()); " is 137.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "            if (FlightGlobals.currentMainBody.flightGlobalsIndex != current_body) loadPlanetaryResourceData(FlightGlobals.currentMainBody.flightGlobalsIndex); " is 146.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "            if (body_resource_maps.ContainsKey(displayed_resource) && (FlightGlobals.currentMainBody.flightGlobalsIndex != map_body || displayed_resource != map_resource)) { " is 161.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "                        double surface_height = celbody.pqsController.GetSurfaceHeight(QuaternionD.AngleAxis(theta' Vector3d.down) * QuaternionD.AngleAxis(phi' Vector3d.forward) * Vector3d.right); " is 172.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "                        Vector3d scaledcenter = ScaledSpace.LocalToScaledSpace(celbody.position) + surface_height * up*ScaledSpace.InverseScaleFactor; " is 126.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "                        resource_prim_scaled.transform.localScale = sphere_scale_scaled * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius); " is 169.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "                        resource_prim.transform.localScale = sphere_scale * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius); " is 155.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The length of the statement  "                if (body_resource_maps.ContainsKey(displayed_resource) && FlightGlobals.currentMainBody.flightGlobalsIndex == map_body && displayed_resource == map_resource) { " is 159.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,createAbundanceSphere,The length of the statement  "                resource_prim.transform.localScale = sphere_scale * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius); " is 155.
Long Statement,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,createAbundanceSphere,The length of the statement  "                    resource_prim.renderer.material.mainTexture = GameDatabase.Instance.GetTexture("OpenResourceSystem/resource_point"' false); " is 123.
Long Statement,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,fixedRequestResource,The length of the statement  "                            local_part_resource.amount = local_part_resource.amount + (local_part_resource.maxAmount - local_part_resource.amount) * res_ratio; " is 131.
Long Statement,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,managedPowerSupplyWithMinimum,The length of the statement  "			double managed_supply_val_add = Math.Min (power_seconds_units' Math.Max(getCurrentUnfilledResourceDemand()+getSpareResourceCapacity()/TimeWarp.fixedDeltaTime'power_min_seconds_units)); " is 184.
Long Statement,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The length of the statement  "				high_priority_demand_supply_ratio = Math.Min ((powersupply-stored_current_charge_demand) / stored_current_hp_demand' 1.0); " is 122.
Long Statement,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The length of the statement  "				demand_supply_ratio = Math.Min ((powersupply-stored_current_charge_demand-stored_current_hp_demand) / stored_current_demand' 1.0); " is 130.
Long Statement,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The length of the statement  "            power_draw_items.Sort(delegate(KeyValuePair<ORSResourceSuppliable' double> firstPair' KeyValuePair<ORSResourceSuppliable' double> nextPair) { return firstPair.Value.CompareTo(nextPair.Value); }); " is 195.
Long Statement,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnUpdate,The length of the statement  "            Events["DisplayResource"].active = Events["DisplayResource"].guiActive = !ORSPlanetaryResourceMapData.resourceIsDisplayed(resourceName) && mapViewAvailable; " is 156.
Long Statement,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnUpdate,The length of the statement  "            Events["HideResource"].active = Events["HideResource"].guiActive = ORSPlanetaryResourceMapData.resourceIsDisplayed(resourceName) && mapViewAvailable; " is 149.
Long Statement,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnFixedUpdate,The length of the statement  "            ORSPlanetaryResourcePixel res_pixel = ORSPlanetaryResourceMapData.getResourceAvailability(vessel.mainBody.flightGlobalsIndex' resourceName' body.GetLatitude(vessel.transform.position)' body.GetLongitude(vessel.transform.position)); " is 231.
Long Statement,OpenResourceSystem,ORSOceanicResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSOceanicResourceHandler.cs,getOceanicCompositionForBody,The length of the statement  "                    ConfigNode oceanic_resource_pack = GameDatabase.Instance.GetConfigNodes("OCEANIC_RESOURCE_PACK_DEFINITION").FirstOrDefault(); " is 125.
Long Statement,OpenResourceSystem,ORSOceanicResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSOceanicResourceHandler.cs,getOceanicCompositionForBody,The length of the statement  "                    Debug.Log("[ORS] Loading oceanic data from pack: " + (oceanic_resource_pack.HasValue("name") ? oceanic_resource_pack.GetValue("name") : "unknown pack")); " is 153.
Long Statement,OpenResourceSystem,ORSOceanicResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSOceanicResourceHandler.cs,getOceanicCompositionForBody,The length of the statement  "                        List<ConfigNode> oceanic_resource_list = oceanic_resource_pack.nodes.Cast<ConfigNode>().Where(res => res.GetValue("celestialBodyName") == FlightGlobals.Bodies[refBody].name).ToList(); " is 183.
Long Statement,OpenResourceSystem,ORSOceanicResourceHandler,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSOceanicResourceHandler.cs,getOceanicCompositionForBody,The length of the statement  "                            bodyOceanicComposition = oceanic_resource_list.Select(orsc => new ORSOceanicResource(orsc.HasValue("resourceName") ? orsc.GetValue("resourceName") : null' double.Parse(orsc.GetValue("abundance"))' orsc.GetValue("guiName"))).ToList(); " is 233.
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled) {                  Fields["powerStr"].guiActive = true;                  Fields["resourceRate"].guiActive = true;                  statusTitle = "Active";                  double power_required = powerConsumption;                  powerStr = (power_required * electrical_power_ratio).ToString("0.000") + " MW / " + power_required.ToString("0.000") + " MW";                  double resource_density = PartResourceLibrary.Instance.GetDefinition(resourceName).density;                  double resource_rate_per_hour = extraction_rate_d * resource_density * 3600;                  resourceRate = formatMassStr(resource_rate_per_hour);              } else {                  Fields["powerStr"].guiActive = false;                  Fields["resourceRate"].guiActive = false;                  statusTitle = "Offline";              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSAtmosphericExtractor,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSAtmosphericExtractor.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass * 1000).ToString("0.000") + " kg/hour";                  } else {                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if (mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          } else {                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,OnUpdate,The following statement contains a magic number: if (IsEnabled)              {                  Fields["powerStr"].guiActive = true;                  Fields["resourceRate"].guiActive = true;                  statusTitle = "Active";                  double power_required = 0;                  if (vessel.Landed)                  {                      power_required = powerConsumptionLand;                  } else if (vessel.Splashed)                  {                      power_required = powerConsumptionOcean;                  }                  powerStr = (power_required * electrical_power_ratio).ToString("0.000") + " MW / " + power_required.ToString("0.000") + " MW";                  double resource_density = PartResourceLibrary.Instance.GetDefinition(resourceName).density;                  double resource_rate_per_hour = extraction_rate_d * resource_density * 3600;                  resourceRate = formatMassStr(resource_rate_per_hour);              } else              {                  Fields["powerStr"].guiActive = false;                  Fields["resourceRate"].guiActive = false;                  statusTitle = "Offline";              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSModuleResourceExtraction,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSModuleResourceExtraction.cs,formatMassStr,The following statement contains a magic number: if (mass > 1) {                  return mass.ToString("0.000") + " mT/hour";              } else {                  if (mass > 0.001) {                      return (mass*1000).ToString("0.000") + " kg/hour";                  }else{                      if (mass > 1e-6) {                          return (mass * 1e6).ToString("0.000") + " g/hour";                      } else {                          if(mass > 1e-9) {                              return (mass * 1e9).ToString("0.000") + " mg/hour";                          }else{                              return (mass * 1e12).ToString("0.000") + " ug/hour";                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getPixelAbundanceValue,The following statement contains a magic number: if (getResourceScale() == ORSPlanetaryResourceInfo.LOG_SCALE) {                  resource_val = Math.Pow(scale_factor' pix_color.grayscale * 255.0) / 1000000 * scale_multiplier;              } else if (getResourceScale() == ORSPlanetaryResourceInfo.LINEAR_SCALE) {                  resource_val = pix_color.grayscale * scale_multiplier;              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getPixelAbundanceValue,The following statement contains a magic number: if (getResourceScale() == ORSPlanetaryResourceInfo.LOG_SCALE) {                  resource_val = Math.Pow(scale_factor' pix_color.grayscale * 255.0) / 1000000 * scale_multiplier;              } else if (getResourceScale() == ORSPlanetaryResourceInfo.LINEAR_SCALE) {                  resource_val = pix_color.grayscale * scale_multiplier;              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double origin_x = map.width / 2.0;
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double origin_y = map.height / 2.0;
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double map_x = (lng * len_x / 2 / 180 + origin_x);
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double map_x = (lng * len_x / 2 / 180 + origin_x);
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double map_y = (lat * len_y / 2 / 90 + origin_y);
Magic Number,OpenResourceSystem,ORSPlanetaryResourceInfo,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceInfo.cs,getLatLongAbundanceValue,The following statement contains a magic number: double map_y = (lat * len_y / 2 / 90 + origin_y);
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,loadPlanetaryResourceData,The following statement contains a magic number: foreach (UrlDir.UrlConfig config in configs) {                  ConfigNode planetary_resource_config_node = config.config;                  if (planetary_resource_config_node.GetValue("celestialBodyName") == celestial_body_name && planetary_resource_config_node != null) {                      Debug.Log("[ORS] Loading Planetary Resource Data for " + celestial_body_name);                      Texture2D map = GameDatabase.Instance.GetTexture(planetary_resource_config_node.GetValue("mapUrl")' false);                      if (map == null) continue;                                          string resource_gui_name = planetary_resource_config_node.GetValue("name");                        if (body_resource_maps.ContainsKey(resource_gui_name)) continue; // skip duplicates                        ORSPlanetaryResourceInfo resource_info = new ORSPlanetaryResourceInfo(resource_gui_name' map' body);                      if (planetary_resource_config_node.HasValue("resourceName")) {                          string resource_name = planetary_resource_config_node.GetValue("resourceName");                          resource_info.setResourceName(resource_name);                      }                      if (planetary_resource_config_node.HasValue("resourceScale")) {                          string resource_scale = planetary_resource_config_node.GetValue("resourceScale");                          resource_info.setResourceScale(resource_scale);                      }                      if (planetary_resource_config_node.HasValue("scaleFactor")) {                          string scale_factorstr = planetary_resource_config_node.GetValue("scaleFactor");                          double scale_factor = double.Parse(scale_factorstr);                          resource_info.setScaleFactor(scale_factor);                      }                      if (planetary_resource_config_node.HasValue("scaleMultiplier")) {                          string scale_multstr = planetary_resource_config_node.GetValue("scaleMultiplier");                          double scale_mult = double.Parse(scale_multstr);                          resource_info.setScaleMultiplier(scale_mult);                      }                      if (planetary_resource_config_node.HasValue("displayTexture")) {                          string tex_path = planetary_resource_config_node.GetValue("displayTexture");                          resource_info.setDisplayTexture(tex_path);                      } else {                          string tex_path = planetary_resource_config_node.GetValue("WarpPlugin/resource_point");                          resource_info.setDisplayTexture(tex_path);                      }                      if (planetary_resource_config_node.HasValue("displayThreshold")) {                          string display_threshold_str = planetary_resource_config_node.GetValue("displayThreshold");                          double display_threshold = double.Parse(display_threshold_str);                          resource_info.setDisplayThreshold(display_threshold);                      }                      body_resource_maps.Add(resource_gui_name' resource_info);                      List<Vector2d> abundance_points_list = new List<Vector2d>();                        for (int i = 0; i < map.height; ++i) {                          for (int j = 0; j < map.width; ++j) {                              if (resource_info.getPixelAbundanceValue(j'i) >= resource_info.getDisplayThreshold()) {                                  //high value location' mark it                                  double theta = (j - map.width / 2)*2.0*180.0/map.width;                                  double phi = (i - map.height / 2)*2.0*90.0/map.height;                                  Vector2d angles = new Vector2d(theta' phi);                                  abundance_points_list.Add(angles);                              }                          }                      }                        body_abudnance_angles.Add(resource_gui_name' abundance_points_list.ToArray());                      Debug.Log("[ORS] " + abundance_points_list.Count + " high value " + resource_gui_name + " locations detected");                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,updatePlanetaryResourceMap,The following statement contains a magic number: if (body_resource_maps.ContainsKey(displayed_resource) && (FlightGlobals.currentMainBody.flightGlobalsIndex != map_body || displayed_resource != map_resource)) {                  foreach (ORSResourceAbundanceMarker abundance_marker in abundance_markers) {                      removeAbundanceSphere(abundance_marker.getPlanetarySphere());                      removeAbundanceSphere(abundance_marker.getScaledSphere());                  }                  abundance_markers.Clear();                  CelestialBody celbody = FlightGlobals.currentMainBody;                  sphere_texture = body_resource_maps[displayed_resource].getDisplayTexturePath();                  Vector2d[] abundance_points_list = body_abudnance_angles[displayed_resource];                  if (abundance_points_list != null && celbody.pqsController != null) {                      foreach (Vector2d abundance_point in abundance_points_list) {                          double theta = abundance_point.x;                          double phi = abundance_point.y;                          Vector3d up = celbody.GetSurfaceNVector(phi' theta).normalized;                          double surface_height = celbody.pqsController.GetSurfaceHeight(QuaternionD.AngleAxis(theta' Vector3d.down) * QuaternionD.AngleAxis(phi' Vector3d.forward) * Vector3d.right);                          GameObject resource_prim = createAbundanceSphere();                          GameObject resource_prim_scaled = createAbundanceSphere();                            Vector3d center = celbody.position + surface_height * up;                          Vector3d scaledcenter = ScaledSpace.LocalToScaledSpace(celbody.position) + surface_height * up*ScaledSpace.InverseScaleFactor;                            Transform scaled_trans = ScaledSpace.Instance.scaledSpaceTransforms.Single(t => t.name == celbody.name);                          resource_prim_scaled.transform.position = scaledcenter;                          resource_prim_scaled.transform.localScale = sphere_scale_scaled * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius);                          resource_prim_scaled.transform.localRotation = Quaternion.identity;                          resource_prim_scaled.transform.parent = scaled_trans;                          resource_prim_scaled.layer = 10;                            resource_prim.transform.position = center;                          resource_prim.transform.parent = celbody.transform;                          resource_prim.transform.localScale = sphere_scale * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius);                          resource_prim.transform.localRotation = Quaternion.identity;                            ORSResourceAbundanceMarker abundance_marker = new ORSResourceAbundanceMarker(resource_prim_scaled' resource_prim);                          abundance_markers.Add(abundance_marker);                      }                      map_body = current_body;                      map_resource = displayed_resource;                      stored_scale = ScaledSpace.ScaleFactor;                  }                  //celbody.renderer.material.mainTexture.              } else {                  if (body_resource_maps.ContainsKey(displayed_resource) && FlightGlobals.currentMainBody.flightGlobalsIndex == map_body && displayed_resource == map_resource) {                      CelestialBody celbody = FlightGlobals.currentMainBody;                      foreach (ORSResourceAbundanceMarker abundance_marker in abundance_markers) {                          if (lineOfSightToPosition(abundance_marker.getPlanetarySphere().transform.position' celbody)) {                              if (MapView.MapIsEnabled) {                                  abundance_marker.getScaledSphere().renderer.enabled = true;                                  abundance_marker.getPlanetarySphere().renderer.enabled = false;                              } else {                                  abundance_marker.getScaledSphere().renderer.enabled = false;                                  abundance_marker.getPlanetarySphere().renderer.enabled = true;                              }                             }else{                              abundance_marker.getScaledSphere().renderer.enabled = false;                              abundance_marker.getPlanetarySphere().renderer.enabled = false;                          }                      }                  }              }
Magic Number,OpenResourceSystem,ORSPlanetaryResourceMapData,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSPlanetaryResourceMapData.cs,createAbundanceSphere,The following statement contains a magic number: if (sphere == null)               {                  GameObject resource_prim = GameObject.CreatePrimitive(PrimitiveType.Sphere);                  resource_prim.collider.enabled = false;                  resource_prim.transform.localScale = sphere_scale * (FlightGlobals.currentMainBody.Radius / FlightGlobals.Bodies[ORSGameConstants.REF_BODY_KERBIN].Radius);                  resource_prim.renderer.material.shader = Shader.Find("Unlit/Texture");                  resource_prim.renderer.material.color = new Color(Color.red.r' Color.red.g' Color.red.b' 1.0f);                  if (sphere_texture != null) {                      resource_prim.renderer.material.mainTexture = GameDatabase.Instance.GetTexture(sphere_texture'false);                  } else {                      resource_prim.renderer.material.mainTexture = GameDatabase.Instance.GetTexture("OpenResourceSystem/resource_point"' false);                  }                  resource_prim.renderer.material.renderQueue = 1000;                  resource_prim.renderer.receiveShadows = false;                  resource_prim.renderer.enabled = false;                  resource_prim.renderer.castShadows = false;                  Destroy(resource_prim.collider);                  sphere = resource_prim;              }
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLatitude,The following statement contains a magic number: int lat_s = ((int)Math.Ceiling(Math.Abs(lat / 90)) % 2);
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLatitude,The following statement contains a magic number: int lat_s = ((int)Math.Ceiling(Math.Abs(lat / 90)) % 2);
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLatitude,The following statement contains a magic number: lat = lat % 90;
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLatitude,The following statement contains a magic number: if (lat_s == 0) {                  lat = (90 * Math.Sign(lat) - lat) * (-1);              }
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLongitude,The following statement contains a magic number: int lng_s = ((int)Math.Ceiling(Math.Abs(lng / 180)) % 2);
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLongitude,The following statement contains a magic number: int lng_s = ((int)Math.Ceiling(Math.Abs(lng / 180)) % 2);
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLongitude,The following statement contains a magic number: lng = lng % 180;
Magic Number,OpenResourceSystem,ORSHelper,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSHelper.cs,ToLongitude,The following statement contains a magic number: if (lng_s == 0) {                  lng = (180 * Math.Sign(lng) - lng) * (-1);              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: if (String.Equals(this.resource_name'ORSResourceManager.FNRESOURCE_MEGAJOULES) && stored_stable_supply > 0) {  				List<PartResource> electric_charge_resources = my_part.GetConnectedResources ("ElectricCharge").ToList();   				double stock_electric_charge_needed = 0;  				foreach (PartResource partresource in electric_charge_resources) {  					stock_electric_charge_needed += partresource.maxAmount - partresource.amount;  				}  				double power_supplied = Math.Min(powersupply*1000*TimeWarp.fixedDeltaTime' stock_electric_charge_needed);                  if (stock_electric_charge_needed > 0) {                      current_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                      charge_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                  }  				if (power_supplied > 0) {                      powersupply += my_part.RequestResource("ElectricCharge"' -power_supplied) / 1000 / TimeWarp.fixedDeltaTime;  				}  			}
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: if (String.Equals(this.resource_name'ORSResourceManager.FNRESOURCE_MEGAJOULES) && stored_stable_supply > 0) {  				List<PartResource> electric_charge_resources = my_part.GetConnectedResources ("ElectricCharge").ToList();   				double stock_electric_charge_needed = 0;  				foreach (PartResource partresource in electric_charge_resources) {  					stock_electric_charge_needed += partresource.maxAmount - partresource.amount;  				}  				double power_supplied = Math.Min(powersupply*1000*TimeWarp.fixedDeltaTime' stock_electric_charge_needed);                  if (stock_electric_charge_needed > 0) {                      current_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                      charge_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                  }  				if (power_supplied > 0) {                      powersupply += my_part.RequestResource("ElectricCharge"' -power_supplied) / 1000 / TimeWarp.fixedDeltaTime;  				}  			}
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: if (String.Equals(this.resource_name'ORSResourceManager.FNRESOURCE_MEGAJOULES) && stored_stable_supply > 0) {  				List<PartResource> electric_charge_resources = my_part.GetConnectedResources ("ElectricCharge").ToList();   				double stock_electric_charge_needed = 0;  				foreach (PartResource partresource in electric_charge_resources) {  					stock_electric_charge_needed += partresource.maxAmount - partresource.amount;  				}  				double power_supplied = Math.Min(powersupply*1000*TimeWarp.fixedDeltaTime' stock_electric_charge_needed);                  if (stock_electric_charge_needed > 0) {                      current_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                      charge_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                  }  				if (power_supplied > 0) {                      powersupply += my_part.RequestResource("ElectricCharge"' -power_supplied) / 1000 / TimeWarp.fixedDeltaTime;  				}  			}
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: if (String.Equals(this.resource_name'ORSResourceManager.FNRESOURCE_MEGAJOULES) && stored_stable_supply > 0) {  				List<PartResource> electric_charge_resources = my_part.GetConnectedResources ("ElectricCharge").ToList();   				double stock_electric_charge_needed = 0;  				foreach (PartResource partresource in electric_charge_resources) {  					stock_electric_charge_needed += partresource.maxAmount - partresource.amount;  				}  				double power_supplied = Math.Min(powersupply*1000*TimeWarp.fixedDeltaTime' stock_electric_charge_needed);                  if (stock_electric_charge_needed > 0) {                      current_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                      charge_resource_demand += stock_electric_charge_needed / 1000.0 / TimeWarp.fixedDeltaTime;                  }  				if (power_supplied > 0) {                      powersupply += my_part.RequestResource("ElectricCharge"' -power_supplied) / 1000 / TimeWarp.fixedDeltaTime;  				}  			}
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: foreach (KeyValuePair<ORSResourceSuppliable' double> power_kvp in power_draw_items) {                  ORSResourceSuppliable ms = power_kvp.Key;                                    if (ms.getPowerPriority() == 2) {                      double power = power_kvp.Value;  					current_resource_demand += power;  					if (flow_type == FNRESOURCE_FLOWTYPE_EVEN) {  						power = power * demand_supply_ratio;  					}  					double power_supplied = Math.Max(Math.Min(powersupply' power)'0.0);                      powersupply -= power_supplied;    					//notify of supply  					ms.receiveFNResource(power_supplied' this.resource_name);                  }                }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,update,The following statement contains a magic number: foreach (KeyValuePair<ORSResourceSuppliable' double> power_kvp in power_draw_items) {  				ORSResourceSuppliable ms = power_kvp.Key;  				if (ms.getPowerPriority() == 3) {  					double power = power_kvp.Value;  					current_resource_demand += power;  					if (flow_type == FNRESOURCE_FLOWTYPE_EVEN) {  						power = power * demand_supply_ratio;  					}  					double power_supplied = Math.Max(Math.Min(powersupply' power)'0.0);  					powersupply -= power_supplied;    					//notify of supply                      ms.receiveFNResource(power_supplied' this.resource_name);  				}  			}
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceManager,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceManager.cs,getPowerFormatString,The following statement contains a magic number: if (Math.Abs(power) >= 1000) {                  if (Math.Abs(power) > 20000) {                      return (power / 1000).ToString("0.0") + " GW";                  } else {                      return (power / 1000).ToString("0.00") + " GW";                  }              } else {                  if (Math.Abs(power) > 20) {                      return power.ToString("0.0") + " MW";                  } else {                      if (Math.Abs(power) >= 1) {                          return power.ToString("0.00") + " MW";                      } else {                          return (power * 1000).ToString("0.00") + " KW";                      }                  }              }
Magic Number,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnUpdate,The following statement contains a magic number: if (abundance > 0.001) {                  Ab = (abundance * 100.0).ToString("0.00") + "%";              } else {                  Ab = (abundance * 1000000.0).ToString("0.0") + "ppm";              }
Magic Number,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnUpdate,The following statement contains a magic number: if (abundance > 0.001) {                  Ab = (abundance * 100.0).ToString("0.00") + "%";              } else {                  Ab = (abundance * 1000000.0).ToString("0.0") + "ppm";              }
Magic Number,OpenResourceSystem,ORSResourceScanner,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceScanner.cs,OnUpdate,The following statement contains a magic number: if (abundance > 0.001) {                  Ab = (abundance * 100.0).ToString("0.00") + "%";              } else {                  Ab = (abundance * 1000000.0).ToString("0.0") + "ppm";              }
Magic Number,OpenResourceSystem,ORSResourceSuppliableModule,C:\repos\FractalUK_KSPInterstellar\OpenResourceSystem\ORSResourceSuppliableModule.cs,getPowerPriority,The following statement contains a magic number: return 2;
