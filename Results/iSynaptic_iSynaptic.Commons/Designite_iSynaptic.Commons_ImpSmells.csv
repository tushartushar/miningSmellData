Implementation smell,Namespace,Class,File,Method,Description
Complex Method,iSynaptic.Commons.Collections.Generic,SmartLoop<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Collections\Generic\SmartLoop.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,iSynaptic.Commons.Reflection,TypeHierarchyComparer,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Reflection\TypeHierarchyComparer.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,CanClone,Cyclomatic complexity of the method is 11
Complex Method,iSynaptic.Commons.Xml,ParseContext,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Xml\DeclarativeXmlParser.cs,ParseElement,Cyclomatic complexity of the method is 10
Long Parameter List,iSynaptic.Commons,Maybe,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Maybe.cs,RunAsync,The method has 5 parameters. Parameters: this' action' cancellationToken' taskCreationOptions' taskScheduler
Long Parameter List,iSynaptic.Commons.Xml,Matcher<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Xml\DeclarativeXmlParser.cs,Matcher,The method has 5 parameters. Parameters: parent' name' nodeType' selector' matchAction
Long Identifier,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,,The length of the parameter CloneContextGetShouldUseExistingObjectsMethod is 45.
Long Identifier,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,,The length of the parameter CloneContextGetIsShallowCloneMethod is 35.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotNull,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotNull' name' message ?? string.Format("The argument {0} must not be null."' name))) " is 130.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotEmpty,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotEmpty' name' message ?? string.Format("The argument {0} must not be empty."' name))) " is 132.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotEmpty,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotEmpty' name' message ?? string.Format("The argument {0} must not be empty."' name))) " is 132.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotEmpty,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotEmpty' name' message ?? string.Format("The argument {0} must not be empty."' name))) " is 132.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotNullOrEmpty,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotNullOrEmpty' name' message ?? string.Format("The argument {0} must not be null or empty."' name))) " is 146.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotNullOrEmpty,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotNullOrEmpty' name' message ?? string.Format("The argument {0} must not be null or empty."' name))) " is 146.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,NotNullOrWhiteSpace,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.NotNullOrWhiteSpace' name' message ?? string.Format("The argument {0} must not be null or white space."' name))) " is 157.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,MustBeDefined,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.MustBeDefined' name' message ?? string.Format("The argument {0} must be a defined enum value."' name))) " is 148.
Long Statement,iSynaptic.Commons,Check,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Check.cs,IsOfType,The length of the statement  "                ? Outcome.Failure(new CheckFailure(CheckType.IsOfType' name' message ?? string.Format("The argument {0} must be an instance of the type {1}."' name' typeof(T).FullName))) " is 170.
Long Statement,iSynaptic.Commons,Indexer,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Indexer.cs,ReadWrite,The length of the statement  "            return new KeyedIndexer<TIndex' TValue>(new KeyedReaderWriter<TIndex' TValue>(getter' (i' v) => { setter(i' v); return true; }' knownIndexes)); " is 143.
Long Statement,iSynaptic.Commons,FuncExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\FuncExtensions.generated.cs,Memoize,The length of the statement  "            var dictionary = new LazySelectionDictionary<Tuple<T1' T2' T3>' TResult>(x => @this(x.Item1' x.Item2' x.Item3).ToMaybe()); " is 122.
Long Statement,iSynaptic.Commons,FuncExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\FuncExtensions.generated.cs,Memoize,The length of the statement  "            var dictionary = new LazySelectionDictionary<Tuple<T1' T2' T3' T4>' TResult>(x => @this(x.Item1' x.Item2' x.Item3' x.Item4).ToMaybe()); " is 135.
Long Statement,iSynaptic.Commons,FuncExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\FuncExtensions.generated.cs,Memoize,The length of the statement  "            var dictionary = new LazySelectionDictionary<Tuple<T1' T2' T3' T4' T5>' TResult>(x => @this(x.Item1' x.Item2' x.Item3' x.Item4' x.Item5).ToMaybe()); " is 148.
Long Statement,iSynaptic.Commons,FuncExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\FuncExtensions.generated.cs,Memoize,The length of the statement  "            var dictionary = new LazySelectionDictionary<Tuple<T1' T2' T3' T4' T5' T6>' TResult>(x => @this(x.Item1' x.Item2' x.Item3' x.Item4' x.Item5' x.Item6).ToMaybe()); " is 161.
Long Statement,iSynaptic.Commons,FuncExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\FuncExtensions.generated.cs,Memoize,The length of the statement  "            var dictionary = new LazySelectionDictionary<Tuple<T1' T2' T3' T4' T5' T6' T7>' TResult>(x => @this(x.Item1' x.Item2' x.Item3' x.Item4' x.Item5' x.Item6' x.Item7).ToMaybe()); " is 174.
Long Statement,iSynaptic.Commons,Maybe,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Maybe.cs,RunAsync,The length of the statement  "            var task = Task.Factory.StartNew(() => self.Run(action)' cancellationToken' taskCreationOptions' taskScheduler ?? TaskScheduler.Current); " is 137.
Long Statement,iSynaptic.Commons,MessageHandler,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\MessageHandler.cs,GetDispatcher,The length of the statement  "                    dispatchers = dispatchers.Concat(new[] { Expression.Return(returnLabel' Expression.Invoke(Expression.Constant(baseDispatcher)' handlerParam' inputParam)' typeof(Task)) }).ToArray(); " is 181.
Long Statement,iSynaptic.Commons,MessageHandler,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\MessageHandler.cs,HandleUnexpectedMessage,The length of the statement  "            tcs.SetException(new InvalidOperationException(String.Format("Unable to handle message of type '{0}'."' message.GetType().FullName))); " is 134.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,InformMany,The length of the statement  "                return new Outcome<TResult>(self.WasSuccessful & outcomes.All(x => x.WasSuccessful)' outcomes.SelectMany(x => x.Observations)); " is 127.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Notice,The length of the statement  "            return @this.InformMany(t => predicate(t) ? new Outcome<TObservation>(@this.WasSuccessful' new[]{t}) : new Outcome<TObservation>(@this.WasSuccessful)); " is 151.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Ignore,The length of the statement  "            return @this.InformMany(t => predicate(t) ? new Outcome<TObservation>(@this.WasSuccessful) : new Outcome<TObservation>(@this.WasSuccessful' new[]{t})); " is 151.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Observe,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' self.Observations.Concat(new[]{observation}))); " is 132.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Observe,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' new[] { selector(self.WasSuccessful) })); " is 126.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Observe,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' self.Observations.Concat(new[] { selector(self.WasSuccessful) }))); " is 152.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,ObserveMany,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' self.Observations.Concat(observations))); " is 126.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,ObserveMany,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' self.Observations.Concat(selector(self.WasSuccessful)))); " is 142.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,FailIf,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(!predicate' predicate ? new[] { failureObservation() } : new TObservation[]{})); " is 145.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,FailIf,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful && !predicate()' self.Observations)); " is 121.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,FailOn,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful & !self.Observations.Any(predicate)' self.Observations)); " is 141.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,WithValueOnSuccess,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(Maybe.If(self.WasSuccessful' Maybe.Return(value))' self)); " is 127.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,Combine,The length of the statement  "                return new Outcome<TObservation>(cachedOutcomes.All(x => x.WasSuccessful)' cachedOutcomes.SelectMany(x => x.Observations)); " is 123.
Long Statement,iSynaptic.Commons,Outcome,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Outcome.cs,OfType,The length of the statement  "            return new Outcome<TObservation>(() => new Outcome<TObservation>(self.WasSuccessful' self.Observations.OfType<TObservation>())); " is 128.
Long Statement,iSynaptic.Commons,MethodReflectionObjectExtensions,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\MethodReflectionObjectExtensions.cs,GetDelegate,The length of the statement  "                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy' " is 123.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,SelectResult,The length of the statement  "                return new Result<TResult' TObservation>(selectedResult.ToMaybe()' self.ToOutcome().Combine(selectedResult.ToOutcome())); " is 121.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Select,The length of the statement  "            return new Result<TResult' TObservation>(() => new Result<TResult' TObservation>(self.ToMaybe().Select(selector)' self.ToOutcome())); " is 133.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Select,The length of the statement  "            return new Result<TResult' TObservation>(() => new Result<TResult' TObservation>(self.ToMaybe().Select(selector)' self.ToOutcome())); " is 133.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Where,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe().Where(predicate)' self.ToOutcome())); " is 121.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Observe,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Observe(observation))); " is 125.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Observe,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Observe(observation))); " is 125.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Observe,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Observe(selector(self.ToMaybe())))); " is 138.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Observe,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Observe(selector(self.ToMaybe())))); " is 138.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,ObserveMany,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().ObserveMany(observations))); " is 130.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,ObserveMany,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().ObserveMany(observations))); " is 130.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,ObserveMany,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().ObserveMany(selector(self.ToMaybe())))); " is 142.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,ObserveMany,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().ObserveMany(selector(self.ToMaybe())))); " is 142.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Notice,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Notice(predicate))); " is 122.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Ignore,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Ignore(predicate))); " is 122.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,Combine,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().Combine(outcomes))); " is 122.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<Unit' TObservation>(() => new Result<Unit' TObservation>(Maybe.NoValue' Outcome.FailIf(predicate' failureObservation))); " is 138.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<Unit' TObservation>(() => new Result<Unit' TObservation>(Maybe.NoValue' Outcome.FailIf(predicate' failureObservation))); " is 138.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<Unit' TObservation>(() => new Result<Unit' TObservation>(Maybe.NoValue' Outcome.FailIf(predicate' failureObservation))); " is 138.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().FailIf(predicate))); " is 122.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().FailIf(predicate' failureObservation))); " is 142.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailIf,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().FailIf(predicate' failureObservation))); " is 142.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,FailOn,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.ToMaybe()' self.ToOutcome().FailOn(predicate))); " is 122.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,NoValueOn,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.Observations.Any(predicate) ? Maybe.NoValue : self.ToMaybe()' self.ToOutcome())); " is 155.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,NoValueOnFailure,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.WasSuccessful ? self.ToMaybe() : Maybe.NoValue' self.ToOutcome())); " is 141.
Long Statement,iSynaptic.Commons,Result,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Result.cs,OfType,The length of the statement  "            return new Result<T' TObservation>(() => new Result<T' TObservation>(self.AsMaybe().OfType<T>()' self.AsOutcome().OfType<TObservation>())); " is 139.
Long Statement,iSynaptic.Commons.Collections.Generic,ProjectionCollection<TSourceItem;TProjectedItem>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Collections\Generic\ProjectionCollection.cs,Contains,The length of the statement  "            var predicate = item == null ? (Func<TSourceItem' bool>) (x => _Selector(x) == null) : (x => item.Equals(_Selector(x))); " is 120.
Long Statement,iSynaptic.Commons.Data,ExodataHelper,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Data\ExodataHelper.cs,ExtractMemberInfoForExodata,The length of the statement  "                .ThrowOnNoValue(() => new ArgumentException("You can only retrieve member exodata for the subject's direct properties and fields."' "member")) " is 142.
Long Statement,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,EmitCloneField,The length of the statement  "            Type strategyMethodType = typeof(Func<'''>).MakeGenericType(field.FieldType' field.FieldType' typeof(CloneContext)' field.FieldType); " is 133.
Long Statement,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,EmitCloneField,The length of the statement  "            MethodInfo getFuncMethod = GetMethod(strategyMethodType' "Invoke"' field.FieldType' field.FieldType' typeof(CloneContext)); " is 123.
Long Statement,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,IsNotCloneable,The length of the statement  "            if (field.DeclaringType != null && field.DeclaringType.FullName == "System.Runtime.Serialization.SafeSerializationManager") " is 123.
Long Statement,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,GetMethod,The length of the statement  "            const BindingFlags bindingFlags = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic; " is 125.
Long Statement,iSynaptic.Commons.Runtime.Serialization,Cloneable<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Runtime\Serialization\Cloneable.cs,CanClone,The length of the statement  "                    MethodInfo canCloneMethod = GetMethod(fieldClonableType' "CanClone"' typeof(Type)' typeof(bool)' typeof(Func<FieldInfo' bool>)); " is 128.
Long Statement,iSynaptic.Commons.Xml,UponBuilder,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Xml\DeclarativeXmlParser.cs,Attribute,The length of the statement  "                var matcher = new Matcher<T>(_Parent' name' XmlNodeType.Attribute' pc => new Maybe<T>(Convert<string' T>.From(pc.Token.Value))' action); " is 136.
Long Statement,iSynaptic.Commons.Xml,Matcher<T>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Xml\DeclarativeXmlParser.cs,Execute,The length of the statement  "                        .Suppress(x => context.Errors.Add(new ParseError(string.Format("Unable to interpet data; exception occured: {0}"' x.Message)' context.Token))) " is 142.
Magic Number,iSynaptic.Commons,Visitor<TState>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Visitor.cs,GetDispatcher,The following statement contains a magic number: return (VisitorDispatcher)_dispatchers.GetOrAdd(visitorType' t =>              {                  var subjectType = typeof(Object);                  var stateType = typeof(TState);                    var baseDispatcher = baseVisitorType.IsAssignableFrom(t.BaseType)                                           ? GetDispatcher(t.BaseType)                                           : null;                    var visitorParam = Expression.Parameter(baseVisitorType' "visitor");                  var subjectParam = Expression.Parameter(subjectType' "subject");                  var stateParam = Expression.Parameter(stateType' "state");                    var returnLabel = Expression.Label(stateType);                    var applicators = t                      .GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)                      .Where(x => x.DeclaringType == t)                      .Select(m => new { Method = m' Parameters = m.GetParameters() })                      .Select(x => new { x.Method' x.Parameters' ParameterCount = x.Parameters.Length })                      .Where(x => x.Method.Name.StartsWith("Visit") && (x.ParameterCount == 1 || x.ParameterCount == 2))                      .Select(x => new                      {                          x.Method'                          SubjectType = x.Parameters[0].ParameterType'                          StateType = x.ParameterCount == 2                                          ? x.Parameters[1].ParameterType                                          : null                      })                      .Where(x => subjectType.IsAssignableFrom(x.SubjectType))                      .Where(x => x.StateType == null || stateType.IsAssignableFrom(x.StateType))                      .Where(x => (x.Method.ReturnType == typeof(void)) ||                                   (x.StateType != null && stateType.IsAssignableFrom(x.Method.ReturnType)))                      .OrderByDescending(x => x.SubjectType' _typeHierarchyComparer)                      .ThenByDescending(x => x.StateType' _typeHierarchyComparer)                      .Select(x =>                      {                          var subjectTypeTest = Expression.TypeIs(subjectParam' x.SubjectType);                            var typeTest = x.StateType != null                                             ? (Expression)Expression.AndAlso(subjectTypeTest'                                                  Expression.OrElse(                                                      Expression.TypeIs(stateParam' x.StateType)'                                                      Expression.Equal(stateParam' Expression.Default(stateType))                                                  ))                                             : subjectTypeTest;                            var subjectArgument = Expression.Convert(subjectParam' x.SubjectType);                          var arguments = x.StateType != null                                              ? new[] { subjectArgument' Expression.Convert(stateParam' x.StateType) }                                              : new[] { subjectArgument };                            var callMethod = Expression.Call(                              Expression.Convert(visitorParam' t)'                              x.Method'                              arguments);                            if (x.Method.ReturnType == typeof(void))                          {                              return Expression.IfThen(typeTest'                                      Expression.Block(callMethod' Expression.Return(returnLabel' stateParam' stateType)));                          }                            return Expression.IfThen(typeTest'                                  Expression.Return(returnLabel'                                      Expression.Convert(                                          callMethod'                                          stateType)'                                      stateType));                      })                      .OfType<Expression>()                      .ToArray();                    if (applicators.Length <= 0)                  {                      return baseDispatcher ?? (VisitorDispatcher) ((v' s' st) =>                      {                          var visitable = s as IVisitableChildren;                          return visitable != null                               ? v.DispatchChildren(visitable' st)                               : st;                      });                  }                    if (baseDispatcher != null)                  {                      applicators = applicators.Concat(new[]                      {                          Expression.Return(returnLabel'                                             Expression.Invoke(Expression.Constant(baseDispatcher)' visitorParam' subjectParam' stateParam)'                                            stateType)                      }).ToArray();                  }                    return Expression.Lambda<VisitorDispatcher>(                      Expression.Label(returnLabel' Expression.Block(stateType' applicators))' visitorParam' subjectParam' stateParam)                                   .Compile();              });
Magic Number,iSynaptic.Commons,Visitor<TState>,C:\repos\iSynaptic_iSynaptic.Commons\Application\iSynaptic.Commons\Visitor.cs,GetDispatcher,The following statement contains a magic number: return (VisitorDispatcher)_dispatchers.GetOrAdd(visitorType' t =>              {                  var subjectType = typeof(Object);                  var stateType = typeof(TState);                    var baseDispatcher = baseVisitorType.IsAssignableFrom(t.BaseType)                                           ? GetDispatcher(t.BaseType)                                           : null;                    var visitorParam = Expression.Parameter(baseVisitorType' "visitor");                  var subjectParam = Expression.Parameter(subjectType' "subject");                  var stateParam = Expression.Parameter(stateType' "state");                    var returnLabel = Expression.Label(stateType);                    var applicators = t                      .GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)                      .Where(x => x.DeclaringType == t)                      .Select(m => new { Method = m' Parameters = m.GetParameters() })                      .Select(x => new { x.Method' x.Parameters' ParameterCount = x.Parameters.Length })                      .Where(x => x.Method.Name.StartsWith("Visit") && (x.ParameterCount == 1 || x.ParameterCount == 2))                      .Select(x => new                      {                          x.Method'                          SubjectType = x.Parameters[0].ParameterType'                          StateType = x.ParameterCount == 2                                          ? x.Parameters[1].ParameterType                                          : null                      })                      .Where(x => subjectType.IsAssignableFrom(x.SubjectType))                      .Where(x => x.StateType == null || stateType.IsAssignableFrom(x.StateType))                      .Where(x => (x.Method.ReturnType == typeof(void)) ||                                   (x.StateType != null && stateType.IsAssignableFrom(x.Method.ReturnType)))                      .OrderByDescending(x => x.SubjectType' _typeHierarchyComparer)                      .ThenByDescending(x => x.StateType' _typeHierarchyComparer)                      .Select(x =>                      {                          var subjectTypeTest = Expression.TypeIs(subjectParam' x.SubjectType);                            var typeTest = x.StateType != null                                             ? (Expression)Expression.AndAlso(subjectTypeTest'                                                  Expression.OrElse(                                                      Expression.TypeIs(stateParam' x.StateType)'                                                      Expression.Equal(stateParam' Expression.Default(stateType))                                                  ))                                             : subjectTypeTest;                            var subjectArgument = Expression.Convert(subjectParam' x.SubjectType);                          var arguments = x.StateType != null                                              ? new[] { subjectArgument' Expression.Convert(stateParam' x.StateType) }                                              : new[] { subjectArgument };                            var callMethod = Expression.Call(                              Expression.Convert(visitorParam' t)'                              x.Method'                              arguments);                            if (x.Method.ReturnType == typeof(void))                          {                              return Expression.IfThen(typeTest'                                      Expression.Block(callMethod' Expression.Return(returnLabel' stateParam' stateType)));                          }                            return Expression.IfThen(typeTest'                                  Expression.Return(returnLabel'                                      Expression.Convert(                                          callMethod'                                          stateType)'                                      stateType));                      })                      .OfType<Expression>()                      .ToArray();                    if (applicators.Length <= 0)                  {                      return baseDispatcher ?? (VisitorDispatcher) ((v' s' st) =>                      {                          var visitable = s as IVisitableChildren;                          return visitable != null                               ? v.DispatchChildren(visitable' st)                               : st;                      });                  }                    if (baseDispatcher != null)                  {                      applicators = applicators.Concat(new[]                      {                          Expression.Return(returnLabel'                                             Expression.Invoke(Expression.Constant(baseDispatcher)' visitorParam' subjectParam' stateParam)'                                            stateType)                      }).ToArray();                  }                    return Expression.Lambda<VisitorDispatcher>(                      Expression.Label(returnLabel' Expression.Block(stateType' applicators))' visitorParam' subjectParam' stateParam)                                   .Compile();              });
