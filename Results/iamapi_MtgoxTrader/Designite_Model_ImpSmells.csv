Implementation smell,Namespace,Class,File,Method,Description
Long Method,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has 138 lines of code.
Long Parameter List,MtGoxTrader.Model,MtGoxTickerItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxTickerItem.cs,MtGoxTickerItem,The method has 10 parameters. Parameters: high' low' avg' vwap' vol' last_all' last_local' last' buy' sell
Long Parameter List,MtGoxTrader.Model,MtGoxWallet,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxWallet.cs,MtGoxWallet,The method has 6 parameters. Parameters: name' balance' Operations' Daily_Withdraw_Limit' Monthly_Withdraw_Limit' Max_Withdraw
Long Statement,MtGoxTrader.Model,Encryption,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\Encryption.cs,DecryptData,The length of the statement  "                byte[] decryptedData = ProtectedData.Unprotect(Convert.FromBase64String(encryptedData)' null' DataProtectionScope.LocalMachine); " is 128.
Long Statement,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,BuildWallet,The length of the statement  "            MtGoxWalletBalance bal = new MtGoxWalletBalance(double.Parse(obj.Balance.value)' Int64.Parse(obj.Balance.value_int)' obj.Balance.display' (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.Balance.currency' true)); " is 228.
Long Statement,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,BuildWallet,The length of the statement  "                dwd = new MtGoxWithdrawalLimit(double.Parse(obj.Daily_Withdraw_Limit.value)' Int64.Parse(obj.Daily_Withdraw_Limit.value_int)' obj.Daily_Withdraw_Limit.display' (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.Daily_Withdraw_Limit.currency' true)); " is 263.
Long Statement,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,BuildWallet,The length of the statement  "                mwd = new MtGoxWithdrawalLimit(double.Parse(obj.Monthly_Withdraw_Limit.value)' Int64.Parse(obj.Monthly_Withdraw_Limit.value_int)' obj.Monthly_Withdraw_Limit.display' (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.Monthly_Withdraw_Limit.currency' true)); " is 271.
Long Statement,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,BuildWallet,The length of the statement  "                maxwd = new MtGoxWithdrawalLimit(double.Parse(obj.Max_Withdraw.value)' Int64.Parse(obj.Max_Withdraw.value_int)' obj.Max_Withdraw.display' (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.Max_Withdraw.currency' true)); " is 233.
Long Statement,MtGoxTrader.Model,MtGoxSocketIOClient,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\Utilities.cs,Connect,The length of the statement  "                             "Sec-WebSocket-Key: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\r\n" + // note see: https://en.wikipedia.org/wiki/WebSocket on draft-ietf-hybi-thewebsocketprotocol-06 version of protocol for instructions on how to construct the key " is 216.
Long Statement,MtGoxTrader.Model,MtGoxSocketIOClient,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\Utilities.cs,CreateSocket,The length of the statement  "            SslStream sslClientStream = new SslStream(mClient.GetStream()' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null); " is 144.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Empty Catch Block,MtGoxTrader.Model,MtGoxHistoryItem,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxHistoryItem.cs,getObjects,The method has an empty catch block.
Magic Number,MtGoxTrader.Model,MtGoxDepthInfo,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxDepthInfo.cs,getObjects,The following statement contains a magic number: for (int i = 0; i < obj.asks.Count; i++)              {                  MtGoxAsk aa = new MtGoxAsk();                  aa.price = double.Parse(obj.asks[i][0].ToString());                  aa.amount = double.Parse(obj.asks[i][1].ToString());                  depthInfo.asks.Add(aa);                  itemPrice = aa.price;                  itemAmount = aa.amount;                  itemPrice = Math.Round(itemPrice' 2);                  if ( i == 0 || Math.Abs(lastPrice - itemPrice) < epsilon)                  {                      amount += itemAmount;                      itemNO++;                      btcCount += itemAmount;                      fundCount += itemPrice * itemAmount;                  }                  else                  {                      DepthInfoItem a = new DepthInfoItem();                      a.Price = lastPrice;                      a.ItemNO = itemNO;                      a.FundCount = fundCount;                      a.BtcCount = btcCount;                      a.Amount = amount;                      depthInfo.askGroup.Add(a);                      itemNO = 0;                      amount = 0;                  }                  lastPrice = itemPrice;                  if (i > 1500)                      break;              }
Magic Number,MtGoxTrader.Model,MtGoxDepthInfo,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxDepthInfo.cs,getObjects,The following statement contains a magic number: for (int i = 0; i < obj.asks.Count; i++)              {                  MtGoxAsk aa = new MtGoxAsk();                  aa.price = double.Parse(obj.asks[i][0].ToString());                  aa.amount = double.Parse(obj.asks[i][1].ToString());                  depthInfo.asks.Add(aa);                  itemPrice = aa.price;                  itemAmount = aa.amount;                  itemPrice = Math.Round(itemPrice' 2);                  if ( i == 0 || Math.Abs(lastPrice - itemPrice) < epsilon)                  {                      amount += itemAmount;                      itemNO++;                      btcCount += itemAmount;                      fundCount += itemPrice * itemAmount;                  }                  else                  {                      DepthInfoItem a = new DepthInfoItem();                      a.Price = lastPrice;                      a.ItemNO = itemNO;                      a.FundCount = fundCount;                      a.BtcCount = btcCount;                      a.Amount = amount;                      depthInfo.askGroup.Add(a);                      itemNO = 0;                      amount = 0;                  }                  lastPrice = itemPrice;                  if (i > 1500)                      break;              }
Magic Number,MtGoxTrader.Model,MtGoxDepthInfo,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxDepthInfo.cs,getObjects,The following statement contains a magic number: for (int i = obj.bids.Count - 1' j = 0; i >= 0; i--' j++)              {                  MtGoxBid bb = new MtGoxBid();                  bb.price = double.Parse(obj.bids[i][0].ToString());                  bb.amount = double.Parse(obj.bids[i][1].ToString());                  depthInfo.bids.Add(bb);                  itemPrice = bb.price;                  itemAmount = bb.amount;                  itemPrice = Math.Round(itemPrice' 2);                  if (i == obj.bids.Count - 1 || Math.Abs(lastPrice - itemPrice) < epsilon)                  {                      amount += itemAmount;                      itemNO++;                      btcCount += itemAmount;                      fundCount += itemPrice * itemAmount;                  }                  else                  {                      DepthInfoItem a = new DepthInfoItem();                      a.Price = lastPrice;                      a.ItemNO = itemNO;                      a.FundCount = fundCount;                      a.BtcCount = btcCount;                      a.Amount = amount;                      depthInfo.bidGroup.Add(a);                      itemNO = 0;                      amount = 0;                  }                  lastPrice = itemPrice;                  if (j > 1500)                      break;                              }
Magic Number,MtGoxTrader.Model,MtGoxDepthInfo,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxDepthInfo.cs,getObjects,The following statement contains a magic number: for (int i = obj.bids.Count - 1' j = 0; i >= 0; i--' j++)              {                  MtGoxBid bb = new MtGoxBid();                  bb.price = double.Parse(obj.bids[i][0].ToString());                  bb.amount = double.Parse(obj.bids[i][1].ToString());                  depthInfo.bids.Add(bb);                  itemPrice = bb.price;                  itemAmount = bb.amount;                  itemPrice = Math.Round(itemPrice' 2);                  if (i == obj.bids.Count - 1 || Math.Abs(lastPrice - itemPrice) < epsilon)                  {                      amount += itemAmount;                      itemNO++;                      btcCount += itemAmount;                      fundCount += itemPrice * itemAmount;                  }                  else                  {                      DepthInfoItem a = new DepthInfoItem();                      a.Price = lastPrice;                      a.ItemNO = itemNO;                      a.FundCount = fundCount;                      a.BtcCount = btcCount;                      a.Amount = amount;                      depthInfo.bidGroup.Add(a);                      itemNO = 0;                      amount = 0;                  }                  lastPrice = itemPrice;                  if (j > 1500)                      break;                              }
Magic Number,MtGoxTrader.Model,MtGoxOrder,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxOrder.cs,getObjects,The following statement contains a magic number: for (int i = 0; i < obj.orders.Count; i++)              {                  MtGoxOrder ord = new MtGoxOrder();                  ord.oid = obj.orders[i].oid.ToString();                  ord.currency = (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.orders[i].currency.ToString()' true);                  ord.item = (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.orders[i].item.ToString()' true);                  switch ((int)int.Parse(obj.orders[i].type.ToString()))                  {                      case 1:                          ord.type = MtGoxOrderType.Sell;                          break;                      case 2:                          ord.type = MtGoxOrderType.Buy;                          break;                  }                  ord.amount = double.Parse(obj.orders[i].amount.ToString());                  ord.amount_int = Int64.Parse(obj.orders[i].amount_int.ToString());                  ord.price = double.Parse(obj.orders[i].price.ToString());                  ord.price_int = Int64.Parse(obj.orders[i].price_int.ToString());                  switch ((int)int.Parse(obj.orders[i].status.ToString()))                  {                      case 0:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                      case 2:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                  }                  ord.real_status = obj.orders[i].real_status.ToString();                  ord.dark = int.Parse(obj.orders[i].dark.ToString());                  ord.date = int.Parse(obj.orders[i].date.ToString());                  ord.priority = Int64.Parse(obj.orders[i].priority.ToString());                  orderList.Add(ord);              }
Magic Number,MtGoxTrader.Model,MtGoxOrder,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxOrder.cs,getObjects,The following statement contains a magic number: for (int i = 0; i < obj.orders.Count; i++)              {                  MtGoxOrder ord = new MtGoxOrder();                  ord.oid = obj.orders[i].oid.ToString();                  ord.currency = (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.orders[i].currency.ToString()' true);                  ord.item = (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj.orders[i].item.ToString()' true);                  switch ((int)int.Parse(obj.orders[i].type.ToString()))                  {                      case 1:                          ord.type = MtGoxOrderType.Sell;                          break;                      case 2:                          ord.type = MtGoxOrderType.Buy;                          break;                  }                  ord.amount = double.Parse(obj.orders[i].amount.ToString());                  ord.amount_int = Int64.Parse(obj.orders[i].amount_int.ToString());                  ord.price = double.Parse(obj.orders[i].price.ToString());                  ord.price_int = Int64.Parse(obj.orders[i].price_int.ToString());                  switch ((int)int.Parse(obj.orders[i].status.ToString()))                  {                      case 0:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                      case 2:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                  }                  ord.real_status = obj.orders[i].real_status.ToString();                  ord.dark = int.Parse(obj.orders[i].dark.ToString());                  ord.date = int.Parse(obj.orders[i].date.ToString());                  ord.priority = Int64.Parse(obj.orders[i].priority.ToString());                  orderList.Add(ord);              }
Magic Number,MtGoxTrader.Model,MtGoxTrade,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxTrade.cs,getObjects,The following statement contains a magic number: for (int i = 0; i < obj.Length; i++)              {                  MtGoxTrade trade = new MtGoxTrade();                  trade.date = obj[i].date;                  trade.price = Double.Parse(obj[i].price);                  trade.amount = Double.Parse(obj[i].amount);                  trade.price_int = Int64.Parse(obj[i].price_int);                  trade.amount_int = Int64.Parse(obj[i].amount_int);                  trade.tid = obj[i].tid;                  if (Enum.IsDefined(typeof(MtGoxCurrencySymbol)' obj[i].price_currency))                      trade.price_currency = (MtGoxCurrencySymbol)Enum.Parse(typeof(MtGoxCurrencySymbol)' obj[i].price_currency' true);                  trade.item = obj[i].item;                  if (Enum.IsDefined(typeof(MtGoxTradeType)' obj[i].trade_type))                      trade.trade_type = (MtGoxTradeType)Enum.Parse(typeof(MtGoxTradeType)' obj[i].trade_type' true);                  trade.primary = obj[i].primary;                  tradeList.Add(trade);                  if (i > 100)                      break;              }
Magic Number,MtGoxTrader.Model,MtGoxSocketIOClient,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\Utilities.cs,ReadMessage,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,MtGoxTrader.Model,MtGoxSocketIOClient,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\Utilities.cs,Recv,The following statement contains a magic number: if ((b & 0x80) == 0x80)              {                  int len = 0;                  do                  {                      b = (byte)(reader.ReadByte() & 0x7f);                      len += b * 128;                  } while ((b & 0x80) != 0x80);                    for (int i = 0; i < len; i++)                      reader.ReadByte();              }
Missing Default,MtGoxTrader.Model,MtGoxOrder,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxOrder.cs,getObjects,The following switch statement is missing a default case: switch ((int)int.Parse(obj.orders[i].type.ToString()))                  {                      case 1:                          ord.type = MtGoxOrderType.Sell;                          break;                      case 2:                          ord.type = MtGoxOrderType.Buy;                          break;                  }
Missing Default,MtGoxTrader.Model,MtGoxOrder,C:\repos\iamapi_MtgoxTrader\MtgoxTrader\Model\MtGoxOrder.cs,getObjects,The following switch statement is missing a default case: switch ((int)int.Parse(obj.orders[i].status.ToString()))                  {                      case 0:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                      case 2:                          ord.status = MtGoxOrderStatus.Invalid;                          break;                  }
