Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,AddPromptBehaviorQueryParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory,WebUI,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\WebUI.cs,ProcessAuthorizationResult,Cyclomatic complexity of the method is 12
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,AddPromptBehaviorQueryParameter,The length of the parameter authorizationRequestParameters is 30.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,CreateDeviceAuthChallengeResponse,The length of the statement  "	DeviceAuthJWTResponse response = new DeviceAuthJWTResponse (challengeData ["SubmitUrl"]' challengeData ["nonce"]' Convert.ToBase64String (certificate.GetCertificateBlob ().ToArray ())); " is 185.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,CreateDeviceAuthChallengeResponse,The length of the statement  "	CryptographicKey keyPair = await PersistedKeyProvider.OpenKeyPairFromCertificateAsync (certificate' HashAlgorithmNames.Sha256' CryptographicPadding.RsaPkcs1V15).AsTask ().ConfigureAwait (false); " is 194.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,CreateDeviceAuthChallengeResponse,The length of the statement  "	string signedJwt = string.Format (CultureInfo.CurrentCulture' "{0}.{1}"' response.GetResponseToSign ()' Base64UrlEncoder.Encode (signed.ToArray ())); " is 149.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,FindCertificate,The length of the statement  "		PlatformPlugin.Logger.Verbose (null' "Looking up certificate matching authorities:" + challengeData ["CertAuthorities"]); " is 121.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,FindCertificate,The length of the statement  "		throw new AdalException (AdalError.DeviceCertificateNotFound' string.Format (AdalErrorMessage.DeviceCertificateNotFoundTemplate' errMessage)); " is 142.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,GetUserPrincipalNameAsync,The length of the statement  "		throw new AdalException (AdalErrorEx.UnauthorizedUserInformationAccess' AdalErrorMessageEx.UnauthorizedUserInformationAccess' ex); " is 130.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,IsUserLocalAsync,The length of the statement  "		// The access is not allowed and we cannot determine whether this is a local user or not. So' we do NOT add form auth parameter. " is 128.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,IsUserLocalAsync,The length of the statement  "		PlatformPlugin.Logger.Information (callState' "Cannot access user information to determine whether it is a local user or not due to machine's privacy setting."); " is 161.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,IsUserLocalAsync,The length of the statement  "		PlatformPlugin.Logger.Information (callState' "Cannot try Windows Integrated Authentication due to lack of Enterprise capability."); " is 132.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,GetRedirectUriAsString,The length of the statement  "	return ReferenceEquals (redirectUri' Constant.SsoPlaceHolderUri) ? WebAuthenticationBroker.GetCurrentApplicationCallbackUri ().OriginalString : redirectUri.OriginalString; " is 171.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCachePlugin,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\TokenCachePlugin.cs,SetCacheValue,The length of the statement  "		int segmentCount = (encryptedValue.Length / MaxCompositeValueLength) + ((encryptedValue.Length % MaxCompositeValueLength == 0) ? 0 : 1); " is 136.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCachePlugin,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\TokenCachePlugin.cs,GetCacheValue,The length of the statement  "			Array.Copy ((byte[])containerValues [CacheValue + i]' 0' encryptedValue' i * MaxCompositeValueLength' MaxCompositeValueLength); " is 127.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCachePlugin,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\TokenCachePlugin.cs,GetCacheValue,The length of the statement  "	Array.Copy ((byte[])containerValues [CacheValue + (segmentCount - 1)]' 0' encryptedValue' (segmentCount - 1) * MaxCompositeValueLength' encyptedValueLength - (segmentCount - 1) * MaxCompositeValueLength); " is 204.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,WebUI,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\WebUI.cs,AcquireAuthorizationAsync,The length of the statement  "	WebAuthenticationOptions options = (this.useCorporateNetwork && (ssoMode || redirectUri.Scheme == Constant.MsAppScheme)) ? WebAuthenticationOptions.UseCorporateNetwork : WebAuthenticationOptions.None; " is 200.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,WebUI,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\WebUI.cs,AcquireAuthorizationAsync,The length of the statement  "			webAuthenticationResult = await WebAuthenticationBroker.AuthenticateAsync (options' authorizationUri).AsTask ().ConfigureAwait (false); " is 135.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,WebUI,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\WebUI.cs,AcquireAuthorizationAsync,The length of the statement  "			webAuthenticationResult = await WebAuthenticationBroker.AuthenticateAsync (options' authorizationUri' redirectUri).AsTask ().ConfigureAwait (false); " is 148.
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalEventSource,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\..\ADAL.Common\AdalEventSource.cs,Information,The following statement contains a magic number: WriteEvent (2' message);  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalEventSource,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\..\ADAL.Common\AdalEventSource.cs,Warning,The following statement contains a magic number: WriteEvent (3' message);  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalEventSource,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\..\ADAL.Common\AdalEventSource.cs,Error,The following statement contains a magic number: WriteEvent (4' message);  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,FindCertificate,The following statement contains a magic number: if (challengeData.ContainsKey ("CertAuthorities")) {  	errMessage = "Cert Authorities:" + challengeData ["CertAuthorities"];  	PlatformPlugin.Logger.Verbose (null' "Looking up certificate matching authorities:" + challengeData ["CertAuthorities"]);  	string[] certAuthorities = challengeData ["CertAuthorities"].Split (';');  	foreach (var certAuthority in certAuthorities) {  		//reverse the tokenized string and replace "'" with " + "  		string[] dNames = certAuthority.Split (new[] {  			"'"  		}' StringSplitOptions.None);  		string distinguishedIssuerName = dNames [dNames.Length - 1];  		for (int i = dNames.Length - 2; i >= 0; i--) {  			distinguishedIssuerName += " + " + dNames [i].Trim ();  		}  		query.IssuerName = distinguishedIssuerName;  		certificates = await CertificateStores.FindAllAsync (query).AsTask ().ConfigureAwait (false);  		if (certificates.Count > 0) {  			break;  		}  	}  } else {  	errMessage = "Cert Thumbprint:" + challengeData ["CertThumbprint"];  	PlatformPlugin.Logger.Verbose (null' "Looking up certificate matching thumbprint:" + challengeData ["CertThumbprint"]);  	query.Thumbprint = HexStringToByteArray (challengeData ["CertThumbprint"]);  	certificates = await CertificateStores.FindAllAsync (query).AsTask ().ConfigureAwait (false);  }  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,FindCertificate,The following statement contains a magic number: foreach (var certAuthority in certAuthorities) {  	//reverse the tokenized string and replace "'" with " + "  	string[] dNames = certAuthority.Split (new[] {  		"'"  	}' StringSplitOptions.None);  	string distinguishedIssuerName = dNames [dNames.Length - 1];  	for (int i = dNames.Length - 2; i >= 0; i--) {  		distinguishedIssuerName += " + " + dNames [i].Trim ();  	}  	query.IssuerName = distinguishedIssuerName;  	certificates = await CertificateStores.FindAllAsync (query).AsTask ().ConfigureAwait (false);  	if (certificates.Count > 0) {  		break;  	}  }  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,FindCertificate,The following statement contains a magic number: for (int i = dNames.Length - 2; i >= 0; i--) {  	distinguishedIssuerName += " + " + dNames [i].Trim ();  }  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,HexStringToByteArray,The following statement contains a magic number: if (hex.Length % 2 == 1)  	throw new Exception ("The binary key cannot have an odd number of digits");  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < (hex.Length >> 1); ++i) {  	arr [i] = (byte)((GetHexVal (hex [i << 1]) << 4) + (GetHexVal (hex [(i << 1) + 1])));  }  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,HexStringToByteArray,The following statement contains a magic number: arr [i] = (byte)((GetHexVal (hex [i << 1]) << 4) + (GetHexVal (hex [(i << 1) + 1])));  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);  
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,DeviceAuthHelper,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);  
Missing Default,Microsoft.IdentityModel.Clients.ActiveDirectory,PlatformInformation,F:\newReposMay17\AzureAD_azure-activedirectory-library-for-dotnet\src\ADAL.PCL.WinRT\PlatformInformation.cs,AddPromptBehaviorQueryParameter,The following switch statement is missing a default case: switch (promptBehavior) {  case PromptBehavior.Always:  	authorizationRequestParameters [OAuthParameter.Prompt] = PromptValue.Login;  	break;  case PromptBehavior.RefreshSession:  	authorizationRequestParameters [OAuthParameter.Prompt] = PromptValue.RefreshSession;  	break;  case PromptBehavior.Never:  	authorizationRequestParameters [OAuthParameter.Prompt] = PromptValue.AttemptNone;  	break;  }  
