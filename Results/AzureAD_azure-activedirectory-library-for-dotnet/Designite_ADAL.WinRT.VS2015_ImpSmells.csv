Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,CreateAuthorizationRequest,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ReadPolicies,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ReadPolicyBindings,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustResponse,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustResponse.cs,CreateFromResponseDocument,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,AcquireTokenAsync,The method has 7 parameters. Parameters: resource' clientId' redirectUri' parameters' userId' extraQueryParameters' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,AcquireTokenAsync,The method has 5 parameters. Parameters: resource' clientId' redirectUri' parameters' userId
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,AcquireTokenAsync,The method has 6 parameters. Parameters: resource' clientId' redirectUri' parameters' userId' extraQueryParameters
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,GetAuthorizationRequestUrlCommonAsync,The method has 6 parameters. Parameters: resource' clientId' redirectUri' userId' extraQueryParameters' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,AcquireTokenWithClaimsCommonAsync,The method has 8 parameters. Parameters: resource' clientKey' redirectUri' parameters' userId' extraQueryParameters' webUI' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,AcquireTokenCommonAsync,The method has 7 parameters. Parameters: resource' clientId' redirectUri' parameters' userId' extraQueryParameters' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,GetAuthorizationRequestUrlAsync,The method has 5 parameters. Parameters: resource' clientId' redirectUri' userId' extraQueryParameters
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationContext,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationContext.cs,GetAuthorizationRequestUrlAsync,The method has 6 parameters. Parameters: resource' clientId' redirectUri' userId' extraQueryParameters' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,StoreToCache,The method has 6 parameters. Parameters: result' authority' resource' clientId' subjectType' callState
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,StoreToCacheCommon,The method has 6 parameters. Parameters: result' authority' resource' clientId' subjectType' callState
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,QueryCache,The method has 6 parameters. Parameters: authority' clientId' subjectType' uniqueId' displayableId' assertionHash
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache,TokenCacheKey,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Cache\TokenCacheKey.cs,TokenCacheKey,The method has 5 parameters. Parameters: authority' resource' clientId' tokenSubjectType' userInfo
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache,TokenCacheKey,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Cache\TokenCacheKey.cs,TokenCacheKey,The method has 6 parameters. Parameters: authority' resource' clientId' tokenSubjectType' uniqueId' displayableId
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,AcquireTokenInteractiveHandler,The method has 7 parameters. Parameters: requestData' redirectUri' parameters' userId' extraQueryParameters' webUI' claims
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,ParseKeyValueList,The method has 5 parameters. Parameters: input' delimiter' urlDecode' lowercaseKeys' callState
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,ParseKeyValueListStrict,The method has 5 parameters. Parameters: input' delimiter' urlDecode' lowercaseKeys' callState
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,ParseKeyValueList,The method has 6 parameters. Parameters: input' delimiter' urlDecode' lowercaseKeys' callState' strict
Long Parameter List,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,LoggerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Platform\LoggerBase.cs,Log,The method has 5 parameters. Parameters: callState' logLevel' message' containsPii' callerFilePath
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalError,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AdalError.cs,,The length of the parameter AccessingWsMetadataExchangeFailed is 33.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalError,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AdalError.cs,,The length of the parameter ParsingWsMetadataExchangeFailed is 31.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalError,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AdalError.cs,,The length of the parameter WsTrustEndpointNotFoundInMetadataDocument is 41.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalError,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AdalError.cs,,The length of the parameter PasswordRequiredForManagedUserError is 35.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,LoadSingleItemFromCache,The length of the parameter cloudSpecificItemsForAllTenants is 31.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter UnauthorizedUserInformationAccess is 33.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter NeedToSetCallbackUriAsLocalSetting is 34.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter DeviceCodeAuthorizationPendingError is 35.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessageEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter RedirectUriUnsupportedWithPromptBehaviorNever is 45.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessageEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter UnauthorizedUserInformationAccess is 33.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessageEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter NeedToSetCallbackUriAsLocalSetting is 34.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter AccessingMetadataDocumentFailed is 31.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter AuthorizationServerInvalidResponse is 34.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter CertificateKeySizeTooSmallTemplate is 34.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter FederatedServiceReturnedErrorTemplate is 37.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter InvalidAuthenticateHeaderFormat is 31.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter InvalidFormatParameterTemplate is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter PasswordRequiredForManagedUserError is 35.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter UnauthorizedHttpStatusCodeExpected is 34.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter UnsupportedAuthorityValidation is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter UserCredentialAssertionTypeEmpty is 32.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter WsTrustEndpointNotFoundInMetadataDocument is 41.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter DuplicateQueryParameterTemplate is 31.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalErrorMessage,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Constants.cs,,The length of the parameter DeviceCertificateNotFoundTemplate is 33.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.ClientCreds,ReservedHeaderParameters,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\ClientCreds\JsonWebToken.cs,,The length of the parameter X509CertificatePublicCertValue is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,CreateAuthorizationRequest,The length of the parameter authorizationRequestParameters is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,OAuthHeader,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\OAuthConstants.cs,,The length of the parameter RequestCorrelationIdInResponse is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,PlatformInformationBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Platform\PlatformInformationBase.cs,AddPromptBehaviorQueryParameter,The length of the parameter authorizationRequestParameters is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,PlatformInformation,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\PlatformInformation.cs,AddPromptBehaviorQueryParameter,The length of the parameter authorizationRequestParameters is 30.
Long Identifier,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustResponse,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustResponse.cs,CreateFromResponseDocument,The length of the parameter requestSecurityTokenResponseCollection is 38.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,AdalUserMismatchException,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AdalUserMismatchException.cs,ToString,The length of the statement  "            return base.ToString() + string.Format(CultureInfo.CurrentCulture' "\n\tRequestedUser: {0}\n\tReturnedUser: {1}"' this.RequestedUser' this.ReturnedUser); " is 153.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,GetOrderedAliases,The length of the statement  "            var metadata = await InstanceDiscovery.GetMetadataEntry(new Uri(authority)' validateAuthority' callState).ConfigureAwait(false); " is 128.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,StoreToCache,The length of the statement  "            StoreToCacheCommon(result' ReplaceHost(authority' metadata.PreferredCache)' resource' clientId' subjectType' callState); " is 120.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,InstanceDiscovery,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Instance\InstanceDiscovery.cs,DiscoverAsync,The length of the statement  "                // The pre-existing implementation (https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/pull/796/files#diff-e4febd8f40f03e71bcae0f990f9690eaL99) " is 160.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory,InstanceDiscovery,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Instance\InstanceDiscovery.cs,DiscoverAsync,The length of the statement  "                // has been coded in this way: it catches the AdalServiceException and then translate it into 2 validation-relevant exceptions. " is 127.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AuthenticationResultEx,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\AuthenticationResultEx.cs,Clone,The length of the statement  "                Result = new AuthenticationResult(this.Result.AccessTokenType' this.Result.AccessToken' this.Result.ExpiresOn' this.Result.ExtendedExpiresOn) " is 141.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,DictionaryRequestParameters,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\RequestParameters.cs,ToString,The length of the statement  "                EncodingHelper.AddKeyValueString(messageBuilder' EncodingHelper.UrlEncode(kvp.Key)' EncodingHelper.UrlEncode(kvp.Value)); " is 121.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache,TokenCachePlugin,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\TokenCachePlugin.cs,SetCacheValue,The length of the statement  "                int segmentCount = (encryptedValue.Length / MaxCompositeValueLength) + ((encryptedValue.Length % MaxCompositeValueLength == 0) ? 0 : 1); " is 136.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache,TokenCachePlugin,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\TokenCachePlugin.cs,GetCacheValue,The length of the statement  "                    Array.Copy((byte[])containerValues[CacheValue + i]' 0' encryptedValue' i * MaxCompositeValueLength' MaxCompositeValueLength); " is 125.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache,TokenCachePlugin,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\TokenCachePlugin.cs,GetCacheValue,The length of the statement  "            Array.Copy((byte[])containerValues[CacheValue + (segmentCount - 1)]' 0' encryptedValue' (segmentCount - 1) * MaxCompositeValueLength' encyptedValueLength - (segmentCount - 1) * MaxCompositeValueLength); " is 202.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireDeviceCodeHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireDeviceCodeHandler.cs,CreateDeviceCodeRequestUriString,The length of the statement  "                        throw new AdalException(AdalError.DuplicateQueryParameter' string.Format(CultureInfo.CurrentCulture' AdalErrorMessage.DuplicateQueryParameterTemplate' kvp.Key)); " is 161.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireDeviceCodeHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireDeviceCodeHandler.cs,ValidateAuthorityType,The length of the statement  "                    string.Format(CultureInfo.CurrentCulture' AdalErrorMessage.InvalidAuthorityTypeTemplate' this.authenticator.Authority)); " is 120.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenByDeviceCodeHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenByDeviceCodeHandler.cs,SendTokenRequestAsync,The length of the statement  "            //the interval is added so that the while loop does not end before aquiring the last response from the STS stating that the code has expired. " is 141.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenHandlerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenHandlerBase.cs,RunAsync,The length of the statement  "                    var msg = "Refreshing AT failed either due to one of these :- Internal Server Error'Gateway Timeout and Service Unavailable." + " is 127.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenHandlerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenHandlerBase.cs,SendTokenRequestByRefreshTokenAsync,The length of the statement  "                var msg = "Refresh token was missing from the token refresh response' so the refresh token in the request is returned instead"; " is 127.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenHandlerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenHandlerBase.cs,RefreshAccessTokenAsync,The length of the statement  "                        // If Id token is not returned by token endpoint when refresh token is redeemed' we should copy tenant and user information from the cached token. " is 146.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,AcquireAuthorizationAsync,The length of the statement  "            this.authorizationResult = await this.webUi.AcquireAuthorizationAsync(authorizationUri' this.redirectUri' this.CallState).ConfigureAwait(false); " is 144.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,PostTokenRequest,The length of the statement  "            if ((this.DisplayableId == null && this.UniqueId == null) || this.UserIdentifierType == UserIdentifierType.OptionalDisplayableId) " is 129.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,PostTokenRequest,The length of the statement  "            string uniqueId = (resultEx.Result.UserInfo != null && resultEx.Result.UserInfo.UniqueId != null) ? resultEx.Result.UserInfo.UniqueId : "NULL"; " is 143.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,PostTokenRequest,The length of the statement  "            if (this.UserIdentifierType == UserIdentifierType.UniqueId && string.Compare(uniqueId' this.UniqueId' StringComparison.Ordinal) != 0) " is 133.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,PostTokenRequest,The length of the statement  "            if (this.UserIdentifierType == UserIdentifierType.RequiredDisplayableId && string.Compare(displayableId' this.DisplayableId' StringComparison.OrdinalIgnoreCase) != 0) " is 166.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenInteractiveHandler.cs,CreateAuthorizationRequest,The length of the statement  "                        throw new AdalException(AdalError.DuplicateQueryParameter' string.Format(CultureInfo.CurrentCulture' AdalErrorMessage.DuplicateQueryParameterTemplate' kvp.Key)); " is 161.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenNonInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenNonInteractiveHandler.cs,PreTokenRequest,The length of the statement  "                UserRealmDiscoveryResponse userRealmResponse = await UserRealmDiscoveryResponse.CreateByDiscoveryAsync(this.Authenticator.UserRealmUri' this.userCredential.UserName' this.CallState).ConfigureAwait(false); " is 204.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenNonInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenNonInteractiveHandler.cs,PreTokenRequest,The length of the statement  "                    WsTrustAddress wsTrustAddress = await MexParser.FetchWsTrustAddressFromMexAsync(userRealmResponse.FederationMetadataUrl' this.userCredential.UserAuthType' this.CallState).ConfigureAwait(false); " is 193.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenNonInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenNonInteractiveHandler.cs,PreTokenRequest,The length of the statement  "                    WsTrustResponse wsTrustResponse = await WsTrustRequest.SendRequestAsync(wsTrustAddress' this.userCredential' this.CallState' userRealmResponse.CloudAudienceUrn).ConfigureAwait(false); " is 183.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenNonInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenNonInteractiveHandler.cs,PreTokenRequest,The length of the statement  "                    this.userAssertion = new UserAssertion(wsTrustResponse.Token' (wsTrustResponse.TokenType == WsTrustResponse.Saml1Assertion) ? OAuthGrantType.Saml11Bearer : OAuthGrantType.Saml20Bearer); " is 185.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenNonInteractiveHandler,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenNonInteractiveHandler.cs,AddAditionalRequestParameters,The length of the statement  "                requestParameters[OAuthParameter.Assertion] = Convert.ToBase64String(Encoding.UTF8.GetBytes(this.userAssertion.Assertion)); " is 123.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,AdalIdHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\AdalIdHelper.cs,GetAssemblyInformationalVersion,The length of the statement  "            AssemblyInformationalVersionAttribute attribute = typeof(AdalIdHelper).GetTypeInfo().Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>(); " is 154.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http,HttpMessageHandlerFactory,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Http\HttpMessageHandlerFactory.cs,GetMessageHandler,The length of the statement  "            return new HttpClientHandler { UseDefaultCredentials = useDefaultCredentials' Proxy = WebProxyProvider.DefaultWebProxy}; " is 120.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,TokenResponse,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\TokenResponse.cs,CreateFromBrokerResponse,The length of the statement  "                Authority = responseDictionary.ContainsKey("authority") ? EncodingHelper.UrlDecode(responseDictionary["authority"]) : null' " is 123.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,LoggerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Platform\LoggerBase.cs,FormatLogMessage,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "{0:O}: {1} - {2}: {3}"' DateTime.UtcNow' CorrelationId' classOrComponent' message); " is 135.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,CreateDeviceAuthChallengeResponse,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' authHeaderTemplate' authToken' challengeData["Context"]' challengeData["Version"]); " is 134.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,FindCertificate,The length of the statement  "                CallState.Default.Logger.VerbosePii(null' "Looking up certificate matching authorities:" + challengeData["CertAuthorities"]); " is 125.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,FindCertificate,The length of the statement  "                CallState.Default.Logger.VerbosePii(null' "Looking up certificate matching thumbprint:" + challengeData["CertThumbprint"]); " is 123.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,PlatformInformation,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\PlatformInformation.cs,GetUserPrincipalNameAsync,The length of the statement  "                throw new AdalException(AdalErrorEx.UnauthorizedUserInformationAccess' AdalErrorMessageEx.UnauthorizedUserInformationAccess' ex); " is 129.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,PlatformInformation,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\PlatformInformation.cs,IsUserLocalAsync,The length of the statement  "                // The access is not allowed and we cannot determine whether this is a local user or not. So' we do NOT add form auth parameter. " is 128.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ExtractWsTrustAddressFromMex,The length of the statement  "                policy = policies.Values.Where(p => p.Url != null && p.AuthType == userAuthType && p.Version == WsTrustVersion.WsTrust13).OrderBy(p => random.Next()).FirstOrDefault() ?? " is 169.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ExtractWsTrustAddressFromMex,The length of the statement  "                    throw new AdalException(AdalError.IntegratedAuthFailed' new AdalException(AdalError.WsTrustEndpointNotFoundInMetadataDocument)); " is 128.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ReadPolicyBindings,The length of the statement  "                    if (soapAction == null || (string.Compare(XmlNamespace.Issue.ToString()' soapAction.Value' StringComparison.OrdinalIgnoreCase) != 0 " is 131.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,ReadPolicyBindings,The length of the statement  "                    if (soapBindingTransport != null && string.Compare(WsTrustSoapTransport' soapBindingTransport.Value' StringComparison.OrdinalIgnoreCase) == 0) " is 142.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustRequest,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustRequest.cs,SendRequestAsync,The length of the statement  "                wstResponse = WsTrustResponse.CreateFromResponse(EncodingHelper.GenerateStreamFromString(response.ResponseString)' wsTrustAddress.Version); " is 139.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustRequest,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustRequest.cs,SendRequestAsync,The length of the statement  "                    string.Format(CultureInfo.CurrentCulture' AdalErrorMessage.FederatedServiceReturnedErrorTemplate' wsTrustAddress.Uri' errorMessage)' " is 132.
Long Statement,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustRequest,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustRequest.cs,BuildSecurityHeader,The length of the statement  "                    "<o:Security s:mustUnderstand='1' xmlns:o='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'><u:Timestamp u:Id='_0'><u:Created>{0}</u:Created><u:Expires>{1}</u:Expires></u:Timestamp>{2}</o:Security>"' " is 233.
Complex Conditional,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows,AcquireTokenHandlerBase,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Flows\AcquireTokenHandlerBase.cs,RunAsync,The conditional expression  "ResultEx?.Result != null &&                          ((ResultEx.Result.AccessToken == null && ResultEx.RefreshToken != null) ||                           (ResultEx.Result.ExtendedLifeTimeToken && ResultEx.RefreshToken != null))"  is complex.
Empty Catch Block,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,IdToken,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\IdToken.cs,Parse,The method has an empty catch block.
Empty Catch Block,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,IdToken,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\IdToken.cs,Parse,The method has an empty catch block.
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,AuthenticationParameters,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\AuthenticationParameters.cs,CreateFromResponseAuthenticateHeader,The following statement contains a magic number: if (!authenticateHeader.StartsWith(Bearer' StringComparison.OrdinalIgnoreCase)                  || authenticateHeader.Length < Bearer.Length + 2                  || !char.IsWhiteSpace(authenticateHeader[Bearer.Length]))              {                  var ex = new ArgumentException(AdalErrorMessage.InvalidAuthenticateHeaderFormat'                      nameof(authenticateHeader));                  CallState.Default.Logger.Error(null' ex);                  throw ex;              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,Deserialize,The following statement contains a magic number: lock (cacheLock)              {                  if (state == null)                  {                      this.tokenCacheDictionary.Clear();                      return;                  }                    using (Stream stream = new MemoryStream())                  {                      BinaryWriter writer = new BinaryWriter(stream);                      writer.Write(state);                      writer.Flush();                      stream.Position = 0;                        BinaryReader reader = new BinaryReader(stream);                      int schemaVersion = reader.ReadInt32();                      if (schemaVersion != SchemaVersion)                      {                          CallState.Default.Logger.Warning(null'                              "The version of the persistent state of the cache does not match the current schema' so skipping deserialization.");                          return;                      }                        this.tokenCacheDictionary.Clear();                      int count = reader.ReadInt32();                      for (int n = 0; n < count; n++)                      {                          string keyString = reader.ReadString();                            string[] kvpElements = keyString.Split(new[] {Delimiter}' StringSplitOptions.None);                          AuthenticationResultEx resultEx = AuthenticationResultEx.Deserialize(reader.ReadString());                          TokenCacheKey key = new TokenCacheKey(kvpElements[0]' kvpElements[1]' kvpElements[2]'                              (TokenSubjectType) int.Parse(kvpElements[3]' CultureInfo.CurrentCulture)'                              resultEx.Result.UserInfo);                            this.tokenCacheDictionary.Add(key' resultEx);                      }                        CallState.Default.Logger.Information(null'                          string.Format(CultureInfo.CurrentCulture' "Deserialized {0} items to token cache."' count));                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,Deserialize,The following statement contains a magic number: lock (cacheLock)              {                  if (state == null)                  {                      this.tokenCacheDictionary.Clear();                      return;                  }                    using (Stream stream = new MemoryStream())                  {                      BinaryWriter writer = new BinaryWriter(stream);                      writer.Write(state);                      writer.Flush();                      stream.Position = 0;                        BinaryReader reader = new BinaryReader(stream);                      int schemaVersion = reader.ReadInt32();                      if (schemaVersion != SchemaVersion)                      {                          CallState.Default.Logger.Warning(null'                              "The version of the persistent state of the cache does not match the current schema' so skipping deserialization.");                          return;                      }                        this.tokenCacheDictionary.Clear();                      int count = reader.ReadInt32();                      for (int n = 0; n < count; n++)                      {                          string keyString = reader.ReadString();                            string[] kvpElements = keyString.Split(new[] {Delimiter}' StringSplitOptions.None);                          AuthenticationResultEx resultEx = AuthenticationResultEx.Deserialize(reader.ReadString());                          TokenCacheKey key = new TokenCacheKey(kvpElements[0]' kvpElements[1]' kvpElements[2]'                              (TokenSubjectType) int.Parse(kvpElements[3]' CultureInfo.CurrentCulture)'                              resultEx.Result.UserInfo);                            this.tokenCacheDictionary.Add(key' resultEx);                      }                        CallState.Default.Logger.Information(null'                          string.Format(CultureInfo.CurrentCulture' "Deserialized {0} items to token cache."' count));                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory,TokenCache,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\TokenCache.cs,GetHost,The following statement contains a magic number: return uri.Split('/')[2];
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalEventSource,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Features\WinCommon\AdalEventSource.cs,Information,The following statement contains a magic number: WriteEvent(2' message);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalEventSource,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Features\WinCommon\AdalEventSource.cs,Warning,The following statement contains a magic number: WriteEvent(3' message);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal,AdalEventSource,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Features\WinCommon\AdalEventSource.cs,Error,The following statement contains a magic number: WriteEvent(4' message);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.ClientCreds,JsonWebToken,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\ClientCreds\JsonWebToken.cs,ConvertToTimeT,The following statement contains a magic number: var startTime = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,Base64UrlEncoder,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (s.Length % 4)               {                  // Pad                   case 0:                      break; // No pad chars in this case                  case 2:                      s += DoubleBase64PadCharacter;                       break; // Two pad chars                  case 3:                      s += Base64PadCharacter;                       break; // One pad char                  default:                      throw new ArgumentException("Illegal base64url string!"' "arg");              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,Base64UrlEncoder,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (s.Length % 4)               {                  // Pad                   case 0:                      break; // No pad chars in this case                  case 2:                      s += DoubleBase64PadCharacter;                       break; // Two pad chars                  case 3:                      s += Base64PadCharacter;                       break; // One pad char                  default:                      throw new ArgumentException("Illegal base64url string!"' "arg");              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,Base64UrlEncoder,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (s.Length % 4)               {                  // Pad                   case 0:                      break; // No pad chars in this case                  case 2:                      s += DoubleBase64PadCharacter;                       break; // Two pad chars                  case 3:                      s += Base64PadCharacter;                       break; // One pad char                  default:                      throw new ArgumentException("Illegal base64url string!"' "arg");              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,ParseKeyValueList,The following statement contains a magic number: foreach (string queryPair in queryPairs)              {                  List<string> pair = SplitWithQuotes(queryPair' '=');                    if (pair.Count == 2 && !string.IsNullOrWhiteSpace(pair[0]) && !string.IsNullOrWhiteSpace(pair[1]))                  {                      string key = pair[0];                      string value = pair[1];                        // Url decoding is needed for parsing OAuth response' but not for parsing WWW-Authenticate header in 401 challenge                      if (urlDecode)                      {                          key = UrlDecode(key);                          value = UrlDecode(value);                      }                        if (lowercaseKeys)                      {                          key = key.Trim().ToLowerInvariant();                      }                        value = value.Trim().Trim(new[] { '\"' }).Trim();                        if (response.ContainsKey(key) && callState != null)                      {                          var msg = string.Format(CultureInfo.CurrentCulture'                              "Key/value pair list contains redundant key '{0}'."' key);                          callState.Logger.Warning(callState' msg);                          callState.Logger.WarningPii(callState' msg);                      }                        response[key] = value;                  }                  else if(strict && pair.Count > 2)                  {                      throw new ArgumentException(nameof(input));                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,ParseKeyValueList,The following statement contains a magic number: foreach (string queryPair in queryPairs)              {                  List<string> pair = SplitWithQuotes(queryPair' '=');                    if (pair.Count == 2 && !string.IsNullOrWhiteSpace(pair[0]) && !string.IsNullOrWhiteSpace(pair[1]))                  {                      string key = pair[0];                      string value = pair[1];                        // Url decoding is needed for parsing OAuth response' but not for parsing WWW-Authenticate header in 401 challenge                      if (urlDecode)                      {                          key = UrlDecode(key);                          value = UrlDecode(value);                      }                        if (lowercaseKeys)                      {                          key = key.Trim().ToLowerInvariant();                      }                        value = value.Trim().Trim(new[] { '\"' }).Trim();                        if (response.ContainsKey(key) && callState != null)                      {                          var msg = string.Format(CultureInfo.CurrentCulture'                              "Key/value pair list contains redundant key '{0}'."' key);                          callState.Logger.Warning(callState' msg);                          callState.Logger.WarningPii(callState' msg);                      }                        response[key] = value;                  }                  else if(strict && pair.Count > 2)                  {                      throw new ArgumentException(nameof(input));                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,UrlEncode,The following statement contains a magic number: var encodedMessage = new char[message.Length * 2];
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers,EncodingHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Helpers\EncodingHelper.cs,UrlEncode,The following statement contains a magic number: foreach (char ch in message)              {                  singleChar[0] = ch;                  var str = new string(singleChar);                  string encodedStr = UrlEncode(str);                  char[] encodedSingleChar = encodedStr.ToCharArray();                  if (length + encodedSingleChar.Length > encodedMessage.Length)                  {                      Array.Resize(ref encodedMessage' encodedMessage.Length + message.Length * 2);                  }                    encodedSingleChar.CopyTo(encodedMessage' length);                  length += encodedSingleChar.Length;              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http,AdalHttpClient,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Http\AdalHttpClient.cs,GetResponseAsync,The following statement contains a magic number: try              {                  IDictionary<string' string> adalIdHeaders = AdalIdHelper.GetAdalIdParameters();                  foreach (KeyValuePair<string' string> kvp in adalIdHeaders)                  {                      this.Client.Headers[kvp.Key] = kvp.Value;                  }                  //add pkeyauth header                  this.Client.Headers[DeviceAuthHeaderName] = DeviceAuthHeaderValue;                  using (response = await this.Client.GetResponseAsync().ConfigureAwait(false))                  {                      typedResponse = EncodingHelper.DeserializeResponse<T>(response.ResponseString);                  }              }              catch (HttpRequestWrapperException ex)              {                  if (ex.InnerException is TaskCanceledException)                  {                      Resiliency = true;                        _callState.Logger.Information(this.CallState' "Network timeout' Exception type: " + ex.InnerException.GetType());                      _callState.Logger.InformationPii(this.CallState' "Network timeout' Exception message: " + ex.InnerException.Message);                  }                    if (!Resiliency && ex.WebResponse == null)                  {                      _callState.Logger.Error(CallState' ex);                      _callState.Logger.ErrorPii(CallState' ex);                      throw new AdalServiceException(AdalError.Unknown' ex);                  }                    //check for resiliency                  if (!Resiliency && (int)ex.WebResponse.StatusCode >= 500 && (int)ex.WebResponse.StatusCode < 600)                  {                      _callState.Logger.Information(this.CallState'                          "HttpStatus code: " + ex.WebResponse.StatusCode + "' Exception type: " + ex.InnerException?.GetType());                        _callState.Logger.InformationPii(this.CallState'                          "HttpStatus code: " + ex.WebResponse.StatusCode + "' Exception message: " + ex.InnerException?.Message);                                            Resiliency = true;                  }                    if (Resiliency)                  {                      if (RetryOnce)                      {                          await Task.Delay(DelayTimePeriodMilliSeconds).ConfigureAwait(false);                          RetryOnce = false;                            var msg = "Retrying one more time..";                          _callState.Logger.Information(this.CallState' msg);                          _callState.Logger.InformationPii(this.CallState' msg);                            return await this.GetResponseAsync<T>(respondToDeviceAuthChallenge).ConfigureAwait(false);                      }                        _callState.Logger.Information(CallState'                          "Retry Failed' Exception type: " + ex.InnerException?.GetType());                      _callState.Logger.InformationPii(CallState'                           "Retry Failed' Exception message: " + ex.InnerException?.Message);                  }                                    if (!this.IsDeviceAuthChallenge(ex.WebResponse' respondToDeviceAuthChallenge))                  {                      TokenResponse tokenResponse = TokenResponse.CreateFromErrorResponse(ex.WebResponse);                      string[] errorCodes = tokenResponse.ErrorCodes ?? new[] {ex.WebResponse.StatusCode.ToString()};                      AdalServiceException serviceEx = new AdalServiceException(tokenResponse.Error'                          tokenResponse.ErrorDescription'                          errorCodes' ex);                        if (ex.WebResponse.StatusCode == HttpStatusCode.BadRequest &&                          tokenResponse.Error == AdalError.InteractionRequired)                      {                          throw new AdalClaimChallengeException(tokenResponse.Error' tokenResponse.ErrorDescription' ex' tokenResponse.Claims);                      }                        throw serviceEx;                  }                    //attempt device auth                  return await HandleDeviceAuthChallenge<T>(ex.WebResponse).ConfigureAwait(false);              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http,AdalHttpClient,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\Http\AdalHttpClient.cs,GetResponseAsync,The following statement contains a magic number: try              {                  IDictionary<string' string> adalIdHeaders = AdalIdHelper.GetAdalIdParameters();                  foreach (KeyValuePair<string' string> kvp in adalIdHeaders)                  {                      this.Client.Headers[kvp.Key] = kvp.Value;                  }                  //add pkeyauth header                  this.Client.Headers[DeviceAuthHeaderName] = DeviceAuthHeaderValue;                  using (response = await this.Client.GetResponseAsync().ConfigureAwait(false))                  {                      typedResponse = EncodingHelper.DeserializeResponse<T>(response.ResponseString);                  }              }              catch (HttpRequestWrapperException ex)              {                  if (ex.InnerException is TaskCanceledException)                  {                      Resiliency = true;                        _callState.Logger.Information(this.CallState' "Network timeout' Exception type: " + ex.InnerException.GetType());                      _callState.Logger.InformationPii(this.CallState' "Network timeout' Exception message: " + ex.InnerException.Message);                  }                    if (!Resiliency && ex.WebResponse == null)                  {                      _callState.Logger.Error(CallState' ex);                      _callState.Logger.ErrorPii(CallState' ex);                      throw new AdalServiceException(AdalError.Unknown' ex);                  }                    //check for resiliency                  if (!Resiliency && (int)ex.WebResponse.StatusCode >= 500 && (int)ex.WebResponse.StatusCode < 600)                  {                      _callState.Logger.Information(this.CallState'                          "HttpStatus code: " + ex.WebResponse.StatusCode + "' Exception type: " + ex.InnerException?.GetType());                        _callState.Logger.InformationPii(this.CallState'                          "HttpStatus code: " + ex.WebResponse.StatusCode + "' Exception message: " + ex.InnerException?.Message);                                            Resiliency = true;                  }                    if (Resiliency)                  {                      if (RetryOnce)                      {                          await Task.Delay(DelayTimePeriodMilliSeconds).ConfigureAwait(false);                          RetryOnce = false;                            var msg = "Retrying one more time..";                          _callState.Logger.Information(this.CallState' msg);                          _callState.Logger.InformationPii(this.CallState' msg);                            return await this.GetResponseAsync<T>(respondToDeviceAuthChallenge).ConfigureAwait(false);                      }                        _callState.Logger.Information(CallState'                          "Retry Failed' Exception type: " + ex.InnerException?.GetType());                      _callState.Logger.InformationPii(CallState'                           "Retry Failed' Exception message: " + ex.InnerException?.Message);                  }                                    if (!this.IsDeviceAuthChallenge(ex.WebResponse' respondToDeviceAuthChallenge))                  {                      TokenResponse tokenResponse = TokenResponse.CreateFromErrorResponse(ex.WebResponse);                      string[] errorCodes = tokenResponse.ErrorCodes ?? new[] {ex.WebResponse.StatusCode.ToString()};                      AdalServiceException serviceEx = new AdalServiceException(tokenResponse.Error'                          tokenResponse.ErrorDescription'                          errorCodes' ex);                        if (ex.WebResponse.StatusCode == HttpStatusCode.BadRequest &&                          tokenResponse.Error == AdalError.InteractionRequired)                      {                          throw new AdalClaimChallengeException(tokenResponse.Error' tokenResponse.ErrorDescription' ex' tokenResponse.Claims);                      }                        throw serviceEx;                  }                    //attempt device auth                  return await HandleDeviceAuthChallenge<T>(ex.WebResponse).ConfigureAwait(false);              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,DeviceAuthPayload,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\DeviceAuthJWTResponse.cs,DeviceAuthPayload,The following statement contains a magic number: var timeSpan = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2,IdToken,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\OAuth2\IdToken.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(idToken))              {                  string[] idTokenSegments = idToken.Split(new[] { '.' });                    // If Id token format is invalid' we silently ignore the id token                  if (idTokenSegments.Length == 3)                  {                      try                      {                          byte[] idTokenBytes = Base64UrlEncoder.DecodeBytes(idTokenSegments[1]);                          using (var stream = new MemoryStream(idTokenBytes))                          {                              var serializer = new DataContractJsonSerializer(typeof(IdToken));                              idTokenBody = (IdToken)serializer.ReadObject(stream);                          }                      }                      catch (SerializationException)                      {                          // We silently ignore the id token if exception occurs.                         }                      catch (ArgumentException)                      {                          // Again' we silently ignore the id token if exception occurs.                         }                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,FindCertificate,The following statement contains a magic number: if (challengeData.ContainsKey("CertAuthorities"))              {                  errMessage = "Cert Authorities:" + challengeData["CertAuthorities"];                  CallState.Default.Logger.VerbosePii(null' "Looking up certificate matching authorities:" + challengeData["CertAuthorities"]);                  string[] certAuthorities = challengeData["CertAuthorities"].Split(';');                  foreach (var certAuthority in certAuthorities)                  {                      //reverse the tokenized string and replace "'" with " + "                      string[] dNames = certAuthority.Split(new[] { "'" }' StringSplitOptions.None);                      string distinguishedIssuerName = dNames[dNames.Length - 1];                      for (int i = dNames.Length - 2; i >= 0; i--)                      {                          distinguishedIssuerName += " + " + dNames[i].Trim();                      }                        query.IssuerName = distinguishedIssuerName;                      certificates = await CertificateStores.FindAllAsync(query).AsTask().ConfigureAwait(false);                      if (certificates.Count > 0)                      {                          break;                      }                  }              }              else              {                  errMessage = "Cert Thumbprint:" + challengeData["CertThumbprint"];                  CallState.Default.Logger.VerbosePii(null' "Looking up certificate matching thumbprint:" + challengeData["CertThumbprint"]);                  query.Thumbprint = HexStringToByteArray(challengeData["CertThumbprint"]);                  certificates = await CertificateStores.FindAllAsync(query).AsTask().ConfigureAwait(false);              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,HexStringToByteArray,The following statement contains a magic number: if (hex.Length % 2 == 1)                  throw new AdalException("The binary key cannot have an odd number of digits");
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < (hex.Length >> 1); ++i)              {                  arr[i] = (byte)((GetHexVal(hex[i << 1]) << 4) + (GetHexVal(hex[(i << 1) + 1])));              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,DeviceAuthHelper,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\DeviceAuthHelper.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,SetPolicyEndpointAddresses,The following statement contains a magic number: foreach (XElement port in portElements)              {                  XAttribute portBinding = port.Attribute("binding");                  if (portBinding == null)                  {                      continue;                  }                    string portBindingName = portBinding.Value;                  string[] portBindingNameSegments = portBindingName.Split(new[] { ':' }' 2);                  if (portBindingNameSegments.Length < 2 || !bindings.ContainsKey(portBindingNameSegments[1]))                  {                      continue;                  }                    XElement endpointReference = port.Elements(XmlNamespace.Wsa10 + "EndpointReference").FirstOrDefault();                  if (endpointReference == null)                  {                      continue;                  }                    XElement endpointAddress = endpointReference.Elements(XmlNamespace.Wsa10 + "Address").FirstOrDefault();                  if (endpointAddress != null && Uri.IsWellFormedUriString(endpointAddress.Value' UriKind.Absolute))                  {                      bindings[portBindingNameSegments[1]].Url = new Uri(endpointAddress.Value);                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,MexParser,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\MexParser.cs,SetPolicyEndpointAddresses,The following statement contains a magic number: foreach (XElement port in portElements)              {                  XAttribute portBinding = port.Attribute("binding");                  if (portBinding == null)                  {                      continue;                  }                    string portBindingName = portBinding.Value;                  string[] portBindingNameSegments = portBindingName.Split(new[] { ':' }' 2);                  if (portBindingNameSegments.Length < 2 || !bindings.ContainsKey(portBindingNameSegments[1]))                  {                      continue;                  }                    XElement endpointReference = port.Elements(XmlNamespace.Wsa10 + "EndpointReference").FirstOrDefault();                  if (endpointReference == null)                  {                      continue;                  }                    XElement endpointAddress = endpointReference.Elements(XmlNamespace.Wsa10 + "Address").FirstOrDefault();                  if (endpointAddress != null && Uri.IsWellFormedUriString(endpointAddress.Value' UriKind.Absolute))                  {                      bindings[portBindingNameSegments[1]].Url = new Uri(endpointAddress.Value);                  }              }
Magic Number,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust,WsTrustRequest,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Internal\WsTrust\WsTrustRequest.cs,BuildSecurityHeader,The following statement contains a magic number: if (credential.UserAuthType == UserAuthType.UsernamePassword)              {                  StringBuilder messageCredentialsBuilder = new StringBuilder(MaxExpectedMessageSize);                  string guid = Guid.NewGuid().ToString();                  messageCredentialsBuilder.AppendFormat(CultureInfo.CurrentCulture'                      "<o:UsernameToken u:Id='uuid-{0}'><o:Username>{1}</o:Username><o:Password>"' guid'                      credential.UserName);                  char[] passwordChars = null;                  try                  {                      passwordChars = credential.PasswordToCharArray();                      string escapeStr = XmlEscape(new string(passwordChars));                      messageCredentialsBuilder.Append(escapeStr);                      escapeStr = "";                  }                  finally                  {                      passwordChars.SecureClear();                  }                    messageCredentialsBuilder.Append("</o:Password></o:UsernameToken>");                    //                  // Timestamp the message                  //                  DateTime currentTime = DateTime.UtcNow;                  string currentTimeString = BuildTimeString(currentTime);                    // Expiry is 10 minutes after creation                  DateTime expiryTime = currentTime.AddMinutes(10);                  string expiryTimeString = BuildTimeString(expiryTime);                    securityHeaderBuilder.AppendFormat(CultureInfo.CurrentCulture'                      "<o:Security s:mustUnderstand='1' xmlns:o='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'><u:Timestamp u:Id='_0'><u:Created>{0}</u:Created><u:Expires>{1}</u:Expires></u:Timestamp>{2}</o:Security>"'                      currentTimeString'                      expiryTimeString'                      messageCredentialsBuilder);                    messageCredentialsBuilder.SecureClear();              }
Missing Default,Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform,PlatformInformation,C:\repos\AzureAD_azure-activedirectory-library-for-dotnet\src\Microsoft.IdentityModel.Clients.ActiveDirectory\Platforms\winrt\PlatformInformation.cs,AddPromptBehaviorQueryParameter,The following switch statement is missing a default case: switch (promptBehavior)              {                  case PromptBehavior.Always:                      authorizationRequestParameters[OAuthParameter.Prompt] = PromptValue.Login;                      break;                  case PromptBehavior.SelectAccount:                      authorizationRequestParameters[OAuthParameter.Prompt] = PromptValue.SelectAccount;                      break;                  case PromptBehavior.RefreshSession:                      authorizationRequestParameters[OAuthParameter.Prompt] = PromptValue.RefreshSession;                      break;                  case PromptBehavior.Never:                      authorizationRequestParameters[OAuthParameter.Prompt] = PromptValue.AttemptNone;                      break;              }
