Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,ParseQueryString,Cyclomatic complexity of the method is 9
Complex Method,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,RenRen.Plurk,OAuthInstance,C:\repos\rschiang_rsPlurkLib\OAuthInstance.cs,SendRequest,Cyclomatic complexity of the method is 8
Complex Method,RenRen.Plurk,PlurkHelper,C:\repos\rschiang_rsPlurkLib\PlurkHelper.cs,GetPublicPlurks,Cyclomatic complexity of the method is 13
Long Statement,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,HexToInt,The length of the statement  "	return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1; " is 125.
Complex Conditional,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Empty Catch Block,RenRen.Plurk,PlurkHelper,C:\repos\rschiang_rsPlurkLib\PlurkHelper.cs,SendAPIRequest,The method has an empty catch block.
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = s [pos];  	if (ch == '+')  		ch = ' ';  	else if ((ch == '%') && (pos < count - 2)) {  		if ((s [pos + 1] == 'u') && pos < (count - 5)) {  			// %uXXXX  			int h1 = HexToInt (s [pos + 2]);  			int h2 = HexToInt (s [pos + 3]);  			int h3 = HexToInt (s [pos + 4]);  			int h4 = HexToInt (s [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				buffer.AddChar (ch);  				continue;  			}  		}  		else {  			// %XX  			int h1 = HexToInt (s [pos + 1]);  			int h2 = HexToInt (s [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				buffer.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		buffer.AddByte ((byte)ch);  	else  		buffer.AddChar (ch);  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (ch == '+')  	ch = ' ';  else if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((ch == '%') && (pos < count - 2)) {  	if ((s [pos + 1] == 'u') && pos < (count - 5)) {  		// %uXXXX  		int h1 = HexToInt (s [pos + 2]);  		int h2 = HexToInt (s [pos + 3]);  		int h3 = HexToInt (s [pos + 4]);  		int h4 = HexToInt (s [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			buffer.AddChar (ch);  			continue;  		}  	}  	else {  		// %XX  		int h1 = HexToInt (s [pos + 1]);  		int h2 = HexToInt (s [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			buffer.AddByte (b);  			continue;  		}  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if ((s [pos + 1] == 'u') && pos < (count - 5)) {  	// %uXXXX  	int h1 = HexToInt (s [pos + 2]);  	int h2 = HexToInt (s [pos + 3]);  	int h3 = HexToInt (s [pos + 4]);  	int h4 = HexToInt (s [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		buffer.AddChar (ch);  		continue;  	}  }  else {  	// %XX  	int h1 = HexToInt (s [pos + 1]);  	int h2 = HexToInt (s [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		buffer.AddByte (b);  		continue;  	}  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	buffer.AddChar (ch);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	buffer.AddChar (ch);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	buffer.AddChar (ch);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	buffer.AddChar (ch);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: pos += 5;  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	buffer.AddByte (b);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	buffer.AddByte (b);  	continue;  }  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,UrlDecode,The following statement contains a magic number: pos += 2;  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,RenRen.Plurk,HttpUtility,C:\repos\rschiang_rsPlurkLib\HttpUtil.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,RenRen.Plurk,OAuthInstance,C:\repos\rschiang_rsPlurkLib\OAuthInstance.cs,GetNonce,The following statement contains a magic number: return new Random ().Next (1' 99999999).ToString ("d8");  
Missing Default,RenRen.Plurk,PlurkHelper,C:\repos\rschiang_rsPlurkLib\PlurkHelper.cs,GetPublicPlurks,The following switch statement is missing a default case: switch (type) {  case PlurkType.MyPlurks:  	nvc.Add ("filter"' "only_user");  	break;  case PlurkType.RespondedPlurks:  	nvc.Add ("filter"' "only_responded");  	break;  case PlurkType.PrivatePlurks:  	nvc.Add ("filter"' "only_private");  	break;  case PlurkType.FavoritePlurks:  	nvc.Add ("filter"' "only_favorite");  	break;  }  
