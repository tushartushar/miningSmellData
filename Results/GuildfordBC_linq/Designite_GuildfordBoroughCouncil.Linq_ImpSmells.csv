Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,Cyclomatic complexity of the method is 45
Long Statement,GuildfordBoroughCouncil.Linq,ExpressionHelper,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\ObjectExtensions.cs,GetMember,The length of the statement  "	MemberExpression member = Expression.MakeMemberAccess (parameter' typeof(TEntity).GetMember (memberName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Single ()); " is 186.
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,ToBase36,The following statement contains a magic number: while (input != 0) {  	result.Push (clistarr [input % 36]);  	input /= 36;  }  
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,ToBase36,The following statement contains a magic number: while (input != 0) {  	result.Push (clistarr [input % 36]);  	input /= 36;  }  
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,ToBase36,The following statement contains a magic number: result.Push (clistarr [input % 36]);  
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,ToBase36,The following statement contains a magic number: input /= 36;  
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,FromBase36,The following statement contains a magic number: foreach (char c in reversed) {  	result += Base36CharList.IndexOf (c) * (long)Math.Pow (36' pos);  	pos++;  }  
Magic Number,GuildfordBoroughCouncil,Convert,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\Convert.cs,FromBase36,The following statement contains a magic number: result += Base36CharList.IndexOf (c) * (long)Math.Pow (36' pos);  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,MakeCurrent,The following statement contains a magic number: if (NewDate < DateTime.Today) {  	do {  		NewDate = NewDate.AddDays (7 * multiplier);  	}  	while (NewDate < DateTime.Today);  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,MakeCurrent,The following statement contains a magic number: do {  	NewDate = NewDate.AddDays (7 * multiplier);  }  while (NewDate < DateTime.Today);  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,MakeCurrent,The following statement contains a magic number: NewDate = NewDate.AddDays (7 * multiplier);  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,IsFortnight,The following statement contains a magic number: try {  	TimeSpan difference = source - ComparisonDate;  	int remainder = difference.Days % 14;  	return remainder.Equals (0);  }  catch {  	return false;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: while (!Found) {  	if (Mins < (Upper - 10)) {  		Mins = Upper - 15;  		Found = true;  	}  	else if (Mins < Upper) {  		Mins = Upper;  		Found = true;  	}  	Upper = Upper + 15;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: while (!Found) {  	if (Mins < (Upper - 10)) {  		Mins = Upper - 15;  		Found = true;  	}  	else if (Mins < Upper) {  		Mins = Upper;  		Found = true;  	}  	Upper = Upper + 15;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: while (!Found) {  	if (Mins < (Upper - 10)) {  		Mins = Upper - 15;  		Found = true;  	}  	else if (Mins < Upper) {  		Mins = Upper;  		Found = true;  	}  	Upper = Upper + 15;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: if (Mins < (Upper - 10)) {  	Mins = Upper - 15;  	Found = true;  }  else if (Mins < Upper) {  	Mins = Upper;  	Found = true;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: if (Mins < (Upper - 10)) {  	Mins = Upper - 15;  	Found = true;  }  else if (Mins < Upper) {  	Mins = Upper;  	Found = true;  }  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: Mins = Upper - 15;  
Magic Number,GuildfordBoroughCouncil.Linq,DateTimeExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\DateTimeExtensions.cs,NearestQuarterHour,The following statement contains a magic number: Upper = Upper + 15;  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: if (bytes > 1024) {  	for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  		dblSByte = bytes / 1024.0;  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: if (bytes > 1024) {  	for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  		dblSByte = bytes / 1024.0;  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: if (bytes > 1024) {  	for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  		dblSByte = bytes / 1024.0;  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: if (bytes > 1024) {  	for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  		dblSByte = bytes / 1024.0;  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  	dblSByte = bytes / 1024.0;  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  	dblSByte = bytes / 1024.0;  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: for (i = 0; (bytes / 1024) > 0; i++' bytes /= 1024) {  	dblSByte = bytes / 1024.0;  }  
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: bytes /= 1024
Magic Number,GuildfordBoroughCouncil.Linq,IntExtensions,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\IntExtensions.cs,FormatBytes,The following statement contains a magic number: dblSByte = bytes / 1024.0;  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,Convert,The following statement contains a magic number: while (number > 0) {  	int numberToProcess = (int)(number % 1000);  	number = number / 1000;  	string groupDescription = ProcessGroup (numberToProcess);  	if (groupDescription != null) {  		if (group > 0) {  			retVal = groupMapping [group] + " " + retVal;  		}  		retVal = groupDescription + " " + retVal;  	}  	group++;  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,Convert,The following statement contains a magic number: while (number > 0) {  	int numberToProcess = (int)(number % 1000);  	number = number / 1000;  	string groupDescription = ProcessGroup (numberToProcess);  	if (groupDescription != null) {  		if (group > 0) {  			retVal = groupMapping [group] + " " + retVal;  		}  		retVal = groupDescription + " " + retVal;  	}  	group++;  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,Convert,The following statement contains a magic number: number = number / 1000;  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens > 0) {  	if (tens < 20) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  	}  	else {  		int ones = tens % 10;  		tens = (tens / 10) - 2;  		// 20's offset  		retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  		if (ones > 0) {  			retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  		}  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens > 0) {  	if (tens < 20) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  	}  	else {  		int ones = tens % 10;  		tens = (tens / 10) - 2;  		// 20's offset  		retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  		if (ones > 0) {  			retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  		}  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens > 0) {  	if (tens < 20) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  	}  	else {  		int ones = tens % 10;  		tens = (tens / 10) - 2;  		// 20's offset  		retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  		if (ones > 0) {  			retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  		}  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens > 0) {  	if (tens < 20) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  	}  	else {  		int ones = tens % 10;  		tens = (tens / 10) - 2;  		// 20's offset  		retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  		if (ones > 0) {  			retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  		}  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens < 20) {  	retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  }  else {  	int ones = tens % 10;  	tens = (tens / 10) - 2;  	// 20's offset  	retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  	if (ones > 0) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens < 20) {  	retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  }  else {  	int ones = tens % 10;  	tens = (tens / 10) - 2;  	// 20's offset  	retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  	if (ones > 0) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens < 20) {  	retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  }  else {  	int ones = tens % 10;  	tens = (tens / 10) - 2;  	// 20's offset  	retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  	if (ones > 0) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: if (tens < 20) {  	retVal += ((retVal != null) ? " " : "") + onesMapping [tens];  }  else {  	int ones = tens % 10;  	tens = (tens / 10) - 2;  	// 20's offset  	retVal += ((retVal != null) ? " " : "") + tensMapping [tens];  	if (ones > 0) {  		retVal += ((retVal != null) ? " " : "") + onesMapping [ones];  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: tens = (tens / 10) - 2;  
Magic Number,GuildfordBoroughCouncil.Linq,NumberToWords,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\NumberToWords.cs,ProcessGroup,The following statement contains a magic number: tens = (tens / 10) - 2;  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,GenerateSlug,The following statement contains a magic number: str = str.Substring (0' str.Length <= 45 ? str.Length : 45).Trim ();  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,GenerateSlug,The following statement contains a magic number: str = str.Substring (0' str.Length <= 45 ? str.Length : 45).Trim ();  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,ToValidatedTelephoneNumber,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (telephone)) {  	// Remove all non numeric values  	telephone = Regex.Replace (telephone' @"[\D]"' String.Empty);  	// Replace 0 at start with 44 (country code)  	if (telephone.StartsWith ("0")) {  		telephone = Regex.Replace (telephone' @"\A[0]"' "44");  	}  	// Check length to see if it is the right length  	if ((telephone.Length < 10) || (telephone.Length > 12)) {  		throw new FormatException ("Telephone number is not a valid length.");  	}  	return telephone;  }  else {  	return telephone;  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,ToValidatedTelephoneNumber,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (telephone)) {  	// Remove all non numeric values  	telephone = Regex.Replace (telephone' @"[\D]"' String.Empty);  	// Replace 0 at start with 44 (country code)  	if (telephone.StartsWith ("0")) {  		telephone = Regex.Replace (telephone' @"\A[0]"' "44");  	}  	// Check length to see if it is the right length  	if ((telephone.Length < 10) || (telephone.Length > 12)) {  		throw new FormatException ("Telephone number is not a valid length.");  	}  	return telephone;  }  else {  	return telephone;  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,ToValidatedTelephoneNumber,The following statement contains a magic number: if ((telephone.Length < 10) || (telephone.Length > 12)) {  	throw new FormatException ("Telephone number is not a valid length.");  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,ToValidatedTelephoneNumber,The following statement contains a magic number: if ((telephone.Length < 10) || (telephone.Length > 12)) {  	throw new FormatException ("Telephone number is not a valid length.");  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvUnescape,The following statement contains a magic number: if (str.StartsWith (QUOTE) && str.EndsWith (QUOTE)) {  	str = str.Substring (1' str.Length - 2);  	if (str.Contains (ESCAPED_QUOTE))  		str = str.Replace (ESCAPED_QUOTE' QUOTE);  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvUnescape,The following statement contains a magic number: str = str.Substring (1' str.Length - 2);  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	switch (state) {  	case CsvSplitState.AtBeginningOfToken:  		if (sourceCharArray [i] == '"') {  			state = CsvSplitState.InQuotedToken;  			slashesToRemove = new List<int> ();  			continue;  		}  		if (sourceCharArray [i] == ''') {  			splitString.Add ("");  			tokenStart = i + 1;  			continue;  		}  		state = CsvSplitState.InNonQuotedToken;  		continue;  	case CsvSplitState.InNonQuotedToken:  		if (sourceCharArray [i] == ''') {  			splitString.Add (source.Substring (tokenStart' i - tokenStart));  			state = CsvSplitState.AtBeginningOfToken;  			tokenStart = i + 1;  		}  		continue;  	case CsvSplitState.InQuotedToken:  		if (sourceCharArray [i] == '"') {  			state = CsvSplitState.ExpectingComma;  			continue;  		}  		if (sourceCharArray [i] == '\\') {  			state = CsvSplitState.InEscapedCharacter;  			slashesToRemove.Add (i - tokenStart);  			continue;  		}  		continue;  	case CsvSplitState.ExpectingComma:  		if (sourceCharArray [i] != ''')  			throw new CsvParseException ("Expecting comma");  		string stringWithSlashes = source.Substring (tokenStart' i - tokenStart);  		foreach (int item in slashesToRemove.Reverse<int> ())  			stringWithSlashes = stringWithSlashes.Remove (item' 1);  		splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  		state = CsvSplitState.AtBeginningOfToken;  		tokenStart = i + 1;  		continue;  	case CsvSplitState.InEscapedCharacter:  		state = CsvSplitState.InQuotedToken;  		continue;  	}  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following statement contains a magic number: switch (state) {  case CsvSplitState.AtBeginningOfToken:  	if (sourceCharArray [i] == '"') {  		state = CsvSplitState.InQuotedToken;  		slashesToRemove = new List<int> ();  		continue;  	}  	if (sourceCharArray [i] == ''') {  		splitString.Add ("");  		tokenStart = i + 1;  		continue;  	}  	state = CsvSplitState.InNonQuotedToken;  	continue;  case CsvSplitState.InNonQuotedToken:  	if (sourceCharArray [i] == ''') {  		splitString.Add (source.Substring (tokenStart' i - tokenStart));  		state = CsvSplitState.AtBeginningOfToken;  		tokenStart = i + 1;  	}  	continue;  case CsvSplitState.InQuotedToken:  	if (sourceCharArray [i] == '"') {  		state = CsvSplitState.ExpectingComma;  		continue;  	}  	if (sourceCharArray [i] == '\\') {  		state = CsvSplitState.InEscapedCharacter;  		slashesToRemove.Add (i - tokenStart);  		continue;  	}  	continue;  case CsvSplitState.ExpectingComma:  	if (sourceCharArray [i] != ''')  		throw new CsvParseException ("Expecting comma");  	string stringWithSlashes = source.Substring (tokenStart' i - tokenStart);  	foreach (int item in slashesToRemove.Reverse<int> ())  		stringWithSlashes = stringWithSlashes.Remove (item' 1);  	splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  	state = CsvSplitState.AtBeginningOfToken;  	tokenStart = i + 1;  	continue;  case CsvSplitState.InEscapedCharacter:  	state = CsvSplitState.InQuotedToken;  	continue;  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following statement contains a magic number: splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following statement contains a magic number: switch (state) {  case CsvSplitState.AtBeginningOfToken:  	splitString.Add ("");  	return splitString.ToArray ();  case CsvSplitState.InNonQuotedToken:  	splitString.Add (source.Substring (tokenStart' source.Length - tokenStart));  	return splitString.ToArray ();  case CsvSplitState.InQuotedToken:  	throw new CsvParseException ("Expecting ending quote");  case CsvSplitState.ExpectingComma:  	string stringWithSlashes = source.Substring (tokenStart' source.Length - tokenStart);  	foreach (int item in slashesToRemove.Reverse<int> ())  		stringWithSlashes = stringWithSlashes.Remove (item' 1);  	splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  	return splitString.ToArray ();  case CsvSplitState.InEscapedCharacter:  	throw new CsvParseException ("Expecting escaped character");  }  
Magic Number,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following statement contains a magic number: splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  
Missing Default,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following switch statement is missing a default case: switch (state) {  case CsvSplitState.AtBeginningOfToken:  	if (sourceCharArray [i] == '"') {  		state = CsvSplitState.InQuotedToken;  		slashesToRemove = new List<int> ();  		continue;  	}  	if (sourceCharArray [i] == ''') {  		splitString.Add ("");  		tokenStart = i + 1;  		continue;  	}  	state = CsvSplitState.InNonQuotedToken;  	continue;  case CsvSplitState.InNonQuotedToken:  	if (sourceCharArray [i] == ''') {  		splitString.Add (source.Substring (tokenStart' i - tokenStart));  		state = CsvSplitState.AtBeginningOfToken;  		tokenStart = i + 1;  	}  	continue;  case CsvSplitState.InQuotedToken:  	if (sourceCharArray [i] == '"') {  		state = CsvSplitState.ExpectingComma;  		continue;  	}  	if (sourceCharArray [i] == '\\') {  		state = CsvSplitState.InEscapedCharacter;  		slashesToRemove.Add (i - tokenStart);  		continue;  	}  	continue;  case CsvSplitState.ExpectingComma:  	if (sourceCharArray [i] != ''')  		throw new CsvParseException ("Expecting comma");  	string stringWithSlashes = source.Substring (tokenStart' i - tokenStart);  	foreach (int item in slashesToRemove.Reverse<int> ())  		stringWithSlashes = stringWithSlashes.Remove (item' 1);  	splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  	state = CsvSplitState.AtBeginningOfToken;  	tokenStart = i + 1;  	continue;  case CsvSplitState.InEscapedCharacter:  	state = CsvSplitState.InQuotedToken;  	continue;  }  
Missing Default,GuildfordBoroughCouncil.Linq,StringExtensionMethods,C:\repos\GuildfordBC_linq\GuildfordBoroughCouncil.Linq\StringExtension.cs,CsvSplit,The following switch statement is missing a default case: switch (state) {  case CsvSplitState.AtBeginningOfToken:  	splitString.Add ("");  	return splitString.ToArray ();  case CsvSplitState.InNonQuotedToken:  	splitString.Add (source.Substring (tokenStart' source.Length - tokenStart));  	return splitString.ToArray ();  case CsvSplitState.InQuotedToken:  	throw new CsvParseException ("Expecting ending quote");  case CsvSplitState.ExpectingComma:  	string stringWithSlashes = source.Substring (tokenStart' source.Length - tokenStart);  	foreach (int item in slashesToRemove.Reverse<int> ())  		stringWithSlashes = stringWithSlashes.Remove (item' 1);  	splitString.Add (stringWithSlashes.Substring (1' stringWithSlashes.Length - 2));  	return splitString.ToArray ();  case CsvSplitState.InEscapedCharacter:  	throw new CsvParseException ("Expecting escaped character");  }  
