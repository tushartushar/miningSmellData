Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,IncrementProgress,Cyclomatic complexity of the method is 8
Complex Method,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,DecrementProgress,Cyclomatic complexity of the method is 8
Complex Method,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,UpdateControl,Cyclomatic complexity of the method is 8
Long Parameter List,MaterialSkin,ColorScheme,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\ColorScheme.cs,ColorScheme,The method has 5 parameters. Parameters: primary' darkPrimary' lightPrimary' accent' textShade
Long Parameter List,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The method has 5 parameters. Parameters: x' y' width' height' radius
Long Parameter List,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,TrackPopupMenuEx,The method has 6 parameters. Parameters: hmenu' fuFlags' x' y' hwnd' lptpm
Long Parameter List,MaterialSkin.Controls,MaterialProgressBar,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialProgressBar.cs,SetBoundsCore,The method has 5 parameters. Parameters: x' y' width' height' specified
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter DISABLED_OR_HINT_TEXT_BLACK_BRUSH is 33.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter DISABLED_OR_HINT_TEXT_WHITE_BRUSH is 33.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter CHECKBOX_OFF_DISABLED_LIGHT_BRUSH is 33.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter CHECKBOX_OFF_DISABLED_DARK_BRUSH is 32.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter RAISED_BUTTON_BACKGROUND_BRUSH is 30.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter RAISED_BUTTON_TEXT_LIGHT_BRUSH is 30.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_HOVER_LIGHT is 34.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_HOVER_LIGHT_BRUSH is 40.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_PRESSED_LIGHT is 36.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_PRESSED_LIGHT_BRUSH is 42.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_DISABLEDTEXT_LIGHT is 30.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_DISABLEDTEXT_LIGHT_BRUSH is 36.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_HOVER_DARK is 33.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_HOVER_DARK_BRUSH is 39.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_PRESSED_DARK is 35.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_BACKGROUND_PRESSED_DARK_BRUSH is 41.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter FLAT_BUTTON_DISABLEDTEXT_DARK_BRUSH is 35.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter CMS_BACKGROUND_HOVER_LIGHT_BRUSH is 32.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter CMS_BACKGROUND_HOVER_DARK_BRUSH is 31.
Long Identifier,MaterialSkin,MaterialSkinManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\MaterialSkinManager.cs,,The length of the parameter ACTION_BAR_TEXT_SECONDARY_BRUSH is 31.
Long Identifier,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,,The length of the parameter RADIOBUTTON_OUTER_CIRCLE_WIDTH is 30.
Long Identifier,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the parameter previousSelectedTabIndexIfHasOne is 32.
Long Statement,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,DecrementProgress,The length of the statement  "            _animationProgresses[index] -= (_animationDirections[index] == AnimationDirection.InOutOut || _animationDirections[index] == AnimationDirection.InOutRepeatingOut) ? SecondaryIncrement : Increment; " is 196.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "            var backgroundAlpha = Enabled ? (int)(SkinManager.GetCheckboxOffColor().A * (1.0 - animationProgress)) : SkinManager.GetCheckBoxOffDisabledColor().A; " is 149.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "            var brush = new SolidBrush(Color.FromArgb(colorAlpha' Enabled ? SkinManager.ColorScheme.AccentColor : SkinManager.GetCheckBoxOffDisabledColor())); " is 146.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                    var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color)); " is 154.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                    var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight; " is 161.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                    using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2)) " is 157.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha)); " is 175.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1); " is 140.
Long Statement,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The length of the statement  "                g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1); " is 133.
Long Statement,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The length of the statement  "            g.FillRectangle(e.Item.Selected && e.Item.Enabled ? SkinManager.GetCmsSelectedItemBrush() : new SolidBrush(SkinManager.GetApplicationBackgroundColor())' itemRect); " is 163.
Long Statement,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The length of the statement  "                        g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3)); " is 141.
Long Statement,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderArrow,The length of the statement  "            var arrowMiddle = new Point(e.ArrowRectangle.X + e.ArrowRectangle.Width / 2' e.ArrowRectangle.Y + e.ArrowRectangle.Height / 2); " is 127.
Long Statement,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The length of the statement  "                        g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize)); " is 138.
Long Statement,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The length of the statement  "                Enabled ? (Primary ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetPrimaryTextBrush()) : SkinManager.GetFlatButtonDisabledTextBrush()' " is 142.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The length of the statement  "                (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) && " is 123.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The length of the statement  "                !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position)))) " is 181.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The length of the statement  "                (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) && " is 123.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The length of the statement  "                !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position)))) " is 181.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The length of the statement  "                    var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero); " is 146.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnMouseMove,The length of the statement  "                else if (e.Location.X > Width - BORDER_WIDTH && e.Location.Y > Height - BORDER_WIDTH && !isChildUnderMouse && !_maximized) " is 122.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnMouseMove,The length of the statement  "                    //Only reset the cursor when needed' this prevents it from flickering when a child control changes the cursor to its own needs " is 126.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The length of the statement  "            _minButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 3 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT); " is 150.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The length of the statement  "            _maxButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 2 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT); " is 150.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The length of the statement  "            _xButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT); " is 144.
Long Statement,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The length of the statement  "            g.DrawString(Text' SkinManager.ROBOTO_MEDIUM_12' SkinManager.ColorScheme.TextBrush' new Rectangle(SkinManager.FORM_PADDING' STATUS_BAR_HEIGHT' Width' ACTION_BAR_HEIGHT)' new StringFormat { LineAlignment = StringAlignment.Center }); " is 231.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawColumnHeader,The length of the statement  "            e.Graphics.FillRectangle(new SolidBrush(SkinManager.GetApplicationBackgroundColor())' new Rectangle(e.Bounds.X' e.Bounds.Y' Width' e.Bounds.Height)); " is 149.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawColumnHeader,The length of the statement  "                new Rectangle(e.Bounds.X + ITEM_PADDING' e.Bounds.Y + ITEM_PADDING' e.Bounds.Width - ITEM_PADDING * 2' e.Bounds.Height - ITEM_PADDING * 2)' " is 139.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The length of the statement  "            //We draw the current line of items (= item with subitems) on a temp bitmap' then draw the bitmap at once. This is to reduce flickering. " is 136.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The length of the statement  "            g.FillRectangle(new SolidBrush(SkinManager.GetApplicationBackgroundColor())' new Rectangle(new Point(e.Bounds.X' 0)' e.Bounds.Size)); " is 133.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The length of the statement  "                g.FillRectangle(SkinManager.GetFlatButtonPressedBackgroundBrush()' new Rectangle(new Point(e.Bounds.X' 0)' e.Bounds.Size)); " is 123.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The length of the statement  "                g.FillRectangle(SkinManager.GetFlatButtonHoverBackgroundBrush()' new Rectangle(new Point(e.Bounds.X' 0)' e.Bounds.Size)); " is 121.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The length of the statement  "                                 new Rectangle(subItem.Bounds.X + ITEM_PADDING' ITEM_PADDING' subItem.Bounds.Width - 2 * ITEM_PADDING' subItem.Bounds.Height - 2 * ITEM_PADDING)' " is 144.
Long Statement,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnCreateControl,The length of the statement  "                // Font.FromLogFont is the method used when drawing ListViewItems. I 'test' it in this safer context to avoid unhandled exceptions later. " is 137.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "            int backgroundAlpha = Enabled ? (int)(SkinManager.GetCheckboxOffColor().A * (1.0 - animationProgress)) : SkinManager.GetCheckBoxOffDisabledColor().A; " is 149.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "            var brush = new SolidBrush(Color.FromArgb(colorAlpha' Enabled ? SkinManager.ColorScheme.AccentColor : SkinManager.GetCheckBoxOffDisabledColor())); " is 146.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "                    var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color)); " is 154.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "                    var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight; " is 161.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "                    using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2)) " is 157.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "            Color uncheckedColor = DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha); " is 169.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "                using (var path = DrawHelper.CreateRoundRect(RADIOBUTTON_CENTER - animationSizeHalf' RADIOBUTTON_CENTER - animationSizeHalf' animationSize' animationSize' 4f)) " is 159.
Long Statement,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The length of the statement  "            g.DrawString(Text' SkinManager.ROBOTO_MEDIUM_10' Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()' _boxOffset + 22' Height / 2 - stringSize.Height / 2); " is 186.
Long Statement,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The length of the statement  "                g.FillRectangle(_baseTextBox.Focused ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' _baseTextBox.Focused ? 2 : 1); " is 192.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the statement  "                g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize)); " is 140.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the statement  "                Brush textBrush = new SolidBrush(Color.FromArgb(CalculateTextAlpha(currentTabIndex' animationProgress)' SkinManager.ColorScheme.TextColor)); " is 140.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the statement  "                g.DrawString(tabPage.Text.ToUpper()' SkinManager.ROBOTO_MEDIUM_10' textBrush' _tabRects[currentTabIndex]' new StringFormat { Alignment = StringAlignment.Center' LineAlignment = StringAlignment.Center }); " is 203.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the statement  "            var previousSelectedTabIndexIfHasOne = _previousSelectedTabIndex == -1 ? _baseTabControl.SelectedIndex : _previousSelectedTabIndex; " is 131.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The length of the statement  "            var width = previousActiveTabRect.Width + (int)((activeTabPageRect.Width - previousActiveTabRect.Width) * animationProgress); " is 125.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,UpdateTabRects,The length of the statement  "            //If there aren't tab pages in the base tab control' the list should just be empty which has been set already; exit the void " is 124.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,UpdateTabRects,The length of the statement  "                    _tabRects.Add(new Rectangle(SkinManager.FORM_PADDING' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[0].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height)); " is 183.
Long Statement,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,UpdateTabRects,The length of the statement  "                        _tabRects.Add(new Rectangle(_tabRects[i - 1].Right' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[i].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height)); " is 181.
Long Statement,MaterialSkin.Controls,MaterialProgressBar,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialProgressBar.cs,OnPaint,The length of the statement  "            e.Graphics.FillRectangle(SkinManager.GetDisabledOrHintBrush()' doneProgress' 0' e.ClipRectangle.Width' e.ClipRectangle.Height); " is 127.
Long Statement,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The length of the statement  "                g.FillPath(Primary ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetRaisedButtonBackgroundBrush()' backgroundPath); " is 122.
Long Statement,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The length of the statement  "                    g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize)); " is 138.
Complex Conditional,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,AnimationTimerOnTick,The conditional expression  "(_animationDirections[i] == AnimationDirection.In && _animationProgresses[i] == MAX_VALUE) ||                          (_animationDirections[i] == AnimationDirection.Out && _animationProgresses[i] == MIN_VALUE) ||                          (_animationDirections[i] == AnimationDirection.InOutOut && _animationProgresses[i] == MIN_VALUE)"  is complex.
Complex Conditional,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The conditional expression  "m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position)))"  is complex.
Complex Conditional,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The conditional expression  "m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position)))"  is complex.
Complex Conditional,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The conditional expression  "_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos)"  is complex.
Complex Conditional,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnMouseMove,The conditional expression  "e.Location.X < BORDER_WIDTH && e.Location.Y > Height - BORDER_WIDTH && !isChildUnderMouse && !_maximized"  is complex.
Complex Conditional,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnMouseMove,The conditional expression  "e.Location.X > Width - BORDER_WIDTH && e.Location.Y > Height - BORDER_WIDTH && !isChildUnderMouse && !_maximized"  is complex.
Magic Number,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,AnimationManager,The following statement contains a magic number: Increment = 0.03;
Magic Number,MaterialSkin.Animations,AnimationManager,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\AnimationManager.cs,AnimationManager,The following statement contains a magic number: SecondaryIncrement = 0.03;
Magic Number,MaterialSkin.Animations,AnimationEaseInOut,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,EaseInOut,The following statement contains a magic number: return s - Math.Sin(s * 2 * PI) / (2 * PI);
Magic Number,MaterialSkin.Animations,AnimationEaseInOut,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,EaseInOut,The following statement contains a magic number: return s - Math.Sin(s * 2 * PI) / (2 * PI);
Magic Number,MaterialSkin.Animations,AnimationEaseOut,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,CalculateProgress,The following statement contains a magic number: return -1 * progress * (progress - 2);
Magic Number,MaterialSkin.Animations,AnimationCustomQuadratic,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,CalculateProgress,The following statement contains a magic number: var kickoff = 0.6;
Magic Number,MaterialSkin.Animations,AnimationCustomQuadratic,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,CalculateProgress,The following statement contains a magic number: return 1 - Math.Cos((Math.Max(progress' kickoff) - kickoff) * Math.PI / (2 - (2 * kickoff)));
Magic Number,MaterialSkin.Animations,AnimationCustomQuadratic,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Animations\Animations.cs,CalculateProgress,The following statement contains a magic number: return 1 - Math.Cos((Math.Max(progress' kickoff) - kickoff) * Math.PI / (2 - (2 * kickoff)));
Magic Number,MaterialSkin,ColorExtension,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\ColorScheme.cs,ToColor,The following statement contains a magic number: return Color.FromArgb(                  (argb & 0xff0000) >> 16'                  (argb & 0xff00) >> 8'                   argb & 0xff);
Magic Number,MaterialSkin,ColorExtension,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\ColorScheme.cs,ToColor,The following statement contains a magic number: return Color.FromArgb(                  (argb & 0xff0000) >> 16'                  (argb & 0xff00) >> 8'                   argb & 0xff);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddLine(x + radius' y' x + width - (radius * 2)' y);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y' radius * 2' radius * 2' 270' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y' radius * 2' radius * 2' 270' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y' radius * 2' radius * 2' 270' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y' radius * 2' radius * 2' 270' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y' radius * 2' radius * 2' 270' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddLine(x + width' y + radius' x + width' y + height - (radius * 2));
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x + width - (radius * 2)' y + height - (radius * 2)' radius * 2' radius * 2' 0' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddLine(x + width - (radius * 2)' y + height' x + radius' y + height);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y + height - (radius * 2)' radius * 2' radius * 2' 90' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddLine(x' y + height - (radius * 2)' x' y + radius);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y' radius * 2' radius * 2' 180' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y' radius * 2' radius * 2' 180' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y' radius * 2' radius * 2' 180' 90);
Magic Number,MaterialSkin,DrawHelper,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\DrawHelper.cs,CreateRoundRect,The following statement contains a magic number: gp.AddArc(x' y' radius * 2' radius * 2' 180' 90);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,MaterialCheckBox,The following statement contains a magic number: _animationManager = new AnimationManager              {                  AnimationType = AnimationType.EaseInOut'                  Increment = 0.05              };
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,MaterialCheckBox,The following statement contains a magic number: _rippleAnimationManager = new AnimationManager(false)              {                  AnimationType = AnimationType.Linear'                  Increment = 0.10'                  SecondaryIncrement = 0.08              };
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,MaterialCheckBox,The following statement contains a magic number: _rippleAnimationManager = new AnimationManager(false)              {                  AnimationType = AnimationType.Linear'                  Increment = 0.10'                  SecondaryIncrement = 0.08              };
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnSizeChanged,The following statement contains a magic number: _boxOffset = Height / 2 - 9;
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnSizeChanged,The following statement contains a magic number: _boxOffset = Height / 2 - 9;
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,GetPreferredSize,The following statement contains a magic number: var w = _boxOffset + CHECKBOX_SIZE + 2 + (int)CreateGraphics().MeasureString(Text' SkinManager.ROBOTO_MEDIUM_10).Width;
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,GetPreferredSize,The following statement contains a magic number: return Ripple ? new Size(w' 30) : new Size(w' 20);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,GetPreferredSize,The following statement contains a magic number: return Ripple ? new Size(w' 30) : new Size(w' 20);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: var colorAlpha = Enabled ? (int)(animationProgress * 255.0) : SkinManager.GetCheckBoxOffDisabledColor().A;
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(CHECKBOX_CENTER' CHECKBOX_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: var checkMarkLineFill = new Rectangle(_boxOffset' _boxOffset' (int)(17.0 * animationProgress)' 17);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: var checkMarkLineFill = new Rectangle(_boxOffset' _boxOffset' (int)(17.0 * animationProgress)' 17);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: using (var checkmarkPath = DrawHelper.CreateRoundRect(_boxOffset' _boxOffset' 17' 17' 1f))              {                  var brush2 = new SolidBrush(DrawHelper.BlendColor(Parent.BackColor' Enabled ? SkinManager.GetCheckboxOffColor() : SkinManager.GetCheckBoxOffDisabledColor()' backgroundAlpha));                  var pen2 = new Pen(brush2.Color);                  g.FillPath(brush2' checkmarkPath);                  g.DrawPath(pen2' checkmarkPath);                    g.FillRectangle(new SolidBrush(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                  g.DrawRectangle(new Pen(Parent.BackColor)' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE - 1' CHECKBOX_INNER_BOX_SIZE - 1);                    brush2.Dispose();                  pen2.Dispose();                    if (Enabled)                  {                      g.FillPath(brush' checkmarkPath);                      g.DrawPath(pen' checkmarkPath);                  }                  else if (Checked)                  {                      g.SmoothingMode = SmoothingMode.None;                      g.FillRectangle(brush' _boxOffset + 2' _boxOffset + 2' CHECKBOX_INNER_BOX_SIZE' CHECKBOX_INNER_BOX_SIZE);                      g.SmoothingMode = SmoothingMode.AntiAlias;                  }                    g.DrawImageUnscaledAndClipped(DrawCheckMarkBitmap()' checkMarkLineFill);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: g.DrawString(                  Text'                  SkinManager.ROBOTO_MEDIUM_10'                  Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()'                  _boxOffset + TEXT_OFFSET' Height / 2 - stringSize.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnPaint,The following statement contains a magic number: g.DrawString(                  Text'                  SkinManager.ROBOTO_MEDIUM_10'                  Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()'                  _boxOffset + TEXT_OFFSET' Height / 2 - stringSize.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,DrawCheckMarkBitmap,The following statement contains a magic number: using (var pen = new Pen(Parent.BackColor' 2))              {                  g.DrawLines(pen' CheckmarkLine);              }
Magic Number,MaterialSkin.Controls,MaterialCheckBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialCheckBox.cs,OnCreateControl,The following statement contains a magic number: MouseUp += (sender' args) =>              {                  MouseState = MouseState.HOVER;                  _rippleAnimationManager.SecondaryIncrement = 0.08;              };
Magic Number,MaterialSkin.Controls,MaterialContextMenuStrip,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,MaterialContextMenuStrip,The following statement contains a magic number: AnimationManager = new AnimationManager(false)              {                  Increment = 0.07'                  AnimationType = AnimationType.Linear              };
Magic Number,MaterialSkin.Controls,MaterialToolStripMenuItem,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,MaterialToolStripMenuItem,The following statement contains a magic number: Size = new Size(120' 30);
Magic Number,MaterialSkin.Controls,MaterialToolStripMenuItem,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,MaterialToolStripMenuItem,The following statement contains a magic number: Size = new Size(120' 30);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderItemText,The following statement contains a magic number: var textRect = new Rectangle(24' itemRect.Y' itemRect.Width - (24 + 16)' itemRect.Height);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderItemText,The following statement contains a magic number: var textRect = new Rectangle(24' itemRect.Y' itemRect.Width - (24 + 16)' itemRect.Height);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderItemText,The following statement contains a magic number: var textRect = new Rectangle(24' itemRect.Y' itemRect.Width - (24 + 16)' itemRect.Height);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (toolStrip != null)              {                  var animationManager = toolStrip.AnimationManager;                  var animationSource = toolStrip.AnimationSource;                  if (toolStrip.AnimationManager.IsAnimating() && e.Item.Bounds.Contains(animationSource))                  {                      for (int i = 0; i < animationManager.GetAnimationCount(); i++)                      {                          var animationValue = animationManager.GetProgress(i);                          var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.Black));                          var rippleSize = (int)(animationValue * itemRect.Width * 2.5);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (toolStrip != null)              {                  var animationManager = toolStrip.AnimationManager;                  var animationSource = toolStrip.AnimationSource;                  if (toolStrip.AnimationManager.IsAnimating() && e.Item.Bounds.Contains(animationSource))                  {                      for (int i = 0; i < animationManager.GetAnimationCount(); i++)                      {                          var animationValue = animationManager.GetProgress(i);                          var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.Black));                          var rippleSize = (int)(animationValue * itemRect.Width * 2.5);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (toolStrip != null)              {                  var animationManager = toolStrip.AnimationManager;                  var animationSource = toolStrip.AnimationSource;                  if (toolStrip.AnimationManager.IsAnimating() && e.Item.Bounds.Contains(animationSource))                  {                      for (int i = 0; i < animationManager.GetAnimationCount(); i++)                      {                          var animationValue = animationManager.GetProgress(i);                          var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.Black));                          var rippleSize = (int)(animationValue * itemRect.Width * 2.5);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (toolStrip != null)              {                  var animationManager = toolStrip.AnimationManager;                  var animationSource = toolStrip.AnimationSource;                  if (toolStrip.AnimationManager.IsAnimating() && e.Item.Bounds.Contains(animationSource))                  {                      for (int i = 0; i < animationManager.GetAnimationCount(); i++)                      {                          var animationValue = animationManager.GetProgress(i);                          var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.Black));                          var rippleSize = (int)(animationValue * itemRect.Width * 2.5);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (toolStrip != null)              {                  var animationManager = toolStrip.AnimationManager;                  var animationSource = toolStrip.AnimationSource;                  if (toolStrip.AnimationManager.IsAnimating() && e.Item.Bounds.Contains(animationSource))                  {                      for (int i = 0; i < animationManager.GetAnimationCount(); i++)                      {                          var animationValue = animationManager.GetProgress(i);                          var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.Black));                          var rippleSize = (int)(animationValue * itemRect.Width * 2.5);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' itemRect.Y - itemRect.Height' rippleSize' itemRect.Height * 3));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderSeparator,The following statement contains a magic number: g.DrawLine(                  new Pen(SkinManager.GetDividersColor())'                  new Point(e.Item.Bounds.Left' e.Item.Bounds.Height / 2)'                  new Point(e.Item.Bounds.Right' e.Item.Bounds.Height / 2));
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderSeparator,The following statement contains a magic number: g.DrawLine(                  new Pen(SkinManager.GetDividersColor())'                  new Point(e.Item.Bounds.Left' e.Item.Bounds.Height / 2)'                  new Point(e.Item.Bounds.Right' e.Item.Bounds.Height / 2));
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderArrow,The following statement contains a magic number: const int ARROW_SIZE = 4;
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderArrow,The following statement contains a magic number: var arrowMiddle = new Point(e.ArrowRectangle.X + e.ArrowRectangle.Width / 2' e.ArrowRectangle.Y + e.ArrowRectangle.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,OnRenderArrow,The following statement contains a magic number: var arrowMiddle = new Point(e.ArrowRectangle.X + e.ArrowRectangle.Width / 2' e.ArrowRectangle.Y + e.ArrowRectangle.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialToolStripRender,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialContextMenuStrip.cs,GetItemRect,The following statement contains a magic number: return new Rectangle(0' item.ContentRectangle.Y' item.ContentRectangle.Width + 4' item.ContentRectangle.Height);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: _animationManager = new AnimationManager(false)              {                  Increment = 0.03'                  AnimationType = AnimationType.EaseOut              };
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: _hoverAnimationManager = new AnimationManager              {                  Increment = 0.07'                  AnimationType = AnimationType.Linear              };
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: Margin = new Padding(4' 6' 4' 6);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: Margin = new Padding(4' 6' 4' 6);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: Margin = new Padding(4' 6' 4' 6);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,MaterialFlatButton,The following statement contains a magic number: Margin = new Padding(4' 6' 4' 6);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  g.SmoothingMode = SmoothingMode.AntiAlias;                  for (var i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                        using (Brush rippleBrush = new SolidBrush(Color.FromArgb((int)(101 - (animationValue * 100))' Color.Black)))                      {                          var rippleSize = (int)(animationValue * Width * 2);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                      }                  }                  g.SmoothingMode = SmoothingMode.None;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  g.SmoothingMode = SmoothingMode.AntiAlias;                  for (var i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                        using (Brush rippleBrush = new SolidBrush(Color.FromArgb((int)(101 - (animationValue * 100))' Color.Black)))                      {                          var rippleSize = (int)(animationValue * Width * 2);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                      }                  }                  g.SmoothingMode = SmoothingMode.None;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  g.SmoothingMode = SmoothingMode.AntiAlias;                  for (var i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                        using (Brush rippleBrush = new SolidBrush(Color.FromArgb((int)(101 - (animationValue * 100))' Color.Black)))                      {                          var rippleSize = (int)(animationValue * Width * 2);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                      }                  }                  g.SmoothingMode = SmoothingMode.None;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  g.SmoothingMode = SmoothingMode.AntiAlias;                  for (var i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                        using (Brush rippleBrush = new SolidBrush(Color.FromArgb((int)(101 - (animationValue * 100))' Color.Black)))                      {                          var rippleSize = (int)(animationValue * Width * 2);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                      }                  }                  g.SmoothingMode = SmoothingMode.None;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  g.SmoothingMode = SmoothingMode.AntiAlias;                  for (var i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                        using (Brush rippleBrush = new SolidBrush(Color.FromArgb((int)(101 - (animationValue * 100))' Color.Black)))                      {                          var rippleSize = (int)(animationValue * Width * 2);                          g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                      }                  }                  g.SmoothingMode = SmoothingMode.None;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (string.IsNullOrEmpty(Text))                  // Center Icon                  iconRect.X += 2;
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,GetPreferredSize,The following statement contains a magic number: var extra = 16;
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,GetPreferredSize,The following statement contains a magic number: if (Icon != null)                  // 24 is for icon size                  // 4 is for the space between icon & text                  extra += 24 + 4;
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,GetPreferredSize,The following statement contains a magic number: if (Icon != null)                  // 24 is for icon size                  // 4 is for the space between icon & text                  extra += 24 + 4;
Magic Number,MaterialSkin.Controls,MaterialFlatButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialFlatButton.cs,GetPreferredSize,The following statement contains a magic number: return new Size((int)Math.Ceiling(_textSize.Width) + extra' 36);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The following statement contains a magic number: if (m.Msg == WM_LBUTTONDBLCLK)              {                  MaximizeWindow(!_maximized);              }              else if (m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (_headerMouseDown)                  {                      _maximized = false;                      _headerMouseDown = false;                        var mousePoint = PointToClient(Cursor.Position);                      if (mousePoint.X < Width / 2)                          Location = mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                      else                          Location = Width - mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - _previousSize.Width + Width - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                        Size = _previousSize;                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }              }              else if (m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (!_maximized)                  {                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }                  else                  {                      _headerMouseDown = true;                  }              }              else if (m.Msg == WM_RBUTTONDOWN)              {                  Point cursorPos = PointToClient(Cursor.Position);                    if (_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos))                  {                      // Show default system menu when right clicking titlebar                      var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero);                        // Pass the command as a WM_SYSCOMMAND message                      SendMessage(Handle' WM_SYSCOMMAND' id' 0);                  }              }              else if (m.Msg == WM_NCLBUTTONDOWN)              {                  // This re-enables resizing by letting the application know when the                  // user is trying to resize a side. This is disabled by default when using WS_SYSMENU.                  if (!Sizable) return;                    byte bFlag = 0;                    // Get which side to resize from                  if (_resizingLocationsToCmd.ContainsKey((int)m.WParam))                      bFlag = (byte)_resizingLocationsToCmd[(int)m.WParam];                    if (bFlag != 0)                      SendMessage(Handle' WM_SYSCOMMAND' 0xF000 | bFlag' (int)m.LParam);              }              else if (m.Msg == WM_LBUTTONUP)              {                  _headerMouseDown = false;              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The following statement contains a magic number: if (m.Msg == WM_LBUTTONDBLCLK)              {                  MaximizeWindow(!_maximized);              }              else if (m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (_headerMouseDown)                  {                      _maximized = false;                      _headerMouseDown = false;                        var mousePoint = PointToClient(Cursor.Position);                      if (mousePoint.X < Width / 2)                          Location = mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                      else                          Location = Width - mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - _previousSize.Width + Width - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                        Size = _previousSize;                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }              }              else if (m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (!_maximized)                  {                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }                  else                  {                      _headerMouseDown = true;                  }              }              else if (m.Msg == WM_RBUTTONDOWN)              {                  Point cursorPos = PointToClient(Cursor.Position);                    if (_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos))                  {                      // Show default system menu when right clicking titlebar                      var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero);                        // Pass the command as a WM_SYSCOMMAND message                      SendMessage(Handle' WM_SYSCOMMAND' id' 0);                  }              }              else if (m.Msg == WM_NCLBUTTONDOWN)              {                  // This re-enables resizing by letting the application know when the                  // user is trying to resize a side. This is disabled by default when using WS_SYSMENU.                  if (!Sizable) return;                    byte bFlag = 0;                    // Get which side to resize from                  if (_resizingLocationsToCmd.ContainsKey((int)m.WParam))                      bFlag = (byte)_resizingLocationsToCmd[(int)m.WParam];                    if (bFlag != 0)                      SendMessage(Handle' WM_SYSCOMMAND' 0xF000 | bFlag' (int)m.LParam);              }              else if (m.Msg == WM_LBUTTONUP)              {                  _headerMouseDown = false;              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The following statement contains a magic number: if (m.Msg == WM_LBUTTONDBLCLK)              {                  MaximizeWindow(!_maximized);              }              else if (m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (_headerMouseDown)                  {                      _maximized = false;                      _headerMouseDown = false;                        var mousePoint = PointToClient(Cursor.Position);                      if (mousePoint.X < Width / 2)                          Location = mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                      else                          Location = Width - mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - _previousSize.Width + Width - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                        Size = _previousSize;                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }              }              else if (m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (!_maximized)                  {                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }                  else                  {                      _headerMouseDown = true;                  }              }              else if (m.Msg == WM_RBUTTONDOWN)              {                  Point cursorPos = PointToClient(Cursor.Position);                    if (_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos))                  {                      // Show default system menu when right clicking titlebar                      var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero);                        // Pass the command as a WM_SYSCOMMAND message                      SendMessage(Handle' WM_SYSCOMMAND' id' 0);                  }              }              else if (m.Msg == WM_NCLBUTTONDOWN)              {                  // This re-enables resizing by letting the application know when the                  // user is trying to resize a side. This is disabled by default when using WS_SYSMENU.                  if (!Sizable) return;                    byte bFlag = 0;                    // Get which side to resize from                  if (_resizingLocationsToCmd.ContainsKey((int)m.WParam))                      bFlag = (byte)_resizingLocationsToCmd[(int)m.WParam];                    if (bFlag != 0)                      SendMessage(Handle' WM_SYSCOMMAND' 0xF000 | bFlag' (int)m.LParam);              }              else if (m.Msg == WM_LBUTTONUP)              {                  _headerMouseDown = false;              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The following statement contains a magic number: if (m.Msg == WM_LBUTTONDBLCLK)              {                  MaximizeWindow(!_maximized);              }              else if (m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (_headerMouseDown)                  {                      _maximized = false;                      _headerMouseDown = false;                        var mousePoint = PointToClient(Cursor.Position);                      if (mousePoint.X < Width / 2)                          Location = mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                      else                          Location = Width - mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - _previousSize.Width + Width - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                        Size = _previousSize;                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }              }              else if (m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (!_maximized)                  {                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }                  else                  {                      _headerMouseDown = true;                  }              }              else if (m.Msg == WM_RBUTTONDOWN)              {                  Point cursorPos = PointToClient(Cursor.Position);                    if (_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos))                  {                      // Show default system menu when right clicking titlebar                      var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero);                        // Pass the command as a WM_SYSCOMMAND message                      SendMessage(Handle' WM_SYSCOMMAND' id' 0);                  }              }              else if (m.Msg == WM_NCLBUTTONDOWN)              {                  // This re-enables resizing by letting the application know when the                  // user is trying to resize a side. This is disabled by default when using WS_SYSMENU.                  if (!Sizable) return;                    byte bFlag = 0;                    // Get which side to resize from                  if (_resizingLocationsToCmd.ContainsKey((int)m.WParam))                      bFlag = (byte)_resizingLocationsToCmd[(int)m.WParam];                    if (bFlag != 0)                      SendMessage(Handle' WM_SYSCOMMAND' 0xF000 | bFlag' (int)m.LParam);              }              else if (m.Msg == WM_LBUTTONUP)              {                  _headerMouseDown = false;              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,WndProc,The following statement contains a magic number: if (m.Msg == WM_LBUTTONDBLCLK)              {                  MaximizeWindow(!_maximized);              }              else if (m.Msg == WM_MOUSEMOVE && _maximized &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (_headerMouseDown)                  {                      _maximized = false;                      _headerMouseDown = false;                        var mousePoint = PointToClient(Cursor.Position);                      if (mousePoint.X < Width / 2)                          Location = mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                      else                          Location = Width - mousePoint.X < _previousSize.Width / 2 ?                              new Point(Cursor.Position.X - _previousSize.Width + Width - mousePoint.X' Cursor.Position.Y - mousePoint.Y) :                              new Point(Cursor.Position.X - _previousSize.Width / 2' Cursor.Position.Y - mousePoint.Y);                        Size = _previousSize;                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }              }              else if (m.Msg == WM_LBUTTONDOWN &&                  (_statusBarBounds.Contains(PointToClient(Cursor.Position)) || _actionBarBounds.Contains(PointToClient(Cursor.Position))) &&                  !(_minButtonBounds.Contains(PointToClient(Cursor.Position)) || _maxButtonBounds.Contains(PointToClient(Cursor.Position)) || _xButtonBounds.Contains(PointToClient(Cursor.Position))))              {                  if (!_maximized)                  {                      ReleaseCapture();                      SendMessage(Handle' WM_NCLBUTTONDOWN' HT_CAPTION' 0);                  }                  else                  {                      _headerMouseDown = true;                  }              }              else if (m.Msg == WM_RBUTTONDOWN)              {                  Point cursorPos = PointToClient(Cursor.Position);                    if (_statusBarBounds.Contains(cursorPos) && !_minButtonBounds.Contains(cursorPos) &&                      !_maxButtonBounds.Contains(cursorPos) && !_xButtonBounds.Contains(cursorPos))                  {                      // Show default system menu when right clicking titlebar                      var id = TrackPopupMenuEx(GetSystemMenu(Handle' false)' TPM_LEFTALIGN | TPM_RETURNCMD' Cursor.Position.X' Cursor.Position.Y' Handle' IntPtr.Zero);                        // Pass the command as a WM_SYSCOMMAND message                      SendMessage(Handle' WM_SYSCOMMAND' id' 0);                  }              }              else if (m.Msg == WM_NCLBUTTONDOWN)              {                  // This re-enables resizing by letting the application know when the                  // user is trying to resize a side. This is disabled by default when using WS_SYSMENU.                  if (!Sizable) return;                    byte bFlag = 0;                    // Get which side to resize from                  if (_resizingLocationsToCmd.ContainsKey((int)m.WParam))                      bFlag = (byte)_resizingLocationsToCmd[(int)m.WParam];                    if (bFlag != 0)                      SendMessage(Handle' WM_SYSCOMMAND' 0xF000 | bFlag' (int)m.LParam);              }              else if (m.Msg == WM_LBUTTONUP)              {                  _headerMouseDown = false;              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The following statement contains a magic number: _minButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 3 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The following statement contains a magic number: _minButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 3 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The following statement contains a magic number: _maxButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 2 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The following statement contains a magic number: _maxButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - 2 * STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnResize,The following statement contains a magic number: _xButtonBounds = new Rectangle((Width - SkinManager.FORM_PADDING / 2) - STATUS_BAR_BUTTON_WIDTH' 0' STATUS_BAR_BUTTON_WIDTH' STATUS_BAR_HEIGHT);
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var borderPen = new Pen(SkinManager.GetDividersColor()' 1))              {                  g.DrawLine(borderPen' new Point(0' _actionBarBounds.Bottom)' new Point(0' Height - 2));                  g.DrawLine(borderPen' new Point(Width - 1' _actionBarBounds.Bottom)' new Point(Width - 1' Height - 2));                  g.DrawLine(borderPen' new Point(0' Height - 1)' new Point(Width - 1' Height - 1));              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var borderPen = new Pen(SkinManager.GetDividersColor()' 1))              {                  g.DrawLine(borderPen' new Point(0' _actionBarBounds.Bottom)' new Point(0' Height - 2));                  g.DrawLine(borderPen' new Point(Width - 1' _actionBarBounds.Bottom)' new Point(Width - 1' Height - 2));                  g.DrawLine(borderPen' new Point(0' Height - 1)' new Point(Width - 1' Height - 1));              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,OnPaint,The following statement contains a magic number: using (var formButtonsPen = new Pen(SkinManager.ACTION_BAR_TEXT_SECONDARY' 2))              {                  // Minimize button.                  if (showMin)                  {                      int x = showMax ? _minButtonBounds.X : _maxButtonBounds.X;                      int y = showMax ? _minButtonBounds.Y : _maxButtonBounds.Y;                        g.DrawLine(                          formButtonsPen'                          x + (int)(_minButtonBounds.Width * 0.33)'                          y + (int)(_minButtonBounds.Height * 0.66)'                          x + (int)(_minButtonBounds.Width * 0.66)'                          y + (int)(_minButtonBounds.Height * 0.66)                     );                  }                    // Maximize button                  if (showMax)                  {                      g.DrawRectangle(                          formButtonsPen'                          _maxButtonBounds.X + (int)(_maxButtonBounds.Width * 0.33)'                          _maxButtonBounds.Y + (int)(_maxButtonBounds.Height * 0.36)'                          (int)(_maxButtonBounds.Width * 0.39)'                          (int)(_maxButtonBounds.Height * 0.31)                     );                  }                    // Close button                  if (ControlBox)                  {                      g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66)                     );                        g.DrawLine(                          formButtonsPen'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.66)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.33)'                          _xButtonBounds.X + (int)(_xButtonBounds.Width * 0.33)'                          _xButtonBounds.Y + (int)(_xButtonBounds.Height * 0.66));                  }              }
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawColumnHeader,The following statement contains a magic number: e.Graphics.DrawString(e.Header.Text'                  SkinManager.ROBOTO_MEDIUM_10'                  SkinManager.GetSecondaryTextBrush()'                  new Rectangle(e.Bounds.X + ITEM_PADDING' e.Bounds.Y + ITEM_PADDING' e.Bounds.Width - ITEM_PADDING * 2' e.Bounds.Height - ITEM_PADDING * 2)'                  getStringFormat());
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawColumnHeader,The following statement contains a magic number: e.Graphics.DrawString(e.Header.Text'                  SkinManager.ROBOTO_MEDIUM_10'                  SkinManager.GetSecondaryTextBrush()'                  new Rectangle(e.Bounds.X + ITEM_PADDING' e.Bounds.Y + ITEM_PADDING' e.Bounds.Width - ITEM_PADDING * 2' e.Bounds.Height - ITEM_PADDING * 2)'                  getStringFormat());
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The following statement contains a magic number: foreach (ListViewItem.ListViewSubItem subItem in e.Item.SubItems)              {                  //Draw text                  g.DrawString(subItem.Text' SkinManager.ROBOTO_MEDIUM_10' SkinManager.GetPrimaryTextBrush()'                                   new Rectangle(subItem.Bounds.X + ITEM_PADDING' ITEM_PADDING' subItem.Bounds.Width - 2 * ITEM_PADDING' subItem.Bounds.Height - 2 * ITEM_PADDING)'                                   getStringFormat());              }
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnDrawItem,The following statement contains a magic number: foreach (ListViewItem.ListViewSubItem subItem in e.Item.SubItems)              {                  //Draw text                  g.DrawString(subItem.Text' SkinManager.ROBOTO_MEDIUM_10' SkinManager.GetPrimaryTextBrush()'                                   new Rectangle(subItem.Bounds.X + ITEM_PADDING' ITEM_PADDING' subItem.Bounds.Width - 2 * ITEM_PADDING' subItem.Bounds.Height - 2 * ITEM_PADDING)'                                   getStringFormat());              }
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnCreateControl,The following statement contains a magic number: var roboto24 = new Font(SkinManager.ROBOTO_MEDIUM_12.FontFamily' 24);
Magic Number,MaterialSkin.Controls,MaterialListView,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialListView.cs,OnCreateControl,The following statement contains a magic number: try              {                  // Font.FromLogFont is the method used when drawing ListViewItems. I 'test' it in this safer context to avoid unhandled exceptions later.                  Font = Font.FromLogFont(roboto24Logfont);              }              catch (ArgumentException)              {                  Font = new Font(FontFamily.GenericSansSerif' 24);              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,MaterialRadioButton,The following statement contains a magic number: _animationManager = new AnimationManager              {                  AnimationType = AnimationType.EaseInOut'                  Increment = 0.06              };
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,MaterialRadioButton,The following statement contains a magic number: _rippleAnimationManager = new AnimationManager(false)              {                  AnimationType = AnimationType.Linear'                  Increment = 0.10'                  SecondaryIncrement = 0.08              };
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,MaterialRadioButton,The following statement contains a magic number: _rippleAnimationManager = new AnimationManager(false)              {                  AnimationType = AnimationType.Linear'                  Increment = 0.10'                  SecondaryIncrement = 0.08              };
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnSizeChanged,The following statement contains a magic number: _boxOffset = Height / 2 - (int)Math.Ceiling(RADIOBUTTON_SIZE / 2d);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,GetPreferredSize,The following statement contains a magic number: var width = _boxOffset + 20 + (int)CreateGraphics().MeasureString(Text' SkinManager.ROBOTO_MEDIUM_10).Width;
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,GetPreferredSize,The following statement contains a magic number: return Ripple ? new Size(width' 30) : new Size(width' 20);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,GetPreferredSize,The following statement contains a magic number: return Ripple ? new Size(width' 30) : new Size(width' 20);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: int colorAlpha = Enabled ? (int)(animationProgress * 255.0) : SkinManager.GetCheckBoxOffDisabledColor().A;
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: float animationSizeHalf = animationSize / 2;
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: if (Ripple && _rippleAnimationManager.IsAnimating())              {                  for (var i = 0; i < _rippleAnimationManager.GetAnimationCount(); i++)                  {                      var animationValue = _rippleAnimationManager.GetProgress(i);                      var animationSource = new Point(RADIOBUTTON_CENTER' RADIOBUTTON_CENTER);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)((animationValue * 40))' ((bool)_rippleAnimationManager.GetData(i)[0]) ? Color.Black : brush.Color));                      var rippleHeight = (Height % 2 == 0) ? Height - 3 : Height - 2;                      var rippleSize = (_rippleAnimationManager.GetDirection(i) == AnimationDirection.InOutIn) ? (int)(rippleHeight * (0.8d + (0.2d * animationValue))) : rippleHeight;                      using (var path = DrawHelper.CreateRoundRect(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize' rippleSize / 2))                      {                          g.FillPath(rippleBrush' path);                      }                        rippleBrush.Dispose();                  }              }
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: g.DrawString(Text' SkinManager.ROBOTO_MEDIUM_10' Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()' _boxOffset + 22' Height / 2 - stringSize.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: g.DrawString(Text' SkinManager.ROBOTO_MEDIUM_10' Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()' _boxOffset + 22' Height / 2 - stringSize.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnPaint,The following statement contains a magic number: g.DrawString(Text' SkinManager.ROBOTO_MEDIUM_10' Enabled ? SkinManager.GetPrimaryTextBrush() : SkinManager.GetDisabledOrHintBrush()' _boxOffset + 22' Height / 2 - stringSize.Height / 2);
Magic Number,MaterialSkin.Controls,MaterialRadioButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRadioButton.cs,OnCreateControl,The following statement contains a magic number: MouseUp += (sender' args) =>              {                  MouseState = MouseState.HOVER;                  _rippleAnimationManager.SecondaryIncrement = 0.08;              };
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,MaterialSingleLineTextField,The following statement contains a magic number: _animationManager = new AnimationManager              {                  Increment = 0.06'                  AnimationType = AnimationType.EaseInOut'                  InterruptAnimation = false              };
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,MaterialSingleLineTextField,The following statement contains a magic number: _baseTextBox = new BaseTextBox              {                  BorderStyle = BorderStyle.None'                  Font = SkinManager.ROBOTO_REGULAR_11'                  ForeColor = SkinManager.GetPrimaryTextColor()'                  Location = new Point(0' 0)'                  Width = Width'                  Height = Height - 5              };
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The following statement contains a magic number: var lineY = _baseTextBox.Bottom + 3;
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The following statement contains a magic number: if (!_animationManager.IsAnimating())              {                  //No animation                  g.FillRectangle(_baseTextBox.Focused ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' _baseTextBox.Focused ? 2 : 1);              }              else              {                  //Animate                  int animationWidth = (int)(_baseTextBox.Width * _animationManager.GetProgress());                  int halfAnimationWidth = animationWidth / 2;                  int animationStart = _baseTextBox.Location.X + _baseTextBox.Width / 2;                    //Unfocused background                  g.FillRectangle(SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' 1);                    //Animated focus transition                  g.FillRectangle(SkinManager.ColorScheme.PrimaryBrush' animationStart - halfAnimationWidth' lineY' animationWidth' 2);              }
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The following statement contains a magic number: if (!_animationManager.IsAnimating())              {                  //No animation                  g.FillRectangle(_baseTextBox.Focused ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' _baseTextBox.Focused ? 2 : 1);              }              else              {                  //Animate                  int animationWidth = (int)(_baseTextBox.Width * _animationManager.GetProgress());                  int halfAnimationWidth = animationWidth / 2;                  int animationStart = _baseTextBox.Location.X + _baseTextBox.Width / 2;                    //Unfocused background                  g.FillRectangle(SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' 1);                    //Animated focus transition                  g.FillRectangle(SkinManager.ColorScheme.PrimaryBrush' animationStart - halfAnimationWidth' lineY' animationWidth' 2);              }
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The following statement contains a magic number: if (!_animationManager.IsAnimating())              {                  //No animation                  g.FillRectangle(_baseTextBox.Focused ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' _baseTextBox.Focused ? 2 : 1);              }              else              {                  //Animate                  int animationWidth = (int)(_baseTextBox.Width * _animationManager.GetProgress());                  int halfAnimationWidth = animationWidth / 2;                  int animationStart = _baseTextBox.Location.X + _baseTextBox.Width / 2;                    //Unfocused background                  g.FillRectangle(SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' 1);                    //Animated focus transition                  g.FillRectangle(SkinManager.ColorScheme.PrimaryBrush' animationStart - halfAnimationWidth' lineY' animationWidth' 2);              }
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnPaint,The following statement contains a magic number: if (!_animationManager.IsAnimating())              {                  //No animation                  g.FillRectangle(_baseTextBox.Focused ? SkinManager.ColorScheme.PrimaryBrush : SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' _baseTextBox.Focused ? 2 : 1);              }              else              {                  //Animate                  int animationWidth = (int)(_baseTextBox.Width * _animationManager.GetProgress());                  int halfAnimationWidth = animationWidth / 2;                  int animationStart = _baseTextBox.Location.X + _baseTextBox.Width / 2;                    //Unfocused background                  g.FillRectangle(SkinManager.GetDividersBrush()' _baseTextBox.Location.X' lineY' _baseTextBox.Width' 1);                    //Animated focus transition                  g.FillRectangle(SkinManager.ColorScheme.PrimaryBrush' animationStart - halfAnimationWidth' lineY' animationWidth' 2);              }
Magic Number,MaterialSkin.Controls,MaterialSingleLineTextField,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,OnResize,The following statement contains a magic number: Height = _baseTextBox.Height + 5;
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,MaterialTabSelector,The following statement contains a magic number: Height = 48;
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,MaterialTabSelector,The following statement contains a magic number: _animationManager = new AnimationManager              {                  AnimationType = AnimationType.EaseOut'                  Increment = 0.04              };
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationProgress * 50))' Color.White));                  var rippleSize = (int)(animationProgress * _tabRects[_baseTabControl.SelectedIndex].Width * 1.75);                    g.SetClip(_tabRects[_baseTabControl.SelectedIndex]);                  g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  g.ResetClip();                  rippleBrush.Dispose();              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationProgress * 50))' Color.White));                  var rippleSize = (int)(animationProgress * _tabRects[_baseTabControl.SelectedIndex].Width * 1.75);                    g.SetClip(_tabRects[_baseTabControl.SelectedIndex]);                  g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  g.ResetClip();                  rippleBrush.Dispose();              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationProgress * 50))' Color.White));                  var rippleSize = (int)(animationProgress * _tabRects[_baseTabControl.SelectedIndex].Width * 1.75);                    g.SetClip(_tabRects[_baseTabControl.SelectedIndex]);                  g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  g.ResetClip();                  rippleBrush.Dispose();              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationProgress * 50))' Color.White));                  var rippleSize = (int)(animationProgress * _tabRects[_baseTabControl.SelectedIndex].Width * 1.75);                    g.SetClip(_tabRects[_baseTabControl.SelectedIndex]);                  g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  g.ResetClip();                  rippleBrush.Dispose();              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationProgress * 50))' Color.White));                  var rippleSize = (int)(animationProgress * _tabRects[_baseTabControl.SelectedIndex].Width * 1.75);                    g.SetClip(_tabRects[_baseTabControl.SelectedIndex]);                  g.FillEllipse(rippleBrush' new Rectangle(_animationSource.X - rippleSize / 2' _animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  g.ResetClip();                  rippleBrush.Dispose();              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,OnPaint,The following statement contains a magic number: var y = activeTabPageRect.Bottom - 2;
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,UpdateTabRects,The following statement contains a magic number: using (var b = new Bitmap(1' 1))              {                  using (var g = Graphics.FromImage(b))                  {                      _tabRects.Add(new Rectangle(SkinManager.FORM_PADDING' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[0].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height));                      for (int i = 1; i < _baseTabControl.TabPages.Count; i++)                      {                          _tabRects.Add(new Rectangle(_tabRects[i - 1].Right' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[i].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialTabSelector,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialTabSelector.cs,UpdateTabRects,The following statement contains a magic number: using (var b = new Bitmap(1' 1))              {                  using (var g = Graphics.FromImage(b))                  {                      _tabRects.Add(new Rectangle(SkinManager.FORM_PADDING' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[0].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height));                      for (int i = 1; i < _baseTabControl.TabPages.Count; i++)                      {                          _tabRects.Add(new Rectangle(_tabRects[i - 1].Right' 0' TAB_HEADER_PADDING * 2 + (int)g.MeasureString(_baseTabControl.TabPages[i].Text' SkinManager.ROBOTO_MEDIUM_10).Width' Height));                      }                  }              }
Magic Number,MaterialSkin.Controls,MaterialProgressBar,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialProgressBar.cs,SetBoundsCore,The following statement contains a magic number: base.SetBoundsCore(x' y' width' 5' specified);
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,MaterialRaisedButton,The following statement contains a magic number: _animationManager = new AnimationManager(false)              {                  Increment = 0.03'                  AnimationType = AnimationType.EaseOut              };
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  for (int i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.White));                      var rippleSize = (int)(animationValue * Width * 2);                      g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  }              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  for (int i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.White));                      var rippleSize = (int)(animationValue * Width * 2);                      g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  }              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  for (int i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.White));                      var rippleSize = (int)(animationValue * Width * 2);                      g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  }              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  for (int i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.White));                      var rippleSize = (int)(animationValue * Width * 2);                      g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  }              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (_animationManager.IsAnimating())              {                  for (int i = 0; i < _animationManager.GetAnimationCount(); i++)                  {                      var animationValue = _animationManager.GetProgress(i);                      var animationSource = _animationManager.GetSource(i);                      var rippleBrush = new SolidBrush(Color.FromArgb((int)(51 - (animationValue * 50))' Color.White));                      var rippleSize = (int)(animationValue * Width * 2);                      g.FillEllipse(rippleBrush' new Rectangle(animationSource.X - rippleSize / 2' animationSource.Y - rippleSize / 2' rippleSize' rippleSize));                  }              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: var iconRect = new Rectangle(8' 6' 24' 24);
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (string.IsNullOrEmpty(Text))                  // Center Icon                  iconRect.X += 2;
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,OnPaint,The following statement contains a magic number: if (Icon != null)              {                  //                  // Resize and move Text container                  //                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  // Third 8: right padding                  textRect.Width -= 8 + 24 + 4 + 8;                    // First 8: left padding                  // 24: icon width                  // Second 4: space between Icon and Text                  textRect.X += 8 + 24 + 4;              }
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,GetPreferredSize,The following statement contains a magic number: var extra = 16;
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,GetPreferredSize,The following statement contains a magic number: if (Icon != null)                  // 24 is for icon size                  // 4 is for the space between icon & text                  extra += 24 + 4;
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,GetPreferredSize,The following statement contains a magic number: if (Icon != null)                  // 24 is for icon size                  // 4 is for the space between icon & text                  extra += 24 + 4;
Magic Number,MaterialSkin.Controls,MaterialRaisedButton,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialRaisedButton.cs,GetPreferredSize,The following statement contains a magic number: return new Size((int)Math.Ceiling(_textSize.Width) + extra' 36);
Missing Default,MaterialSkin.Controls,MaterialForm,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialForm.cs,ResizeForm,The following switch statement is missing a default case: switch (direction)              {                  case ResizeDirection.BottomLeft:                      dir = HTBOTTOMLEFT;                      break;                  case ResizeDirection.Left:                      dir = HTLEFT;                      break;                  case ResizeDirection.Right:                      dir = HTRIGHT;                      break;                  case ResizeDirection.BottomRight:                      dir = HTBOTTOMRIGHT;                      break;                  case ResizeDirection.Bottom:                      dir = HTBOTTOM;                      break;              }
Missing Default,MaterialSkin.Controls,BaseTextBox,C:\repos\IgnaceMaes_MaterialSkin\MaterialSkin\Controls\MaterialSingleLineTextField.cs,ContextMenuStripOnItemClickStart,The following switch statement is missing a default case: switch (toolStripItemClickedEventArgs.ClickedItem.Text)                  {                      case "Undo":                          Undo();                          break;                      case "Cut":                          Cut();                          break;                      case "Copy":                          Copy();                          break;                      case "Paste":                          Paste();                          break;                      case "Delete":                          SelectedText = string.Empty;                          break;                      case "Select All":                          SelectAll();                          break;                  }
