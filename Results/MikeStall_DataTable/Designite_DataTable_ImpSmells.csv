Implementation smell,Namespace,Class,File,Method,Description
Long Method,DataAccess,Reader,C:\repos\MikeStall_DataTable\Sources\DataAccess\Readers.cs,ProcessSingleChar,The method has 141 lines of code.
Complex Method,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,SelectDuplicates,Cyclomatic complexity of the method is 8
Complex Method,DataAccess,MutableDataTable,C:\repos\MikeStall_DataTable\Sources\DataAccess\MutableDataTable.cs,CreateColumns,Cyclomatic complexity of the method is 8
Complex Method,DataAccess,Reader,C:\repos\MikeStall_DataTable\Sources\DataAccess\Readers.cs,ProcessChar,Cyclomatic complexity of the method is 11
Complex Method,DataAccess,Utility,C:\repos\MikeStall_DataTable\Sources\DataAccess\Utility.cs,FlattenWorker,Cyclomatic complexity of the method is 8
Long Statement,DataAccess,StrongTypeBinder,C:\repos\MikeStall_DataTable\Sources\DataAccess\StrongTypeBinder.cs,BuildMethod,The length of the statement  "            columnNamesNormalized = Array.ConvertAll(columnNamesNormalized' element => NormalizeWithMappings(element' mappingDictionary)); " is 126.
Long Statement,DataAccess,MutableDataTable,C:\repos\MikeStall_DataTable\Sources\DataAccess\MutableDataTable.cs,RenameColumn,The length of the statement  "                    throw new InvalidOperationException("Can't rename column to '" + newName + "' because there's an existing column with that name."); " is 131.
Long Statement,DataAccess,MutableDataTable,C:\repos\MikeStall_DataTable\Sources\DataAccess\MutableDataTable.cs,KeepRows,The length of the statement  "            Utility.Assert(this.NumRows == expectedNumRows' "Incorrect number of rows returns by KeepRows function. Expected: " + expectedNumRows);" is 135.
Long Statement,DataAccess,Utility,C:\repos\MikeStall_DataTable\Sources\DataAccess\Utility.cs,ToTableX,The length of the statement  "                Assert(values.Length == columnNames.Length' string.Format("Row {0} does not have the expected number of values ({1})"' row + 1' columnNames.Length)); " is 149.
Complex Conditional,DataAccess,Utility,C:\repos\MikeStall_DataTable\Sources\DataAccess\Utility.cs,FlattenWorker,The conditional expression  "(t == typeof(string)) || (t == typeof(DateTime)) || t.IsEnum || (t == typeof(DiscreteValue))"  is complex.
Empty Catch Block,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,DeleteLocalFile,The method has an empty catch block.
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: int kFixed = 2;
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: Column[] cAll = new Column[kFixed + N * 2];
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  cAll[i * 2 + kFixed] = new Column("Top Value " + i' count);                  cAll[i * 2 + 1 + kFixed] = new Column("Top Occurrence " + i' count);              }
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  cAll[i * 2 + kFixed] = new Column("Top Value " + i' count);                  cAll[i * 2 + 1 + kFixed] = new Column("Top Occurrence " + i' count);              }
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: foreach (string name in names)              {                  Tuple<string' int>[] hist = AsHistogram(table' columnId);                    c1.Values[columnId] = name;                  c2.Values[columnId] = hist.Length.ToString();                    for (int i = 0; i < N; i++)                  {                      if (i >= hist.Length)                      {                          break;                      }                      cAll[i * 2 + kFixed].Values[columnId] = hist[i].Item1;                      cAll[i * 2 + 1 + kFixed].Values[columnId] = hist[i].Item2.ToString();                  }                    columnId++;              }
Magic Number,DataAccess,Analyze,C:\repos\MikeStall_DataTable\Sources\DataAccess\Analyze.cs,GetColumnValueCounts,The following statement contains a magic number: foreach (string name in names)              {                  Tuple<string' int>[] hist = AsHistogram(table' columnId);                    c1.Values[columnId] = name;                  c2.Values[columnId] = hist.Length.ToString();                    for (int i = 0; i < N; i++)                  {                      if (i >= hist.Length)                      {                          break;                      }                      cAll[i * 2 + kFixed].Values[columnId] = hist[i].Item1;                      cAll[i * 2 + 1 + kFixed].Values[columnId] = hist[i].Item2.ToString();                  }                    columnId++;              }
Magic Number,DataAccess,StrongTypeBinder,C:\repos\MikeStall_DataTable\Sources\DataAccess\StrongTypeBinder.cs,ToDouble,The following statement contains a magic number: if (s.EndsWith("%"))              {                  string s2 = s.Substring(0' s.Length - 1);                  if (double.TryParse(s2' out result))                  {                      return result / 100.0;                  }              }
Missing Default,DataAccess,Reader,C:\repos\MikeStall_DataTable\Sources\DataAccess\Readers.cs,ProcessSingleChar,The following switch statement is missing a default case: switch (_currentState)              {                  case SplitState.StartSeparator:                      {                          PushValue(trim);                      }                      break;                    case SplitState.PotentialStartSpace:                  case SplitState.Word:                  case SplitState.EscapedWord:                  case SplitState.PotentialEndSpace:                      if (_captureValue)                      {                          _sb.Append(ch);                      }                      break;                    case SplitState.UnescapedQuote:                      throw new AssertException("unescaped double quote");                    case SplitState.MissingEndQuote:                      throw new AssertException("missing closing quote");              }
