Implementation smell,Namespace,Class,File,Method,Description
Long Method,DataAccess,GenericTableWriter,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableWriter.cs,SaveToAzureTable,The method has 160 lines of code.
Complex Method,DataAccess,GenericTableWriter,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableWriter.cs,SaveToAzureTable,Cyclomatic complexity of the method is 17
Long Parameter List,DataAccess,DataTableAzureExtensions,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\AzureDataTableExtensions.cs,SaveToAzureTable,The method has 5 parameters. Parameters: table' account' tableName' columnTypes' funcComputeKeys
Long Parameter List,DataAccess,GenericTableWriter,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableWriter.cs,SaveToAzureTable,The method has 5 parameters. Parameters: table' account' tableName' columnTypes' funcComputeKeys
Long Statement,DataAccess,DataTableBuilderAzureExtensions,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\AzureExtensions.cs,GetBlobAndVerify,The length of the statement  "                throw new FileNotFoundException(string.Format("container.blob {0}.{0} does not exist on the storage account '{2}'"' containerName' blobName' accountName));" is 155.
Long Statement,DataAccess,GenericTableReader,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableReader.cs,OnReadingEntity,The length of the statement  "                        IsNull = string.Equals("true"' p.Attribute(MetadataNamespace + "null") == null ? null : p.Attribute(MetadataNamespace + "null").Value' StringComparison.OrdinalIgnoreCase)'" is 171.
Long Statement,DataAccess,GenericTableWriter,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableWriter.cs,SaveToAzureTable,The length of the statement  "                         throw new InvalidOperationException(string.Format("Type '{0}' is not a supported type on azure tables"' columnType.FullName)); " is 126.
Magic Number,DataAccess,GenericTableWriter,C:\repos\MikeStall_DataTable\Sources\CsvReader.Azure\GenericTableWriter.cs,SaveToAzureTable,The following statement contains a magic number: foreach (Row row in table.Rows)              {                  GenericWriterEntity entity = new GenericWriterEntity { _source = row };                  // Compute row and partition keys too.                   var partRow = funcComputeKeys(rowCounter' row);                  entity.PartitionKey = partRow.PartitionKey;                  entity.RowKey = partRow.RowKey;                  rowCounter++;                    // but all rows in the batch must have the same partition key                  if ((ctx != null) && (lastPartitionKey != null) && (lastPartitionKey != entity.PartitionKey))                  {                      ctx.SaveChangesWithRetries(SaveChangesOptions.Batch | SaveChangesOptions.ReplaceOnUpdate);                      ctx = null;                  }                    if (ctx == null)                  {                      dups.Clear();                      lastPartitionKey = null;                      ctx = tableClient.GetTableServiceContext();                      ctx.Format.UseAtom();                      ctx.WritingEntity += new EventHandler<ReadingWritingEntityEventArgs>(w.ctx_WritingEntity);                      batchSize = 0;                  }                    // Add enty to the current batch                  // Upsert means insert+Replace. But still need uniqueness within a batch.                  bool allowUpsert = true;                                    // Check for dups within a batch.                  var key = new PartitionRowKey { PartitionKey = entity.PartitionKey' RowKey = entity.RowKey };                  bool dupWithinBatch = dups.Contains(key);                  dups.Add(key);                      if (allowUpsert)                  {                      // Upsert allows overwriting existing keys. But still must be unique within a batch.                      if (!dupWithinBatch)                      {                          ctx.AttachTo(tableName' entity);                          ctx.UpdateObject(entity);                         }                  }                  else                  {                      // AddObject requires uniquess.                      if (dupWithinBatch)                      {                          // Azure REST APIs will give us a horrible cryptic error (400 with no message).                           // Provide users a useful error instead.                          throw new InvalidOperationException(string.Format("Table has duplicate keys: {0}"' key));                      }                        ctx.AddObject(tableName' entity);                  }                                      lastPartitionKey = entity.PartitionKey;                  batchSize++;                    if (batchSize % UploadBatchSize == 0)                  {                      // Beware' if keys collide within a batch' we get a very cryptic error and 400.                      // If they collide across batches' we get a more useful 409 (conflict).                       try                      {                          ctx.SaveChangesWithRetries(SaveChangesOptions.Batch | SaveChangesOptions.ReplaceOnUpdate);                      }                      catch (DataServiceRequestException de)                      {                          var e = de.InnerException as DataServiceClientException;                          if (e != null)                          {                              if (e.StatusCode == 409)                              {                                  // Conflict. Duplicate keys. We don't get the specific duplicate key.                                  // Server shouldn't do this if we support upsert.                                  // (although an old emulator that doesn't yet support upsert may throw it).                                  throw new InvalidOperationException(string.Format("Table has duplicate keys. {0}"' e.Message));                              }                          }                      }                      ctx = null;                  }              }
