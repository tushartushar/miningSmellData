Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,Cyclomatic complexity of the method is 11
Complex Method,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,Cyclomatic complexity of the method is 9
Complex Method,Kalix.ApiCrypto.EC,ECCertificateBuilder,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECCertificateBuilder.cs,CreateNewSigningCertificate,Cyclomatic complexity of the method is 26
Complex Method,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,Base64UrlDecode,Cyclomatic complexity of the method is 10
Complex Method,Kalix.ApiCrypto.RSA,RSACertificateBuilder,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\RSA\RSACertificateBuilder.cs,CreateNewCertificate,Cyclomatic complexity of the method is 16
Long Statement,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The length of the statement  "	// Code pulled from https://github.com/juhovh/AaltoTLS/blob/master/Plugins/EllipticCurveCipherSuitePlugin/SignatureAlgorithmECDSA.cs " is 132.
Long Statement,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The length of the statement  "		throw new Exception ("Invalid length of ECDSA public key: " + keyData.Length + " (should be " + (1 + 2 * keyLength) + ")"); " is 123.
Long Statement,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,DecodeUsingECDSA,The length of the statement  "		var headerDetails = JsonConvert.DeserializeObject<IDictionary<string' string>> (Encoding.UTF8.GetString (Base64UrlDecode (header))); " is 132.
Long Statement,Kalix.ApiCrypto.RSA,RSACertificateBuilder,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\RSA\RSACertificateBuilder.cs,CreateNewCertificate,The length of the statement  "	var keySizeProperty = new CngProperty ("Length"' BitConverter.GetBytes (buildOptions.KeySize ?? 4096)' CngPropertyOptions.None); " is 128.
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: switch (keySize) {  case AESKeySize.AES128:  	intKeySize = 128;  	break;  case AESKeySize.AES192:  	intKeySize = 192;  	break;  case AESKeySize.AES256:  	intKeySize = 256;  	break;  default:  	throw new ArgumentOutOfRangeException ("keySize"' "Unknown key size");  }  
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: switch (keySize) {  case AESKeySize.AES128:  	intKeySize = 128;  	break;  case AESKeySize.AES192:  	intKeySize = 192;  	break;  case AESKeySize.AES256:  	intKeySize = 256;  	break;  default:  	throw new ArgumentOutOfRangeException ("keySize"' "Unknown key size");  }  
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: switch (keySize) {  case AESKeySize.AES128:  	intKeySize = 128;  	break;  case AESKeySize.AES192:  	intKeySize = 192;  	break;  case AESKeySize.AES256:  	intKeySize = 256;  	break;  default:  	throw new ArgumentOutOfRangeException ("keySize"' "Unknown key size");  }  
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: intKeySize = 128;  
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: intKeySize = 192;  
Magic Number,Kalix.ApiCrypto.AES,AESBlob,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESBlob.cs,CreateBlob,The following statement contains a magic number: intKeySize = 256;  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Read,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = _internalStream.Read (ivLengthBytes' 0' 4);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = _internalStream.Read (iv' 0' ivLength);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Read,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = _internalStream.Read (ivLengthBytes' 0' 4);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = _internalStream.Read (iv' 0' ivLength);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Read,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = _internalStream.Read (ivLengthBytes' 0' 4);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = _internalStream.Read (iv' 0' ivLength);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Read,The following statement contains a magic number: if (read != 4) {  	throw new InvalidOperationException ("Stream did not have enough data for IV length");  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,ReadAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = await _internalStream.ReadAsync (ivLengthBytes' 0' 4' ct).ConfigureAwait (false);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = await _internalStream.ReadAsync (iv' 0' ivLength' ct).ConfigureAwait (false);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,ReadAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = await _internalStream.ReadAsync (ivLengthBytes' 0' 4' ct).ConfigureAwait (false);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = await _internalStream.ReadAsync (iv' 0' ivLength' ct).ConfigureAwait (false);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,ReadAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	var ivLengthBytes = new byte[4];  	var read = await _internalStream.ReadAsync (ivLengthBytes' 0' 4' ct).ConfigureAwait (false);  	if (read != 4) {  		throw new InvalidOperationException ("Stream did not have enough data for IV length");  	}  	var ivLength = BitConverter.ToInt32 (ivLengthBytes' 0);  	var iv = new byte[ivLength];  	read = await _internalStream.ReadAsync (iv' 0' ivLength' ct).ConfigureAwait (false);  	if (read != ivLength) {  		throw new InvalidOperationException ("Stream did not have enough data for IV");  	}  	var aesProvider = new RijndaelManaged ();  	aesProvider.Key = _aesKey;  	aesProvider.IV = iv;  	var decryptor = aesProvider.CreateDecryptor ();  	_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Read);  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,ReadAsync,The following statement contains a magic number: if (read != 4) {  	throw new InvalidOperationException ("Stream did not have enough data for IV length");  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (_ivLengthBytes == null) {  	_ivLengthBytes = new byte[4];  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: _ivLengthBytes = new byte[4];  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,Write,The following statement contains a magic number: if (count > 0 && _ivLengthBytesWritten == 4) {  	if (_iv == null) {  		_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  	}  	var length = Math.Min (_iv.Length - _ivWritten' count);  	Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  	offset += length;  	count -= length;  	_ivWritten += length;  	if (_ivWritten == _iv.Length) {  		var aesProvider = new RijndaelManaged ();  		aesProvider.Key = _aesKey;  		aesProvider.IV = _iv;  		var decryptor = aesProvider.CreateDecryptor ();  		_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  		// Free up some memory...  		_iv = null;  		_ivLengthBytes = null;  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_cryptoStream == null) {  	if (_ivLengthBytesWritten != 4) {  		if (_ivLengthBytes == null) {  			_ivLengthBytes = new byte[4];  		}  		var length = Math.Min (4 - _ivLengthBytesWritten' count);  		Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  		offset += length;  		count -= length;  		_ivLengthBytesWritten += length;  	}  	if (count > 0 && _ivLengthBytesWritten == 4) {  		if (_iv == null) {  			_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  		}  		var length = Math.Min (_iv.Length - _ivWritten' count);  		Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  		offset += length;  		count -= length;  		_ivWritten += length;  		if (_ivWritten == _iv.Length) {  			var aesProvider = new RijndaelManaged ();  			aesProvider.Key = _aesKey;  			aesProvider.IV = _iv;  			var decryptor = aesProvider.CreateDecryptor ();  			_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  			// Free up some memory...  			_iv = null;  			_ivLengthBytes = null;  		}  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_ivLengthBytesWritten != 4) {  	if (_ivLengthBytes == null) {  		_ivLengthBytes = new byte[4];  	}  	var length = Math.Min (4 - _ivLengthBytesWritten' count);  	Buffer.BlockCopy (buffer' offset' _ivLengthBytes' _ivLengthBytesWritten' length);  	offset += length;  	count -= length;  	_ivLengthBytesWritten += length;  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (_ivLengthBytes == null) {  	_ivLengthBytes = new byte[4];  }  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: _ivLengthBytes = new byte[4];  
Magic Number,Kalix.ApiCrypto.AES,AESDecryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESDecryptStream.cs,WriteAsync,The following statement contains a magic number: if (count > 0 && _ivLengthBytesWritten == 4) {  	if (_iv == null) {  		_iv = new byte[BitConverter.ToInt32 (_ivLengthBytes' 0)];  	}  	var length = Math.Min (_iv.Length - _ivWritten' count);  	Buffer.BlockCopy (buffer' offset' _iv' _ivWritten' length);  	offset += length;  	count -= length;  	_ivWritten += length;  	if (_ivWritten == _iv.Length) {  		var aesProvider = new RijndaelManaged ();  		aesProvider.Key = _aesKey;  		aesProvider.IV = _iv;  		var decryptor = aesProvider.CreateDecryptor ();  		_cryptoStream = new CryptoStream (_internalStream' decryptor' CryptoStreamMode.Write);  		// Free up some memory...  		_iv = null;  		_ivLengthBytes = null;  	}  }  
Magic Number,Kalix.ApiCrypto.AES,AESEncryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESEncryptStream.cs,AESEncryptStream,The following statement contains a magic number: _initialBytes = new byte[aesProvider.IV.Length + 4];  
Magic Number,Kalix.ApiCrypto.AES,AESEncryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESEncryptStream.cs,AESEncryptStream,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (aesProvider.IV.Length)' 0' _initialBytes' 0' 4);  
Magic Number,Kalix.ApiCrypto.AES,AESEncryptStream,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\AES\AESEncryptStream.cs,AESEncryptStream,The following statement contains a magic number: Buffer.BlockCopy (aesProvider.IV' 0' _initialBytes' 4' aesProvider.IV.Length);  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P256OID)) {  	keyLength = 32;  	blobMagic = Encoding.ASCII.GetBytes ("ECS1");  }  else if (curveOid.Equals (P384OID)) {  	keyLength = 48;  	blobMagic = Encoding.ASCII.GetBytes ("ECS3");  }  else if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P256OID)) {  	keyLength = 32;  	blobMagic = Encoding.ASCII.GetBytes ("ECS1");  }  else if (curveOid.Equals (P384OID)) {  	keyLength = 48;  	blobMagic = Encoding.ASCII.GetBytes ("ECS3");  }  else if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P256OID)) {  	keyLength = 32;  	blobMagic = Encoding.ASCII.GetBytes ("ECS1");  }  else if (curveOid.Equals (P384OID)) {  	keyLength = 48;  	blobMagic = Encoding.ASCII.GetBytes ("ECS3");  }  else if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: keyLength = 32;  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P384OID)) {  	keyLength = 48;  	blobMagic = Encoding.ASCII.GetBytes ("ECS3");  }  else if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P384OID)) {  	keyLength = 48;  	blobMagic = Encoding.ASCII.GetBytes ("ECS3");  }  else if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: keyLength = 48;  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (curveOid.Equals (P521OID)) {  	keyLength = 66;  	blobMagic = Encoding.ASCII.GetBytes ("ECS5");  }  else {  	throw new Exception ("Unsupported ECC curve type OID: " + curveOid);  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: keyLength = 66;  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (2 * keyLength != keyData.Length - 1) {  	throw new Exception ("Invalid length of ECDSA public key: " + keyData.Length + " (should be " + (1 + 2 * keyLength) + ")");  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: if (2 * keyLength != keyData.Length - 1) {  	throw new Exception ("Invalid length of ECDSA public key: " + keyData.Length + " (should be " + (1 + 2 * keyLength) + ")");  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: throw new Exception ("Invalid length of ECDSA public key: " + keyData.Length + " (should be " + (1 + 2 * keyLength) + ")");  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: Buffer.BlockCopy (blobMagic' 0' eccBlob' 0' 4);  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: Buffer.BlockCopy (lengthData' 0' eccBlob' 4' 4);  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: Buffer.BlockCopy (lengthData' 0' eccBlob' 4' 4);  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: Buffer.BlockCopy (keyData' 1' eccBlob' 8' (int)(2 * keyLength));  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,ParsePublicCertificate,The following statement contains a magic number: Buffer.BlockCopy (keyData' 1' eccBlob' 8' (int)(2 * keyLength));  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: try {  	if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  		return null;  	}  	byte firstByte = oid [2];  	string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  	for (int i = 3; i < oid.Length; i++) {  		if (oid [i] < 128) {  			ret += (int)oid [i];  		}  		else if (oid [i] >= 128 && oid [i + 1] < 128) {  			ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  			i++;  		}  		else {  			return null;  		}  		if (i != oid.Length - 1) {  			ret += ".";  		}  	}  	return ret;  }  catch (Exception) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [0] != 0x06 || oid [1] >= 128 || oid [1] != oid.Length - 2) {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: for (int i = 3; i < oid.Length; i++) {  	if (oid [i] < 128) {  		ret += (int)oid [i];  	}  	else if (oid [i] >= 128 && oid [i + 1] < 128) {  		ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  		i++;  	}  	else {  		return null;  	}  	if (i != oid.Length - 1) {  		ret += ".";  	}  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: for (int i = 3; i < oid.Length; i++) {  	if (oid [i] < 128) {  		ret += (int)oid [i];  	}  	else if (oid [i] >= 128 && oid [i + 1] < 128) {  		ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  		i++;  	}  	else {  		return null;  	}  	if (i != oid.Length - 1) {  		ret += ".";  	}  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: for (int i = 3; i < oid.Length; i++) {  	if (oid [i] < 128) {  		ret += (int)oid [i];  	}  	else if (oid [i] >= 128 && oid [i + 1] < 128) {  		ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  		i++;  	}  	else {  		return null;  	}  	if (i != oid.Length - 1) {  		ret += ".";  	}  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: for (int i = 3; i < oid.Length; i++) {  	if (oid [i] < 128) {  		ret += (int)oid [i];  	}  	else if (oid [i] >= 128 && oid [i + 1] < 128) {  		ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  		i++;  	}  	else {  		return null;  	}  	if (i != oid.Length - 1) {  		ret += ".";  	}  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: for (int i = 3; i < oid.Length; i++) {  	if (oid [i] < 128) {  		ret += (int)oid [i];  	}  	else if (oid [i] >= 128 && oid [i + 1] < 128) {  		ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  		i++;  	}  	else {  		return null;  	}  	if (i != oid.Length - 1) {  		ret += ".";  	}  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] < 128) {  	ret += (int)oid [i];  }  else if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] < 128) {  	ret += (int)oid [i];  }  else if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] < 128) {  	ret += (int)oid [i];  }  else if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] < 128) {  	ret += (int)oid [i];  }  else if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: if (oid [i] >= 128 && oid [i + 1] < 128) {  	ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  	i++;  }  else {  	return null;  }  
Magic Number,Kalix.ApiCrypto.EC,ECDSACertificateParser,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\EC\ECDSACertificateParser.cs,DER2OID,The following statement contains a magic number: ret += (int)(((oid [i] & 0x7f) << 7) | oid [i + 1]);  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,DecodeUsingECDSA,The following statement contains a magic number: if (verify) {  	var headerDetails = JsonConvert.DeserializeObject<IDictionary<string' string>> (Encoding.UTF8.GetString (Base64UrlDecode (header)));  	if (!headerDetails.ContainsKey ("alg") || !headerDetails ["alg"].StartsWith ("ES")) {  		throw new SignatureVerificationException (string.Format ("Unsupported signing algorithm."));  	}  	if (verificationCertificate.KeySize.ToString () != headerDetails ["alg"].Substring (2)) {  		throw new SignatureVerificationException (string.Format ("Key size does not match."));  	}  	var compare = Encoding.UTF8.GetBytes (string.Concat (header' "."' payload));  	byte[] signature = Base64UrlDecode (parts [2]);  	if (!verificationCertificate.VerifyData (compare' signature)) {  		throw new SignatureVerificationException (string.Format ("Invalid signature."));  	}  }  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,DecodeUsingECDSA,The following statement contains a magic number: if (verify) {  	var headerDetails = JsonConvert.DeserializeObject<IDictionary<string' string>> (Encoding.UTF8.GetString (Base64UrlDecode (header)));  	if (!headerDetails.ContainsKey ("alg") || !headerDetails ["alg"].StartsWith ("ES")) {  		throw new SignatureVerificationException (string.Format ("Unsupported signing algorithm."));  	}  	if (verificationCertificate.KeySize.ToString () != headerDetails ["alg"].Substring (2)) {  		throw new SignatureVerificationException (string.Format ("Key size does not match."));  	}  	var compare = Encoding.UTF8.GetBytes (string.Concat (header' "."' payload));  	byte[] signature = Base64UrlDecode (parts [2]);  	if (!verificationCertificate.VerifyData (compare' signature)) {  		throw new SignatureVerificationException (string.Format ("Invalid signature."));  	}  }  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,DecodeUsingECDSA,The following statement contains a magic number: if (verificationCertificate.KeySize.ToString () != headerDetails ["alg"].Substring (2)) {  	throw new SignatureVerificationException (string.Format ("Key size does not match."));  }  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,Base64UrlDecode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	output += "==";  	break;  // Two pad chars  case 3:  	output += "=";  	break;  // One pad char  default:  	throw new System.Exception ("Illegal base64url string!");  }  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,Base64UrlDecode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	output += "==";  	break;  // Two pad chars  case 3:  	output += "=";  	break;  // One pad char  default:  	throw new System.Exception ("Illegal base64url string!");  }  
Magic Number,Kalix.ApiCrypto.JWT,JsonWebToken,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\JWT\JsonWebToken.cs,Base64UrlDecode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	output += "==";  	break;  // Two pad chars  case 3:  	output += "=";  	break;  // One pad char  default:  	throw new System.Exception ("Illegal base64url string!");  }  
Magic Number,Kalix.ApiCrypto.RSA,RSACertificateBuilder,C:\repos\KalixHealth_Kalix.ApiCrypto\Kalix.ApiCrypto\RSA\RSACertificateBuilder.cs,CreateNewCertificate,The following statement contains a magic number: return CreateNewCertificate (new RSACertificateBuilderOptions {  	FullSubjectName = "CN=" + subjectName'  	KeySize = 4096'  	HashingMethod = HashingMethods.Sha256'  	RSAKeyName = "RSA_" + subjectName  });  
