Implementation smell,Namespace,Class,File,Method,Description
Long Method,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The method has 151 lines of code.
Long Method,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The method has 174 lines of code.
Complex Method,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,Cyclomatic complexity of the method is 8
Complex Method,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,Cyclomatic complexity of the method is 16
Complex Method,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,Cyclomatic complexity of the method is 8
Complex Method,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dequeue,Cyclomatic complexity of the method is 8
Complex Method,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dispose,Cyclomatic complexity of the method is 8
Long Parameter List,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,DeclareExchangeAndQueues,The method has 6 parameters. Parameters: channel' messageMapper' messagingConfig' serviceName' syncObject' subscriberId
Long Parameter List,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,PrepareForResponse,The method has 7 parameters. Parameters: correlationId' basicProperties' model' request' requestTimeout' cancellationToken' taskSource
Long Parameter List,RestBus.RabbitMQ.Client,IRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\IRPCStrategy.cs,PrepareForResponse,The method has 7 parameters. Parameters: correlationId' basicProperties' model' request' requestTimeout' cancellationToken' taskSource
Long Parameter List,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,WaitForResponse,The method has 8 parameters. Parameters: request' arrival' requestTimeout' model' closeModel' cancellationToken' taskSource' cleanup
Long Parameter List,RestBus.RabbitMQ.Client,DirectReplyToRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\DirectReplyToRPCStrategy.cs,PrepareForResponse,The method has 7 parameters. Parameters: correlationId' basicProperties' model' request' requestTimeout' cancellationToken' taskSource
Long Parameter List,RestBus.RabbitMQ.Consumer,ConcurrentQueueingConsumer,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Consumer\ConcurrentQueueingConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Identifier,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the parameter elapsedSinceLastDeclareExchange is 31.
Long Statement,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,HasModelExpired,The length of the statement  "            return currentTickCount < modelContainer.Created || modelContainer.Created < (currentTickCount - MODEL_EXPIRY_TIMESPAN); " is 120.
Long Statement,RestBus.RabbitMQ.ChannelPooling,RPCModelContainer,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\RPCModelContainer.cs,ResponseReceived,The length of the statement  "            if (expected != null && !String.IsNullOrEmpty(evt.BasicProperties.CorrelationId) && evt.BasicProperties.CorrelationId == correlationId) " is 135.
Long Statement,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetWorkQueueName,The length of the statement  "            return queuePrefix + PrefixSlashIfNotEmpty(serviceName) + workQueuePath + (messagingConfig.PersistentWorkQueuesAndExchanges ? "/persistent" : String.Empty); " is 156.
Long Statement,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetExchangeName,The length of the statement  "			return exchangePrefix + serviceName + "." + GetExchangeKindName(kind) + (messagingConfig.PersistentWorkQueuesAndExchanges ? ".persistent" : String.Empty); " is 154.
Long Statement,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,DeclareExchangeAndQueues,The length of the statement  "                        channel.ExchangeDeclare(exchangeName' AmqpUtils.GetExchangeKindName(ExchangeKind.Direct)' messagingConfig.PersistentWorkQueuesAndExchanges' !messagingConfig.PersistentWorkQueuesAndExchanges' null); " is 197.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,PrepareForResponse,The length of the statement  "            RPCStrategyHelpers.WaitForResponse(request' arrival' requestTimeout' model' false' cancellationToken' taskSource' () => CleanupMessagingResources(correlationId' arrival)); " is 171.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The length of the statement  "                                    if (!String.IsNullOrEmpty(evt.BasicProperties.CorrelationId) && expectedResponses.TryRemove(evt.BasicProperties.CorrelationId' out expected)) " is 141.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The length of the statement  "                                    //This prevents a situation where crap messages are sent to the client but the good expected message is stuck behind the " is 120.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The length of the statement  "                                    //crap ones and isn't delivered because the crap ones in front of the queue aren't acked and crap messages exceed prefetchCount. " is 128.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The length of the statement  "                                    if ((clientSettings.DisableDirectReplies || !channelContainer.IsDirectReplyToCapable) && clientSettings.AckBehavior == ClientAckBehavior.ValidResponses) " is 152.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The length of the statement  "            channel.BasicPublish(String.Empty' indirectReplyToQueueName' true' new BasicProperties { ReplyTo = RPCStrategyHelpers.DIRECT_REPLY_TO_QUEUENAME_ARG }' new byte[0]); " is 164.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The length of the statement  "                Interlocked.Exchange(ref returnHandler' (a' e) => { messageReturned.Set(); try { receiver.Model.BasicReturn -= returnHandler; } catch { } }); " is 141.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The length of the statement  "            if (result == null || result == RPCStrategyHelpers.DIRECT_REPLY_TO_QUEUENAME_ARG || !result.StartsWith(RPCStrategyHelpers.DIRECT_REPLY_TO_QUEUENAME_ARG)) " is 153.
Long Statement,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The length of the statement  "                throw new InvalidOperationException("Discovered direct reply-to queue name (" + (result ?? "null") + ") was not in expected format."); " is 134.
Long Statement,RestBus.RabbitMQ.Client,ConnectionManager,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\ConnectionManager.cs,ConnectIfUnconnected,The length of the statement  "                    if (_clientPool == null || _clientPool.Connection == null || !_clientPool.Connection.IsOpen || _clientPool.GetRecycle()) " is 120.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,WaitForResponse,The length of the statement  "            //TODO: Test task vs RegisterWaitForSingleObject modes in a super fast network environment with 40' 100' 200 all the way to 1000 threads to see what method has fastest throughput. " is 179.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,WaitForResponse,The length of the statement  "                            requestTimeout.TotalMilliseconds > Int32.MaxValue ? TimeSpan.FromMilliseconds(Int32.MaxValue) : requestTimeout /* Covers InfiniteTimeSpan */' " is 141.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,WaitForResponse,The length of the statement  "                        requestTimeout == System.Threading.Timeout.InfiniteTimeSpan ? System.Threading.Timeout.Infinite : (long)requestTimeout.TotalMilliseconds' " is 137.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,SetResponseResult,The length of the statement  "                //NOTE: This really ought to return an "Operation Timed Out" WebException and not a Cancellation as noted in the following posts " is 128.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,SetResponseResult,The length of the statement  "                // http://social.msdn.microsoft.com/Forums/en-US/d8d87789-0ac9-4294-84a0-91c9fa27e353/bug-in-httpclientgetasync-should-throw-webexception-not-taskcanceledexception?forum=netfxnetcom&prof=required " is 195.
Long Statement,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,SetResponseResult,The length of the statement  "                    taskSource.SetException(RestBusClient.GetWrappedException("An error occurred while reading the response."' arrival.DeserializationException)); " is 142.
Long Statement,RestBus.RabbitMQ.Client,DirectReplyToRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\DirectReplyToRPCStrategy.cs,GetModel,The length of the statement  "            var model = (RPCModelContainer)pool.GetModel(streamsPublisherConfirms ? ChannelFlags.RPCWithPublisherConfirms : ChannelFlags.RPC ); " is 131.
Long Statement,RestBus.RabbitMQ.Client,DirectReplyToRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\DirectReplyToRPCStrategy.cs,PrepareForResponse,The length of the statement  "            RPCStrategyHelpers.WaitForResponse(request' arrival' requestTimeout' model' true' cancellationToken' taskSource' () => CleanupMessagingResources(correlationId' arrival)); " is 170.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "            IRPCStrategy rpcStrategy = pool.IsDirectReplyToCapable && !Settings.DisableDirectReplies ? directStrategy : callbackStrategy; " is 125.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                if (messageProperties.Persistent == true || (messagingConfig.PersistentMessages && messageProperties.Persistent != false)) " is 122.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                else if (!messageProperties.Expiration.HasValue && (messagingConfig.MessageExpires == null || messagingConfig.MessageExpires(request))) " is 135.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                    //Request has a zero timeout and the message mapper indicates it should expire and messageproperties expiration is not set: " is 123.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                    arrival = rpcStrategy.PrepareForResponse(correlationId' basicProperties' model' request' requestTimeout' cancellationToken' taskSource); " is 136.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                                messageProperties.RoutingKey ?? messageMapper.GetRoutingKey(request' exchangeKind) ?? AmqpUtils.GetWorkQueueRoutingKey()' " is 121.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The length of the statement  "                    //TODO: Investigate adding a publisher confirm for zero timeout messages so we know that RabbitMQ did pick up the message before replying OK. " is 141.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,EnsureNotStartedOrDisposed,The length of the statement  "            if (hasKickStarted) throw new InvalidOperationException("This instance has already started one or more requests. Properties can only be modified before sending the first request."); " is 181.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "            //Redeclare exchanges and queues every minute if exchanges and queues are transient' or the first time client is sending a message " is 130.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "            TimeSpan elapsedSinceLastDeclareExchange = TimeSpan.FromMilliseconds(Environment.TickCount - lastExchangeDeclareTickCount); " is 123.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "            //TODO: Partition elapsedSinceLastDeclareExchange by serviceName and connection so that redeclares take place on new servicenames and connections. " is 146.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "            //However' redeclaring exchanges and queues are a safe operation' so this is okay if it occurs more than once in persistent queues. " is 131.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "            if (firstDeclare || (!messagingConfig.PersistentWorkQueuesAndExchanges && (elapsedSinceLastDeclareExchange.TotalMilliseconds < 0 || elapsedSinceLastDeclareExchange.TotalSeconds > 60))) " is 184.
Long Statement,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The length of the statement  "                AmqpUtils.DeclareExchangeAndQueues(model.Channel' messageMapper' messagingConfig' serviceName' exchangeDeclareSync' null); " is 122.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The length of the statement  "            stopWaitingOnQueue = CancellationTokenSource.CreateLinkedTokenSource(disposedCancellationSource.Token' connectionBroken.Token); " is 127.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The length of the statement  "            AmqpUtils.DeclareExchangeAndQueues(workChannel.Channel' messageMapper' messagingConfig' serviceName' exchangeDeclareSync' Id); " is 126.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The length of the statement  "            subscriberChannel.Channel.BasicConsume(subscriberWorkQueueName' Settings.AckBehavior == SubscriberAckBehavior.Automatic' subscriberConsumer); " is 141.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dequeue,The length of the statement  "            if(workConsumer == null || subscriberConsumer == null) throw new InvalidOperationException("Start the subscriber prior to calling Dequeue"); " is 140.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dequeue,The length of the statement  "            //TODO: Test what happens if either of these consumers are cancelled by the server' should consumer.Cancelled be handled? " is 121.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,SendResponse,The length of the statement  "                    //https://github.com/rabbitmq/rabbitmq-dotnet-client/blob/f16c093f6409e11d9d77115038cb224eb39468ec/projects/client/RabbitMQ.Client/src/client/impl/ModelBase.cs#L459 " is 164.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,SendResponse,The length of the statement  "                    //https://github.com/rabbitmq/rabbitmq-dotnet-client/blob/f16c093f6409e11d9d77115038cb224eb39468ec/projects/client/RabbitMQ.Client/src/client/impl/SessionBase.cs#L177 " is 166.
Long Statement,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,SendResponse,The length of the statement  "                //TODO: Log this -- it technically shouldn't happen. Also translate to a HTTP Unreachable because it means StartCallbackQueueConsumer didn't create a connection " is 160.
Long Statement,RestBus.RabbitMQ.Subscription,SubscriberSettings,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\SubscriberSettings.cs,EnsureNotStarted,The length of the statement  "                throw new InvalidOperationException("This instance has already started. Properties can only be modified before starting the subscriber."); " is 138.
Complex Conditional,RestBus.RabbitMQ.Client,ConnectionManager,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\ConnectionManager.cs,ConnectIfUnconnected,The conditional expression  "pool == null || pool.Connection  == null || !pool.Connection.IsOpen || pool.GetRecycle()"  is complex.
Complex Conditional,RestBus.RabbitMQ.Client,ConnectionManager,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\ConnectionManager.cs,ConnectIfUnconnected,The conditional expression  "_clientPool == null || _clientPool.Connection == null || !_clientPool.Connection.IsOpen || _clientPool.GetRecycle()"  is complex.
Complex Conditional,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,SendAsync,The conditional expression  "!messageProperties.Expiration.HasValue && requestTimeout != System.Threading.Timeout.InfiniteTimeSpan                           && ( messagingConfig.MessageExpires == null || messagingConfig.MessageExpires(request))"  is complex.
Complex Conditional,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The conditional expression  "firstDeclare || (!messagingConfig.PersistentWorkQueuesAndExchanges && (elapsedSinceLastDeclareExchange.TotalMilliseconds < 0 || elapsedSinceLastDeclareExchange.TotalSeconds > 60))"  is complex.
Empty Catch Block,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DestroyModel,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DestroyModel,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DisposeConnection,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DisposeConnection,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,StartCallbackQueueConsumer,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Client,RPCStrategyHelpers,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RPCStrategyHelpers.cs,WaitForResponse,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Restart,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RestBus.RabbitMQ.Subscription,RestBusSubscriber,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Subscription\RestBusSubscriber.cs,Reconnect,The method has an empty catch block.
Magic Number,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,The following statement contains a magic number: try              {                  if (conn.ServerProperties.ContainsKey("version"))                  {                      var versionBytes = conn.ServerProperties["version"] as byte[];                      if (versionBytes != null && versionBytes.Length > 3)                      {                          var version = System.Text.Encoding.ASCII.GetString(versionBytes);                          var semver = version.Split('.');                            if (semver.Length > 2 && Int32.Parse(semver[0]) >= 3 && Int32.Parse(semver[1]) >= 4)                          {                              //Version is greater or equal to than 3.4.x                              return true;                          }                      }                  }              }              catch { }
Magic Number,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,The following statement contains a magic number: try              {                  if (conn.ServerProperties.ContainsKey("version"))                  {                      var versionBytes = conn.ServerProperties["version"] as byte[];                      if (versionBytes != null && versionBytes.Length > 3)                      {                          var version = System.Text.Encoding.ASCII.GetString(versionBytes);                          var semver = version.Split('.');                            if (semver.Length > 2 && Int32.Parse(semver[0]) >= 3 && Int32.Parse(semver[1]) >= 4)                          {                              //Version is greater or equal to than 3.4.x                              return true;                          }                      }                  }              }              catch { }
Magic Number,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,The following statement contains a magic number: try              {                  if (conn.ServerProperties.ContainsKey("version"))                  {                      var versionBytes = conn.ServerProperties["version"] as byte[];                      if (versionBytes != null && versionBytes.Length > 3)                      {                          var version = System.Text.Encoding.ASCII.GetString(versionBytes);                          var semver = version.Split('.');                            if (semver.Length > 2 && Int32.Parse(semver[0]) >= 3 && Int32.Parse(semver[1]) >= 4)                          {                              //Version is greater or equal to than 3.4.x                              return true;                          }                      }                  }              }              catch { }
Magic Number,RestBus.RabbitMQ.ChannelPooling,AmqpChannelPooler,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\ChannelPooling\AmqpChannelPooler.cs,DetermineDirectReplyToCapability,The following statement contains a magic number: try              {                  if (conn.ServerProperties.ContainsKey("version"))                  {                      var versionBytes = conn.ServerProperties["version"] as byte[];                      if (versionBytes != null && versionBytes.Length > 3)                      {                          var version = System.Text.Encoding.ASCII.GetString(versionBytes);                          var semver = version.Split('.');                            if (semver.Length > 2 && Int32.Parse(semver[0]) >= 3 && Int32.Parse(semver[1]) >= 4)                          {                              //Version is greater or equal to than 3.4.x                              return true;                          }                      }                  }              }              catch { }
Magic Number,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetWorkQueueExpiry,The following statement contains a magic number: return TimeSpan.FromHours(24);
Magic Number,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetCallbackQueueExpiry,The following statement contains a magic number: return TimeSpan.FromMinutes(4);
Magic Number,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetSubscriberQueueExpiry,The following statement contains a magic number: return TimeSpan.FromMinutes(4);
Magic Number,RestBus.RabbitMQ,AmqpUtils,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\AmqpUtils.cs,GetNewExclusiveQueueId,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,RestBus.RabbitMQ,BasicMessageMapper,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\BasicMessageMapper.cs,StripUserInfoAndQuery,The following statement contains a magic number: if(amqpUri.Length > 8 && amqpUri.StartsWith("amqps://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 8;              }              else if (amqpUri.Length > 7 && amqpUri.StartsWith("amqp://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 7;              }              else              {                  throw new ArgumentException("amqpUri is not in expected format.");              }
Magic Number,RestBus.RabbitMQ,BasicMessageMapper,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\BasicMessageMapper.cs,StripUserInfoAndQuery,The following statement contains a magic number: if(amqpUri.Length > 8 && amqpUri.StartsWith("amqps://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 8;              }              else if (amqpUri.Length > 7 && amqpUri.StartsWith("amqp://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 7;              }              else              {                  throw new ArgumentException("amqpUri is not in expected format.");              }
Magic Number,RestBus.RabbitMQ,BasicMessageMapper,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\BasicMessageMapper.cs,StripUserInfoAndQuery,The following statement contains a magic number: if(amqpUri.Length > 8 && amqpUri.StartsWith("amqps://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 8;              }              else if (amqpUri.Length > 7 && amqpUri.StartsWith("amqp://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 7;              }              else              {                  throw new ArgumentException("amqpUri is not in expected format.");              }
Magic Number,RestBus.RabbitMQ,BasicMessageMapper,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\BasicMessageMapper.cs,StripUserInfoAndQuery,The following statement contains a magic number: if(amqpUri.Length > 8 && amqpUri.StartsWith("amqps://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 8;              }              else if (amqpUri.Length > 7 && amqpUri.StartsWith("amqp://"' StringComparison.InvariantCultureIgnoreCase))              {                  startIndex = 7;              }              else              {                  throw new ArgumentException("amqpUri is not in expected format.");              }
Magic Number,RestBus.RabbitMQ.Client,CallbackQueueRPCStrategy,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\CallbackQueueRPCStrategy.cs,DiscoverDirectReplyToQueueName,The following statement contains a magic number: using (ManualResetEventSlim messageReturned = new ManualResetEventSlim())              {                  EventHandler<BasicReturnEventArgs> returnHandler = null;                  Interlocked.Exchange(ref returnHandler' (a' e) => { messageReturned.Set(); try { receiver.Model.BasicReturn -= returnHandler; } catch { } });                  receiver.Model.BasicReturn += returnHandler;                    System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();                  watch.Start();                  while (!receiver.TryInstantDequeue(out delivery' throwIfClosed: false))                  {                      Thread.Sleep(1);                      if (watch.Elapsed > TimeSpan.FromSeconds(10) || messageReturned.IsSet)                      {                          break;                      }                  }                  watch.Stop();                    if (!messageReturned.IsSet)                  {                      try                      {                          receiver.Model.BasicReturn -= returnHandler;                      }                      catch { }                  }                    try                  {                      channel.BasicCancel(receiverTag);                  }                  catch { }              }
Magic Number,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RestBusClient,The following statement contains a magic number: timeout = TimeSpan.FromSeconds(100);
Magic Number,RestBus.RabbitMQ.Client,RestBusClient,C:\repos\tenor_RestBus\src\Brokers\RabbitMQ\RestBus.RabbitMQ\Client\RestBusClient.cs,RedeclareExchangesAndQueues,The following statement contains a magic number: if (firstDeclare || (!messagingConfig.PersistentWorkQueuesAndExchanges && (elapsedSinceLastDeclareExchange.TotalMilliseconds < 0 || elapsedSinceLastDeclareExchange.TotalSeconds > 60)))              {                  if (!firstDeclare)                  {                      //All threads must attempt to declare exchanges and queues if it hasn't been previously declared                       //(for instance' all threads were started at once)                      //So do not swap out this value on first declare                      lastExchangeDeclareTickCount = Environment.TickCount;                  }                  AmqpUtils.DeclareExchangeAndQueues(model.Channel' messageMapper' messagingConfig' serviceName' exchangeDeclareSync' null);                  if (firstDeclare)                  {                      //Swap out this value after declaring on firstdeclare                      lastExchangeDeclareTickCount = Environment.TickCount;                  }              }
