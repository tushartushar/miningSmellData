Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,BuildUri,Cyclomatic complexity of the method is 9
Complex Method,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,Cyclomatic complexity of the method is 9
Long Statement,RestBus.Common.Amqp,AmqpConnectionInfo,C:\repos\tenor_RestBus\src\Common\RestBus.Common\Amqp\AmqpConnectionInfo.cs,EnsureValid,The length of the statement  "                if (uris[i].Uri == null) throw new ArgumentException("Uri property of Index " + i + " of " + argumentName + " argument is null."); " is 130.
Long Statement,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,The length of the statement  "                    if (!components[components.Length - 1].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[components.Length - 1].Length <= 5 ) " is 145.
Long Statement,RestBus.Common,InterlockedBoolean,C:\repos\tenor_RestBus\src\Common\RestBus.Common\InterlockedBoolean.cs,SetIf,The length of the statement  "            return Interlocked.CompareExchange(ref _value' newValue ? TRUE : FALSE' valueEquals ? TRUE : FALSE) == (valueEquals ? TRUE : FALSE); " is 132.
Long Statement,RestBus.Common.Http,HttpHelpers,C:\repos\tenor_RestBus\src\Common\RestBus.Common\Http\HttpHelpers.cs,ToHttpRequestPacket,The length of the statement  "            packet.Resource = request.RequestUri.IsAbsoluteUri ? request.RequestUri.PathAndQuery : request.RequestUri.OriginalString; " is 121.
Empty Catch Block,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,BuildUri,The method has an empty catch block.
Empty Catch Block,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,BuildUri,The method has an empty catch block.
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 3)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[components.Length - 1].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[components.Length - 1].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        request.Version = components[components.Length - 1].Substring(5).Trim();                      request.Method = components[0].ToUpperInvariant().Trim();                        string resource = components[1];                      for (int i = 2; i < components.Length - 1; i++)                      {                          //TODO: Should I convert this to a string builder. Is it worth it?                          resource += (" " + components[i]);                      }                        request.Resource = resource;                  }                  else                  {                      ParseLineIntoHeaders(text' request.Headers);                  }              }
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 3)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[components.Length - 1].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[components.Length - 1].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        request.Version = components[components.Length - 1].Substring(5).Trim();                      request.Method = components[0].ToUpperInvariant().Trim();                        string resource = components[1];                      for (int i = 2; i < components.Length - 1; i++)                      {                          //TODO: Should I convert this to a string builder. Is it worth it?                          resource += (" " + components[i]);                      }                        request.Resource = resource;                  }                  else                  {                      ParseLineIntoHeaders(text' request.Headers);                  }              }
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 3)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[components.Length - 1].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[components.Length - 1].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        request.Version = components[components.Length - 1].Substring(5).Trim();                      request.Method = components[0].ToUpperInvariant().Trim();                        string resource = components[1];                      for (int i = 2; i < components.Length - 1; i++)                      {                          //TODO: Should I convert this to a string builder. Is it worth it?                          resource += (" " + components[i]);                      }                        request.Resource = resource;                  }                  else                  {                      ParseLineIntoHeaders(text' request.Headers);                  }              }
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 3)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[components.Length - 1].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[components.Length - 1].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        request.Version = components[components.Length - 1].Substring(5).Trim();                      request.Method = components[0].ToUpperInvariant().Trim();                        string resource = components[1];                      for (int i = 2; i < components.Length - 1; i++)                      {                          //TODO: Should I convert this to a string builder. Is it worth it?                          resource += (" " + components[i]);                      }                        request.Resource = resource;                  }                  else                  {                      ParseLineIntoHeaders(text' request.Headers);                  }              }
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,BuildUri,The following statement contains a magic number: try              {                                  result = new UriBuilder("http"' hostname' 80' path' query).Uri;                  success = true;              }              catch { }
Magic Number,RestBus.Common,HttpRequestPacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpRequestPacket.cs,BuildUri,The following statement contains a magic number: if (hostname != "localhost")              {                  //Something may be wrong with host name' and so try localhost                  try                  {                      result = new UriBuilder("http"' "localhost"' 80' path' query).Uri;                      success = true;                  }                  catch { }                    if (success) return result;                }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
Magic Number,RestBus.Common,HttpResponsePacket,C:\repos\tenor_RestBus\src\Common\RestBus.Common\HttpResponsePacket.cs,Deserialize,The following statement contains a magic number: while ((text = reader.NextLine()) != null)              {                  if (isFirstLine)                  {                      isFirstLine = false;                      string[] components = text.Split(new char[]{' '}' StringSplitOptions.RemoveEmptyEntries);                        if (components.Length < 2)                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        if (!components[0].StartsWith("HTTP/"' StringComparison.OrdinalIgnoreCase) || components[0].Length <= 5 )                      {                          throw new InvalidOperationException("Unable to deserialize data into HttpPacket");                      }                        response.Version = components[0].Substring(5).Trim();                      int statusCode = 0;                      Int32.TryParse(components[1]' out statusCode);                      response.StatusCode = statusCode;                        if (components.Length > 2)                      {                          string statusDescription = components[2].Trim();                            for (int i = 3; i < components.Length; i++)                          {                              //TODO: Convert to a string builder? Is it worth it?                              statusDescription += (" " + components[i]);                          }                          response.StatusDescription = statusDescription;                        }                      else                      {                          response.StatusDescription = String.Empty;                      }                  }                  else                  {                      ParseLineIntoHeaders(text' response.Headers);                  }              }
