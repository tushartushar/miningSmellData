Implementation smell,Namespace,Class,File,Method,Description
Complex Method,winsw,TimeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithDateRotation,Cyclomatic complexity of the method is 8
Complex Method,DynamicProxy,ProxyFactory,C:\repos\kohsuke_winsw\src\Core\WinSWCore\DynamicProxy.cs,GenerateMethod,Cyclomatic complexity of the method is 9
Long Parameter List,winsw,Download,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Download.cs,Download,The method has 7 parameters. Parameters: from' to' failOnError' auth' username' password' unsecureAuth
Long Parameter List,winsw,AbstractFileLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,AbstractFileLogAppender,The method has 6 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,SimpleLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,SimpleLogAppender,The method has 7 parameters. Parameters: logDirectory' baseName' fileMode' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,DefaultLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,DefaultLogAppender,The method has 6 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,ResetLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,ResetLogAppender,The method has 6 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,TimeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,TimeBasedRollingLogAppender,The method has 8 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern' pattern' period
Long Parameter List,winsw,SizeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,SizeBasedRollingLogAppender,The method has 8 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern' sizeThreshold' filesToKeep
Long Parameter List,winsw,SizeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,SizeBasedRollingLogAppender,The method has 6 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,RollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,RollingLogAppender,The method has 6 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern
Long Parameter List,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,RollingSizeTimeLogAppender,The method has 9 parameters. Parameters: logDirectory' baseName' outFileDisabled' errFileDisabled' outFilePattern' errFilePattern' sizeThreshold' filePattern' autoRollAtTime
Long Parameter List,winsw.Native,Advapi32,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Native\Advapi32.cs,LookupAccountName,The method has 7 parameters. Parameters: lpSystemName' lpAccountName' psid' cbsid' domainName' cbdomainLength' use
Long Parameter List,winsw.Native,Kernel32,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Native\Kernel32.cs,CreateProcess,The method has 10 parameters. Parameters: lpApplicationName' lpCommandLine' lpProcessAttributes' lpThreadAttributes' bInheritHandles' dwCreationFlags' lpEnvironment' lpCurrentDirectory' lpStartupInfo' lpProcessInformation
Long Parameter List,winsw.Util,ProcessHelper,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Util\ProcessHelper.cs,StartProcessAndCallbackForExit,The method has 9 parameters. Parameters: processToStart' executable' arguments' envVars' workingDirectory' priority' callback' redirectStdin' logHandler
Long Parameter List,WMI,Win32Services,C:\repos\kohsuke_winsw\src\Core\WinSWCore\WmiSchema.cs,Create,The method has 10 parameters. Parameters: name' displayName' pathName' serviceType' errorControl' startMode' desktopInteract' startName' startPassword' serviceDependencies
Long Parameter List,WMI,Win32Services,C:\repos\kohsuke_winsw\src\Core\WinSWCore\WmiSchema.cs,Create,The method has 8 parameters. Parameters: name' displayName' pathName' serviceType' errorControl' startMode' desktopInteract' serviceDependencies
Long Statement,winsw,SimpleLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,log,The length of the statement  "            if (!OutFileDisabled) new Thread(delegate() { CopyStream(outputStream' new FileStream(OutputLogFileName' FileMode)); }).Start(); " is 128.
Long Statement,winsw,SimpleLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,log,The length of the statement  "            if (!ErrFileDisabled) new Thread(delegate() { CopyStream(errorStream' new FileStream(ErrorLogFileName' FileMode)); }).Start(); " is 126.
Long Statement,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The length of the statement  "            // lock required as the timer thread and the thread that will write to the stream could try and access the file stream at the same time " is 135.
Long Statement,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The length of the statement  "            // We auto roll at time is configured then we need to create a timer and wait until time is elasped and roll the file over " is 122.
Long Statement,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The length of the statement  "                            var nextFileName =  Path.Combine(baseDirectory' string.Format("{0}.{1}.#{2:D4}{3}"' baseFileName' DateTime.UtcNow.ToString(FilePattern)' nextFileNumber' ext)); " is 159.
Long Statement,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,GetNextFileNumber,The length of the statement  "            var files = Directory.GetFiles(baseDirectory' String.Format("{0}.{1}.#*{2}"' baseFileName' DateTime.UtcNow.ToString(FilePattern)' ext)); " is 136.
Long Statement,DynamicProxy,ProxyFactory,C:\repos\kohsuke_winsw\src\Core\WinSWCore\DynamicProxy.cs,GenerateMethod,The length of the statement  "            //    PropertyBuilder pb = typeBuilder.DefineProperty(p.Name' p.Attributes' p.PropertyType' new Type[] { p.PropertyType }); " is 123.
Long Statement,winsw.Extensions,WinSWExtensionManager,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Extensions\WinSWExtensionManager.cs,LoadExtension,The length of the statement  "            XmlElement configNode =(extensionsConfig != null) ? extensionsConfig.SelectSingleNode("extension[@id='"+id+"'][1]") as XmlElement : null; " is 137.
Long Statement,winsw.Extensions,WinSWExtensionManager,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Extensions\WinSWExtensionManager.cs,CreateExtensionInstance,The length of the statement  "                throw new ExtensionException(id' "The loaded class is not a WinSW extension: " + className + ". Type is " + created.GetType()); " is 127.
Long Statement,winsw.Native,ServiceManager,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Native\Advapi32.cs,Open,The length of the statement  "                throw new Exception(String.Format("Error opening service for modifying. Error returned was: 0x{0:X}"' Marshal.GetLastWin32Error())); " is 132.
Long Statement,winsw.Native,Service,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Native\Advapi32.cs,SetDelayedAutoStart,The length of the statement  "            if (!Advapi32.ChangeServiceConfig2(Handle' SERVICE_CONFIG_INFOLEVEL.SERVICE_CONFIG_DELAYED_AUTO_START_INFO' ref settings)) " is 122.
Long Statement,winsw.Util,ProcessHelper,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Util\ProcessHelper.cs,StartProcessAndCallbackForExit,The length of the statement  "                    // bugged (lower cases all variable names due to StringDictionary being used' see http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=326163) " is 169.
Magic Number,winsw,Download,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Download.cs,CopyStream,The following statement contains a magic number: byte[] buf = new byte[8192];
Magic Number,winsw,LogHandler,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStream,The following statement contains a magic number: byte[] buf = new byte[1024];
Magic Number,winsw,TimeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithDateRotation,The following statement contains a magic number: byte[] buf = new byte[1024];
Magic Number,winsw,SizeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The following statement contains a magic number: byte[] buf = new byte[1024];
Magic Number,winsw,SizeBasedRollingLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The following statement contains a magic number: while (true)              {                  int len = data.Read(buf' 0' buf.Length);                  if (len == 0) break;    // EOF                  if (sz + len < SizeTheshold)                  {// typical case. write the whole thing into the current file                      w.Write(buf' 0' len);                      sz += len;                  }                  else                  {                      // rotate at the line boundary                      int s = 0;                      for (int i = 0; i < len; i++)                      {                          if (buf[i] != 0x0A) continue;                          if (sz + i < SizeTheshold) continue;                            // at the line boundary and exceeded the rotation unit.                          // time to rotate.                          w.Write(buf' s' i + 1);                          w.Close();                          s = i + 1;                            try                          {                              for (int j = FilesToKeep; j >= 1; j--)                              {                                  string dst = BaseLogFileName + "." + (j - 1) + ext;                                  string src = BaseLogFileName + "." + (j - 2) + ext;                                  if (File.Exists(dst))                                      File.Delete(dst);                                  if (File.Exists(src))                                      File.Move(src' dst);                              }                              File.Move(BaseLogFileName + ext' BaseLogFileName + ".0" + ext);                          }                          catch (IOException e)                          {                              EventLogger.LogEvent("Failed to rotate log: " + e.Message);                          }                            // even if the log rotation fails' create a new one' or else                          // we'll infinitely try to rotate.                          w = new FileStream(BaseLogFileName + ext' FileMode.Create);                          sz = new FileInfo(BaseLogFileName + ext).Length;                      }                  }                    w.Flush();              }
Magic Number,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,CopyStreamWithRotation,The following statement contains a magic number: var buf = new byte[1024];
Magic Number,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,GetNextFileNumber,The following statement contains a magic number: if (files.Length == 0)              {                  nextFileNumber = 1;              }              else              {                  foreach (var f in files)                  {                      try                      {                          var filenameOnly = Path.GetFileNameWithoutExtension(f);                          var lastNumberAsString = filenameOnly.Substring(filenameOnly.Length - 4' 4);                          int lastNumber = 0;                          if (int.TryParse(lastNumberAsString' out lastNumber))                          {                              if (lastNumber > nextFileNumber)                                  nextFileNumber = lastNumber;                          }                          else                              throw new IOException(string.Format("File {0} does not follow the pattern provided"'f));                      }                      catch (Exception e)                      {                          throw new IOException(string.Format("Failed to process file {0} due to error {1}"'f' e.Message)' e);                      }                  }                  if (nextFileNumber == 0) throw new IOException("Cannot roll the file because matching pattern not found");                  nextFileNumber++;              }
Magic Number,winsw,RollingSizeTimeLogAppender,C:\repos\kohsuke_winsw\src\Core\WinSWCore\LogAppenders.cs,GetNextFileNumber,The following statement contains a magic number: if (files.Length == 0)              {                  nextFileNumber = 1;              }              else              {                  foreach (var f in files)                  {                      try                      {                          var filenameOnly = Path.GetFileNameWithoutExtension(f);                          var lastNumberAsString = filenameOnly.Substring(filenameOnly.Length - 4' 4);                          int lastNumber = 0;                          if (int.TryParse(lastNumberAsString' out lastNumber))                          {                              if (lastNumber > nextFileNumber)                                  nextFileNumber = lastNumber;                          }                          else                              throw new IOException(string.Format("File {0} does not follow the pattern provided"'f));                      }                      catch (Exception e)                      {                          throw new IOException(string.Format("Failed to process file {0} due to error {1}"'f' e.Message)' e);                      }                  }                  if (nextFileNumber == 0) throw new IOException("Cannot roll the file because matching pattern not found");                  nextFileNumber++;              }
Magic Number,winsw,PeriodicRollingCalendar,C:\repos\kohsuke_winsw\src\Core\WinSWCore\PeriodicRollingCalendar.cs,determinePeriodicityType,The following statement contains a magic number: DateTime epoch = new DateTime(1970' 1' 1);
Magic Number,winsw,ServiceDescriptor,C:\repos\kohsuke_winsw\src\Core\WinSWCore\ServiceDescriptor.cs,ServiceDescriptor,The following statement contains a magic number: if (baseName.EndsWith(".vshost")) baseName = baseName.Substring(0' baseName.Length - 7);
Magic Number,winsw.Native,LogonAsAService,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Native\Advapi32.cs,AddLogonAsAServiceRight,The following statement contains a magic number: if (osInfo.Version.Major >= 5 && osInfo.Version.Minor >= 1)              {                  var newuser = GetLocalAccountIfLocalAccount(username);                  //Trace.WriteLine("Username for Logon as A Service: " + newuser);                  long rightexitcode = SetRight(newuser' PrivlegeRights.SeServiceLogonRight.ToString());                  if (rightexitcode != 0)                  {                      Console.WriteLine("Failed to set logon as a service right");                      Environment.Exit(1);                  }              }              else              {                  Console.WriteLine("Cannot set Logon as a Service right.  Unsupported operating system detected");              }
Magic Number,WMI,InstanceHandler,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Wmi.cs,Invoke,The following statement contains a magic number: if (method.Name.StartsWith("set_"))                  {                      _mo[method.Name.Substring(4)] = args[0];                      return null;                  }
Magic Number,WMI,InstanceHandler,C:\repos\kohsuke_winsw\src\Core\WinSWCore\Wmi.cs,Invoke,The following statement contains a magic number: if (method.Name.StartsWith("get_"))                  {                      return _mo[method.Name.Substring(4)];                  }
