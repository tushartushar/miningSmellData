Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ForecastIO,ForecastIORequest,C:\repos\f0xy_forecast.io-csharp\forecast.io.40\Entities\ForecastIORequest.cs,ForecastIORequest,The method has 7 parameters. Parameters: apiKey' latF' longF' unit' lang' extend' exclude
Long Parameter List,ForecastIO,ForecastIORequest,C:\repos\f0xy_forecast.io-csharp\forecast.io.40\Entities\ForecastIORequest.cs,ForecastIORequest,The method has 8 parameters. Parameters: apiKey' latF' longF' time' unit' lang' extend' exclude
Magic Number,ForecastIO,ForecastIORequest,C:\repos\f0xy_forecast.io-csharp\forecast.io.40\Entities\ForecastIORequest.cs,Get,The following statement contains a magic number: try              {                  var uri = (_time == null)                              ? string.Format(CurrentForecastUrl' _apiKey' _latitude' _longitude' _unit' _lang' _extend' _exclude)                              : string.Format(PeriodForecastUrl' _apiKey' _latitude' _longitude' _time' _unit' _lang' _extend' _exclude);                      var request = (HttpWebRequest)WebRequest.Create(uri);                  request.Method = "GET";                  request.Headers.Add("Content-Encoding"' "gzip");                  request.AutomaticDecompression = DecompressionMethods.GZip;                  request.ContentType = "application/json";                    var response = (HttpWebResponse)request.GetResponse();                  ForecastIOResponse result = null;                    using (Stream responseStream = response.GetResponseStream())                  {                      var reader = new StreamReader(responseStream);                      var jsonOut = reader.ReadToEnd();                      reader.Close();                      result = JsonConvert.DeserializeObject<ForecastIOResponse>(jsonOut);                  }                    // Set response values.                  _apiResponseTime = response.Headers["X-Response-Time"];                  _apiCallsMade = response.Headers["X-Forecast-API-Calls"];                    return result;              }              catch (Exception ex)              {                  StringBuilder sb = new StringBuilder(500);                  sb.AppendLine("Error while requesting weather from source!");                    WebException wex = ex as WebException;                  if (wex != null)                  {                      HttpWebResponse httpResponse = wex.Response as HttpWebResponse;                      if (httpResponse != null)                      {                          int statusCode = (int)httpResponse.StatusCode;                          string statusDesc = httpResponse.StatusDescription;                            sb.AppendLine(string.Format("Http Status Code: {0}"' statusCode));                          sb.AppendLine(string.Format("Http Status Desc: {0}"' statusDesc));                            if (httpResponse.Headers != null)                          {                              sb.AppendLine("All response header values:");                              foreach (var key in httpResponse.Headers.AllKeys)                              {                                  string value = httpResponse.Headers[key];                                  sb.AppendLine(string.Format("{0}: {1}"' key' value));                              }                          }                          else                          {                              sb.AppendLine("Unable to get response headers!");                          }                      }                  }                  throw new ForecastIOException(sb.ToString()' ex);              }
