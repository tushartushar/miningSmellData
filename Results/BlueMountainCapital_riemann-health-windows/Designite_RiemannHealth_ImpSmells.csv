Implementation smell,Namespace,Class,File,Method,Description
Magic Number,RiemannHealth,DotNetGCTime,C:\repos\BlueMountainCapital_riemann-health-windows\Health.cs,TryGetValue,The following statement contains a magic number: value = gcTime / 100;
Magic Number,RiemannHealth,Program,C:\repos\BlueMountainCapital_riemann-health-windows\Program.cs,Main,The following statement contains a magic number: ushort ttl = 5;
Magic Number,RiemannHealth,Program,C:\repos\BlueMountainCapital_riemann-health-windows\Program.cs,Main,The following statement contains a magic number: switch (args.Length) {  				case 0:  					var appSettings = ConfigurationManager.AppSettings;  					hostname = appSettings["RiemannHost"];  					port = UInt16.Parse(appSettings["RiemannPort"]);  					interval = (float)UInt16.Parse(appSettings["Interval"]);  					ttl = UInt16.Parse(appSettings["TTL"]);  					includeGCStats = Boolean.Parse(appSettings["IncludeGCstats"]);  					break;  				case 1:  					hostname = args[0];  					port = 5555;  					includeGCStats = true;  					break;  				case 2:  					hostname = args[0];  					if (!ushort.TryParse(args[1]' out port)) {  						Usage();  						Environment.Exit(-1);  					}  					includeGCStats = true;  					break;  				default:  					Usage();  					Environment.Exit(-1);  					return;  			}
Magic Number,RiemannHealth,Program,C:\repos\BlueMountainCapital_riemann-health-windows\Program.cs,Main,The following statement contains a magic number: switch (args.Length) {  				case 0:  					var appSettings = ConfigurationManager.AppSettings;  					hostname = appSettings["RiemannHost"];  					port = UInt16.Parse(appSettings["RiemannPort"]);  					interval = (float)UInt16.Parse(appSettings["Interval"]);  					ttl = UInt16.Parse(appSettings["TTL"]);  					includeGCStats = Boolean.Parse(appSettings["IncludeGCstats"]);  					break;  				case 1:  					hostname = args[0];  					port = 5555;  					includeGCStats = true;  					break;  				case 2:  					hostname = args[0];  					if (!ushort.TryParse(args[1]' out port)) {  						Usage();  						Environment.Exit(-1);  					}  					includeGCStats = true;  					break;  				default:  					Usage();  					Environment.Exit(-1);  					return;  			}
