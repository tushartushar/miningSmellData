Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,Cyclomatic complexity of the method is 12
Long Parameter List,Orchard.Roles.Drivers,UserRolesPartDriver,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Drivers\UserRolesPartDriver.cs,UserRolesPartDriver,The method has 5 parameters. Parameters: userRolesRepository' roleService' notifier' authenticationService' authorizationService
Long Parameter List,Orchard.Roles.Services,RoleService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RoleService.cs,RoleService,The method has 6 parameters. Parameters: roleRepository' permissionRepository' userRolesRepository' permissionProviders' cacheManager' signals
Long Identifier,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,RolesBasedAuthorizationService,The length of the parameter authorizationServiceEventHandler is 32.
Long Identifier,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,,The length of the parameter _authorizationServiceEventHandler is 33.
Long Statement,Orchard.Roles.ImportExport,RolesExportEventHandler,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\ImportExport\RolesExportEventHandler.cs,Exported,The length of the statement  "                                      new XAttribute("Permissions"' string.Join("'"' role.RolesPermissions.Select(rolePermission => rolePermission.Permission.Name))))); " is 130.
Long Statement,Orchard.Roles.ImportExport,RolesRecipeHandler,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\ImportExport\RolesRecipeHandler.cs,ExecuteRecipeStep,The length of the statement  "                var permissions = roleElement.Attribute("Permissions").Value.Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries); " is 121.
Long Statement,Orchard.Roles.ImportExport,RolesRecipeHandler,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\ImportExport\RolesRecipeHandler.cs,ExecuteRecipeStep,The length of the statement  "                _roleService.UpdateRole(role.Id' role.Name' permissionsValid.Union(role.RolesPermissions.Select(p => p.Permission.Name))); " is 122.
Long Statement,Orchard.Roles.Drivers,UserRolesPartDriver,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Drivers\UserRolesPartDriver.cs,Editor,The length of the statement  "            if (!_authorizationService.TryCheckAccess(StandardPermissions.SiteOwner' _authenticationService.GetAuthenticatedUser()' userRolesPart)) " is 135.
Long Statement,Orchard.Roles.Drivers,UserRolesPartDriver,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Drivers\UserRolesPartDriver.cs,Editor,The length of the statement  "            if (!_authorizationService.TryCheckAccess(StandardPermissions.SiteOwner' _authenticationService.GetAuthenticatedUser()' userRolesPart)) " is 135.
Long Statement,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The length of the statement  "                           String.Equals(context.User.UserName' _workContextAccessor.GetContext().CurrentSite.SuperUser' StringComparison.Ordinal)) { " is 122.
Long Statement,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The length of the statement  "                            if (grantingNames.Any(grantingName => String.Equals(possessedName' grantingName' StringComparison.OrdinalIgnoreCase))) { " is 120.
Long Statement,Orchard.Roles.Services,RoleService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RoleService.cs,GetFeatureName,The length of the statement  "            throw new ArgumentException(T("Permission {0} was not found in any of the installed modules."' permissionName).ToString()); " is 123.
Long Statement,Orchard.Roles.Services,RoleService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RoleService.cs,GetPermissionDescription,The length of the statement  "            throw new ArgumentException(T("Permission {0} was not found in any of the installed modules."' permissionName).ToString()); " is 123.
Magic Number,Orchard.Roles,RolesDataMigration,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Migrations.cs,Create,The following statement contains a magic number: return 2;
Magic Number,Orchard.Roles,RolesDataMigration,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Migrations.cs,UpdateFrom1,The following statement contains a magic number: return 2;
Magic Number,Orchard.Roles.Services,RolesBasedAuthorizationService,C:\repos\zhongzf_Orchard.Platform\src\Orchard.Web\Modules\Orchard.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The following statement contains a magic number: for (var adjustmentLimiter = 0; adjustmentLimiter != 3; ++adjustmentLimiter) {                  if (!context.Granted && context.User != null) {                      if (!String.IsNullOrEmpty(_workContextAccessor.GetContext().CurrentSite.SuperUser) &&                             String.Equals(context.User.UserName' _workContextAccessor.GetContext().CurrentSite.SuperUser' StringComparison.Ordinal)) {                          context.Granted = true;                      }                  }                    if (!context.Granted) {                        // determine which set of permissions would satisfy the access check                      var grantingNames = PermissionNames(context.Permission' Enumerable.Empty<string>()).Distinct().ToArray();                        // determine what set of roles should be examined by the access check                      IEnumerable<string> rolesToExamine;                      if (context.User == null) {                          rolesToExamine = AnonymousRole;                      }                      else if (context.User.Has<IUserRoles>()) {                          // the current user is not null' so get his roles and add "Authenticated" to it                          rolesToExamine = context.User.As<IUserRoles>().Roles;                            // when it is a simulated anonymous user in the admin                          if (!rolesToExamine.Contains(AnonymousRole[0])) {                              rolesToExamine = rolesToExamine.Concat(AuthenticatedRole);                             }                      }                      else {                          // the user is not null and has no specific role' then it's just "Authenticated"                          rolesToExamine = AuthenticatedRole;                      }                        foreach (var role in rolesToExamine) {                          foreach (var permissionName in _roleService.GetPermissionsForRoleByName(role)) {                              string possessedName = permissionName;                              if (grantingNames.Any(grantingName => String.Equals(possessedName' grantingName' StringComparison.OrdinalIgnoreCase))) {                                  context.Granted = true;                              }                                if (context.Granted)                                  break;                          }                            if (context.Granted)                              break;                      }                  }                    context.Adjusted = false;                  _authorizationServiceEventHandler.Adjust(context);                  if (!context.Adjusted)                      break;              }
