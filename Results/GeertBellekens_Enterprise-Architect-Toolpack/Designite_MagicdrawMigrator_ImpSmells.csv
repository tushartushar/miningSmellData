Implementation smell,Namespace,Class,File,Method,Description
Long Method,MagicdrawMigrator,AddCrossMDzipRelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AddCrossMDzipRelationsCorrector.cs,correct,The method has 127 lines of code.
Long Method,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,correct,The method has 112 lines of code.
Long Method,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The method has 192 lines of code.
Long Method,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,correct,The method has 134 lines of code.
Long Method,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The method has 104 lines of code.
Long Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllGuards,The method has 101 lines of code.
Long Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,The method has 140 lines of code.
Complex Method,MagicdrawMigrator,AddCrossMDzipRelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AddCrossMDzipRelationsCorrector.cs,correct,Cyclomatic complexity of the method is 10
Complex Method,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,correct,Cyclomatic complexity of the method is 9
Complex Method,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,fixNavigability,Cyclomatic complexity of the method is 9
Complex Method,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctElementRelations,Cyclomatic complexity of the method is 8
Complex Method,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,Cyclomatic complexity of the method is 10
Complex Method,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,correct,Cyclomatic complexity of the method is 9
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllMDElementRelations,Cyclomatic complexity of the method is 9
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllFragments,Cyclomatic complexity of the method is 8
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAssociations,Cyclomatic complexity of the method is 13
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllLifeLines,Cyclomatic complexity of the method is 8
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllConstraints,Cyclomatic complexity of the method is 10
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllGuards,Cyclomatic complexity of the method is 10
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,Cyclomatic complexity of the method is 18
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllObjects,Cyclomatic complexity of the method is 9
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllTimeEvents,Cyclomatic complexity of the method is 8
Complex Method,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAssociationTables,Cyclomatic complexity of the method is 8
Long Parameter List,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,exists,The method has 5 parameters. Parameters: md_guid' source' target' type' stereotype
Long Parameter List,MagicdrawMigrator,MDMessage,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\UML\MDMessage.cs,MDMessage,The method has 5 parameters. Parameters: messageID' sourceID' targetID' messageName' isAsynchronous
Long Identifier,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,findCorrespondingAssociation,The length of the parameter sqlGetCorrespondingAssociation is 30.
Long Identifier,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,GetCorrespondingAssociation,The length of the parameter sqlGetCorrespondingAssociation is 30.
Long Identifier,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,fixActivityPartitions,The length of the parameter sqlFixActivityPartitionsBottom is 30.
Long Identifier,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAttributeAssociationRoles,The length of the parameter foundAttributeAssociationRoles is 30.
Long Identifier,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,,The length of the parameter browseDefaultPropertiesFileButton is 33.
Long Statement,MagicdrawMigrator,AddCrossMDzipRelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AddCrossMDzipRelationsCorrector.cs,correct,The length of the statement  "						newRelation = this.model.factory.createNewElement(source'relation.name'relation.relationType) as TSF_EA.ConnectorWrapper; " is 121.
Long Statement,MagicdrawMigrator,AddCrossMDzipRelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AddCrossMDzipRelationsCorrector.cs,correct,The length of the statement  "				TSF_EA.Association newCrossAssociation = this.model.getRelationsByQuery(sqlGetExistingRelations).FirstOrDefault() as TSF_EA.Association; " is 136.
Long Statement,MagicdrawMigrator,ASMAAssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\ASMAAssociationCorrector.cs,correct,The length of the statement  "					TSF_EA.Association newAsmaAssociation = this.model.getRelationsByQuery(sqlGetExistingRelations).FirstOrDefault() as TSF_EA.Association; " is 135.
Long Statement,MagicdrawMigrator,ConvertPropertiesToAttributes,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\ConvertPropertiesToAttributes.cs,correct,The length of the statement  "			List<TSF_EA.ElementWrapper> properties = this.model.getElementWrappersByQuery(@"select o1.[Object_ID] from [t_object] o1 where o1.[Object_Type] = 'Part'"); " is 155.
Long Statement,MagicdrawMigrator,ConvertPropertiesToAttributes,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\ConvertPropertiesToAttributes.cs,correct,The length of the statement  "					TSF_EA.Attribute newAttribute = this.model.factory.createNewElement<TSF_EA.Attribute>(property.owner'property.classifier.name); " is 127.
Long Statement,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,findCorrespondingAssociation,The length of the statement  "			TSF_EA.Association correspondingAssociation = this.model.getRelationsByQuery(sqlGetExistingRelations).FirstOrDefault() as TSF_EA.Association; " is 141.
Long Statement,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,findCorrespondingAssociation,The length of the statement  "					correspondingAssociation = GetCorrespondingAssociation(sourceElement' targetElement' mdAssociation.source.name' mdAssociation.target.name); " is 139.
Long Statement,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,findCorrespondingAssociation,The length of the statement  "					correspondingAssociation = GetCorrespondingAssociation(targetElement' sourceElement' mdAssociation.target.name' mdAssociation.source.name); " is 139.
Long Statement,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,GetCorrespondingAssociation,The length of the statement  "					var correspondingAssociation = this.model.getRelationsByQuery(sqlGetCorrespondingAssociation).FirstOrDefault() as TSF_EA.Association; " is 133.
Long Statement,MagicdrawMigrator,MigrateDependencyMatrix,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\MigrateDependencyMatrix.cs,correct,The length of the statement  "						var sourceAttribute = (TSF_EA.Attribute)sourceElement.attributes.FirstOrDefault( x => x.name == mdDependency.sourceName); " is 121.
Long Statement,MagicdrawMigrator,MigrateDependencyMatrix,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\MigrateDependencyMatrix.cs,correct,The length of the statement  "						var targetAttribute = (TSF_EA.Attribute)targetElement.attributes.FirstOrDefault( x => x.name == mdDependency.targetName); " is 121.
Long Statement,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctAssociations,The length of the statement  "				if(!exists(mdAssociation.Key'mdAssociation.Value.source.endClassID' mdAssociation.Value.target.endClassID'"Association"'mdAssociation.Value.stereotype)) " is 152.
Long Statement,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctAssociations,The length of the statement  "						TSF_EA.Association newAssociation = this.model.factory.createNewElement<TSF_EA.Association>(sourceElement'string.Empty);	 " is 120.
Long Statement,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctElementRelations,The length of the statement  "				if(!exists(mdRelation.Key' mdRelation.Value.sourceMDGUID' mdRelation.Value.targetMDGUID' mdRelation.Value.relationType' mdRelation.Value.stereotype)) " is 149.
Long Statement,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctElementRelations,The length of the statement  "						var newRelation = this.model.factory.createNewElement(sourceElement' mdRelation.Value.name' mdRelation.Value.relationType) as TSF_EA.ConnectorWrapper; " is 150.
Long Statement,MagicdrawMigrator,RelationsCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\RelationsCorrector.cs,correctGeneralizations,The length of the statement  "						var newGeneralization = this.model.factory.createNewElement(sourceElement' name' relationType) as TSF_EA.Generalization; " is 120.
Long Statement,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addOrUpdateFragments,The length of the statement  "					eaFragment = this.model.factory.createNewElement<UML.Interactions.BasicInteractions.InteractionFragment>(owner'string.Empty) as TSF_EA.ElementWrapper; " is 150.
Long Statement,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addOrUpdateFragments,The length of the statement  "						global::EA.Partition partition = eaFragment.WrappedElement.Partitions.AddNew(guard'mdFragment.fragmentType) as global::EA.Partition; " is 132.
Long Statement,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addMessages,The length of the statement  "						eaMessage.messageSort = mdMessage.isAsynchronous ? UML.Interactions.BasicInteractions.MessageSort.asynchSignal : UML.Interactions.BasicInteractions.MessageSort.synchCall; " is 170.
Long Statement,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addMessages,The length of the statement  "					'string.Format("{0} Could not create message '{1}' between lifelineID '{2}' and lifeLineID '{3}' because at least one of the lifelines was not found" " is 149.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,CorrectStereotypesAndTaggedValues,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\CorrectStereotypesAndTaggedValues.cs,synchronizeStereotypes,The length of the statement  "				model.wrappedModel.CustomCommand("Repository"' "SynchProfile"' "Profile=" + profile + ";Stereotype="+ stereotype + ";"); " is 120.
Long Statement,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,correct,The length of the statement  "							string pdata5 = "SX=0;SY=0;EX=0;EY=0;$LLB=;LLT=;LMT=CX=250:CY=13:OX=0:OY=0:HDN=0:BLD=0:ITA=0:UND=0:CLR=-1:ALN=1:DIR=0:ROT=0;LMB=;LRT=;LRB=;IRHS=;ILHS=;"; " is 153.
Long Statement,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,addElementToDiagram,The length of the statement  "					//for each of the elements on the diagram create the diagramobject with the appropriate link to the elemment and geometry.								 " is 122.
Long Statement,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,addElementToDiagram,The length of the statement  "					var newDiagramObject = eaDiagram.addToDiagram(eaElement' mdDiagramObject.x' mdDiagramObject.y' mdDiagramObject.bottom' mdDiagramObject.right); " is 142.
Long Statement,MagicdrawMigrator,FixCallBehaviorActionCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\FixCallBehaviorActionCorrector.cs,correct,The length of the statement  "									and x.[Description] like '@PROP=@NAME=kind@ENDNAME;@TYPE=ActionKind@ENDTYPE;@VALU=CallBehavior@ENDVALU;@PRMT=@ENDPRMT;@ENDPROP;' " is 128.
Long Statement,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The length of the statement  "			foreach (TSF_EA.Package dataPackage in mdPackage.nestedPackages.Where( x => ! x.Equals(newData))) // Doorloopt de Magicdraw Import " is 130.
Long Statement,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The length of the statement  "							if(workPackage.name == "AT" || workPackage.name == "BE" || workPackage.name == "CH" || workPackage.name == "DE" || workPackage.name == "DK" || workPackage.name == "NL" || workPackage.name == "NO" || workPackage.name == "SE" || workPackage.name == "SI") " is 252.
Long Statement,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The length of the statement  "									if(workPackage.name == "AT" || workPackage.name == "BE" || workPackage.name == "CH" || workPackage.name == "DE" || workPackage.name == "DK" || workPackage.name == "NL" || workPackage.name == "NO" || workPackage.name == "SE" || workPackage.name == "SI") " is 252.
Long Statement,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,moveContent,The length of the statement  "			foreach (TSF_EA.Element e in subPackage.ownedElements.Where(x => !(x is UML.Classes.Kernel.Package))) // de elementen onder 'Data' package " is 138.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,readMDSourceFiles,The length of the statement  "			//loop all created subdirectories and read com.nomagic.magicdraw.uml_model.model and com.nomagic.magicdraw.uml_model.shared_model files as xml files " is 148.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllMDElementRelations,The length of the statement  "							XmlNode stereotypeNode = sourceFile.SelectSingleNode("//*[@base_Dependency='"+newRelation.md_guid+"' or @base_Realization='"+newRelation.md_guid+"']"' nsMgr); " is 158.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getParticipatesAssociations,The length of the statement  "				nsMgr.AddNamespace("UMM_2_0_Foundation_Module___Long"'"http://www.magicdraw.com/schemas/UMM_2_0_Foundation_Module___Long.xmi"); " is 127.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAssociations,The length of the statement  "				// then get the association itself by looking at the nodes <packagedElement> with attribute  xmi:type='uml:Association' and xmi:id= the id of the association " is 157.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllMessages,The length of the statement  "				 	bool asynchronousMessage = messageSortAttribute != null && "asynchSignal".Equals(messageSortAttribute.Value' StringComparison.InvariantCulture); " is 144.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getLifeLineID,The length of the statement  "			XmlAttribute occurenceIDAttribute = source ? messageNode.Attributes["sendEvent"] : messageNode.Attributes["receiveEvent"]; " is 122.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,The length of the statement  "															var fragmentDiagramObject = currentDiagram.diagramObjects.FirstOrDefault (x => x.mdID.Equals(fragmentID'StringComparison.CurrentCultureIgnoreCase)); " is 148.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllObjects,The length of the statement  "						XmlNode stateNode = sourceFile.SelectSingleNode("//subvertex[@xmi:type='uml:State' and @xmi:id='"+ inState +"']"' nsMgr); " is 121.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAttributeAssociationRoles,The length of the statement  "				foreach (XmlNode attributeRoleNode in sourceFile.SelectNodes("//ownedAttribute[@xmi:type='uml:Property' and @association]"' nsMgr)) " is 131.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAttributes,The length of the statement  "					foreach (XmlNode attributeNode in elementNode.SelectNodes(".//ownedAttribute[@xmi:type='uml:Property' and not(@association) and not(@aggregation)]"' nsMgr)) " is 156.
Long Statement,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAssociationTables,The length of the statement  "						    		    && ownedElementNode.Attributes["name"].Value.Equals(constraintNode.ParentNode.Attributes["name"].Value'StringComparison.InvariantCultureIgnoreCase)) //name corresponds to the diagram " is 182.
Long Statement,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,enableDisable,The length of the statement  "			this.startCorrectionButton.Enabled = ! string.IsNullOrEmpty(mdzipPathTextBox.Text) && Directory.Exists(mdzipPathTextBox.Text); " is 126.
Long Statement,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The length of the statement  "			this.startCorrectionButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 160.
Long Statement,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The length of the statement  "			this.browseDefaultPropertiesFileButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 169.
Long Statement,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The length of the statement  "			this.mdzipPathTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The length of the statement  "			this.browseMDZipFolder.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Complex Conditional,MagicdrawMigrator,AssociationCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\AssociationCorrector.cs,correct,The conditional expression  "!mdAssociation.source.lowerBound.Equals(eaAssociation.sourceEnd.lower.ToString())  					    || !mdAssociation.source.upperBound.Equals(eaAssociation.sourceEnd.upper.ToString())  					    || !mdAssociation.target.lowerBound.Equals(eaAssociation.targetEnd.lower.ToString())  					    || !mdAssociation.target.upperBound.Equals(eaAssociation.targetEnd.upper.ToString())"  is complex.
Complex Conditional,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The conditional expression  "workPackage.name == "AT" || workPackage.name == "BE" || workPackage.name == "CH" || workPackage.name == "DE" || workPackage.name == "DK" || workPackage.name == "NL" || workPackage.name == "NO" || workPackage.name == "SE" || workPackage.name == "SI""  is complex.
Complex Conditional,MagicdrawMigrator,SetStructureCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SetStructureCorrector.cs,correct,The conditional expression  "workPackage.name == "AT" || workPackage.name == "BE" || workPackage.name == "CH" || workPackage.name == "DE" || workPackage.name == "DK" || workPackage.name == "NL" || workPackage.name == "NO" || workPackage.name == "SE" || workPackage.name == "SI""  is complex.
Complex Conditional,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDirectMDElementRelations,The conditional expression  "! string.IsNullOrEmpty(relationID)  						    && ! string.IsNullOrEmpty(sourceID)  						    && ! string.IsNullOrEmpty(targetID)  						    && ! string.IsNullOrEmpty(relationType)  						    && ! foundDirectMDElementRelations.ContainsKey(relationID)"  is complex.
Complex Conditional,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllMDElementRelations,The conditional expression  "! string.IsNullOrEmpty(relationID)  						    && ! string.IsNullOrEmpty(sourceID)  						    && ! string.IsNullOrEmpty(targetID)  						    && ! string.IsNullOrEmpty(relationType)  						    && ! foundElementRelations.ContainsKey(relationID)"  is complex.
Complex Conditional,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllObjects,The conditional expression  "!string.IsNullOrEmpty(objectId)   					    && !string.IsNullOrEmpty(inState)   					    && !string.IsNullOrEmpty(objectState)  					    && !foundObjects.ContainsKey(objectId)"  is complex.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllConstraints,The method has an empty catch block.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllGuards,The method has an empty catch block.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,The method has an empty catch block.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllObjects,The method has an empty catch block.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllPartitions,The method has an empty catch block.
Empty Catch Block,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllAssociationTables,The method has an empty catch block.
Magic Number,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addOrUpdateFragments,The following statement contains a magic number: foreach (var mdFragment in magicDrawReader.allFragments)   			{  				//check if the fragment already exists  				var eaFragment = this.getElementByMDid(mdFragment.mdID);  				//create new if is doesn't exist yet  				//get its owner  				var owner = this.getElementByMDid(mdFragment.ownerMdID);  				if (eaFragment == null  				    && owner != null)  				{  					//create the fragment under the owner  					eaFragment = this.model.factory.createNewElement<UML.Interactions.BasicInteractions.InteractionFragment>(owner'string.Empty) as TSF_EA.ElementWrapper;  				}  				if (eaFragment != null)  				{  					//set the type  					switch (mdFragment.fragmentType)  					{  						case "alt":  							eaFragment.subType = "0";  							break;  						case "opt":  							eaFragment.subType = "1";  							break;  						case "par":  							eaFragment.subType = "3";  							break;  						case "loop":  							eaFragment.subType = "4";  							break;  					}  					//update the partitions  					foreach (var guard in mdFragment.operandGuards)  					{  						global::EA.Partition partition = eaFragment.WrappedElement.Partitions.AddNew(guard'mdFragment.fragmentType) as global::EA.Partition;  						partition.Size = 100; //default value' later to be corrected in the DiagramLayoutCorrector  						eaFragment.isDirty = true; //make sure it gets saved  					}  					eaFragment.save();  					//add the md_guid tagged value if needed  					if (eaFragment != null) eaFragment.addTaggedValue("md_guid"'mdFragment.mdID);  					//tell the user what we are doing  					EAOutputLogger.log(this.model'this.outputName  					'string.Format("{0} Updating fragment in '{1}'"  					          	'DateTime.Now.ToLongTimeString()  					          	' eaFragment.owner.name)  					 'eaFragment.id  					'LogTypeEnum.log);  					//set the operands  //					string xrefDescription = this.getOperandDescription(mdFragment.operandGuards);  //					if (! string.IsNullOrEmpty(xrefDescription))  //					{  //						string updateXrefSQL = "";  //					}  					  				}  			}
Magic Number,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,correct,The following statement contains a magic number: foreach (var mdDiagramKeyValue in magicDrawReader.allDiagrams)   			{  				//find the corresponding diagram in EA  				var ownerID = magicDrawReader.getDiagramOnwerID(mdDiagramKeyValue.Key);  				var mdDiagram = mdDiagramKeyValue.Value;  				string getCorrespondingdiagramSQL =   				@"select d.Diagram_ID from ((t_diagram d  				inner join t_object o on o.Object_ID = d.ParentID)  				inner join t_objectproperties tv on (tv.Object_ID = o.Object_ID  													and tv.Property = 'md_guid'))  				where tv.Value = '"+ownerID+"'"  				+ " and d.Name = '"+mdDiagram.name.Replace("'"'"''")+ "'"  				+ " and d.Package_ID in ("+packageTreeIDString+")"  				+@" union  				select d.Diagram_ID from (((t_diagram d  				inner join t_package p on d.Package_ID = p.Package_ID)  				inner join t_object o on o.ea_guid = p.ea_guid)  				inner join t_objectproperties tv on (tv.Object_ID = o.Object_ID  													and tv.Property = 'md_guid'))  				where d.ParentID = 0  				and tv.Value = '"+ownerID+"'"  				+ " and d.Name = '"+mdDiagram.name.Replace("'"'"''")+ "'"  				+ " and d.Package_ID in ("+packageTreeIDString+")";  				var eaDiagrams = this.model.getDiagramsByQuery(getCorrespondingdiagramSQL);  				//loop the found diagrams  				foreach (var eaDiagram in eaDiagrams)   				{  					diagramCounter++;  					if (eaDiagram != null  					    && eaDiagram.owner is TSF_EA.ElementWrapper)  					{  						EAOutputLogger.log(this.model'this.outputName  			                   'string.Format("{0} Processing diagram number {1}: '{2}.{3}'"  			                   				'DateTime.Now.ToLongTimeString()  			                   				'diagramCounter  			                   				'eaDiagram.owner.name  			                   				'eaDiagram.name)  						      '((TSF_EA.ElementWrapper)eaDiagram.owner).id  			                  'LogTypeEnum.log);	  					}  					else if (eaDiagram != null)  					{  						EAOutputLogger.log(this.model'this.outputName  			                   'string.Format("{0} Processing diagram number {1}: '{2}'"  			                   				'DateTime.Now.ToLongTimeString()  			                   				'diagramCounter  			                   				'eaDiagram.name)  						      '0  			                  'LogTypeEnum.log);	  					}  					else  					{  						break;  					}  					//loop all diagramObjects in the mdDiagram that are not activity partitions  					foreach (var mdDiagramObject in mdDiagram.diagramObjects.Where(x => ! x.umlType.StartsWith("Swimlane")))  					{  						addElementToDiagram(mdDiagramObject'eaDiagram);  					}  					//save diagram in between?  					//eaDiagram.save();  					//then do all Activity Partitions  					foreach (var mdDiagramObject in mdDiagram.diagramObjects.Where(x => x.umlType.StartsWith("Swimlane")))  					{  						addElementToDiagram(mdDiagramObject'eaDiagram);  					}  					//then do all the messages  					int i = 1;  					//default previous y = -100  					int previousY = -100;  					foreach (var mdMessageLink in mdDiagram.diagramObjects.Where(x => x.umlType == "SeqMessage" ).OrderBy( y => y.y))  					{  						//get the corresponding message  						  						string sqlGetMessage = @"select * from (t_connector c   												inner join t_connectortag tv on (c.Connector_ID = tv.ElementID  																				and tv.Property = 'md_guid'))  												where tv.VALUE = '"+ mdMessageLink.mdID +"'";  						var messages = this.model.getRelationsByQuery(sqlGetMessage);  						  						foreach (TSF_EA.Message message in messages)   						{  							message.sequence = i;  							int y = mdMessageLink.y * -1 ;  							message.y = y;  							message.WrappedConnector.DiagramID = eaDiagram.DiagramID;  							message.save();  							//update pdata5 SY field. This needs to be filled with the 35 + the difference between the current Y and the previous Y  							int SYValue = 35 - (previousY - y);  							//set the previousY  							previousY = y;  							//get pdata5  							string pdata5 = "SX=0;SY=0;EX=0;EY=0;$LLB=;LLT=;LMT=CX=250:CY=13:OX=0:OY=0:HDN=0:BLD=0:ITA=0:UND=0:CLR=-1:ALN=1:DIR=0:ROT=0;LMB=;LRT=;LRB=;IRHS=;ILHS=;";  							//set SY value  							pdata5 = KeyValuePairsHelper.setValueForKey("SY"'SYValue.ToString()'pdata5);  							//update pdata5  							string sqlUpdatePdata5 = "update t_connector set PDATA5 = '"+pdata5+"' where ea_guid = '"+message.uniqueID+"'";  							this.model.executeSQL(sqlUpdatePdata5);  						}  						i++;  					}  					//save the diagram  					eaDiagram.save();  					//set the line styles  					correctLines(eaDiagram);  					}  				//if no diagram found in EA then report it as error  				if (!eaDiagrams.Any())  				{  					EAOutputLogger.log(this.model'this.outputName                     'string.Format("{0} Could not find EA diagram for diagram with ID '{1}'"                                    'DateTime.Now.ToLongTimeString()                                    ' mdDiagramKeyValue.Key )                     '0                    'LogTypeEnum.error);	  				}  			}
Magic Number,MagicdrawMigrator,DiagramLayoutCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\DiagramLayoutCorrector.cs,correct,The following statement contains a magic number: foreach (var mdDiagramKeyValue in magicDrawReader.allDiagrams)   			{  				//find the corresponding diagram in EA  				var ownerID = magicDrawReader.getDiagramOnwerID(mdDiagramKeyValue.Key);  				var mdDiagram = mdDiagramKeyValue.Value;  				string getCorrespondingdiagramSQL =   				@"select d.Diagram_ID from ((t_diagram d  				inner join t_object o on o.Object_ID = d.ParentID)  				inner join t_objectproperties tv on (tv.Object_ID = o.Object_ID  													and tv.Property = 'md_guid'))  				where tv.Value = '"+ownerID+"'"  				+ " and d.Name = '"+mdDiagram.name.Replace("'"'"''")+ "'"  				+ " and d.Package_ID in ("+packageTreeIDString+")"  				+@" union  				select d.Diagram_ID from (((t_diagram d  				inner join t_package p on d.Package_ID = p.Package_ID)  				inner join t_object o on o.ea_guid = p.ea_guid)  				inner join t_objectproperties tv on (tv.Object_ID = o.Object_ID  													and tv.Property = 'md_guid'))  				where d.ParentID = 0  				and tv.Value = '"+ownerID+"'"  				+ " and d.Name = '"+mdDiagram.name.Replace("'"'"''")+ "'"  				+ " and d.Package_ID in ("+packageTreeIDString+")";  				var eaDiagrams = this.model.getDiagramsByQuery(getCorrespondingdiagramSQL);  				//loop the found diagrams  				foreach (var eaDiagram in eaDiagrams)   				{  					diagramCounter++;  					if (eaDiagram != null  					    && eaDiagram.owner is TSF_EA.ElementWrapper)  					{  						EAOutputLogger.log(this.model'this.outputName  			                   'string.Format("{0} Processing diagram number {1}: '{2}.{3}'"  			                   				'DateTime.Now.ToLongTimeString()  			                   				'diagramCounter  			                   				'eaDiagram.owner.name  			                   				'eaDiagram.name)  						      '((TSF_EA.ElementWrapper)eaDiagram.owner).id  			                  'LogTypeEnum.log);	  					}  					else if (eaDiagram != null)  					{  						EAOutputLogger.log(this.model'this.outputName  			                   'string.Format("{0} Processing diagram number {1}: '{2}'"  			                   				'DateTime.Now.ToLongTimeString()  			                   				'diagramCounter  			                   				'eaDiagram.name)  						      '0  			                  'LogTypeEnum.log);	  					}  					else  					{  						break;  					}  					//loop all diagramObjects in the mdDiagram that are not activity partitions  					foreach (var mdDiagramObject in mdDiagram.diagramObjects.Where(x => ! x.umlType.StartsWith("Swimlane")))  					{  						addElementToDiagram(mdDiagramObject'eaDiagram);  					}  					//save diagram in between?  					//eaDiagram.save();  					//then do all Activity Partitions  					foreach (var mdDiagramObject in mdDiagram.diagramObjects.Where(x => x.umlType.StartsWith("Swimlane")))  					{  						addElementToDiagram(mdDiagramObject'eaDiagram);  					}  					//then do all the messages  					int i = 1;  					//default previous y = -100  					int previousY = -100;  					foreach (var mdMessageLink in mdDiagram.diagramObjects.Where(x => x.umlType == "SeqMessage" ).OrderBy( y => y.y))  					{  						//get the corresponding message  						  						string sqlGetMessage = @"select * from (t_connector c   												inner join t_connectortag tv on (c.Connector_ID = tv.ElementID  																				and tv.Property = 'md_guid'))  												where tv.VALUE = '"+ mdMessageLink.mdID +"'";  						var messages = this.model.getRelationsByQuery(sqlGetMessage);  						  						foreach (TSF_EA.Message message in messages)   						{  							message.sequence = i;  							int y = mdMessageLink.y * -1 ;  							message.y = y;  							message.WrappedConnector.DiagramID = eaDiagram.DiagramID;  							message.save();  							//update pdata5 SY field. This needs to be filled with the 35 + the difference between the current Y and the previous Y  							int SYValue = 35 - (previousY - y);  							//set the previousY  							previousY = y;  							//get pdata5  							string pdata5 = "SX=0;SY=0;EX=0;EY=0;$LLB=;LLT=;LMT=CX=250:CY=13:OX=0:OY=0:HDN=0:BLD=0:ITA=0:UND=0:CLR=-1:ALN=1:DIR=0:ROT=0;LMB=;LRT=;LRB=;IRHS=;ILHS=;";  							//set SY value  							pdata5 = KeyValuePairsHelper.setValueForKey("SY"'SYValue.ToString()'pdata5);  							//update pdata5  							string sqlUpdatePdata5 = "update t_connector set PDATA5 = '"+pdata5+"' where ea_guid = '"+message.uniqueID+"'";  							this.model.executeSQL(sqlUpdatePdata5);  						}  						i++;  					}  					//save the diagram  					eaDiagram.save();  					//set the line styles  					correctLines(eaDiagram);  					}  				//if no diagram found in EA then report it as error  				if (!eaDiagrams.Any())  				{  					EAOutputLogger.log(this.model'this.outputName                     'string.Format("{0} Could not find EA diagram for diagram with ID '{1}'"                                    'DateTime.Now.ToLongTimeString()                                    ' mdDiagramKeyValue.Key )                     '0                    'LogTypeEnum.error);	  				}  			}
Magic Number,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDirectMDElementRelations,The following statement contains a magic number: foreach (var sourceFile in this.sourceFiles.Values)  			{  				XmlNamespaceManager nsMgr = new XmlNamespaceManager(sourceFile.NameTable);  				nsMgr.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  				nsMgr.AddNamespace("uml"' "http://www.omg.org/spec/UML/20131001");  				foreach (XmlNode generalNode in sourceFile.SelectNodes("//general"'nsMgr))  				{  					//general node = supplier = target  					//the packaged element above = client = source  					bool isCrossMdZip = this.isForeign(generalNode);  					//get the parent Node id  					XmlNode generalizationNode = generalNode.ParentNode;  					  					if (generalizationNode != null)  					{  						//get the relationType  						XmlAttribute relationTypeAttribute = generalizationNode.Attributes["xmi:type"];  						string relationType = relationTypeAttribute != null ? relationTypeAttribute.Value : string.Empty;  						var relationParts = relationType.Split(':');  						if (relationParts.Count() == 2)  						{  							relationType = relationParts[1];  						}  						//get the relation name  						XmlAttribute relationNameAttribute = generalizationNode.Attributes["name"];  						string relationName = relationNameAttribute != null ? relationNameAttribute.Value : string.Empty;  						string relationID = getID(generalizationNode);  						//get the client node  						XmlNode sourceNode = generalizationNode.ParentNode;  						//check if crossMDZip  						if (sourceNode != null && ! isCrossMdZip) isCrossMdZip = this.isForeign(sourceNode);  						//get the ID's  						string sourceID = getID(sourceNode);  						string targetID = getID(generalNode);  						//add the relation  						if (! string.IsNullOrEmpty(relationID)  						    && ! string.IsNullOrEmpty(sourceID)  						    && ! string.IsNullOrEmpty(targetID)  						    && ! string.IsNullOrEmpty(relationType)  						    && ! foundDirectMDElementRelations.ContainsKey(relationID))  						{  							var newRelation = new MDElementRelation(sourceID' targetID'relationType'relationID);  							newRelation.name = relationName;  							newRelation.isCrossMDZip = isCrossMdZip;    							//add the new relation to the list of found relations  							foundDirectMDElementRelations.Add(relationID'newRelation);  							  							  						}	  					}  				}  			}
Magic Number,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllMDElementRelations,The following statement contains a magic number: foreach (var sourceFile in this.sourceFiles.Values)  			{  				XmlNamespaceManager nsMgr = new XmlNamespaceManager(sourceFile.NameTable);  				nsMgr.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  				nsMgr.AddNamespace("uml"' "http://www.omg.org/spec/UML/20131001");  				foreach (XmlNode supplierNode in sourceFile.SelectNodes("//supplier"'nsMgr))  				{  					bool isCrossMdZip = this.isForeign(supplierNode);  					//get the parent Node id  					XmlNode relationNode = supplierNode.ParentNode;				  					if (relationNode != null)  					{  						//get the relationType  						XmlAttribute relationTypeAttribute = relationNode.Attributes["xmi:type"];  						string relationType = relationTypeAttribute != null ? relationTypeAttribute.Value : string.Empty;  						//the relationType is often described as uml:Dependency. In these cases we only want to store "Dependency"  						var relationParts = relationType.Split(':');  						if (relationParts.Count() == 2)  						{  							relationType = relationParts[1];  						}  						//get the relation name  						XmlAttribute relationNameAttribute = relationNode.Attributes["name"];  						string relationName = relationNameAttribute != null ? relationNameAttribute.Value : string.Empty;  						string relationID = getID(relationNode);  						//get the client node  						XmlNode sourceNode = relationNode.SelectSingleNode("./client");  						//check if crossMDZip  						if (sourceNode != null && ! isCrossMdZip) isCrossMdZip = this.isForeign(sourceNode);  						//get the ID's  						string sourceID = getID(sourceNode);  						string targetID = getID(supplierNode);  						//add the relation  						if (! string.IsNullOrEmpty(relationID)  						    && ! string.IsNullOrEmpty(sourceID)  						    && ! string.IsNullOrEmpty(targetID)  						    && ! string.IsNullOrEmpty(relationType)  						    && ! foundElementRelations.ContainsKey(relationID))  						{  							  							var newRelation = new MDElementRelation(sourceID' targetID'relationType'relationID);  							newRelation.name = relationName;  							newRelation.isCrossMDZip = isCrossMdZip;  							  							//get the stereotype' search for base_Dependency' base_Realization'   							//dependencies' usages and realisation  							  							XmlNode stereotypeNode = sourceFile.SelectSingleNode("//*[@base_Dependency='"+newRelation.md_guid+"' or @base_Realization='"+newRelation.md_guid+"']"' nsMgr);  							if(stereotypeNode != null)  							{  								if(!string.IsNullOrEmpty(stereotypeNode.LocalName))  								{  									newRelation.stereotype = stereotypeNode.LocalName;								  								}  							}    							//add the new relation to the list of found relations  							foundElementRelations.Add(relationID'newRelation);  						}  					}  				}  			}
Magic Number,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllGuards,The following statement contains a magic number: foreach (var sourceFile in this.sourceFiles.Values)   			{  				XmlNamespaceManager nsMgr = new XmlNamespaceManager(sourceFile.NameTable);  				nsMgr.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  				nsMgr.AddNamespace("uml"' "http://www.omg.org/spec/UML/20131001");  				  				foreach (XmlNode behaviourNode in sourceFile.SelectNodes("//ownedBehavior [@xmi:type='uml:Activity']"' nsMgr))  				{  					// <ownedDiagram xmi:type='uml:Diagram'  					foreach (XmlNode diagramNode in behaviourNode.SelectNodes(".//ownedDiagram"))  					{  						XmlNode binaryObjectNode = diagramNode.SelectSingleNode(".//binaryObject");  						if (binaryObjectNode != null)  						{  							try  							{  								string diagramContentFileName = binaryObjectNode.Attributes["streamContentID"].Value;  								string sourceDirectory = Path.GetDirectoryName(sourceFile.BaseURI.Substring(8));  								string diagramFileName = Path.Combine(sourceDirectory'diagramContentFileName);  								  								if (File.Exists(diagramFileName))  								{  									var xmlDiagram  =new XmlDocument();  									XmlReaderSettings settings = new XmlReaderSettings { NameTable = new NameTable() };  									XmlNamespaceManager xmlns = new XmlNamespaceManager(settings.NameTable);  									xmlns.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  									XmlParserContext context = new XmlParserContext(null' xmlns' ""' XmlSpace.Default);  									XmlReader reader = XmlReader.Create(diagramFileName' settings' context);  									xmlDiagram.Load(reader);  									  									  									foreach (XmlNode controlFlowNode in xmlDiagram.SelectNodes(".//mdElement [@elementClass='ControlFlow']"))   									{  										  										// check guard condition node exists  										var guardConditionNode = controlFlowNode.SelectSingleNode(".//text");  										if (guardConditionNode != null)  										{  											//get the guard condition text  											string guardCondition = string.Empty;  											guardCondition = guardConditionNode.InnerText;  											  											//get the end object  											string linkFirstEndID = string.Empty;  											var endObjectNode = controlFlowNode.SelectSingleNode(".//linkFirstEndID");  											if (endObjectNode != null)  											{  												XmlAttribute linkFirstEndIdAttribute = endObjectNode.Attributes["xmi:idref"];  												linkFirstEndID = linkFirstEndIdAttribute != null ? linkFirstEndIdAttribute.Value : string.Empty;  											}  											  											//get the start object   											string linkSecondEndID = string.Empty;  											var startObjectNode = controlFlowNode.SelectSingleNode(".//linkSecondEndID");  											if (startObjectNode != null)  											{  												XmlAttribute linkSecondEndIdAttribute = startObjectNode.Attributes["xmi:idref"];  												linkSecondEndID = linkSecondEndID != null ? linkSecondEndIdAttribute.Value : string.Empty;  											}									  										  										  											// source MDelement by ID  											var sourceElementNode = xmlDiagram.SelectSingleNode(".//mdElement [@xmi:id='"+ linkSecondEndID +"']"' nsMgr);  											var sourceIdNode = sourceElementNode.SelectSingleNode(".//elementID");  											string sourceID = string.Empty;  											sourceID = getID(sourceIdNode);  											  											// target MDelement by ID  											var targetElementNode = xmlDiagram.SelectSingleNode(".//mdElement [@xmi:id='"+ linkFirstEndID +"']"' nsMgr);  											var targetIdNode = targetElementNode.SelectSingleNode(".//elementID");  											string targetID = string.Empty;  											targetID = getID(targetIdNode);	  											  											  											var mdGuard = new MDGuard(guardCondition'sourceID' targetID);  											foundGuards.Add(mdGuard);  											  										}  										  								  								  										  										  										  									}  								}  							}  							catch(NullReferenceException)  							{  							//do nothing' we can't do anything with bynary object nodes withotu a streamContentID  							}  						}  					}  				}  			}
Magic Number,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,The following statement contains a magic number: foreach (var sourceFile in this.sourceFiles.Values)   			{  				foreach (XmlNode diagramNode in sourceFile.SelectNodes("//ownedDiagram"))  				{  					string diagramName = diagramNode.Attributes["name"].Value;  					//get the ID of the diagram. this is a combination of the ID of the owner + the name of the diagram  					string diagramID = diagramNode.Attributes["ownerOfDiagram"].Value +""+ diagramName ;  					//get the streamcontentID like <binaryObject streamContentID=BINARY-f9279de7-2e1e-4644-98ca-e1e496b72a22   					// because that is the file we need to read and use to figure out the diagramObjects  					XmlNode binaryObjectNode = diagramNode.SelectSingleNode(".//binaryObject");  					if (binaryObjectNode != null)  					{  						MDDiagram currentDiagram = null;  						try  						{  							string diagramContentFileName = binaryObjectNode.Attributes["streamContentID"].Value;  							  							//get the file with the given name  							//get the directory of the source file  							string sourceDirectory = Path.GetDirectoryName(sourceFile.BaseURI.Substring(8));  							string diagramFileName = Path.Combine(sourceDirectory'diagramContentFileName);  							if (File.Exists(diagramFileName))  							{  								//all this workaround is needed because xmi is not defined as prefix in the binary files of MD  								var xmlDiagram  =new XmlDocument();  								XmlReaderSettings settings = new XmlReaderSettings { NameTable = new NameTable() };  								XmlNamespaceManager xmlns = new XmlNamespaceManager(settings.NameTable);  								xmlns.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  								XmlParserContext context = new XmlParserContext(null' xmlns' ""' XmlSpace.Default);  								XmlReader reader = XmlReader.Create(diagramFileName' settings' context);  								xmlDiagram.Load(reader);  								  								//xmlDiagram.Load(diagramFileName);  								foreach (XmlNode diagramObjectNode in xmlDiagram.SelectNodes(".//mdElement"))   								{  									//create the object  									MDDiagramObject diagramObject;  									//get the elementID  									string elementID = getElementID(diagramObjectNode);  									//get the umlType of the elementNode  									XmlAttribute umlTypeAttribute = diagramObjectNode.Attributes["elementClass"];  									string umlType = umlTypeAttribute != null ? umlTypeAttribute.Value : string.Empty;  									  									if (!string.IsNullOrEmpty(elementID)  									   || umlType == "Split")  									{  										//get the geometry  										var geometryNode = diagramObjectNode.SelectSingleNode(".//geometry");  										if (geometryNode != null  										    && ! string.IsNullOrEmpty(geometryNode.InnerText))  										{  											if (currentDiagram ==null) currentDiagram = new MDDiagram(diagramName);  											  											currentDiagram.id = elementID;  											  											//handle the notes  											if(umlType == "Note")  											{  												//get the ID  												XmlAttribute noteIdAttribute = diagramObjectNode.Attributes["xmi:id"];  												string noteId = noteIdAttribute != null ? noteIdAttribute.Value : string.Empty;  												  												//get the text  												string text = string.Empty;  												var textNode = diagramObjectNode.SelectSingleNode(".//text");  												if (textNode != null  										    	&& ! string.IsNullOrEmpty(textNode.InnerText))  												{  													text = textNode.InnerText;  												}  												  												//get the linked element  												string linkedElement = string.Empty;  												var linkedElementNode = diagramObjectNode.SelectSingleNode(".//elementID");  												if (linkedElementNode != null)  												{  													XmlAttribute linkedElementAttribute = linkedElementNode.Attributes["href"];  													string fullHrefValue = linkedElementAttribute != null ? linkedElementAttribute.Value : string.Empty;  													//get the part after the # sign  													var splittedHref = fullHrefValue.Split('#');  													if (splittedHref.Count() == 2)  													{  														linkedElement = splittedHref[1];  													}  												}      												var note = new MDNote(noteId'text'linkedElement);  												currentDiagram.addDiagramNote(note);  												diagramObject = new MDDiagramObject(noteId'geometryNode.InnerText'umlType);  											}  											else  											{  												diagramObject = new MDDiagramObject(elementID'geometryNode.InnerText'umlType);  											}    												currentDiagram.addDiagramObject(diagramObject);  												  												  												if (umlType == "Split")  												{  													XmlNode fragmentNode = diagramObjectNode.ParentNode.ParentNode;  													if (fragmentNode.Name == "mdElement")  													{  														//get the id of the fragment  														string fragmentID = getElementID(fragmentNode);  														if (! string.IsNullOrEmpty(fragmentID))  														{  															//find the corresponding diagramObject from the current diagram  															var fragmentDiagramObject = currentDiagram.diagramObjects.FirstOrDefault (x => x.mdID.Equals(fragmentID'StringComparison.CurrentCultureIgnoreCase));  															if (fragmentDiagramObject != null)  															{  																fragmentDiagramObject.ownedSplits.Add(diagramObject);  															}  														}  													}  												}  											    											    										}  									}  								}  								//add the diagram to the list  								if (currentDiagram != null   								    && ! foundDiagrams.ContainsKey(diagramID))  								{  									foundDiagrams.Add(diagramID'currentDiagram);  								}  							}  						}  						catch(NullReferenceException)  						{  							//do nothing' we can't do anything with bynary object nodes withotu a streamContentID  						}  					}  				}  			}
Magic Number,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllDiagrams,The following statement contains a magic number: foreach (var sourceFile in this.sourceFiles.Values)   			{  				foreach (XmlNode diagramNode in sourceFile.SelectNodes("//ownedDiagram"))  				{  					string diagramName = diagramNode.Attributes["name"].Value;  					//get the ID of the diagram. this is a combination of the ID of the owner + the name of the diagram  					string diagramID = diagramNode.Attributes["ownerOfDiagram"].Value +""+ diagramName ;  					//get the streamcontentID like <binaryObject streamContentID=BINARY-f9279de7-2e1e-4644-98ca-e1e496b72a22   					// because that is the file we need to read and use to figure out the diagramObjects  					XmlNode binaryObjectNode = diagramNode.SelectSingleNode(".//binaryObject");  					if (binaryObjectNode != null)  					{  						MDDiagram currentDiagram = null;  						try  						{  							string diagramContentFileName = binaryObjectNode.Attributes["streamContentID"].Value;  							  							//get the file with the given name  							//get the directory of the source file  							string sourceDirectory = Path.GetDirectoryName(sourceFile.BaseURI.Substring(8));  							string diagramFileName = Path.Combine(sourceDirectory'diagramContentFileName);  							if (File.Exists(diagramFileName))  							{  								//all this workaround is needed because xmi is not defined as prefix in the binary files of MD  								var xmlDiagram  =new XmlDocument();  								XmlReaderSettings settings = new XmlReaderSettings { NameTable = new NameTable() };  								XmlNamespaceManager xmlns = new XmlNamespaceManager(settings.NameTable);  								xmlns.AddNamespace("xmi"' "http://www.omg.org/spec/XMI/20131001");  								XmlParserContext context = new XmlParserContext(null' xmlns' ""' XmlSpace.Default);  								XmlReader reader = XmlReader.Create(diagramFileName' settings' context);  								xmlDiagram.Load(reader);  								  								//xmlDiagram.Load(diagramFileName);  								foreach (XmlNode diagramObjectNode in xmlDiagram.SelectNodes(".//mdElement"))   								{  									//create the object  									MDDiagramObject diagramObject;  									//get the elementID  									string elementID = getElementID(diagramObjectNode);  									//get the umlType of the elementNode  									XmlAttribute umlTypeAttribute = diagramObjectNode.Attributes["elementClass"];  									string umlType = umlTypeAttribute != null ? umlTypeAttribute.Value : string.Empty;  									  									if (!string.IsNullOrEmpty(elementID)  									   || umlType == "Split")  									{  										//get the geometry  										var geometryNode = diagramObjectNode.SelectSingleNode(".//geometry");  										if (geometryNode != null  										    && ! string.IsNullOrEmpty(geometryNode.InnerText))  										{  											if (currentDiagram ==null) currentDiagram = new MDDiagram(diagramName);  											  											currentDiagram.id = elementID;  											  											//handle the notes  											if(umlType == "Note")  											{  												//get the ID  												XmlAttribute noteIdAttribute = diagramObjectNode.Attributes["xmi:id"];  												string noteId = noteIdAttribute != null ? noteIdAttribute.Value : string.Empty;  												  												//get the text  												string text = string.Empty;  												var textNode = diagramObjectNode.SelectSingleNode(".//text");  												if (textNode != null  										    	&& ! string.IsNullOrEmpty(textNode.InnerText))  												{  													text = textNode.InnerText;  												}  												  												//get the linked element  												string linkedElement = string.Empty;  												var linkedElementNode = diagramObjectNode.SelectSingleNode(".//elementID");  												if (linkedElementNode != null)  												{  													XmlAttribute linkedElementAttribute = linkedElementNode.Attributes["href"];  													string fullHrefValue = linkedElementAttribute != null ? linkedElementAttribute.Value : string.Empty;  													//get the part after the # sign  													var splittedHref = fullHrefValue.Split('#');  													if (splittedHref.Count() == 2)  													{  														linkedElement = splittedHref[1];  													}  												}      												var note = new MDNote(noteId'text'linkedElement);  												currentDiagram.addDiagramNote(note);  												diagramObject = new MDDiagramObject(noteId'geometryNode.InnerText'umlType);  											}  											else  											{  												diagramObject = new MDDiagramObject(elementID'geometryNode.InnerText'umlType);  											}    												currentDiagram.addDiagramObject(diagramObject);  												  												  												if (umlType == "Split")  												{  													XmlNode fragmentNode = diagramObjectNode.ParentNode.ParentNode;  													if (fragmentNode.Name == "mdElement")  													{  														//get the id of the fragment  														string fragmentID = getElementID(fragmentNode);  														if (! string.IsNullOrEmpty(fragmentID))  														{  															//find the corresponding diagramObject from the current diagram  															var fragmentDiagramObject = currentDiagram.diagramObjects.FirstOrDefault (x => x.mdID.Equals(fragmentID'StringComparison.CurrentCultureIgnoreCase));  															if (fragmentDiagramObject != null)  															{  																fragmentDiagramObject.ownedSplits.Add(diagramObject);  															}  														}  													}  												}  											    											    										}  									}  								}  								//add the diagram to the list  								if (currentDiagram != null   								    && ! foundDiagrams.ContainsKey(diagramID))  								{  									foundDiagrams.Add(diagramID'currentDiagram);  								}  							}  						}  						catch(NullReferenceException)  						{  							//do nothing' we can't do anything with bynary object nodes withotu a streamContentID  						}  					}  				}  			}
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Location = new System.Drawing.Point(189' 124);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Location = new System.Drawing.Point(189' 124);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Size = new System.Drawing.Size(183' 38);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.startCorrectionButton.Size = new System.Drawing.Size(183' 38);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Location = new System.Drawing.Point(415' 144);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Location = new System.Drawing.Point(415' 144);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Size = new System.Drawing.Size(32' 25);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.Size = new System.Drawing.Size(32' 25);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseDefaultPropertiesFileButton.TabIndex = 12;
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Location = new System.Drawing.Point(16' 43);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Location = new System.Drawing.Point(16' 43);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.MinimumSize = new System.Drawing.Size(203' 20);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.MinimumSize = new System.Drawing.Size(203' 20);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Size = new System.Drawing.Size(315' 22);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.Size = new System.Drawing.Size(315' 22);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdzipPathTextBox.TabIndex = 11;
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Location = new System.Drawing.Point(16' 11);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Location = new System.Drawing.Point(16' 11);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Size = new System.Drawing.Size(188' 28);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.Size = new System.Drawing.Size(188' 28);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.mdZipPathlabel.TabIndex = 13;
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Location = new System.Drawing.Point(340' 42);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Location = new System.Drawing.Point(340' 42);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Size = new System.Drawing.Size(32' 25);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.Size = new System.Drawing.Size(32' 25);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.browseMDZipFolder.TabIndex = 14;
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(388' 177);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(388' 177);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Magic Number,MagicdrawMigrator,MDMigratorForm,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MDMigratorForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 4' 4' 4);
Missing Default,MagicdrawMigrator,SequenceDiagramCorrector,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\Correctors\SequenceDiagramCorrector.cs,addOrUpdateFragments,The following switch statement is missing a default case: switch (mdFragment.fragmentType)  					{  						case "alt":  							eaFragment.subType = "0";  							break;  						case "opt":  							eaFragment.subType = "1";  							break;  						case "par":  							eaFragment.subType = "3";  							break;  						case "loop":  							eaFragment.subType = "4";  							break;  					}
Missing Default,MagicdrawMigrator,MagicDrawReader,C:\repos\GeertBellekens_Enterprise-Architect-Toolpack\MagicdrawMigrator\MagicDrawReader.cs,getAllConstraints,The following switch statement is missing a default case: switch (parentAttribute.Name)   						{  							case "xmi:type":  								parentType = parentAttribute.Value;  								break;  							case "xmi:id":  								parentID = parentAttribute.Value;  								break;  						}
