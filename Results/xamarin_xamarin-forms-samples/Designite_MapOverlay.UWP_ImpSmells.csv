Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,GenerateCircleCoordinates,The length of the statement  "                double latitudeInRadians = Math.Asin(Math.Sin(latitude) * Math.Cos(distance) + Math.Cos(latitude) * Math.Sin(distance) * Math.Cos(angleInRadians)); " is 147.
Long Statement,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,GenerateCircleCoordinates,The length of the statement  "                double longitudeInRadians = longitude + Math.Atan2(Math.Sin(angleInRadians) * Math.Sin(distance) * Math.Cos(latitude)' Math.Cos(distance) - Math.Sin(latitude) * Math.Sin(latitudeInRadians)); " is 190.
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,OnElementChanged,The following statement contains a magic number: if (e.NewElement != null)              {                  var formsMap = (CustomMap)e.NewElement;                  var nativeMap = Control as MapControl;                  var circle = formsMap.Circle;                    var coordinates = new List<BasicGeoposition>();                  var positions = GenerateCircleCoordinates(circle.Position' circle.Radius);                  foreach (var position in positions)                  {                      coordinates.Add(new BasicGeoposition { Latitude = position.Latitude' Longitude = position.Longitude });                  }                    var polygon = new MapPolygon();                  polygon.FillColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeThickness = 5;                  polygon.Path = new Geopath(coordinates);                  nativeMap.MapElements.Add(polygon);              }
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,OnElementChanged,The following statement contains a magic number: if (e.NewElement != null)              {                  var formsMap = (CustomMap)e.NewElement;                  var nativeMap = Control as MapControl;                  var circle = formsMap.Circle;                    var coordinates = new List<BasicGeoposition>();                  var positions = GenerateCircleCoordinates(circle.Position' circle.Radius);                  foreach (var position in positions)                  {                      coordinates.Add(new BasicGeoposition { Latitude = position.Latitude' Longitude = position.Longitude });                  }                    var polygon = new MapPolygon();                  polygon.FillColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeThickness = 5;                  polygon.Path = new Geopath(coordinates);                  nativeMap.MapElements.Add(polygon);              }
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,OnElementChanged,The following statement contains a magic number: if (e.NewElement != null)              {                  var formsMap = (CustomMap)e.NewElement;                  var nativeMap = Control as MapControl;                  var circle = formsMap.Circle;                    var coordinates = new List<BasicGeoposition>();                  var positions = GenerateCircleCoordinates(circle.Position' circle.Radius);                  foreach (var position in positions)                  {                      coordinates.Add(new BasicGeoposition { Latitude = position.Latitude' Longitude = position.Longitude });                  }                    var polygon = new MapPolygon();                  polygon.FillColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeThickness = 5;                  polygon.Path = new Geopath(coordinates);                  nativeMap.MapElements.Add(polygon);              }
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,OnElementChanged,The following statement contains a magic number: if (e.NewElement != null)              {                  var formsMap = (CustomMap)e.NewElement;                  var nativeMap = Control as MapControl;                  var circle = formsMap.Circle;                    var coordinates = new List<BasicGeoposition>();                  var positions = GenerateCircleCoordinates(circle.Position' circle.Radius);                  foreach (var position in positions)                  {                      coordinates.Add(new BasicGeoposition { Latitude = position.Latitude' Longitude = position.Longitude });                  }                    var polygon = new MapPolygon();                  polygon.FillColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeThickness = 5;                  polygon.Path = new Geopath(coordinates);                  nativeMap.MapElements.Add(polygon);              }
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,OnElementChanged,The following statement contains a magic number: if (e.NewElement != null)              {                  var formsMap = (CustomMap)e.NewElement;                  var nativeMap = Control as MapControl;                  var circle = formsMap.Circle;                    var coordinates = new List<BasicGeoposition>();                  var positions = GenerateCircleCoordinates(circle.Position' circle.Radius);                  foreach (var position in positions)                  {                      coordinates.Add(new BasicGeoposition { Latitude = position.Latitude' Longitude = position.Longitude });                  }                    var polygon = new MapPolygon();                  polygon.FillColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeColor = Windows.UI.Color.FromArgb(128' 255' 0' 0);                  polygon.StrokeThickness = 5;                  polygon.Path = new Geopath(coordinates);                  nativeMap.MapElements.Add(polygon);              }
Magic Number,MapOverlay.UWP,CustomMapRenderer,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\CustomMapRenderer.cs,GenerateCircleCoordinates,The following statement contains a magic number: for (int angle = 0; angle <=360; angle++)              {                  double angleInRadians = ((double)angle).ToRadians();                  double latitudeInRadians = Math.Asin(Math.Sin(latitude) * Math.Cos(distance) + Math.Cos(latitude) * Math.Sin(distance) * Math.Cos(angleInRadians));                  double longitudeInRadians = longitude + Math.Atan2(Math.Sin(angleInRadians) * Math.Sin(distance) * Math.Cos(latitude)' Math.Cos(distance) - Math.Sin(latitude) * Math.Sin(latitudeInRadians));                    var pos = new Position(latitudeInRadians.ToDegrees()' longitudeInRadians.ToDegrees());                  positions.Add(pos);              }
Magic Number,MapOverlay.UWP,DoubleExtensions,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\DoubleExtensions.cs,ToRadians,The following statement contains a magic number: return degrees * (Math.PI / 180);
Magic Number,MapOverlay.UWP,DoubleExtensions,C:\repos\xamarin_xamarin-forms-samples\CustomRenderers\Map\Circle\UWP\DoubleExtensions.cs,ToDegrees,The following statement contains a magic number: return radians * (180 / Math.PI);
