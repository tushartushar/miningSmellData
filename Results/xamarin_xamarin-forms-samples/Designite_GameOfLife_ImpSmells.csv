Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GameOfLife,LifeGrid,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\LifeGrid.cs,Tick,Cyclomatic complexity of the method is 8
Complex Conditional,GameOfLife,LifeGrid,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\LifeGrid.cs,SetSize,The conditional expression  "coordinate.X < 0 || coordinate.X >= cols ||                          coordinate.Y < 0 || coordinate.Y >= rows"  is complex.
Complex Conditional,GameOfLife,LifeGrid,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\LifeGrid.cs,Tick,The conditional expression  "xi >= 0 && yi >= 0 && xi < cols && yi < rows"  is complex.
Magic Number,GameOfLife,LifeGrid,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\LifeGrid.cs,Tick,The following statement contains a magic number: for (int x = 0; x < cols; x++)              for (int y = 0; y < rows; y++)              {                  int count = 0;                    for (int xi = x - 1; xi <= x + 1; xi++)                  for (int yi = y - 1; yi <= y + 1; yi++)                  {                      if (Wrap)                      {                          count += grid[(xi + cols) % cols' (yi + rows) % rows] ? 1 : 0;                      }                      else                      {                          if (xi >= 0 && yi >= 0 && xi < cols && yi < rows)                          {                              count += grid[xi' yi] ? 1 : 0;                          }                      }                  }                    if (count == 3 || (count == 4 && grid[x' y]))                  {                          // Modulo arithmetic is necessary when Wrap is true                          coordinates.Add(new Coordinate(x % cols' y % rows));                  }              }
Magic Number,GameOfLife,LifeGrid,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\LifeGrid.cs,Tick,The following statement contains a magic number: for (int x = 0; x < cols; x++)              for (int y = 0; y < rows; y++)              {                  int count = 0;                    for (int xi = x - 1; xi <= x + 1; xi++)                  for (int yi = y - 1; yi <= y + 1; yi++)                  {                      if (Wrap)                      {                          count += grid[(xi + cols) % cols' (yi + rows) % rows] ? 1 : 0;                      }                      else                      {                          if (xi >= 0 && yi >= 0 && xi < cols && yi < rows)                          {                              count += grid[xi' yi] ? 1 : 0;                          }                      }                  }                    if (count == 3 || (count == 4 && grid[x' y]))                  {                          // Modulo arithmetic is necessary when Wrap is true                          coordinates.Add(new Coordinate(x % cols' y % rows));                  }              }
Magic Number,GameOfLife,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\MainPage.xaml.cs,OnLayoutSizeChanged,The following statement contains a magic number: xMargin = (int)((layout.Width - cols * cellSize) / 2);
Magic Number,GameOfLife,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\MainPage.xaml.cs,OnLayoutSizeChanged,The following statement contains a magic number: yMargin = (int)((layout.Height - rows * cellSize) / 2);
Magic Number,GameOfLife,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\MainPage.xaml.cs,UpdateLayout,The following statement contains a magic number: for (int x = 0; x < cols; x++)                  for (int y = 0; y < rows; y++)                  {                      LifeCell lifeCell = lifeCell = (LifeCell)absoluteLayout.Children[index];                      lifeCell.Col = x;                      lifeCell.Row = y;                      lifeCell.IsAlive = lifeGrid.IsAlive(x' y);                        Rectangle rect = new Rectangle(x * cellSize + xMargin + CellSpacing / 2'                                                     y * cellSize + yMargin + CellSpacing / 2'                                                     cellSize - CellSpacing'                                                     cellSize - CellSpacing);                        AbsoluteLayout.SetLayoutBounds(lifeCell' rect);                      index++;                  }
Magic Number,GameOfLife,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\MainPage.xaml.cs,UpdateLayout,The following statement contains a magic number: for (int x = 0; x < cols; x++)                  for (int y = 0; y < rows; y++)                  {                      LifeCell lifeCell = lifeCell = (LifeCell)absoluteLayout.Children[index];                      lifeCell.Col = x;                      lifeCell.Row = y;                      lifeCell.IsAlive = lifeGrid.IsAlive(x' y);                        Rectangle rect = new Rectangle(x * cellSize + xMargin + CellSpacing / 2'                                                     y * cellSize + yMargin + CellSpacing / 2'                                                     cellSize - CellSpacing'                                                     cellSize - CellSpacing);                        AbsoluteLayout.SetLayoutBounds(lifeCell' rect);                      index++;                  }
Magic Number,GameOfLife,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\GameOfLife\GameOfLife\GameOfLife\MainPage.xaml.cs,OnRunButtonClicked,The following statement contains a magic number: if (!isRunning)              {                  runButton.Text = "Pause";                  isRunning = true;                  clearButton.IsEnabled = false;                  Device.StartTimer(TimeSpan.FromMilliseconds(250)' OnTimerTick);              }              else              {                  StopRunning();              }
