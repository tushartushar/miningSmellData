Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The method has 8 parameters. Parameters: center' width' height' pixelWidth' pixelHeight' iterations' progress' cancelToken
Empty Catch Block,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,LoadAndStartAnimation,The method has an empty catch block.
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,LoadAndStartAnimation,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' OnTimerTick);
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: int cycle = 6000 * COUNT;
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: double progress = COUNT * 0.5 * (1 + Math.Sin(2 * Math.PI * time / cycle - Math.PI / 2));
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: double progress = COUNT * 0.5 * (1 + Math.Sin(2 * Math.PI * time / cycle - Math.PI / 2));
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: double progress = COUNT * 0.5 * (1 + Math.Sin(2 * Math.PI * time / cycle - Math.PI / 2));
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float x = (info.Width - dimension) / 2;
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float y = (info.Height - dimension) / 2;
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float fraction = 0.5f * (1 - (float)Math.Pow(2' -bitmapProgress));
Magic Number,MandelAnima,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\MainPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float fraction = 0.5f * (1 - (float)Math.Pow(2' -bitmapProgress));
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelAnima,Mandelbrot,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\MandelAnima\MandelAnima\MandelAnima\Mandelbrot.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = center.Imaginary + height / 2 - row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).Magnitude < 1.0 / 4)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.Magnitude * c.Magnitude * (8 * c.Magnitude * c.Magnitude - 3) < 3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.Magnitude < 2);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
