Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ComputeMatrix,The method has 5 parameters. Parameters: size' ptUL' ptUR' ptLL' ptLR
Complex Conditional,SkiaSharpFormsDemos.Transforms,TouchManipulationManager,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationManager.cs,TwoFingerManipulate,The conditional expression  "!float.IsNaN(scaleX) && !float.IsInfinity(scaleX) &&                  !float.IsNaN(scaleY) && !float.IsInfinity(scaleY)"  is complex.
Empty Catch Block,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,BasicBitmapsPage,The method has an empty catch block.
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: string[] texts = new string[9];
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: SKRect[] bounds = new SKRect[9];
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float[] widths = new float[3];
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: for (int i = 0; i < 9; i++)              {                  int row = i % 3;                  int col = i / 3;                    // Format string differently based on row                  texts[i] = values[i].ToString(row == 2 ? "F0" : (col == 2 ? PerspectiveFormat : "F2"));                    // Measure string with a '-' even if one is not present                  bool isNegative = texts[i][0] == '-';                  string text = (isNegative ? "" : "-") + texts[i];                  MatrixPaint.MeasureText(text' ref bounds[i]);                    // Get maximum width for each column                  widths[col] = Math.Max(widths[col]' bounds[i].Width);                    // Measure the text again without the '-' in front                  MatrixPaint.MeasureText(texts[i]' ref bounds[i]);              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: for (int i = 0; i < 9; i++)              {                  int row = i % 3;                  int col = i / 3;                    // Format string differently based on row                  texts[i] = values[i].ToString(row == 2 ? "F0" : (col == 2 ? PerspectiveFormat : "F2"));                    // Measure string with a '-' even if one is not present                  bool isNegative = texts[i][0] == '-';                  string text = (isNegative ? "" : "-") + texts[i];                  MatrixPaint.MeasureText(text' ref bounds[i]);                    // Get maximum width for each column                  widths[col] = Math.Max(widths[col]' bounds[i].Width);                    // Measure the text again without the '-' in front                  MatrixPaint.MeasureText(texts[i]' ref bounds[i]);              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: for (int i = 0; i < 9; i++)              {                  int row = i % 3;                  int col = i / 3;                    // Format string differently based on row                  texts[i] = values[i].ToString(row == 2 ? "F0" : (col == 2 ? PerspectiveFormat : "F2"));                    // Measure string with a '-' even if one is not present                  bool isNegative = texts[i][0] == '-';                  string text = (isNegative ? "" : "-") + texts[i];                  MatrixPaint.MeasureText(text' ref bounds[i]);                    // Get maximum width for each column                  widths[col] = Math.Max(widths[col]' bounds[i].Width);                    // Measure the text again without the '-' in front                  MatrixPaint.MeasureText(texts[i]' ref bounds[i]);              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: for (int i = 0; i < 9; i++)              {                  int row = i % 3;                  int col = i / 3;                    // Format string differently based on row                  texts[i] = values[i].ToString(row == 2 ? "F0" : (col == 2 ? PerspectiveFormat : "F2"));                    // Measure string with a '-' even if one is not present                  bool isNegative = texts[i][0] == '-';                  string text = (isNegative ? "" : "-") + texts[i];                  MatrixPaint.MeasureText(text' ref bounds[i]);                    // Get maximum width for each column                  widths[col] = Math.Max(widths[col]' bounds[i].Width);                    // Measure the text again without the '-' in front                  MatrixPaint.MeasureText(texts[i]' ref bounds[i]);              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: for (int i = 0; i < 9; i++)              {                  int row = i % 3;                  int col = i / 3;                    // Format string differently based on row                  texts[i] = values[i].ToString(row == 2 ? "F0" : (col == 2 ? PerspectiveFormat : "F2"));                    // Measure string with a '-' even if one is not present                  bool isNegative = texts[i][0] == '-';                  string text = (isNegative ? "" : "-") + texts[i];                  MatrixPaint.MeasureText(text' ref bounds[i]);                    // Get maximum width for each column                  widths[col] = Math.Max(widths[col]' bounds[i].Width);                    // Measure the text again without the '-' in front                  MatrixPaint.MeasureText(texts[i]' ref bounds[i]);              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float vertMarg = MatrixPaint.FontSpacing / 4;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float totalWidth = widths[0] + widths[1] + widths[2] + 2 * horzGap + 2 * horzMarg;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float totalWidth = widths[0] + widths[1] + widths[2] + 2 * horzGap + 2 * horzMarg;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float totalWidth = widths[0] + widths[1] + widths[2] + 2 * horzGap + 2 * horzMarg;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float totalHeight = 3 * MatrixPaint.FontSpacing + 2 * vertMarg;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: float totalHeight = 3 * MatrixPaint.FontSpacing + 2 * vertMarg;
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,MatrixDisplay,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\MatrixDisplay.cs,MeasureAndPaint,The following statement contains a magic number: if (doPaint)              {                  SKPaintStyle saveStyle = MatrixPaint.Style;                    for (int i = 0; i < 9; i++)                  {                      int row = i % 3;                      int col = i / 3;                        // Find x' y of upper-left corner of text                      float x = location.X + horzMarg;                        for (int c = 0; c < col; c++)                      {                          x += widths[c] + horzGap;                      }                        float y = location.Y + vertMarg + row * MatrixPaint.FontSpacing;                        // Adjust for right-justified text                      x += widths[col] - bounds[i].Width;                      y += (MatrixPaint.FontSpacing - bounds[i].Height) / 2 - bounds[i].Top;                        // Draw the text                      MatrixPaint.Style = SKPaintStyle.Fill;                      canvas.DrawText(texts[i]' x' y' MatrixPaint);                  }                    // Display vertical lines at the sides of the matrix                  MatrixPaint.Style = SKPaintStyle.Stroke;                  canvas.DrawLine(location.X + horzMarg / 2' location.Y + vertMarg'                                   location.X + horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                  canvas.DrawLine(location.X + totalWidth - horzMarg / 2' location.Y + vertMarg'                                   location.X + totalWidth - horzMarg / 2' location.Y + totalHeight - vertMarg' MatrixPaint);                    MatrixPaint.Style = saveStyle;              }
Magic Number,SkiaSharpFormsDemos,TouchPoint,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\TouchPoint.cs,PointInCircle,The following statement contains a magic number: return (Math.Pow(pt.X - Center.X' 2) + Math.Pow(pt.Y - Center.Y' 2)) < (Radius * Radius);
Magic Number,SkiaSharpFormsDemos,TouchPoint,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\TouchPoint.cs,PointInCircle,The following statement contains a magic number: return (Math.Pow(pt.X - Center.X' 2) + Math.Pow(pt.Y - Center.Y' 2)) < (Radius * Radius);
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (webBitmap != null)              {                  float x = (info.Width - webBitmap.Width) / 2;                  float y = (info.Height / 3 - webBitmap.Height) / 2;                  canvas.DrawBitmap(webBitmap' x' y);              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (webBitmap != null)              {                  float x = (info.Width - webBitmap.Width) / 2;                  float y = (info.Height / 3 - webBitmap.Height) / 2;                  canvas.DrawBitmap(webBitmap' x' y);              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (webBitmap != null)              {                  float x = (info.Width - webBitmap.Width) / 2;                  float y = (info.Height / 3 - webBitmap.Height) / 2;                  canvas.DrawBitmap(webBitmap' x' y);              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (resourceBitmap != null)              {                  canvas.DrawBitmap(resourceBitmap'                       new SKRect(0' info.Height / 3' info.Width' 2 * info.Height / 3));              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (resourceBitmap != null)              {                  canvas.DrawBitmap(resourceBitmap'                       new SKRect(0' info.Height / 3' info.Width' 2 * info.Height / 3));              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (resourceBitmap != null)              {                  canvas.DrawBitmap(resourceBitmap'                       new SKRect(0' info.Height / 3' info.Width' 2 * info.Height / 3));              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,BasicBitmapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\BasicBitmapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (libraryBitmap != null)              {                  float scale = Math.Min((float)info.Width / libraryBitmap.Width'                                         info.Height / 3f / libraryBitmap.Height);                    float left = (info.Width - scale * libraryBitmap.Width) / 2;                  float top = (info.Height / 3 - scale * libraryBitmap.Height) / 2;                  float right = left + scale * libraryBitmap.Width;                  float bottom = top + scale * libraryBitmap.Height;                  SKRect rect = new SKRect(left' top' right' bottom);                  rect.Offset(0' 2 * info.Height / 3);                    canvas.DrawBitmap(libraryBitmap' rect);              }              else              {                  using (SKPaint paint = new SKPaint())                  {                      paint.Color = SKColors.Blue;                      paint.TextAlign = SKTextAlign.Center;                      paint.TextSize = 48;                        canvas.DrawText("Tap to load bitmap"'                           info.Width / 2' 5 * info.Height / 6' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Basics,ColorExplorePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ColorExplorePage.xaml.cs,ColorExplorePage,The following statement contains a magic number: saturationSlider.Value = 100;
Magic Number,SkiaSharpFormsDemos.Basics,ColorExplorePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ColorExplorePage.xaml.cs,ColorExplorePage,The following statement contains a magic number: lightnessSlider.Value = 50;
Magic Number,SkiaSharpFormsDemos.Basics,ColorExplorePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ColorExplorePage.xaml.cs,ColorExplorePage,The following statement contains a magic number: valueSlider.Value = 100;
Magic Number,SkiaSharpFormsDemos.Basics,EllipseFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\EllipseFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float strokeWidth = 50;
Magic Number,SkiaSharpFormsDemos.Basics,EllipseFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\EllipseFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xRadius = (info.Width - strokeWidth) / 2;
Magic Number,SkiaSharpFormsDemos.Basics,EllipseFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\EllipseFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yRadius = (info.Height - strokeWidth) / 2;
Magic Number,SkiaSharpFormsDemos.Basics,EllipseFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\EllipseFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);
Magic Number,SkiaSharpFormsDemos.Basics,EllipseFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\EllipseFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  t = (float)(stopwatch.Elapsed.TotalMilliseconds % cycleTime / cycleTime);                  canvasView.InvalidateSurface();                    if (!pageIsActive)                  {                      stopwatch.Stop();                  }                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float baseRadius = Math.Min(info.Width' info.Height) / 12;
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int circle = 0; circle < 5; circle++)              {                  float radius = baseRadius * (circle + t);                    paint.StrokeWidth = baseRadius / 2 * (circle == 0 ? t : 1);                  paint.Color = new SKColor(0' 0' 255'                      (byte)(255 * (circle == 4 ? (1 - t) : 1)));                    canvas.DrawCircle(center.X' center.Y' radius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int circle = 0; circle < 5; circle++)              {                  float radius = baseRadius * (circle + t);                    paint.StrokeWidth = baseRadius / 2 * (circle == 0 ? t : 1);                  paint.Color = new SKColor(0' 0' 255'                      (byte)(255 * (circle == 4 ? (1 - t) : 1)));                    canvas.DrawCircle(center.X' center.Y' radius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int circle = 0; circle < 5; circle++)              {                  float radius = baseRadius * (circle + t);                    paint.StrokeWidth = baseRadius / 2 * (circle == 0 ? t : 1);                  paint.Color = new SKColor(0' 0' 255'                      (byte)(255 * (circle == 4 ? (1 - t) : 1)));                    canvas.DrawCircle(center.X' center.Y' radius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int circle = 0; circle < 5; circle++)              {                  float radius = baseRadius * (circle + t);                    paint.StrokeWidth = baseRadius / 2 * (circle == 0 ? t : 1);                  paint.Color = new SKColor(0' 0' 255'                      (byte)(255 * (circle == 4 ? (1 - t) : 1)));                    canvas.DrawCircle(center.X' center.Y' radius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,ExpandingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\ExpandingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int circle = 0; circle < 5; circle++)              {                  float radius = baseRadius * (circle + t);                    paint.StrokeWidth = baseRadius / 2 * (circle == 0 ? t : 1);                  paint.Color = new SKColor(0' 0' 255'                      (byte)(255 * (circle == 4 ? (1 - t) : 1)));                    canvas.DrawCircle(center.X' center.Y' radius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xText = info.Width / 2 - textBounds.MidX;
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yText = info.Height / 2 - textBounds.MidY;
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: frameRect.Inflate(10' 10);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: frameRect.Inflate(10' 10);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint framePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  StrokeWidth = 5'                  Color = SKColors.Blue              };
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawRoundRect(frameRect' 20' 20' framePaint);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawRoundRect(frameRect' 20' 20' framePaint);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: frameRect.Inflate(10' 10);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: frameRect.Inflate(10' 10);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawRoundRect(frameRect' 30' 30' framePaint);
Magic Number,SkiaSharpFormsDemos.Basics,FramedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\FramedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawRoundRect(frameRect' 30' 30' framePaint);
Magic Number,SkiaSharpFormsDemos.Basics,OutlinedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\OutlinedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xText = info.Width / 2 - textBounds.MidX;
Magic Number,SkiaSharpFormsDemos.Basics,OutlinedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\OutlinedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yText = info.Height / 2 - textBounds.MidY;
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (pageIsActive)              {                  double cycleTime = slider.Value;                  double t = stopwatch.Elapsed.TotalSeconds % cycleTime / cycleTime;                  scale = (1 + (float)Math.Sin(2 * Math.PI * t)) / 2;                  canvasView.InvalidateSurface();                  await Task.Delay(TimeSpan.FromSeconds(1.0 / 30));              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (pageIsActive)              {                  double cycleTime = slider.Value;                  double t = stopwatch.Elapsed.TotalSeconds % cycleTime / cycleTime;                  scale = (1 + (float)Math.Sin(2 * Math.PI * t)) / 2;                  canvasView.InvalidateSurface();                  await Task.Delay(TimeSpan.FromSeconds(1.0 / 30));              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (pageIsActive)              {                  double cycleTime = slider.Value;                  double t = stopwatch.Elapsed.TotalSeconds % cycleTime / cycleTime;                  scale = (1 + (float)Math.Sin(2 * Math.PI * t)) / 2;                  canvasView.InvalidateSurface();                  await Task.Delay(TimeSpan.FromSeconds(1.0 / 30));              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float maxRadius = 0.75f * Math.Min(info.Width' info.Height) / 2;
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Blue;                  paint.StrokeWidth = 50;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);                    paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.SkyBlue;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Blue;                  paint.StrokeWidth = 50;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);                    paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.SkyBlue;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Blue;                  paint.StrokeWidth = 50;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);                    paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.SkyBlue;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Blue;                  paint.StrokeWidth = 50;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);                    paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.SkyBlue;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,PulsatingEllipsePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\PulsatingEllipsePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Blue;                  paint.StrokeWidth = 50;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);                    paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.SkyBlue;                  canvas.DrawOval(info.Width / 2' info.Height / 2' xRadius' yRadius' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = Color.Red.ToSKColor()'                  StrokeWidth = 25              };
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SimpleCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SimpleCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,SurfaceSizePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SurfaceSizePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 40              };
Magic Number,SkiaSharpFormsDemos.Basics,SurfaceSizePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SurfaceSizePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float x = 20;
Magic Number,SkiaSharpFormsDemos.Basics,SurfaceSizePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SurfaceSizePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float indent = 100;
Magic Number,SkiaSharpFormsDemos.Basics,SurfaceSizePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SurfaceSizePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: y += fontSpacing * 2;
Magic Number,SkiaSharpFormsDemos.Basics,SurfaceSizePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\SurfaceSizePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: y += fontSpacing * 2;
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = Color.Red.ToSKColor()'                  StrokeWidth = 50              };
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (showFill)              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.Blue;                  canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (showFill)              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.Blue;                  canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);              }
Magic Number,SkiaSharpFormsDemos.Basics,TapToggleFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Basics\TapToggleFillPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (showFill)              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColors.Blue;                  canvas.DrawCircle(info.Width / 2' info.Height / 2' 100' paint);              }
Magic Number,SkiaSharpFormsDemos.Curves,AnimatedDottedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnimatedDottedTextPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,AnimatedDottedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnimatedDottedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      StrokeWidth = strokeWidth'                      StrokeCap = SKStrokeCap.Round'                      Color = SKColors.Blue'                  })              {                  // Adjust TextSize property so text is 95% of screen width                  float textWidth = textPaint.MeasureText(text);                  textPaint.TextSize *= 0.95f * info.Width / textWidth;                    // Find the text bounds                  SKRect textBounds;                  textPaint.MeasureText(text' ref textBounds);                    // Calculate offsets to center the text on the screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Animate the phase; t is 0 to 1 every second                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 1 / 1);                  float phase = -t * 2 * strokeWidth;                    // Create dotted line effect based on dash array and phase                  using (SKPathEffect dashEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      // Set it to the paint object                      textPaint.PathEffect = dashEffect;                        // And draw the text                      canvas.DrawText(text' xText' yText' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnimatedDottedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnimatedDottedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      StrokeWidth = strokeWidth'                      StrokeCap = SKStrokeCap.Round'                      Color = SKColors.Blue'                  })              {                  // Adjust TextSize property so text is 95% of screen width                  float textWidth = textPaint.MeasureText(text);                  textPaint.TextSize *= 0.95f * info.Width / textWidth;                    // Find the text bounds                  SKRect textBounds;                  textPaint.MeasureText(text' ref textBounds);                    // Calculate offsets to center the text on the screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Animate the phase; t is 0 to 1 every second                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 1 / 1);                  float phase = -t * 2 * strokeWidth;                    // Create dotted line effect based on dash array and phase                  using (SKPathEffect dashEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      // Set it to the paint object                      textPaint.PathEffect = dashEffect;                        // And draw the text                      canvas.DrawText(text' xText' yText' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnimatedDottedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnimatedDottedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      StrokeWidth = strokeWidth'                      StrokeCap = SKStrokeCap.Round'                      Color = SKColors.Blue'                  })              {                  // Adjust TextSize property so text is 95% of screen width                  float textWidth = textPaint.MeasureText(text);                  textPaint.TextSize *= 0.95f * info.Width / textWidth;                    // Find the text bounds                  SKRect textBounds;                  textPaint.MeasureText(text' ref textBounds);                    // Calculate offsets to center the text on the screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Animate the phase; t is 0 to 1 every second                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 1 / 1);                  float phase = -t * 2 * strokeWidth;                    // Create dotted line effect based on dash array and phase                  using (SKPathEffect dashEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      // Set it to the paint object                      textPaint.PathEffect = dashEffect;                        // And draw the text                      canvas.DrawText(text' xText' yText' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: int numVertices = 7;
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int vertex = 0; vertex < numVertices; vertex++)              {                  vertices[vertex] = new SKPoint(radius * (float)Math.Cos(vertexAngle)'                                                 radius * (float)Math.Sin(vertexAngle));                  vertexAngle += 2 * Math.PI / numVertices;              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cornerRadius = 100;
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,AnotherRoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AnotherRoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.AddPoly(vertices' true);                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        // Set argument to half the desired corner radius!                      paint.PathEffect = SKPathEffect.CreateCorner(cornerRadius / 2);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                        // Uncomment DrawCircle call to verify corner radius                      float offset = cornerRadius / (float)Math.Sin(Math.PI * (numVertices - 2) / numVertices / 2);                      paint.Color = SKColors.Green;                      // canvas.DrawCircle(vertices[0].X' vertices[0].Y + offset' cornerRadius' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: catPath.Transform(SKMatrix.MakeTranslation(-240' -175));
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: catPath.Transform(SKMatrix.MakeTranslation(-240' -175));
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: SKPathEffect fillEffect = SKPathEffect.Create2DPath(                  new SKMatrix { ScaleX = 170' ScaleY = 110'                                 TransX = 75' TransY = 80'                                 Persp2 = 1 }'                  outlinedCatPath);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: SKPathEffect fillEffect = SKPathEffect.Create2DPath(                  new SKMatrix { ScaleX = 170' ScaleY = 110'                                 TransX = 75' TransY = 80'                                 Persp2 = 1 }'                  outlinedCatPath);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: SKPathEffect fillEffect = SKPathEffect.Create2DPath(                  new SKMatrix { ScaleX = 170' ScaleY = 110'                                 TransX = 75' TransY = 80'                                 Persp2 = 1 }'                  outlinedCatPath);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: SKPathEffect fillEffect = SKPathEffect.Create2DPath(                  new SKMatrix { ScaleX = 170' ScaleY = 110'                                 TransX = 75' TransY = 80'                                 Persp2 = 1 }'                  outlinedCatPath);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,CatsInFramePage,The following statement contains a magic number: SKPathEffect strokeEffect =                   SKPathEffect.Create1DPath(scallopPath' 75' 0' SKPath1DPathEffectStyle.Rotate);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(50' 50' info.Width - 50' info.Height - 50);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(50' 50' info.Width - 50' info.Height - 50);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(50' 50' info.Width - 50' info.Height - 50);
Magic Number,SkiaSharpFormsDemos.Curves,CatsInFramePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CatsInFramePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(50' 50' info.Width - 50' info.Height - 50);
Magic Number,SkiaSharpFormsDemos.Curves,CharacterOutlineOutlinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CharacterOutlineOutlinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  // Set Style for the character outlines                  textPaint.Style = SKPaintStyle.Stroke;                    // Set TextSize based on screen size                  textPaint.TextSize = Math.Min(info.Width' info.Height);                    // Measure the text                  SKRect textBounds;                  textPaint.MeasureText("@"' ref textBounds);                    // Coordinates to center text on screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Get the path for the character outlines                  using (SKPath textPath = textPaint.GetTextPath("@"' xText' yText))                  {                      // Create a new path for the outlines of the path                      using (SKPath outlinePath = new SKPath())                      {                          // Convert the path to the outlines of the stroked path                          textPaint.StrokeWidth = 25;                          textPaint.GetFillPath(textPath' outlinePath);                            // Stroke that new path                          using (SKPaint outlinePaint = new SKPaint())                          {                              outlinePaint.Style = SKPaintStyle.Stroke;                              outlinePaint.StrokeWidth = 5;                              outlinePaint.Color = SKColors.Red;                                canvas.DrawPath(outlinePath' outlinePaint);                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CharacterOutlineOutlinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CharacterOutlineOutlinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  // Set Style for the character outlines                  textPaint.Style = SKPaintStyle.Stroke;                    // Set TextSize based on screen size                  textPaint.TextSize = Math.Min(info.Width' info.Height);                    // Measure the text                  SKRect textBounds;                  textPaint.MeasureText("@"' ref textBounds);                    // Coordinates to center text on screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Get the path for the character outlines                  using (SKPath textPath = textPaint.GetTextPath("@"' xText' yText))                  {                      // Create a new path for the outlines of the path                      using (SKPath outlinePath = new SKPath())                      {                          // Convert the path to the outlines of the stroked path                          textPaint.StrokeWidth = 25;                          textPaint.GetFillPath(textPath' outlinePath);                            // Stroke that new path                          using (SKPaint outlinePaint = new SKPaint())                          {                              outlinePaint.Style = SKPaintStyle.Stroke;                              outlinePaint.StrokeWidth = 5;                              outlinePaint.Color = SKColors.Red;                                canvas.DrawPath(outlinePath' outlinePaint);                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CharacterOutlineOutlinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CharacterOutlineOutlinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  // Set Style for the character outlines                  textPaint.Style = SKPaintStyle.Stroke;                    // Set TextSize based on screen size                  textPaint.TextSize = Math.Min(info.Width' info.Height);                    // Measure the text                  SKRect textBounds;                  textPaint.MeasureText("@"' ref textBounds);                    // Coordinates to center text on screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Get the path for the character outlines                  using (SKPath textPath = textPaint.GetTextPath("@"' xText' yText))                  {                      // Create a new path for the outlines of the path                      using (SKPath outlinePath = new SKPath())                      {                          // Convert the path to the outlines of the stroked path                          textPaint.StrokeWidth = 25;                          textPaint.GetFillPath(textPath' outlinePath);                            // Stroke that new path                          using (SKPaint outlinePaint = new SKPaint())                          {                              outlinePaint.Style = SKPaintStyle.Stroke;                              outlinePaint.StrokeWidth = 5;                              outlinePaint.Color = SKColors.Red;                                canvas.DrawPath(outlinePath' outlinePaint);                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CharacterOutlineOutlinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CharacterOutlineOutlinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  // Set Style for the character outlines                  textPaint.Style = SKPaintStyle.Stroke;                    // Set TextSize based on screen size                  textPaint.TextSize = Math.Min(info.Width' info.Height);                    // Measure the text                  SKRect textBounds;                  textPaint.MeasureText("@"' ref textBounds);                    // Coordinates to center text on screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    // Get the path for the character outlines                  using (SKPath textPath = textPaint.GetTextPath("@"' xText' yText))                  {                      // Create a new path for the outlines of the path                      using (SKPath outlinePath = new SKPath())                      {                          // Convert the path to the outlines of the stroked path                          textPaint.StrokeWidth = 25;                          textPaint.GetFillPath(textPath' outlinePath);                            // Stroke that new path                          using (SKPaint outlinePaint = new SKPaint())                          {                              outlinePaint.Style = SKPaintStyle.Stroke;                              outlinePaint.StrokeWidth = 5;                              outlinePaint.Color = SKColors.Red;                                canvas.DrawPath(outlinePath' outlinePaint);                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CircularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CircularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circularPath = new SKPath())              {                  float radius = 0.35f * Math.Min(info.Width' info.Height);                  circularPath.AddCircle(info.Width / 2' info.Height / 2' radius);                    using (SKPaint textPaint = new SKPaint())                  {                      textPaint.TextSize = 100;                      float textWidth = textPaint.MeasureText(text);                      textPaint.TextSize *= 2 * 3.14f * radius / textWidth;                        canvas.DrawTextOnPath(text' circularPath' 0' 0' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CircularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CircularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circularPath = new SKPath())              {                  float radius = 0.35f * Math.Min(info.Width' info.Height);                  circularPath.AddCircle(info.Width / 2' info.Height / 2' radius);                    using (SKPaint textPaint = new SKPaint())                  {                      textPaint.TextSize = 100;                      float textWidth = textPaint.MeasureText(text);                      textPaint.TextSize *= 2 * 3.14f * radius / textWidth;                        canvas.DrawTextOnPath(text' circularPath' 0' 0' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CircularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CircularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circularPath = new SKPath())              {                  float radius = 0.35f * Math.Min(info.Width' info.Height);                  circularPath.AddCircle(info.Width / 2' info.Height / 2' radius);                    using (SKPaint textPaint = new SKPaint())                  {                      textPaint.TextSize = 100;                      float textWidth = textPaint.MeasureText(text);                      textPaint.TextSize *= 2 * 3.14f * radius / textWidth;                        canvas.DrawTextOnPath(text' circularPath' 0' 0' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,CircularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\CircularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circularPath = new SKPath())              {                  float radius = 0.35f * Math.Min(info.Width' info.Height);                  circularPath.AddCircle(info.Width / 2' info.Height / 2' radius);                    using (SKPaint textPaint = new SKPaint())                  {                      textPaint.TextSize = 100;                      float textWidth = textPaint.MeasureText(text);                      textPaint.TextSize *= 2 * 3.14f * radius / textWidth;                        canvas.DrawTextOnPath(text' circularPath' 0' 0' textPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (SKClipOperation clipOp in Enum.GetValues(typeof(SKClipOperation)))              {                  // Portrait mode                  if (info.Height > info.Width)                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width' y + info.Height / 2)' clipOp);                      y += info.Height / 2;                  }                  // Landscape mode                  else                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width / 2' y + info.Height)' clipOp);                      x += info.Width / 2;                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (SKClipOperation clipOp in Enum.GetValues(typeof(SKClipOperation)))              {                  // Portrait mode                  if (info.Height > info.Width)                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width' y + info.Height / 2)' clipOp);                      y += info.Height / 2;                  }                  // Landscape mode                  else                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width / 2' y + info.Height)' clipOp);                      x += info.Width / 2;                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (SKClipOperation clipOp in Enum.GetValues(typeof(SKClipOperation)))              {                  // Portrait mode                  if (info.Height > info.Width)                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width' y + info.Height / 2)' clipOp);                      y += info.Height / 2;                  }                  // Landscape mode                  else                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width / 2' y + info.Height)' clipOp);                      x += info.Width / 2;                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (SKClipOperation clipOp in Enum.GetValues(typeof(SKClipOperation)))              {                  // Portrait mode                  if (info.Height > info.Width)                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width' y + info.Height / 2)' clipOp);                      y += info.Height / 2;                  }                  // Landscape mode                  else                  {                      DisplayClipOp(canvas' new SKRect(x' y' x + info.Width / 2' y + info.Height)' clipOp);                      x += info.Width / 2;                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: float radius = 0.9f * Math.Min(rect.Width / 3' rect.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: float radius = 0.9f * Math.Min(rect.Width / 3' rect.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: using (SKPath path1 = new SKPath())              {                  path1.AddCircle(xCenter - radius / 2' yCenter' radius);                  canvas.ClipPath(path1);                    using (SKPath path2 = new SKPath())                  {                      path2.AddCircle(xCenter + radius / 2' yCenter' radius);                      canvas.ClipPath(path2' clipOp);                        canvas.DrawPaint(fillPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClipOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClipOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: using (SKPath path1 = new SKPath())              {                  path1.AddCircle(xCenter - radius / 2' yCenter' radius);                  canvas.ClipPath(path1);                    using (SKPath path2 = new SKPath())                  {                      path2.AddCircle(xCenter + radius / 2' yCenter' radius);                      canvas.ClipPath(path2' clipOp);                        canvas.DrawPaint(fillPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClippingTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClippingTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Typeface = SKTypeface.FromFamilyName(null' SKTypefaceStyle.Bold);                  paint.TextSize = 10;                    using (SKPath textPath = paint.GetTextPath("CODE"' 0' 0))                  {                      // Set transform to center and enlarge clip path to window height                      SKRect bounds;                      textPath.GetTightBounds(out bounds);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(info.Width / bounds.Width' info.Height / bounds.Height);                      canvas.Translate(-bounds.MidX' -bounds.MidY);                        // Set the clip path                      canvas.ClipPath(textPath);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClippingTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClippingTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Typeface = SKTypeface.FromFamilyName(null' SKTypefaceStyle.Bold);                  paint.TextSize = 10;                    using (SKPath textPath = paint.GetTextPath("CODE"' 0' 0))                  {                      // Set transform to center and enlarge clip path to window height                      SKRect bounds;                      textPath.GetTightBounds(out bounds);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(info.Width / bounds.Width' info.Height / bounds.Height);                      canvas.Translate(-bounds.MidX' -bounds.MidY);                        // Set the clip path                      canvas.ClipPath(textPath);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ClippingTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ClippingTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Typeface = SKTypeface.FromFamilyName(null' SKTypefaceStyle.Bold);                  paint.TextSize = 10;                    using (SKPath textPath = paint.GetTextPath("CODE"' 0' 0))                  {                      // Set transform to center and enlarge clip path to window height                      SKRect bounds;                      textPath.GetTightBounds(out bounds);                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(info.Width / bounds.Width' info.Height / bounds.Height);                      canvas.Translate(-bounds.MidX' -bounds.MidY);                        // Set the clip path                      canvas.ClipPath(textPath);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRect(new SKRect(-5' -3' 25' 3));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRect(new SKRect(-5' -3' 25' 3));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRect(new SKRect(-5' -3' 25' 3));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRect(new SKRect(-5' -3' 25' 3));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(25' -19' 27' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.AddRoundedRect(new SKRect(63' -19' 65' 18)' 10' 10'                                         SKPathDirection.CounterClockwise);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  bucketPath.MoveTo(25' -19 + 8 * i);                  bucketPath.LineTo(25' -13 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.CounterClockwise' 65' -13 + 8 * i);                  bucketPath.LineTo(65' -19 + 8 * i);                  bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                    SKPathDirection.Clockwise' 25' -19 + 8 * i);                  bucketPath.Close();              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.MoveTo(25' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.MoveTo(25' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.Clockwise' 65' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.Clockwise' 65' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.Clockwise' 65' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.Clockwise' 65' -17);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.LineTo(65' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.LineTo(65' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.CounterClockwise' 25' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.CounterClockwise' 25' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.CounterClockwise' 25' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.ArcTo(50' 50' 0' SKPathArcSize.Small'                                   SKPathDirection.CounterClockwise' 25' -19);
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.Transform(SKMatrix.MakeScale(-2' 2));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.Transform(SKMatrix.MakeScale(-2' 2));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,ConveyorBeltPage,The following statement contains a magic number: bucketPath.Transform(SKMatrix.MakeRotationDegrees(90));
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float width = info.Width / 3;
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float verticalMargin = width / 2 + 150;
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float verticalMargin = width / 2 + 150;
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConveyorBeltPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConveyorBeltPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath conveyerPath = new SKPath())              {                  // Straight verticals capped by semicircles on top and bottom                  conveyerPath.MoveTo(width' verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' 2 * width' verticalMargin);                  conveyerPath.LineTo(2 * width' info.Height - verticalMargin);                  conveyerPath.ArcTo(width / 2' width / 2' 0' SKPathArcSize.Large'                                      SKPathDirection.Clockwise' width' info.Height - verticalMargin);                  conveyerPath.Close();                    // Draw the conveyor belt itself                  canvas.DrawPath(conveyerPath' conveyerPaint);                    // Calculate spacing based on length of conveyer path                  float length = 2 * (info.Height - 2 * verticalMargin) +                                 2 * ((float)Math.PI * width / 2);                    // Value will be somewhere around 200                  float spacing = length / (float)Math.Round(length / 200);                    // Now animate the phase; t is 0 to 1 every 2 seconds                  TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 2 / 2);                  float phase = -t * spacing;                    // Create the buckets PathEffect                  using (SKPathEffect bucketsPathEffect =                               SKPathEffect.Create1DPath(bucketPath' spacing' phase'                                                         SKPath1DPathEffectStyle.Rotate))                  {                      // Set it to the Paint object and draw the path again                      bucketsPaint.PathEffect = bucketsPathEffect;                      canvas.DrawPath(conveyerPath' bucketsPaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DashedHatchLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DashedHatchLinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawOval(info.Width / 2' info.Height / 2'                               0.45f * info.Width' 0.45f * info.Height'                               paint);
Magic Number,SkiaSharpFormsDemos.Curves,DashedHatchLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DashedHatchLinesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawOval(info.Width / 2' info.Height / 2'                               0.45f * info.Width' 0.45f * info.Height'                               paint);
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,DotDashMorphPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\DotDashMorphPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath ellipsePath = new SKPath())              {                  ellipsePath.AddOval(new SKRect(50' 50' info.Width - 50' info.Height - 50));                    // Create animated path effect                   TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                  float t = (float)(timeSpan.TotalSeconds % 3 / 3);                  float phase = 0;                    if (t < 0.25f)  // 1' 0' 1' 2 --> 0' 2' 0' 2                  {                      float tsub = 4 * t;                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2 * tsub;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2;                  }                  else if (t < 0.5f)  // 0' 2' 0' 2 --> 1' 2' 1' 0                  {                      float tsub = 4 * (t - 0.25f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2 * (1 - tsub);                      phase = strokeWidth * tsub;                  }                  else if (t < 0.75f) // 1' 2' 1' 0 --> 0' 2' 0' 2                  {                      float tsub = 4 * (t - 0.5f);                      dashArray[0] = strokeWidth * (1 - tsub);                      dashArray[1] = strokeWidth * 2;                      dashArray[2] = strokeWidth * (1 - tsub);                      dashArray[3] = strokeWidth * 2 * tsub;                      phase = strokeWidth * (1 - tsub);                  }                  else               // 0' 2' 0' 2 --> 1' 0' 1' 2                  {                      float tsub = 4 * (t - 0.75f);                      dashArray[0] = strokeWidth * tsub;                      dashArray[1] = strokeWidth * 2 * (1 - tsub);                      dashArray[2] = strokeWidth * tsub;                      dashArray[3] = strokeWidth * 2;                  }                    using (SKPathEffect pathEffect = SKPathEffect.CreateDash(dashArray' phase))                  {                      ellipsePaint.PathEffect = pathEffect;                      canvas.DrawPath(ellipsePath' ellipsePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourCircleIntersectClipPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourCircleIntersectClipPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float offset = size / 2 - radius;
Magic Number,SkiaSharpFormsDemos.Curves,FourCircleIntersectClipPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourCircleIntersectClipPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,FourCircleIntersectClipPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourCircleIntersectClipPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xCenter = info.Width / 2;
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yCenter = info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,FourLeafCloverPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\FourLeafCloverPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKRegion wholeScreenRegion = new SKRegion())              {                  wholeScreenRegion.SetRect(new SKRectI(0' 0' info.Width' info.Height));                    using (SKRegion leftRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion rightRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion topRegion = new SKRegion(wholeScreenRegion))                  using (SKRegion bottomRegion = new SKRegion(wholeScreenRegion))                  {                      using (SKPath circlePath = new SKPath())                      {                          // Make basic circle path                          circlePath.AddCircle(xCenter' yCenter' radius);                            // Left leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' 0));                          leftRegion.SetPath(circlePath);                            // Right leaf                          circlePath.Transform(SKMatrix.MakeTranslation(2 * radius' 0));                          rightRegion.SetPath(circlePath);                            // Make union of right with left                          leftRegion.Op(rightRegion' SKRegionOperation.Union);                            // Top leaf                          circlePath.Transform(SKMatrix.MakeTranslation(-radius' -radius));                          topRegion.SetPath(circlePath);                            // Combine with bottom leaf                          circlePath.Transform(SKMatrix.MakeTranslation(0' 2 * radius));                          bottomRegion.SetPath(circlePath);                            // Make union of top with bottom                          bottomRegion.Op(topRegion' SKRegionOperation.Union);                            // Exclusive-OR left and right with top and bottom                          leftRegion.Op(bottomRegion' SKRegionOperation.XOR);                            // Set that as clip region                          canvas.ClipRegion(leftRegion);                            // Set transform for drawing lines from center                          canvas.Translate(xCenter' yCenter);                            // Draw 360 lines                          for (double angle = 0; angle < 360; angle++)                          {                              float x = 2 * radius * (float)Math.Cos(Math.PI * angle / 180);                              float y = 2 * radius * (float)Math.Sin(Math.PI * angle / 180);                                using (SKPaint strokePaint = new SKPaint())                              {                                  strokePaint.Color = SKColors.Green;                                  strokePaint.StrokeWidth = 2;                                    canvas.DrawLine(0' 0' x' y' strokePaint);                              }                          }                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,GlobularTextPage,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Typeface = SKTypeface.FromFamilyName("Times New Roman");                  textPaint.TextSize = 100;                    using (SKPath textPath = textPaint.GetTextPath("HELLO"' 0' 0))                  {                      SKRect textPathBounds;                      textPath.GetBounds(out textPathBounds);                        globePath = textPath.CloneWithTransform((SKPoint pt) =>                      {                          double longitude = (Math.PI / textPathBounds.Width) *                                                   (pt.X - textPathBounds.Left) - Math.PI / 2;                          double latitude = (Math.PI / textPathBounds.Height) *                                                   (pt.Y - textPathBounds.Top) - Math.PI / 2;                            longitude *= 0.75;                          latitude *= 0.75;                            float x = (float)(Math.Cos(latitude) * Math.Sin(longitude));                          float y = (float)Math.Sin(latitude);                            return new SKPoint(x' y);                      });                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,GlobularTextPage,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Typeface = SKTypeface.FromFamilyName("Times New Roman");                  textPaint.TextSize = 100;                    using (SKPath textPath = textPaint.GetTextPath("HELLO"' 0' 0))                  {                      SKRect textPathBounds;                      textPath.GetBounds(out textPathBounds);                        globePath = textPath.CloneWithTransform((SKPoint pt) =>                      {                          double longitude = (Math.PI / textPathBounds.Width) *                                                   (pt.X - textPathBounds.Left) - Math.PI / 2;                          double latitude = (Math.PI / textPathBounds.Height) *                                                   (pt.Y - textPathBounds.Top) - Math.PI / 2;                            longitude *= 0.75;                          latitude *= 0.75;                            float x = (float)(Math.Cos(latitude) * Math.Sin(longitude));                          float y = (float)Math.Sin(latitude);                            return new SKPoint(x' y);                      });                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,GlobularTextPage,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Typeface = SKTypeface.FromFamilyName("Times New Roman");                  textPaint.TextSize = 100;                    using (SKPath textPath = textPaint.GetTextPath("HELLO"' 0' 0))                  {                      SKRect textPathBounds;                      textPath.GetBounds(out textPathBounds);                        globePath = textPath.CloneWithTransform((SKPoint pt) =>                      {                          double longitude = (Math.PI / textPathBounds.Width) *                                                   (pt.X - textPathBounds.Left) - Math.PI / 2;                          double latitude = (Math.PI / textPathBounds.Height) *                                                   (pt.Y - textPathBounds.Top) - Math.PI / 2;                            longitude *= 0.75;                          latitude *= 0.75;                            float x = (float)(Math.Cos(latitude) * Math.Sin(longitude));                          float y = (float)Math.Sin(latitude);                            return new SKPoint(x' y);                      });                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,GlobularTextPage,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Typeface = SKTypeface.FromFamilyName("Times New Roman");                  textPaint.TextSize = 100;                    using (SKPath textPath = textPaint.GetTextPath("HELLO"' 0' 0))                  {                      SKRect textPathBounds;                      textPath.GetBounds(out textPathBounds);                        globePath = textPath.CloneWithTransform((SKPoint pt) =>                      {                          double longitude = (Math.PI / textPathBounds.Width) *                                                   (pt.X - textPathBounds.Left) - Math.PI / 2;                          double latitude = (Math.PI / textPathBounds.Height) *                                                   (pt.Y - textPathBounds.Top) - Math.PI / 2;                            longitude *= 0.75;                          latitude *= 0.75;                            float x = (float)(Math.Cos(latitude) * Math.Sin(longitude));                          float y = (float)Math.Sin(latitude);                            return new SKPoint(x' y);                      });                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,GlobularTextPage,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Typeface = SKTypeface.FromFamilyName("Times New Roman");                  textPaint.TextSize = 100;                    using (SKPath textPath = textPaint.GetTextPath("HELLO"' 0' 0))                  {                      SKRect textPathBounds;                      textPath.GetBounds(out textPathBounds);                        globePath = textPath.CloneWithTransform((SKPoint pt) =>                      {                          double longitude = (Math.PI / textPathBounds.Width) *                                                   (pt.X - textPathBounds.Left) - Math.PI / 2;                          double latitude = (Math.PI / textPathBounds.Height) *                                                   (pt.Y - textPathBounds.Top) - Math.PI / 2;                            longitude *= 0.75;                          latitude *= 0.75;                            float x = (float)(Math.Cos(latitude) * Math.Sin(longitude));                          float y = (float)Math.Sin(latitude);                            return new SKPoint(x' y);                      });                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint pathPaint = new SKPaint())              {                  pathPaint.Style = SKPaintStyle.Fill;                  pathPaint.Color = SKColors.Blue;                  pathPaint.StrokeWidth = 3;                  pathPaint.IsAntialias = true;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.45f * Math.Min(info.Width' info.Height));     // radius                  canvas.DrawPath(globePath' pathPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint pathPaint = new SKPaint())              {                  pathPaint.Style = SKPaintStyle.Fill;                  pathPaint.Color = SKColors.Blue;                  pathPaint.StrokeWidth = 3;                  pathPaint.IsAntialias = true;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.45f * Math.Min(info.Width' info.Height));     // radius                  canvas.DrawPath(globePath' pathPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,GlobularTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\GlobularTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint pathPaint = new SKPaint())              {                  pathPaint.Style = SKPaintStyle.Fill;                  pathPaint.Color = SKColors.Blue;                  pathPaint.StrokeWidth = 3;                  pathPaint.IsAntialias = true;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.45f * Math.Min(info.Width' info.Height));     // radius                  canvas.DrawPath(globePath' pathPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,HatchFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\HatchFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath roundRectPath = new SKPath())              {                  // Create a path                   roundRectPath.AddRoundedRect(                      new SKRect(50' 50' info.Width - 50' info.Height - 50)' 100' 100);                    // Horizontal hatch marks                  fillPaint.PathEffect = horzLinesPath;                  fillPaint.Color = SKColors.Red;                  canvas.DrawPath(roundRectPath' fillPaint);                     // Vertical hatch marks                  fillPaint.PathEffect = vertLinesPath;                  fillPaint.Color = SKColors.Blue;                  canvas.DrawPath(roundRectPath' fillPaint);                    // Diagonal hatch marks -- use clipping                  fillPaint.PathEffect = diagLinesPath;                  fillPaint.Color = SKColors.Green;                    canvas.Save();                  canvas.ClipPath(roundRectPath);                  canvas.DrawRect(new SKRect(0' 0' info.Width' info.Height)' fillPaint);                  canvas.Restore();                    // Outline the path                  canvas.DrawPath(roundRectPath' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                   paint.StrokeWidth = 5;                  paint.Color = SKColors.Blue;                    using (SKPathEffect pathEffect = SKPathEffect.CreateDiscrete(segLength' deviation))                  {                      paint.PathEffect = pathEffect;                        SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);                      canvas.DrawRect(rect' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                   paint.StrokeWidth = 5;                  paint.Color = SKColors.Blue;                    using (SKPathEffect pathEffect = SKPathEffect.CreateDiscrete(segLength' deviation))                  {                      paint.PathEffect = pathEffect;                        SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);                      canvas.DrawRect(rect' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                   paint.StrokeWidth = 5;                  paint.Color = SKColors.Blue;                    using (SKPathEffect pathEffect = SKPathEffect.CreateDiscrete(segLength' deviation))                  {                      paint.PathEffect = pathEffect;                        SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);                      canvas.DrawRect(rect' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                   paint.StrokeWidth = 5;                  paint.Color = SKColors.Blue;                    using (SKPathEffect pathEffect = SKPathEffect.CreateDiscrete(segLength' deviation))                  {                      paint.PathEffect = pathEffect;                        SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);                      canvas.DrawRect(rect' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                   paint.StrokeWidth = 5;                  paint.Color = SKColors.Blue;                    using (SKPathEffect pathEffect = SKPathEffect.CreateDiscrete(segLength' deviation))                  {                      paint.PathEffect = pathEffect;                        SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);                      canvas.DrawRect(rect' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,LinkedChainPage,The following statement contains a magic number: using (SKPath linkPath = new SKPath())              {                  linkPath.AddArc(outer' 55' 160);                  linkPath.ArcTo(inner' 215' -160' false);                  linkPath.Close();                    linkPath.AddArc(outer' 235' 160);                  linkPath.ArcTo(inner' 395' -160' false);                  linkPath.Close();                    // Set that path as the 1D path effect for linksPaint                  linksPaint.PathEffect =                       SKPathEffect.Create1DPath(linkPath' 1.3f * linkRadius' 0'                                                 SKPath1DPathEffectStyle.Rotate);              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yOffset = catenary(optA' -width / 2);
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int x = 0; x < width; x++)              {                  points[x] = new SKPoint(x' yOffset - catenary(optA' x - width / 2));              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,FindOptimumA,The following statement contains a magic number: Func<float' float> left = (float a) => (float)Math.Cosh(width / 2 / a);
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,FindOptimumA,The following statement contains a magic number: float ltA = 10000;
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,FindOptimumA,The following statement contains a magic number: while (Math.Abs(gtA - ltA) > 0.1f)              {                  float avgA = (gtA + ltA) / 2;                    if (left(avgA) < right(avgA))                  {                      ltA = avgA;                  }                  else                  {                      gtA = avgA;                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,LinkedChainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\LinkedChainPage.cs,FindOptimumA,The following statement contains a magic number: return (gtA + ltA) / 2;
Magic Number,SkiaSharpFormsDemos.Curves,MonkeyThroughKeyholePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\MonkeyThroughKeyholePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,MonkeyThroughKeyholePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\MonkeyThroughKeyholePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,MonkeyThroughKeyholePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\MonkeyThroughKeyholePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawBitmap(bitmap'                   new SKRect((info.Width - info.Height) / 2' 0'                             (info.Width + info.Height) / 2' info.Height));
Magic Number,SkiaSharpFormsDemos.Curves,MonkeyThroughKeyholePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\MonkeyThroughKeyholePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawBitmap(bitmap'                   new SKRect((info.Width - info.Height) / 2' 0'                             (info.Width + info.Height) / 2' info.Height));
Magic Number,SkiaSharpFormsDemos.Curves,OneDimensionalPathEffectPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\OneDimensionalPathEffectPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(new SKPoint(0' 0));                  path.CubicTo(new SKPoint(2 * info.Width' info.Height)'                               new SKPoint(-info.Width' info.Height)'                               new SKPoint(info.Width' 0));                    switch (effectStylePicker.Items[effectStylePicker.SelectedIndex])                  {                      case "Translate":                          pathPaint.PathEffect = translatePathEffect;                          break;                        case "Rotate":                          pathPaint.PathEffect = rotatePathEffect;                          break;                        case "Morph":                          pathPaint.PathEffect = morphPathEffect;                          break;                  }                    canvas.DrawPath(path' pathPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Color = SKColors.Purple;                  textPaint.PathEffect = SKPathEffect.CreateDiscrete(3f' 10f);                    // Adjust TextSize property so text is 95% of screen width                  float textWidth = textPaint.MeasureText(text);                  textPaint.TextSize *= 0.95f * info.Width / textWidth;                    // Find the text bounds                  SKRect textBounds;                  textPaint.MeasureText(text' ref textBounds);                    // Calculate offsets to center the text on the screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,JitterTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\JitterTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Color = SKColors.Purple;                  textPaint.PathEffect = SKPathEffect.CreateDiscrete(3f' 10f);                    // Adjust TextSize property so text is 95% of screen width                  float textWidth = textPaint.MeasureText(text);                  textPaint.TextSize *= 0.95f * info.Width / textWidth;                    // Find the text bounds                  SKRect textBounds;                  textPaint.MeasureText(text' ref textBounds);                    // Calculate offsets to center the text on the screen                  float xText = info.Width / 2 - textBounds.MidX;                  float yText = info.Height / 2 - textBounds.MidY;                    canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following statement contains a magic number: using (SKPath.RawIterator iterator = pathIn.CreateRawIterator())              {                  SKPoint[] points = new SKPoint[4];                  SKPathVerb pathVerb = SKPathVerb.Move;                  SKPoint firstPoint = new SKPoint();                  SKPoint lastPoint = new SKPoint();                    while ((pathVerb = iterator.Next(points)) != SKPathVerb.Done)                  {                      switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenCubic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * (1 - t) * pt0.X +                            3 * t * (1 - t) * (1 - t) * pt1.X +                            3 * t * t * (1 - t) * pt2.X +                            t * t * t * pt3.X;                  float y = (1 - t) * (1 - t) * (1 - t) * pt0.Y +                            3 * t * (1 - t) * (1 - t) * pt1.Y +                            3 * t * t * (1 - t) * pt2.Y +                            t * t * t * pt3.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenCubic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * (1 - t) * pt0.X +                            3 * t * (1 - t) * (1 - t) * pt1.X +                            3 * t * t * (1 - t) * pt2.X +                            t * t * t * pt3.X;                  float y = (1 - t) * (1 - t) * (1 - t) * pt0.Y +                            3 * t * (1 - t) * (1 - t) * pt1.Y +                            3 * t * t * (1 - t) * pt2.Y +                            t * t * t * pt3.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenCubic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * (1 - t) * pt0.X +                            3 * t * (1 - t) * (1 - t) * pt1.X +                            3 * t * t * (1 - t) * pt2.X +                            t * t * t * pt3.X;                  float y = (1 - t) * (1 - t) * (1 - t) * pt0.Y +                            3 * t * (1 - t) * (1 - t) * pt1.Y +                            3 * t * t * (1 - t) * pt2.Y +                            t * t * t * pt3.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenCubic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * (1 - t) * pt0.X +                            3 * t * (1 - t) * (1 - t) * pt1.X +                            3 * t * t * (1 - t) * pt2.X +                            t * t * t * pt3.X;                  float y = (1 - t) * (1 - t) * (1 - t) * pt0.Y +                            3 * t * (1 - t) * (1 - t) * pt1.Y +                            3 * t * t * (1 - t) * pt2.Y +                            t * t * t * pt3.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenQuadratic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * pt0.X + 2 * t * (1 - t) * pt1.X + t * t * pt2.X;                  float y = (1 - t) * (1 - t) * pt0.Y + 2 * t * (1 - t) * pt1.Y + t * t * pt2.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenQuadratic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float x = (1 - t) * (1 - t) * pt0.X + 2 * t * (1 - t) * pt1.X + t * t * pt2.X;                  float y = (1 - t) * (1 - t) * pt0.Y + 2 * t * (1 - t) * pt1.Y + t * t * pt2.Y;                  points[i] = new SKPoint(x' y);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenConic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float denominator = (1 - t) * (1 - t) + 2 * weight * t * (1 - t) + t * t;                  float x = (1 - t) * (1 - t) * pt0.X + 2 * weight * t * (1 - t) * pt1.X + t * t * pt2.X;                  float y = (1 - t) * (1 - t) * pt0.Y + 2 * weight * t * (1 - t) * pt1.Y + t * t * pt2.Y;                  x /= denominator;                  y /= denominator;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenConic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float denominator = (1 - t) * (1 - t) + 2 * weight * t * (1 - t) + t * t;                  float x = (1 - t) * (1 - t) * pt0.X + 2 * weight * t * (1 - t) * pt1.X + t * t * pt2.X;                  float y = (1 - t) * (1 - t) * pt0.Y + 2 * weight * t * (1 - t) * pt1.Y + t * t * pt2.Y;                  x /= denominator;                  y /= denominator;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,FlattenConic,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  float t = (i + 1f) / count;                  float denominator = (1 - t) * (1 - t) + 2 * weight * t * (1 - t) + t * t;                  float x = (1 - t) * (1 - t) * pt0.X + 2 * weight * t * (1 - t) * pt1.X + t * t * pt2.X;                  float y = (1 - t) * (1 - t) * pt0.Y + 2 * weight * t * (1 - t) * pt1.Y + t * t * pt2.Y;                  x /= denominator;                  y /= denominator;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,Length,The following statement contains a magic number: return Math.Sqrt(Math.Pow(pt1.X - pt0.X' 2) + Math.Pow(pt1.Y - pt0.Y' 2));
Magic Number,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,Length,The following statement contains a magic number: return Math.Sqrt(Math.Pow(pt1.X - pt0.X' 2) + Math.Pow(pt1.Y - pt0.Y' 2));
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: touchPoints = new TouchPoint[4];
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,PathLengthPage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.CubicTo(touchPoints[1].Center'                               touchPoints[2].Center'                               touchPoints[3].Center);                    canvas.DrawPath(path' strokePaint);                    // Get path length                  SKPathMeasure pathMeasure = new SKPathMeasure(path' false' 1);                    // Find new text size                  textPaint.TextSize = pathMeasure.Length / baseTextWidth * 10;                    // Draw text on path                  canvas.DrawTextOnPath(text' path' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.CubicTo(touchPoints[1].Center'                               touchPoints[2].Center'                               touchPoints[3].Center);                    canvas.DrawPath(path' strokePaint);                    // Get path length                  SKPathMeasure pathMeasure = new SKPathMeasure(path' false' 1);                    // Find new text size                  textPaint.TextSize = pathMeasure.Length / baseTextWidth * 10;                    // Draw text on path                  canvas.DrawTextOnPath(text' path' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,PathLengthPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathLengthPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.CubicTo(touchPoints[1].Center'                               touchPoints[2].Center'                               touchPoints[3].Center);                    canvas.DrawPath(path' strokePaint);                    // Get path length                  SKPathMeasure pathMeasure = new SKPathMeasure(path' false' 1);                    // Find new text size                  textPaint.TextSize = pathMeasure.Length / baseTextWidth * 10;                    // Draw text on path                  canvas.DrawTextOnPath(text' path' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,TapToOutlineThePathPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TapToOutlineThePathPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(info.Width / 2' info.Height / 2'                                       Math.Min(info.Width / 2' info.Height / 2) -                                        redThickStroke.StrokeWidth);                    if (!outlineThePath)                  {                      canvas.DrawPath(circlePath' blueFill);                      canvas.DrawPath(circlePath' redThickStroke);                  }                  else                  {                      using (SKPath outlinePath = new SKPath())                      {                          redThickStroke.GetFillPath(circlePath' outlinePath);                            canvas.DrawPath(outlinePath' blueFill);                          canvas.DrawPath(outlinePath' redThinStroke);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,TapToOutlineThePathPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TapToOutlineThePathPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(info.Width / 2' info.Height / 2'                                       Math.Min(info.Width / 2' info.Height / 2) -                                        redThickStroke.StrokeWidth);                    if (!outlineThePath)                  {                      canvas.DrawPath(circlePath' blueFill);                      canvas.DrawPath(circlePath' redThickStroke);                  }                  else                  {                      using (SKPath outlinePath = new SKPath())                      {                          redThickStroke.GetFillPath(circlePath' outlinePath);                            canvas.DrawPath(outlinePath' blueFill);                          canvas.DrawPath(outlinePath' redThinStroke);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,TapToOutlineThePathPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TapToOutlineThePathPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(info.Width / 2' info.Height / 2'                                       Math.Min(info.Width / 2' info.Height / 2) -                                        redThickStroke.StrokeWidth);                    if (!outlineThePath)                  {                      canvas.DrawPath(circlePath' blueFill);                      canvas.DrawPath(circlePath' redThickStroke);                  }                  else                  {                      using (SKPath outlinePath = new SKPath())                      {                          redThickStroke.GetFillPath(circlePath' outlinePath);                            canvas.DrawPath(outlinePath' blueFill);                          canvas.DrawPath(outlinePath' redThinStroke);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,TapToOutlineThePathPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TapToOutlineThePathPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(info.Width / 2' info.Height / 2'                                       Math.Min(info.Width / 2' info.Height / 2) -                                        redThickStroke.StrokeWidth);                    if (!outlineThePath)                  {                      canvas.DrawPath(circlePath' blueFill);                      canvas.DrawPath(circlePath' redThickStroke);                  }                  else                  {                      using (SKPath outlinePath = new SKPath())                      {                          redThickStroke.GetFillPath(circlePath' outlinePath);                            canvas.DrawPath(outlinePath' blueFill);                          canvas.DrawPath(outlinePath' redThinStroke);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PathTileFillPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathTileFillPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Color = SKColors.Red;                    using (SKPathEffect pathEffect =                         SKPathEffect.Create2DPath(SKMatrix.MakeScale(64' 64)' tilePath))                  {                      paint.PathEffect = pathEffect;                        canvas.DrawRoundRect(                          new SKRect(50' 50' info.Width - 50' info.Height - 50)'                           100' 100' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Scale(Math.Min(info.Width / 200' info.Height / 200));
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Scale(Math.Min(info.Width / 200' info.Height / 200));
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(-90' -90' 90' 90);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(-90' -90' 90' 90);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(-90' -90' 90' 90);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(-90' -90' 90' 90);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: double t = dateTime.Millisecond / 1000.0;
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,SkiaSharpFormsDemos.Curves,PrettyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PrettyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.RotateDegrees(6 * (dateTime.Second + (float)t));
Magic Number,SkiaSharpFormsDemos.Curves,AngleArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AngleArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);
Magic Number,SkiaSharpFormsDemos.Curves,AngleArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AngleArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);
Magic Number,SkiaSharpFormsDemos.Curves,AngleArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AngleArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);
Magic Number,SkiaSharpFormsDemos.Curves,AngleArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\AngleArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKRect rect = new SKRect(100' 100' info.Width - 100' info.Height - 100);
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ArcInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ArcInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.LineTo(83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.CounterClockwise' 83' -75);                  path.LineTo(-83' 75);                  path.ArcTo(100' 100' 0' SKPathArcSize.Large' SKPathDirection.Clockwise' -83' -75);                  path.Close();                    // Use path.TightBounds for coordinates without control points                  SKRect pathBounds = path.Bounds;                    canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,BezierCircularArcPage,The following statement contains a magic number: angleSlider.Value = 90;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width' info.Height) / 3;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float length = radius * 4 * (float)Math.Tan(Math.PI * angle / 180 / 4) / 3;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float length = radius * 4 * (float)Math.Tan(Math.PI * angle / 180 / 4) / 3;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float length = radius * 4 * (float)Math.Tan(Math.PI * angle / 180 / 4) / 3;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float length = radius * 4 * (float)Math.Tan(Math.PI * angle / 180 / 4) / 3;
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float sin = (float)Math.Sin(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float sin = (float)Math.Sin(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cos = (float)Math.Cos(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cos = (float)Math.Cos(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point0.X' point0.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point1.X' point1.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point2.X' point2.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point3.X' point3.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: touchPoints = new TouchPoint[4];
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,BezierCurvePage,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * (i % 2)'                                           100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.CubicTo(touchPoints[1].Center'                                touchPoints[2].Center'                                touchPoints[3].Center);                    canvas.DrawPath(path' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.CubicTo(touchPoints[1].Center'                                touchPoints[2].Center'                                touchPoints[3].Center);                    canvas.DrawPath(path' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[2].Center.X'                              touchPoints[2].Center.Y'                              touchPoints[3].Center.X'                              touchPoints[3].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[2].Center.X'                              touchPoints[2].Center.Y'                              touchPoints[3].Center.X'                              touchPoints[3].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[2].Center.X'                              touchPoints[2].Center.Y'                              touchPoints[3].Center.X'                              touchPoints[3].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,BezierCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[2].Center.X'                              touchPoints[2].Center.Y'                              touchPoints[3].Center.X'                              touchPoints[3].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,BezierInfinityPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\BezierInfinityPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(0' 0);                                // Center                   path.CubicTo(  50'  -50'   95' -100'  150' -100); // To top of right loop                  path.CubicTo( 205' -100'  250'  -55'  250'    0); // To far right of right loop                  path.CubicTo( 250'   55'  205'  100'  150'  100); // To bottom of right loop                  path.CubicTo(  95'  100'   50'   50'    0'    0); // Back to center                  path.CubicTo( -50'  -50'  -95' -100' -150' -100); // To top of left loop                  path.CubicTo(-205' -100' -250'  -55' -250'    0); // To far left of left loop                  path.CubicTo(-250'   55' -205'  100' -150'  100); // To bottom of left loop                  path.CubicTo( -95'  100'  -50'   50'    0'    0); // Back to center                  path.Close();                    SKRect pathBounds = path.Bounds;                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.Scale(0.9f * Math.Min(info.Width / pathBounds.Width'                                               info.Height / pathBounds.Height));                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 5;                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,ConicCircularArcPage,The following statement contains a magic number: angleSlider.Value = 90;
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width' info.Height) / 4;
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float sin = (float)Math.Sin(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float sin = (float)Math.Sin(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cos = (float)Math.Cos(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cos = (float)Math.Cos(Math.PI * angle / 180 / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point0.X' point0.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point1.X' point1.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCircularArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCircularArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawCircle(point2.X' point2.Y' 10' blackFill);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: touchPoints = new TouchPoint[3];
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,ConicCurvePage,The following statement contains a magic number: weightSlider.Value = 0.5;
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.ConicTo(touchPoints[1].Center'                               touchPoints[2].Center'                               (float)weightSlider.Value);                    canvas.DrawPath(path' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[1].Center.X'                              touchPoints[1].Center.Y'                              touchPoints[2].Center.X'                              touchPoints[2].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,ConicCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ConicCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[1].Center.X'                              touchPoints[1].Center.Y'                              touchPoints[2].Center.X'                              touchPoints[2].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: touchPoints = new TouchPoint[2];
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(300' 100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(300' 100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(300' 100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(300' 100 + 200 * i)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: xRadiusSlider.Value = 150;
Magic Number,SkiaSharpFormsDemos.Curves,EllipticalArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\EllipticalArcPage.xaml.cs,EllipticalArcPage,The following statement contains a magic number: yRadiusSlider.Value = 125;
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float explodeOffset = 50;
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width / 2' info.Height / 2) - 2 * explodeOffset;
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width / 2' info.Height / 2) - 2 * explodeOffset;
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width / 2' info.Height / 2) - 2 * explodeOffset;
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (ChartData item in chartData)              {                  float sweepAngle = 360f * item.Value / totalValues;                    using (SKPath path = new SKPath())                  using (SKPaint fillPaint = new SKPaint())                  using (SKPaint outlinePaint = new SKPaint())                  {                      path.MoveTo(center);                      path.ArcTo(rect' startAngle' sweepAngle' false);                      path.Close();                        fillPaint.Style = SKPaintStyle.Fill;                      fillPaint.Color = item.Color;                        outlinePaint.Style = SKPaintStyle.Stroke;                      outlinePaint.StrokeWidth = 5;                      outlinePaint.Color = SKColors.Black;                        // Calculate "explode" transform                      float angle = startAngle + 0.5f * sweepAngle;                      float x = explodeOffset * (float)Math.Cos(Math.PI * angle / 180);                      float y = explodeOffset * (float)Math.Sin(Math.PI * angle / 180);                        canvas.Save();                      canvas.Translate(x' y);                        // Fill and stroke the path                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' outlinePaint);                      canvas.Restore();                  }                    startAngle += sweepAngle;              }
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (ChartData item in chartData)              {                  float sweepAngle = 360f * item.Value / totalValues;                    using (SKPath path = new SKPath())                  using (SKPaint fillPaint = new SKPaint())                  using (SKPaint outlinePaint = new SKPaint())                  {                      path.MoveTo(center);                      path.ArcTo(rect' startAngle' sweepAngle' false);                      path.Close();                        fillPaint.Style = SKPaintStyle.Fill;                      fillPaint.Color = item.Color;                        outlinePaint.Style = SKPaintStyle.Stroke;                      outlinePaint.StrokeWidth = 5;                      outlinePaint.Color = SKColors.Black;                        // Calculate "explode" transform                      float angle = startAngle + 0.5f * sweepAngle;                      float x = explodeOffset * (float)Math.Cos(Math.PI * angle / 180);                      float y = explodeOffset * (float)Math.Sin(Math.PI * angle / 180);                        canvas.Save();                      canvas.Translate(x' y);                        // Fill and stroke the path                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' outlinePaint);                      canvas.Restore();                  }                    startAngle += sweepAngle;              }
Magic Number,SkiaSharpFormsDemos.Curves,ExplodedPieChartPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\ExplodedPieChartPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (ChartData item in chartData)              {                  float sweepAngle = 360f * item.Value / totalValues;                    using (SKPath path = new SKPath())                  using (SKPaint fillPaint = new SKPaint())                  using (SKPaint outlinePaint = new SKPaint())                  {                      path.MoveTo(center);                      path.ArcTo(rect' startAngle' sweepAngle' false);                      path.Close();                        fillPaint.Style = SKPaintStyle.Fill;                      fillPaint.Color = item.Color;                        outlinePaint.Style = SKPaintStyle.Stroke;                      outlinePaint.StrokeWidth = 5;                      outlinePaint.Color = SKColors.Black;                        // Calculate "explode" transform                      float angle = startAngle + 0.5f * sweepAngle;                      float x = explodeOffset * (float)Math.Cos(Math.PI * angle / 180);                      float y = explodeOffset * (float)Math.Sin(Math.PI * angle / 180);                        canvas.Save();                      canvas.Translate(x' y);                        // Fill and stroke the path                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' outlinePaint);                      canvas.Restore();                  }                    startAngle += sweepAngle;              }
Magic Number,SkiaSharpFormsDemos.Curves,PathDataCatPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathDataCatPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,PathDataCatPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathDataCatPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,PathDataHelloPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathDataHelloPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,PathDataHelloPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathDataHelloPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: touchPoints = new TouchPoint[3];
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,QuadraticCurvePage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(100 + 200 * i'                                           100 + (i == 1 ? 300 : 0))                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.QuadTo(touchPoints[1].Center'                              touchPoints[2].Center);                    canvas.DrawPath(path' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[1].Center.X'                              touchPoints[1].Center.Y'                              touchPoints[2].Center.X'                              touchPoints[2].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,QuadraticCurvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\QuadraticCurvePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.DrawLine(touchPoints[1].Center.X'                              touchPoints[1].Center.Y'                              touchPoints[2].Center.X'                              touchPoints[2].Center.Y' dottedStrokePaint);
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float width = info.Height > info.Width ? info.Width / 2 : info.Width / 3;
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float width = info.Height > info.Width ? info.Width / 2 : info.Width / 3;
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float height = info.Height > info.Width ? info.Height / 3 : info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float height = info.Height > info.Width ? info.Height / 3 : info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: float radius = 0.9f * Math.Min(rect.Width / 3' rect.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: float radius = 0.9f * Math.Min(rect.Width / 3' rect.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: using (SKRegion wholeRectRegion = new SKRegion())              {                  wholeRectRegion.SetRect(recti);                    using (SKRegion region1 = new SKRegion(wholeRectRegion))                  using (SKRegion region2 = new SKRegion(wholeRectRegion))                  {                      using (SKPath path1 = new SKPath())                      {                          path1.AddCircle(xCenter - radius / 2' yCenter' radius);                          region1.SetPath(path1);                      }                        using (SKPath path2 = new SKPath())                      {                          path2.AddCircle(xCenter + radius / 2' yCenter' radius);                          region2.SetPath(path2);                      }                        region1.Op(region2' regionOp);                        canvas.Save();                      canvas.ClipRegion(region1);                      canvas.DrawPaint(fillPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RegionOperationsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionOperationsPage.cs,DisplayClipOp,The following statement contains a magic number: using (SKRegion wholeRectRegion = new SKRegion())              {                  wholeRectRegion.SetRect(recti);                    using (SKRegion region1 = new SKRegion(wholeRectRegion))                  using (SKRegion region2 = new SKRegion(wholeRectRegion))                  {                      using (SKPath path1 = new SKPath())                      {                          path1.AddCircle(xCenter - radius / 2' yCenter' radius);                          region1.SetPath(path1);                      }                        using (SKPath path2 = new SKPath())                      {                          path2.AddCircle(xCenter + radius / 2' yCenter' radius);                          region2.SetPath(path2);                      }                        region1.Op(region2' regionOp);                        canvas.Save();                      canvas.ClipRegion(region1);                      canvas.DrawPaint(fillPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RegionPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionPaintPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: int radius = 10;
Magic Number,SkiaSharpFormsDemos.Curves,RegionPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionPaintPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(0' 0' radius);                    // Create circular region                  using (SKRegion circleRegion = new SKRegion())                  {                      circleRegion.SetRect(new SKRectI(-radius' -radius' radius' radius));                      circleRegion.SetPath(circlePath);                        // Set transform to move it to center and scale up                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(Math.Min(info.Width / 2' info.Height / 2) / radius);                        // Fill region                      using (SKPaint fillPaint = new SKPaint())                      {                          fillPaint.Style = SKPaintStyle.Fill;                          fillPaint.Color = SKColors.Orange;                            canvas.DrawRegion(circleRegion' fillPaint);                      }                        // Stroke path for comparison                      using (SKPaint strokePaint = new SKPaint())                      {                          strokePaint.Style = SKPaintStyle.Stroke;                          strokePaint.Color = SKColors.Blue;                          strokePaint.StrokeWidth = 0.1f;                            canvas.DrawPath(circlePath' strokePaint);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RegionPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionPaintPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(0' 0' radius);                    // Create circular region                  using (SKRegion circleRegion = new SKRegion())                  {                      circleRegion.SetRect(new SKRectI(-radius' -radius' radius' radius));                      circleRegion.SetPath(circlePath);                        // Set transform to move it to center and scale up                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(Math.Min(info.Width / 2' info.Height / 2) / radius);                        // Fill region                      using (SKPaint fillPaint = new SKPaint())                      {                          fillPaint.Style = SKPaintStyle.Fill;                          fillPaint.Color = SKColors.Orange;                            canvas.DrawRegion(circleRegion' fillPaint);                      }                        // Stroke path for comparison                      using (SKPaint strokePaint = new SKPaint())                      {                          strokePaint.Style = SKPaintStyle.Stroke;                          strokePaint.Color = SKColors.Blue;                          strokePaint.StrokeWidth = 0.1f;                            canvas.DrawPath(circlePath' strokePaint);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RegionPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionPaintPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(0' 0' radius);                    // Create circular region                  using (SKRegion circleRegion = new SKRegion())                  {                      circleRegion.SetRect(new SKRectI(-radius' -radius' radius' radius));                      circleRegion.SetPath(circlePath);                        // Set transform to move it to center and scale up                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(Math.Min(info.Width / 2' info.Height / 2) / radius);                        // Fill region                      using (SKPaint fillPaint = new SKPaint())                      {                          fillPaint.Style = SKPaintStyle.Fill;                          fillPaint.Color = SKColors.Orange;                            canvas.DrawRegion(circleRegion' fillPaint);                      }                        // Stroke path for comparison                      using (SKPaint strokePaint = new SKPaint())                      {                          strokePaint.Style = SKPaintStyle.Stroke;                          strokePaint.Color = SKColors.Blue;                          strokePaint.StrokeWidth = 0.1f;                            canvas.DrawPath(circlePath' strokePaint);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RegionPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RegionPaintPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath circlePath = new SKPath())              {                  circlePath.AddCircle(0' 0' radius);                    // Create circular region                  using (SKRegion circleRegion = new SKRegion())                  {                      circleRegion.SetRect(new SKRectI(-radius' -radius' radius' radius));                      circleRegion.SetPath(circlePath);                        // Set transform to move it to center and scale up                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(Math.Min(info.Width / 2' info.Height / 2) / radius);                        // Fill region                      using (SKPaint fillPaint = new SKPaint())                      {                          fillPaint.Style = SKPaintStyle.Fill;                          fillPaint.Color = SKColors.Orange;                            canvas.DrawRegion(circleRegion' fillPaint);                      }                        // Stroke path for comparison                      using (SKPaint strokePaint = new SKPaint())                      {                          strokePaint.Style = SKPaintStyle.Stroke;                          strokePaint.Color = SKColors.Blue;                          strokePaint.StrokeWidth = 0.1f;                            canvas.DrawPath(circlePath' strokePaint);                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float cornerRadius = 100;
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: int numVertices = 7;
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int vertex = 0; vertex < numVertices; vertex++)              {                  vertices[vertex] = new SKPoint(radius * (float)Math.Cos(vertexAngle)'                                                 radius * (float)Math.Sin(vertexAngle));                  vertexAngle += 2 * Math.PI / numVertices;              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int vertex = 0; vertex < numVertices; vertex++)              {                  int prevVertex = (vertex + numVertices - 1) % numVertices;                  midPoints[vertex] = new SKPoint((vertices[prevVertex].X + vertices[vertex].X) / 2'                                                  (vertices[prevVertex].Y + vertices[vertex].Y) / 2);              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int vertex = 0; vertex < numVertices; vertex++)              {                  int prevVertex = (vertex + numVertices - 1) % numVertices;                  midPoints[vertex] = new SKPoint((vertices[prevVertex].X + vertices[vertex].X) / 2'                                                  (vertices[prevVertex].Y + vertices[vertex].Y) / 2);              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  // Begin at the first midpoint                  path.MoveTo(midPoints[0]);                    for (int vertex = 0; vertex < numVertices; vertex++)                  {                      SKPoint nextMidPoint = midPoints[(vertex + 1) % numVertices];                        // Draws a line from the current point' and then the arc                      path.ArcTo(vertices[vertex]' nextMidPoint' cornerRadius);                        // Connect the arc with the next midpoint                      path.LineTo(nextMidPoint);                  }                  path.Close();                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  // Begin at the first midpoint                  path.MoveTo(midPoints[0]);                    for (int vertex = 0; vertex < numVertices; vertex++)                  {                      SKPoint nextMidPoint = midPoints[(vertex + 1) % numVertices];                        // Draws a line from the current point' and then the arc                      path.ArcTo(vertices[vertex]' nextMidPoint' cornerRadius);                        // Connect the arc with the next midpoint                      path.LineTo(nextMidPoint);                  }                  path.Close();                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,RoundedHeptagonPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\RoundedHeptagonPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  // Begin at the first midpoint                  path.MoveTo(midPoints[0]);                    for (int vertex = 0; vertex < numVertices; vertex++)                  {                      SKPoint nextMidPoint = midPoints[(vertex + 1) % numVertices];                        // Draws a line from the current point' and then the arc                      path.ArcTo(vertices[vertex]' nextMidPoint' cornerRadius);                        // Connect the arc with the next midpoint                      path.LineTo(nextMidPoint);                  }                  path.Close();                    // Render the path in the center of the screen                  using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Blue;                      paint.StrokeWidth = 10;                        canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Scale(Math.Min(info.Width / 300' info.Height / 300));
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Scale(Math.Min(info.Width / 300' info.Height / 300));
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float t = (float)(timeSpan.TotalSeconds % 3 / 3);
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float t = (float)(timeSpan.TotalSeconds % 3 / 3);
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: t = (1 + (float)Math.Sin(2 * Math.PI * t)) / 2;
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: t = (1 + (float)Math.Sin(2 * Math.PI * t)) / 2;
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 0; i < 13; i++)              {                  points[i' 2] = new SKPoint(                      (1 - t) * points[i' 0].X + t * points[i' 1].X'                      (1 - t) * points[i' 0].Y + t * points[i' 1].Y);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 0; i < 13; i++)              {                  points[i' 2] = new SKPoint(                      (1 - t) * points[i' 0].X + t * points[i' 1].X'                      (1 - t) * points[i' 0].Y + t * points[i' 1].Y);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,SquaringTheCirclePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\SquaringTheCirclePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(points[0' 2]);                    for (int i = 1; i < 13; i += 3)                  {                      path.CubicTo(points[i' 2]' points[i + 1' 2]' points[i + 2' 2]);                  }                  path.Close();                    canvas.DrawPath(path' cyanFill);                  canvas.DrawPath(path' blueStroke);              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: touchPoints = new TouchPoint[3];
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  TouchPoint touchPoint = new TouchPoint                  {                      Center = new SKPoint(i == 0 ? 100 : 500'                                           i != 2 ? 100 : 500)                  };                  touchPoints[i] = touchPoint;              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,TangentArcPage,The following statement contains a magic number: radiusSlider.Value = 100;
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.LineTo(touchPoints[1].Center);                  path.LineTo(touchPoints[2].Center);                  canvas.DrawPath(path' dottedStrokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint v2 = Normalize(touchPoints[2].Center - touchPoints[1].Center);
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float hypotenuse = radius / (float)Math.Sin(angleBetween / 2);
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint vMid = Normalize(new SKPoint((v1.X + v2.X) / 2' (v1.Y + v2.Y) / 2));
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint vMid = Normalize(new SKPoint((v1.X + v2.X) / 2' (v1.Y + v2.Y) / 2));
Magic Number,SkiaSharpFormsDemos.Curves,TangentArcPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TangentArcPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  path.MoveTo(touchPoints[0].Center);                  path.ArcTo(touchPoints[1].Center' touchPoints[2].Center' radius);                  canvas.DrawPath(path' redStrokePaint);              }
Magic Number,SkiaSharpFormsDemos.Curves,TextPathEffectPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TextPathEffectPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xText = info.Width / 2 - textBounds.MidX;
Magic Number,SkiaSharpFormsDemos.Curves,TextPathEffectPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\TextPathEffectPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yText = info.Height / 2 - textBounds.MidY;
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1f / 60)' () =>              {                  canvasView.InvalidateSurface();                  return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Curves,UnicycleHalfPipePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\UnicycleHalfPipePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath pipePath = new SKPath())              {                  pipePath.MoveTo(50' 50);                  pipePath.CubicTo(0' 1.25f * info.Height'                                    info.Width - 0' 1.25f * info.Height'                                   info.Width - 50' 50);                    canvas.DrawPath(pipePath' strokePaint);                    using (SKPathMeasure pathMeasure = new SKPathMeasure(pipePath))                  {                      float length = pathMeasure.Length;                        // Animate t from 0 to 1 every three seconds                      TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);                      float t = (float)(timeSpan.TotalSeconds % 5 / 5);                        // t from 0 to 1 to 0 but slower at beginning and end                      t = (float)((1 - Math.Cos(t * 2 * Math.PI)) / 2);                        SKMatrix matrix;                      pathMeasure.GetMatrix(t * length' out matrix'                                             SKPathMeasureMatrixFlags.GetPositionAndTangent);                        canvas.SetMatrix(matrix);                      canvas.DrawPath(unicyclePath' strokePaint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  double t = stopwatch.Elapsed.TotalMilliseconds % cycleTime / cycleTime;                  dashPhase = (float)(10 * t);                  canvasView.InvalidateSurface();                    if (!pageIsActive)                  {                      stopwatch.Stop();                  }                    return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  double t = stopwatch.Elapsed.TotalMilliseconds % cycleTime / cycleTime;                  dashPhase = (float)(10 * t);                  canvasView.InvalidateSurface();                    if (!pageIsActive)                  {                      stopwatch.Stop();                  }                    return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,AnimatedSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\AnimatedSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    using (SKPaint paint = new SKPaint())                  {                      paint.Style = SKPaintStyle.Stroke;                      paint.Color = SKColors.Red;                      paint.StrokeWidth = 5;                      paint.PathEffect = SKPathEffect.CreateDash(new float[] { 5' 5 }' dashPhase);                        canvas.DrawPath(path' paint);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,DotsAndDashesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\DotsAndDashesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Blue'                  StrokeWidth = 10'                  StrokeCap = (SKStrokeCap)Enum.Parse(typeof(SKStrokeCap)'                                   strokeCapPicker.Items[strokeCapPicker.SelectedIndex])'                    PathEffect = SKPathEffect.CreateDash(GetPickerArray(dashArrayPicker)' 20)              };
Magic Number,SkiaSharpFormsDemos.Paths,DotsAndDashesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\DotsAndDashesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Blue'                  StrokeWidth = 10'                  StrokeCap = (SKStrokeCap)Enum.Parse(typeof(SKStrokeCap)'                                   strokeCapPicker.Items[strokeCapPicker.SelectedIndex])'                    PathEffect = SKPathEffect.CreateDash(GetPickerArray(dashArrayPicker)' 20)              };
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.MoveTo(info.Width / 2' info.Height / 2 - radius);
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.MoveTo(info.Width / 2' info.Height / 2 - radius);
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 1; i < 5; i++)              {                  // angle from vertical                  double angle = i * 4 * Math.PI / 5;                  path.LineTo(center + new SKPoint(radius * (float)Math.Sin(angle)'                                                   -radius * (float)Math.Cos(angle)));              }
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 1; i < 5; i++)              {                  // angle from vertical                  double angle = i * 4 * Math.PI / 5;                  path.LineTo(center + new SKPoint(radius * (float)Math.Sin(angle)'                                                   -radius * (float)Math.Cos(angle)));              }
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 1; i < 5; i++)              {                  // angle from vertical                  double angle = i * 4 * Math.PI / 5;                  path.LineTo(center + new SKPoint(radius * (float)Math.Sin(angle)'                                                   -radius * (float)Math.Cos(angle)));              }
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 50'                  StrokeJoin = SKStrokeJoin.Round              };
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: switch (drawingModePicker.SelectedIndex)              {                  case 0:                      canvas.DrawPath(path' fillPaint);                      break;                    case 1:                      canvas.DrawPath(path' strokePaint);                      break;                    case 2:                      canvas.DrawPath(path' strokePaint);                      canvas.DrawPath(path' fillPaint);                      break;                    case 3:                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' strokePaint);                      break;              }
Magic Number,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: switch (drawingModePicker.SelectedIndex)              {                  case 0:                      canvas.DrawPath(path' fillPaint);                      break;                    case 1:                      canvas.DrawPath(path' strokePaint);                      break;                    case 2:                      canvas.DrawPath(path' strokePaint);                      canvas.DrawPath(path' fillPaint);                      break;                    case 3:                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' strokePaint);                      break;              }
Magic Number,SkiaSharpFormsDemos.Paths,MultipleLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\MultipleLinesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint[] points = new SKPoint[10];
Magic Number,SkiaSharpFormsDemos.Paths,MultipleLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\MultipleLinesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  float x = (0.1f + 0.8f * i) * info.Width;                    for (int j = 0; j < 5; j++)                  {                      float y = (0.1f + 0.2f * j) * info.Height;                      points[2 * j + i] = new SKPoint(x' y);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,MultipleLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\MultipleLinesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  float x = (0.1f + 0.8f * i) * info.Width;                    for (int j = 0; j < 5; j++)                  {                      float y = (0.1f + 0.2f * j) * info.Height;                      points[2 * j + i] = new SKPoint(x' y);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,MultipleLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\MultipleLinesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  float x = (0.1f + 0.8f * i) * info.Width;                    for (int j = 0; j < 5; j++)                  {                      float y = (0.1f + 0.2f * j) * info.Height;                      points[2 * j + i] = new SKPoint(x' y);                  }              }
Magic Number,SkiaSharpFormsDemos.Paths,MultipleLinesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\MultipleLinesPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint paint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.DarkOrchid'                  StrokeWidth = 50'                  StrokeCap = GetPickerItem<SKStrokeCap>(strokeCapPicker)              };
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    SKPaint paint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      Color = SKColors.Red'                      StrokeWidth = 5                  };                    canvas.DrawPath(path' paint);              }
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    SKPaint paint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      Color = SKColors.Red'                      StrokeWidth = 5                  };                    canvas.DrawPath(path' paint);              }
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    SKPaint paint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      Color = SKColors.Red'                      StrokeWidth = 5                  };                    canvas.DrawPath(path' paint);              }
Magic Number,SkiaSharpFormsDemos.Paths,ArchimedeanSpiralPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\ArchimedeanSpiralPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPath path = new SKPath())              {                  for (float angle = 0; angle < 3600; angle += 1)                  {                      float scaledRadius = radius * angle / 3600;                      double radians = Math.PI * angle / 180;                      float x = center.X + scaledRadius * (float)Math.Cos(radians);                      float y = center.Y + scaledRadius * (float)Math.Sin(radians);                      SKPoint point = new SKPoint(x' y);                        if (angle == 0)                      {                          path.MoveTo(point);                      }                      else                      {                          path.LineTo(point);                      }                  }                    SKPaint paint = new SKPaint                  {                      Style = SKPaintStyle.Stroke'                      Color = SKColors.Red'                      StrokeWidth = 5                  };                    canvas.DrawPath(path' paint);              }
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPoint center = new SKPoint(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = Math.Min(info.Width' info.Height) / 4;
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X - radius / 2' center.Y - radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X - radius / 2' center.Y - radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X - radius / 2' center.Y + radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X - radius / 2' center.Y + radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X + radius / 2' center.Y - radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X + radius / 2' center.Y - radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X + radius / 2' center.Y + radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: path.AddCircle(center.X + radius / 2' center.Y + radius / 2' radius);
Magic Number,SkiaSharpFormsDemos.Paths,OverlappingCirclesPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\OverlappingCirclesPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: paint.StrokeWidth = 10;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 75'                   TextAlign = SKTextAlign.Center              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint thickLinePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Orange'                  StrokeWidth = 50              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint thinLinePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Black'                  StrokeWidth = 2              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xText = info.Width / 2;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xLine1 = 100;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeCapsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeCapsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (SKStrokeCap strokeCap in Enum.GetValues(typeof(SKStrokeCap)))              {                  // Display text                  canvas.DrawText(strokeCap.ToString()' xText' y' textPaint);                  y += textPaint.FontSpacing;                    // Display thick line                  thickLinePaint.StrokeCap = strokeCap;                  canvas.DrawLine(xLine1' y' xLine2' y' thickLinePaint);                    // Display thin line                  canvas.DrawLine(xLine1' y' xLine2' y' thinLinePaint);                  y += 2 * textPaint.FontSpacing;              }
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 75'                  TextAlign = SKTextAlign.Right              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint thickLinePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Orange'                  StrokeWidth = 50              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint thinLinePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Black'                  StrokeWidth = 2              };
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xText = info.Width - 100;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xLine1 = 100;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float y = 2 * textPaint.FontSpacing;
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (string strStrokeJoin in strStrokeJoins)              {                  // Display text                  canvas.DrawText(strStrokeJoin' xText' y' textPaint);                    // Get stroke-join value                  SKStrokeJoin strokeJoin;                  Enum.TryParse(strStrokeJoin' out strokeJoin);                    // Create path                  SKPath path = new SKPath();                  path.MoveTo(xLine1' y - 80);                  path.LineTo(xLine1' y + 80);                  path.LineTo(xLine2' y + 80);                    // Display thick line                  thickLinePaint.StrokeJoin = strokeJoin;                  canvas.DrawPath(path' thickLinePaint);                    // Display thin line                  canvas.DrawPath(path' thinLinePaint);                  y += 3 * textPaint.FontSpacing;              }
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (string strStrokeJoin in strStrokeJoins)              {                  // Display text                  canvas.DrawText(strStrokeJoin' xText' y' textPaint);                    // Get stroke-join value                  SKStrokeJoin strokeJoin;                  Enum.TryParse(strStrokeJoin' out strokeJoin);                    // Create path                  SKPath path = new SKPath();                  path.MoveTo(xLine1' y - 80);                  path.LineTo(xLine1' y + 80);                  path.LineTo(xLine2' y + 80);                    // Display thick line                  thickLinePaint.StrokeJoin = strokeJoin;                  canvas.DrawPath(path' thickLinePaint);                    // Display thin line                  canvas.DrawPath(path' thinLinePaint);                  y += 3 * textPaint.FontSpacing;              }
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (string strStrokeJoin in strStrokeJoins)              {                  // Display text                  canvas.DrawText(strStrokeJoin' xText' y' textPaint);                    // Get stroke-join value                  SKStrokeJoin strokeJoin;                  Enum.TryParse(strStrokeJoin' out strokeJoin);                    // Create path                  SKPath path = new SKPath();                  path.MoveTo(xLine1' y - 80);                  path.LineTo(xLine1' y + 80);                  path.LineTo(xLine2' y + 80);                    // Display thick line                  thickLinePaint.StrokeJoin = strokeJoin;                  canvas.DrawPath(path' thickLinePaint);                    // Display thin line                  canvas.DrawPath(path' thinLinePaint);                  y += 3 * textPaint.FontSpacing;              }
Magic Number,SkiaSharpFormsDemos.Paths,StrokeJoinsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\StrokeJoinsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: foreach (string strStrokeJoin in strStrokeJoins)              {                  // Display text                  canvas.DrawText(strStrokeJoin' xText' y' textPaint);                    // Get stroke-join value                  SKStrokeJoin strokeJoin;                  Enum.TryParse(strStrokeJoin' out strokeJoin);                    // Create path                  SKPath path = new SKPath();                  path.MoveTo(xLine1' y - 80);                  path.LineTo(xLine1' y + 80);                  path.LineTo(xLine2' y + 80);                    // Display thick line                  thickLinePaint.StrokeJoin = strokeJoin;                  canvas.DrawPath(path' thickLinePaint);                    // Display thin line                  canvas.DrawPath(path' thinLinePaint);                  y += 3 * textPaint.FontSpacing;              }
Magic Number,SkiaSharpFormsDemos.Paths,TwoTriangleContoursPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\TwoTriangleContoursPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Magenta'                  StrokeWidth = 50              };
Magic Number,SkiaSharpFormsDemos.Transforms,AccumulatedTranslatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AccumulatedTranslatePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              {                  strokePaint.Color = SKColors.Black;                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.StrokeWidth = 3;                    int rectangleCount = 20;                  SKRect rect = new SKRect(0' 0' 250' 250);                  float xTranslate = (info.Width - rect.Width) / (rectangleCount - 1);                  float yTranslate = (info.Height - rect.Height) / (rectangleCount - 1);                    for (int i = 0; i < rectangleCount; i++)                  {                      canvas.DrawRect(rect' strokePaint);                      canvas.Translate(xTranslate' yTranslate);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,AccumulatedTranslatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AccumulatedTranslatePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              {                  strokePaint.Color = SKColors.Black;                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.StrokeWidth = 3;                    int rectangleCount = 20;                  SKRect rect = new SKRect(0' 0' 250' 250);                  float xTranslate = (info.Width - rect.Width) / (rectangleCount - 1);                  float yTranslate = (info.Height - rect.Height) / (rectangleCount - 1);                    for (int i = 0; i < rectangleCount; i++)                  {                      canvas.DrawRect(rect' strokePaint);                      canvas.Translate(xTranslate' yTranslate);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,AccumulatedTranslatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AccumulatedTranslatePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              {                  strokePaint.Color = SKColors.Black;                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.StrokeWidth = 3;                    int rectangleCount = 20;                  SKRect rect = new SKRect(0' 0' 250' 250);                  float xTranslate = (info.Width - rect.Width) / (rectangleCount - 1);                  float yTranslate = (info.Height - rect.Height) / (rectangleCount - 1);                    for (int i = 0; i < rectangleCount; i++)                  {                      canvas.DrawRect(rect' strokePaint);                      canvas.Translate(xTranslate' yTranslate);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,AccumulatedTranslatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AccumulatedTranslatePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              {                  strokePaint.Color = SKColors.Black;                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.StrokeWidth = 3;                    int rectangleCount = 20;                  SKRect rect = new SKRect(0' 0' 250' 250);                  float xTranslate = (info.Width - rect.Width) / (rectangleCount - 1);                  float yTranslate = (info.Height - rect.Height) / (rectangleCount - 1);                    for (int i = 0; i < rectangleCount; i++)                  {                      canvas.DrawRect(rect' strokePaint);                      canvas.Translate(xTranslate' yTranslate);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => xRotationDegrees = 360 * (float)value).                  Commit(this' "xRotationAnimation"' length: 5000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => xRotationDegrees = 360 * (float)value).                  Commit(this' "xRotationAnimation"' length: 5000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => yRotationDegrees = 360 * (float)value).                  Commit(this' "yRotationAnimation"' length: 7000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => yRotationDegrees = 360 * (float)value).                  Commit(this' "yRotationAnimation"' length: 7000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) =>              {                  zRotationDegrees = 360 * (float)value;                  canvasView.InvalidateSurface();              }).Commit(this' "zRotationAnimation"' length: 11000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) =>              {                  zRotationDegrees = 360 * (float)value;                  canvasView.InvalidateSurface();              }).Commit(this' "zRotationAnimation"' length: 11000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xCenter = info.Width / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yCenter = info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix[3' 2] = -1 / depth;
Magic Number,SkiaSharpFormsDemos.Transforms,AnimatedRotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnimatedRotation3DPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix[3' 2] = -1 / depth;
Magic Number,SkiaSharpFormsDemos.Transforms,AnisotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnisotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Pink              })              using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Blue'                  StrokeWidth = 3'                  StrokeJoin = SKStrokeJoin.Round              })              {                  canvas.Scale(info.Width / pathBounds.Width'                                info.Height / pathBounds.Height);                  canvas.Translate(-pathBounds.Left' -pathBounds.Top);                    canvas.DrawPath(path' fillPaint);                  canvas.DrawPath(path' strokePaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,AnisotropicTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnisotropicTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Blue'                  StrokeWidth = 0.1f'                  StrokeJoin = SKStrokeJoin.Round              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText("HELLO"' ref textBounds);                    // Inflate bounds by the stroke width                  textBounds.Inflate(textPaint.StrokeWidth / 2'                                      textPaint.StrokeWidth / 2);                    canvas.Scale(info.Width / textBounds.Width'                               info.Height / textBounds.Height);                  canvas.Translate(-textBounds.Left' -textBounds.Top);                    canvas.DrawText("HELLO"' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,AnisotropicTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\AnisotropicTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Blue'                  StrokeWidth = 0.1f'                  StrokeJoin = SKStrokeJoin.Round              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText("HELLO"' ref textBounds);                    // Inflate bounds by the stroke width                  textBounds.Inflate(textPaint.StrokeWidth / 2'                                      textPaint.StrokeWidth / 2);                    canvas.Scale(info.Width / textBounds.Width'                               info.Height / textBounds.Height);                  canvas.Translate(-textBounds.Left' -textBounds.Top);                    canvas.DrawText("HELLO"' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  canvas.RotateDegrees((float)rotateSlider.Value);                  canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  canvas.RotateDegrees((float)rotateSlider.Value);                  canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  canvas.RotateDegrees((float)rotateSlider.Value);                  canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BasicScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BasicScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] {  7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  canvas.Scale((float)xScaleSlider.Value'                               (float)yScaleSlider.Value);                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                    float margin = 10;                  SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,BitmapScatterViewPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BitmapScatterViewPage.xaml.cs,BitmapScatterViewPage,The following statement contains a magic number: foreach (string resourceID in resourceIDs)              {                  if (resourceID.EndsWith(".png") ||                      resourceID.EndsWith(".jpg"))                  {                      using (Stream stream = assembly.GetManifestResourceStream(resourceID))                      using (SKManagedStream skStream = new SKManagedStream(stream))                      {                          SKBitmap bitmap = SKBitmap.Decode(skStream);                          bitmapCollection.Add(new TouchManipulationBitmap(bitmap)                          {                              Matrix = SKMatrix.MakeTranslation(position.X' position.Y)'                          });                          position.X += 100;                          position.Y += 100;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,BitmapScatterViewPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BitmapScatterViewPage.xaml.cs,BitmapScatterViewPage,The following statement contains a magic number: foreach (string resourceID in resourceIDs)              {                  if (resourceID.EndsWith(".png") ||                      resourceID.EndsWith(".jpg"))                  {                      using (Stream stream = assembly.GetManifestResourceStream(resourceID))                      using (SKManagedStream skStream = new SKManagedStream(stream))                      {                          SKBitmap bitmap = SKBitmap.Decode(skStream);                          bitmapCollection.Add(new TouchManipulationBitmap(bitmap)                          {                              Matrix = SKMatrix.MakeTranslation(position.X' position.Y)'                          });                          position.X += 100;                          position.Y += 100;                      }                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  //          canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  //         canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);                        canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.DrawText(Title' 0' 0' textPaint);                    }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  //          canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  //         canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);                        canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.DrawText(Title' 0' 0' textPaint);                    }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  //          canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  //         canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);                        canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.DrawText(Title' 0' 0' textPaint);                    }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  //          canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  //         canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);                        canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.DrawText(Title' 0' 0' textPaint);                    }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredRotatePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredRotatePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextAlign = SKTextAlign.Center'                  TextSize = 100              })              {                  //          canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  //         canvas.DrawText(Title' info.Width / 2' info.Height / 2' textPaint);                        canvas.RotateDegrees((float)rotateSlider.Value' info.Width / 2' info.Height / 2);                  canvas.Translate(info.Width / 2' info.Height / 2);                  canvas.DrawText(Title' 0' 0' textPaint);                    }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,CenteredScalePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\CenteredScalePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint              {                  Style = SKPaintStyle.Stroke'                  Color = SKColors.Red'                  StrokeWidth = 3'                  PathEffect = SKPathEffect.CreateDash(new float[] { 7' 7 }' 0)              })              using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 50              })              {                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(Title' ref textBounds);                  float margin = (info.Width - textBounds.Width) / 2;                    float sx = (float)xScaleSlider.Value;                  float sy = (float)yScaleSlider.Value;                  float px = margin + textBounds.Width / 2;                  float py = margin + textBounds.Height / 2;                    canvas.Scale(sx' sy' px' py);                    SKRect borderRect = SKRect.Create(new SKPoint(margin' margin)' textBounds.Size);                  canvas.DrawRoundRect(borderRect' 20' 20' strokePaint);                  canvas.DrawText(Title' margin' -textBounds.Top + margin' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  double t = stopwatch.Elapsed.TotalMilliseconds % cycleTime / cycleTime;                  angle = (float)(360 * t);                  canvasView.InvalidateSurface();                    if (!pageIsActive)                  {                      stopwatch.Stop();                  }                    return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnAppearing,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  double t = stopwatch.Elapsed.TotalMilliseconds % cycleTime / cycleTime;                  angle = (float)(360 * t);                  canvasView.InvalidateSurface();                    if (!pageIsActive)                  {                      stopwatch.Stop();                  }                    return pageIsActive;              });
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: canvas.Translate(info.Width / 2' info.Height / 2);
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = (float)Math.Min(info.Width' info.Height) / 2 - 100;
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float radius = (float)Math.Min(info.Width' info.Height) / 2 - 100;
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColor.FromHsl(angle' 100' 50);                    float x = radius * (float)Math.Sin(Math.PI * angle / 180);                  float y = -radius * (float)Math.Cos(Math.PI * angle / 180);                  canvas.Translate(x' y);                  canvas.DrawPath(HendecagramArrayPage.HendecagramPath' paint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColor.FromHsl(angle' 100' 50);                    float x = radius * (float)Math.Sin(Math.PI * angle / 180);                  float y = -radius * (float)Math.Cos(Math.PI * angle / 180);                  canvas.Translate(x' y);                  canvas.DrawPath(HendecagramArrayPage.HendecagramPath' paint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColor.FromHsl(angle' 100' 50);                    float x = radius * (float)Math.Sin(Math.PI * angle / 180);                  float y = -radius * (float)Math.Cos(Math.PI * angle / 180);                  canvas.Translate(x' y);                  canvas.DrawPath(HendecagramArrayPage.HendecagramPath' paint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramAnimationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramAnimationPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Fill;                  paint.Color = SKColor.FromHsl(angle' 100' 50);                    float x = radius * (float)Math.Sin(Math.PI * angle / 180);                  float y = -radius * (float)Math.Cos(Math.PI * angle / 180);                  canvas.Translate(x' y);                  canvas.DrawPath(HendecagramArrayPage.HendecagramPath' paint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,HendecagramArrayPage,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  double angle = 5 * i * 2 * Math.PI / 11;                  SKPoint pt = new SKPoint(100 * (float)Math.Sin(angle)'                                          -100 * (float)Math.Cos(angle));                  if (i == 0)                  {                      HendecagramPath.MoveTo(pt);                  }                  else                  {                      HendecagramPath.LineTo(pt);                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,HendecagramArrayPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\HendecagramArrayPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  for (int x = 100; x < info.Width + 100; x += 200)                      for (int y = 100; y < info.Height + 100; y += 200)                      {                          // Set random color                          byte[] bytes = new byte[3];                          random.NextBytes(bytes);                          paint.Color = new SKColor(bytes[0]' bytes[1]' bytes[2]);                            // Display the hendecagram                          canvas.Save();                          canvas.Translate(x' y);                          canvas.DrawPath(HendecagramPath' paint);                          canvas.Restore();                      }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,IsotropicScalingPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\IsotropicScalingPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint())              {                  fillPaint.Style = SKPaintStyle.Fill;                    float scale = Math.Min(info.Width / pathBounds.Width'                                         info.Height / pathBounds.Height);                    for (int i = 0; i <= 10; i++)                  {                      fillPaint.Color = new SKColor((byte)(255 * (10 - i) / 10)'                                                    0'                                                    (byte)(255 * i / 10));                      canvas.Save();                      canvas.Translate(info.Width / 2' info.Height / 2);                      canvas.Scale(scale);                      canvas.Translate(-pathBounds.MidX' -pathBounds.MidY);                      canvas.DrawPath(path' fillPaint);                      canvas.Restore();                        scale *= 0.9f;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint()              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Maroon'                  TextAlign = SKTextAlign.Center'                  TextSize = info.Width / 8   // empirically determined              })              {                  canvas.Translate(info.Width / 2' info.Height / 2);                  SkewDegrees(canvas' -20' 0);                  canvas.DrawText(Title' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint()              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Maroon'                  TextAlign = SKTextAlign.Center'                  TextSize = info.Width / 8   // empirically determined              })              {                  canvas.Translate(info.Width / 2' info.Height / 2);                  SkewDegrees(canvas' -20' 0);                  canvas.DrawText(Title' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint()              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Maroon'                  TextAlign = SKTextAlign.Center'                  TextSize = info.Width / 8   // empirically determined              })              {                  canvas.Translate(info.Width / 2' info.Height / 2);                  SkewDegrees(canvas' -20' 0);                  canvas.DrawText(Title' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint()              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Maroon'                  TextAlign = SKTextAlign.Center'                  TextSize = info.Width / 8   // empirically determined              })              {                  canvas.Translate(info.Width / 2' info.Height / 2);                  SkewDegrees(canvas' -20' 0);                  canvas.DrawText(Title' 0' 0' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,SkewDegrees,The following statement contains a magic number: canvas.Skew((float)Math.Tan(Math.PI * xDegrees / 180)'                          (float)Math.Tan(Math.PI * yDegrees / 180));
Magic Number,SkiaSharpFormsDemos.Transforms,ObliqueTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ObliqueTextPage.cs,SkewDegrees,The following statement contains a magic number: canvas.Skew((float)Math.Tan(Math.PI * xDegrees / 180)'                          (float)Math.Tan(Math.PI * yDegrees / 180));
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,PathTransformPage,The following statement contains a magic number: SKMatrix matrix = SKMatrix.MakeScale(3' 3);
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,PathTransformPage,The following statement contains a magic number: SKMatrix matrix = SKMatrix.MakeScale(3' 3);
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,PathTransformPage,The following statement contains a magic number: SKMatrix.PostConcat(ref matrix' SKMatrix.MakeRotationDegrees(360f / 22));
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,PathTransformPage,The following statement contains a magic number: SKMatrix.PostConcat(ref matrix' SKMatrix.MakeTranslation(300' 300));
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,PathTransformPage,The following statement contains a magic number: SKMatrix.PostConcat(ref matrix' SKMatrix.MakeTranslation(300' 300));
Magic Number,SkiaSharpFormsDemos.Transforms,PathTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\PathTransformPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint paint = new SKPaint())              {                  paint.Style = SKPaintStyle.Stroke;                  paint.Color = SKColors.Magenta;                  paint.StrokeWidth = 5;                    canvas.DrawPath(transformedPath' paint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => revolveDegrees = 360 * (float)value).                  Commit(this' "revolveAnimation"' length: 10000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) => revolveDegrees = 360 * (float)value).                  Commit(this' "revolveAnimation"' length: 10000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) =>              {                  rotateDegrees = 360 * (float)value;                  canvasView.InvalidateSurface();              }).Commit(this' "rotateAnimation"' length: 1000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnAppearing,The following statement contains a magic number: new Animation((value) =>              {                  rotateDegrees = 360 * (float)value;                  canvasView.InvalidateSurface();              }).Commit(this' "rotateAnimation"' length: 1000' repeat: () => true);
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotateAndRevolvePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotateAndRevolvePage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint fillPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Red              })              {                  // Translate to center of canvas                  canvas.Translate(info.Width / 2' info.Height / 2);                    // Rotate around center of canvas                  canvas.RotateDegrees(revolveDegrees);                    // Translate horizontally                  float radius = Math.Min(info.Width' info.Height) / 3;                  canvas.Translate(radius' 0);                    // Rotate around center of object                  canvas.RotateDegrees(rotateDegrees);                    // Draw a square                  canvas.DrawRect(new SKRect(-50' -50' 50' 50)' fillPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,RotatedTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\RotatedTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Color = SKColors.Black'                  TextSize = 72              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float yText = yCenter - textBounds.Height / 2 - textBounds.Top;                    for (int degrees = 0; degrees < 360; degrees += 30)                  {                      canvas.Save();                      canvas.RotateDegrees(degrees' xCenter' yCenter);                      canvas.DrawText(text' xCenter' yText' textPaint);                      canvas.Restore();                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xCenter = info.Width / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yCenter = info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix[3' 2] = -1 / (float)depthSlider.Value;
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix[3' 2] = -1 / (float)depthSlider.Value;
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xBitmap = xCenter - bitmap.Width / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,Rotation3DPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\Rotation3DPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yBitmap = yCenter - bitmap.Height / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[0] = new TouchPoint(100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[0] = new TouchPoint(100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[1] = new TouchPoint(bitmap.Width + 100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[1] = new TouchPoint(bitmap.Width + 100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,ShowAffineMatrixPage,The following statement contains a magic number: matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center'                                                  touchPoints[1].Center'                                                  touchPoints[2].Center);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowAffineMatrixPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: if (touchPointMoved)              {                  matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center'                                                      touchPoints[1].Center'                                                      touchPoints[2].Center);                  canvasView.InvalidateSurface();              }
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[0] = new TouchPoint(100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[0] = new TouchPoint(100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[1] = new TouchPoint(bitmap.Width + 100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[1] = new TouchPoint(bitmap.Width + 100' 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[2] = new TouchPoint(100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[3] = new TouchPoint(bitmap.Width + 100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[3] = new TouchPoint(bitmap.Width + 100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: touchPoints[3] = new TouchPoint(bitmap.Width + 100' bitmap.Height + 100);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center' touchPoints[1].Center'                                                  touchPoints[2].Center' touchPoints[3].Center);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,ShowNonAffineMatrixPage,The following statement contains a magic number: matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center' touchPoints[1].Center'                                                  touchPoints[2].Center' touchPoints[3].Center);
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: if (touchPointMoved)              {                  matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center' touchPoints[1].Center'                                                      touchPoints[2].Center' touchPoints[3].Center);                  canvasView.InvalidateSurface();              }
Magic Number,SkiaSharpFormsDemos.Transforms,ShowNonAffineMatrixPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\ShowNonAffineMatrixPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: if (touchPointMoved)              {                  matrix = ComputeMatrix(bitmapSize' touchPoints[0].Center' touchPoints[1].Center'                                                      touchPoints[2].Center' touchPoints[3].Center);                  canvasView.InvalidateSurface();              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewAngleExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewAngleExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 200              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    string text = "SKEW";                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float xText = xCenter - textBounds.MidX;                  float yText = yCenter - textBounds.MidY;                    canvas.Translate(xCenter' yCenter);                  SkewDegrees(canvas' xSkewSlider.Value' ySkewSlider.Value);                  canvas.Translate(-xCenter' -yCenter);                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewAngleExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewAngleExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 200              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    string text = "SKEW";                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float xText = xCenter - textBounds.MidX;                  float yText = yCenter - textBounds.MidY;                    canvas.Translate(xCenter' yCenter);                  SkewDegrees(canvas' xSkewSlider.Value' ySkewSlider.Value);                  canvas.Translate(-xCenter' -yCenter);                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewAngleExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewAngleExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 200              })              {                  float xCenter = info.Width / 2;                  float yCenter = info.Height / 2;                    string text = "SKEW";                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                  float xText = xCenter - textBounds.MidX;                  float yText = yCenter - textBounds.MidY;                    canvas.Translate(xCenter' yCenter);                  SkewDegrees(canvas' xSkewSlider.Value' ySkewSlider.Value);                  canvas.Translate(-xCenter' -yCenter);                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewAngleExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewAngleExperimentPage.xaml.cs,SkewDegrees,The following statement contains a magic number: canvas.Skew((float)Math.Tan(Math.PI * xDegrees / 180)'                          (float)Math.Tan(Math.PI * yDegrees / 180));
Magic Number,SkiaSharpFormsDemos.Transforms,SkewAngleExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewAngleExperimentPage.xaml.cs,SkewDegrees,The following statement contains a magic number: canvas.Skew((float)Math.Tan(Math.PI * xDegrees / 180)'                          (float)Math.Tan(Math.PI * yDegrees / 180));
Magic Number,SkiaSharpFormsDemos.Transforms,SkewShadowTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewShadowTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = info.Width / 6;   // empirically determined                    // Common to shadow and text                  string text = "shadow";                  float xText = 20;                  float yText = info.Height / 2;                    // Shadow                  textPaint.Color = SKColors.LightGray;                  canvas.Save();                  canvas.Translate(xText' yText);                  canvas.Skew((float)Math.Tan(-Math.PI / 4)' 0);                  canvas.Scale(1' 3);                  canvas.Translate(-xText' -yText);                  canvas.DrawText(text' xText' yText' textPaint);                  canvas.Restore();                    // Text                  textPaint.Color = SKColors.Blue;                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewShadowTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewShadowTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = info.Width / 6;   // empirically determined                    // Common to shadow and text                  string text = "shadow";                  float xText = 20;                  float yText = info.Height / 2;                    // Shadow                  textPaint.Color = SKColors.LightGray;                  canvas.Save();                  canvas.Translate(xText' yText);                  canvas.Skew((float)Math.Tan(-Math.PI / 4)' 0);                  canvas.Scale(1' 3);                  canvas.Translate(-xText' -yText);                  canvas.DrawText(text' xText' yText' textPaint);                  canvas.Restore();                    // Text                  textPaint.Color = SKColors.Blue;                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewShadowTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewShadowTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = info.Width / 6;   // empirically determined                    // Common to shadow and text                  string text = "shadow";                  float xText = 20;                  float yText = info.Height / 2;                    // Shadow                  textPaint.Color = SKColors.LightGray;                  canvas.Save();                  canvas.Translate(xText' yText);                  canvas.Skew((float)Math.Tan(-Math.PI / 4)' 0);                  canvas.Scale(1' 3);                  canvas.Translate(-xText' -yText);                  canvas.DrawText(text' xText' yText' textPaint);                  canvas.Restore();                    // Text                  textPaint.Color = SKColors.Blue;                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewShadowTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewShadowTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = info.Width / 6;   // empirically determined                    // Common to shadow and text                  string text = "shadow";                  float xText = 20;                  float yText = info.Height / 2;                    // Shadow                  textPaint.Color = SKColors.LightGray;                  canvas.Save();                  canvas.Translate(xText' yText);                  canvas.Skew((float)Math.Tan(-Math.PI / 4)' 0);                  canvas.Scale(1' 3);                  canvas.Translate(-xText' -yText);                  canvas.DrawText(text' xText' yText' textPaint);                  canvas.Restore();                    // Text                  textPaint.Color = SKColors.Blue;                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewShadowTextPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewShadowTextPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = info.Width / 6;   // empirically determined                    // Common to shadow and text                  string text = "shadow";                  float xText = 20;                  float yText = info.Height / 2;                    // Shadow                  textPaint.Color = SKColors.LightGray;                  canvas.Save();                  canvas.Translate(xText' yText);                  canvas.Skew((float)Math.Tan(-Math.PI / 4)' 0);                  canvas.Scale(1' 3);                  canvas.Translate(-xText' -yText);                  canvas.DrawText(text' xText' yText' textPaint);                  canvas.Restore();                    // Text                  textPaint.Color = SKColors.Blue;                  canvas.DrawText(text' xText' yText' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,SkewExperimentPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\SkewExperimentPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint              {                  Style = SKPaintStyle.Fill'                  Color = SKColors.Blue'                  TextSize = 200              })              {                  string text = "SKEW";                  SKRect textBounds = new SKRect();                  textPaint.MeasureText(text' ref textBounds);                    canvas.Skew((float)xSkewSlider.Value' (float)ySkewSlider.Value);                  canvas.DrawText(text' 0' -textBounds.Top' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following statement contains a magic number: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransformPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float x = (info.Width - bitmap.Width) / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TaperTransformPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransformPage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float y = (info.Height - bitmap.Height) / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnPersp0SliderValueChanged,The following statement contains a magic number: persp0Label.Text = String.Format("Persp0 = {0:F4}"' slider.Value / 100);
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnPersp1SliderValueChanged,The following statement contains a magic number: persp1Label.Text = String.Format("Persp1 = {0:F4}"' slider.Value / 100);
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix.Persp0 = (float)persp0Slider.Value / 100;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: perspectiveMatrix.Persp1 = (float)persp1Slider.Value / 100;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float xCenter = info.Width / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float yCenter = info.Height / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float x = xCenter - bitmap.Width / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TestPerspectivePage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TestPerspectivePage.xaml.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float y = yCenter - bitmap.Height / 2;
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationBitmap,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationBitmap.cs,Manipulate,The following statement contains a magic number: if (infos.Length == 1)              {                  SKPoint prevPoint = infos[0].PreviousPoint;                  SKPoint newPoint = infos[0].NewPoint;                  SKPoint pivotPoint = Matrix.MapPoint(bitmap.Width / 2' bitmap.Height / 2);                    touchMatrix = TouchManager.OneFingerManipulate(prevPoint' newPoint' pivotPoint);              }              else if (infos.Length >= 2)              {                  int pivotIndex = infos[0].NewPoint == infos[0].PreviousPoint ? 0 : 1;                  SKPoint pivotPoint = infos[pivotIndex].NewPoint;                  SKPoint newPoint = infos[1 - pivotIndex].NewPoint;                  SKPoint prevPoint = infos[1 - pivotIndex].PreviousPoint;                    touchMatrix = TouchManager.TwoFingerManipulate(prevPoint' newPoint' pivotPoint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationBitmap,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationBitmap.cs,Manipulate,The following statement contains a magic number: if (infos.Length == 1)              {                  SKPoint prevPoint = infos[0].PreviousPoint;                  SKPoint newPoint = infos[0].NewPoint;                  SKPoint pivotPoint = Matrix.MapPoint(bitmap.Width / 2' bitmap.Height / 2);                    touchMatrix = TouchManager.OneFingerManipulate(prevPoint' newPoint' pivotPoint);              }              else if (infos.Length >= 2)              {                  int pivotIndex = infos[0].NewPoint == infos[0].PreviousPoint ? 0 : 1;                  SKPoint pivotPoint = infos[pivotIndex].NewPoint;                  SKPoint newPoint = infos[1 - pivotIndex].NewPoint;                  SKPoint prevPoint = infos[1 - pivotIndex].PreviousPoint;                    touchMatrix = TouchManager.TwoFingerManipulate(prevPoint' newPoint' pivotPoint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationBitmap,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationBitmap.cs,Manipulate,The following statement contains a magic number: if (infos.Length == 1)              {                  SKPoint prevPoint = infos[0].PreviousPoint;                  SKPoint newPoint = infos[0].NewPoint;                  SKPoint pivotPoint = Matrix.MapPoint(bitmap.Width / 2' bitmap.Height / 2);                    touchMatrix = TouchManager.OneFingerManipulate(prevPoint' newPoint' pivotPoint);              }              else if (infos.Length >= 2)              {                  int pivotIndex = infos[0].NewPoint == infos[0].PreviousPoint ? 0 : 1;                  SKPoint pivotPoint = infos[pivotIndex].NewPoint;                  SKPoint newPoint = infos[1 - pivotIndex].NewPoint;                  SKPoint prevPoint = infos[1 - pivotIndex].PreviousPoint;                    touchMatrix = TouchManager.TwoFingerManipulate(prevPoint' newPoint' pivotPoint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationManager,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationManager.cs,OneFingerManipulate,The following statement contains a magic number: if (Mode == TouchManipulationMode.ScaleDualRotate)  // One-finger rotation              {                  SKPoint oldVector = prevPoint - pivotPoint;                  SKPoint newVector = newPoint - pivotPoint;                    // Avoid rotation if fingers are too close to center                  if (Magnitude(newVector) > 25 && Magnitude(oldVector) > 25)                  {                      float prevAngle = (float)Math.Atan2(oldVector.Y' oldVector.X);                      float newAngle = (float)Math.Atan2(newVector.Y' newVector.X);                        // Calculate rotation matrix                      float angle = newAngle - prevAngle;                      touchMatrix = SKMatrix.MakeRotation(angle' pivotPoint.X' pivotPoint.Y);                        // Effectively rotate the old vector                      float magnitudeRatio = Magnitude(oldVector) / Magnitude(newVector);                      oldVector.X = magnitudeRatio * newVector.X;                      oldVector.Y = magnitudeRatio * newVector.Y;                        // Recalculate delta                      delta = newVector - oldVector;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationManager,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationManager.cs,OneFingerManipulate,The following statement contains a magic number: if (Mode == TouchManipulationMode.ScaleDualRotate)  // One-finger rotation              {                  SKPoint oldVector = prevPoint - pivotPoint;                  SKPoint newVector = newPoint - pivotPoint;                    // Avoid rotation if fingers are too close to center                  if (Magnitude(newVector) > 25 && Magnitude(oldVector) > 25)                  {                      float prevAngle = (float)Math.Atan2(oldVector.Y' oldVector.X);                      float newAngle = (float)Math.Atan2(newVector.Y' newVector.X);                        // Calculate rotation matrix                      float angle = newAngle - prevAngle;                      touchMatrix = SKMatrix.MakeRotation(angle' pivotPoint.X' pivotPoint.Y);                        // Effectively rotate the old vector                      float magnitudeRatio = Magnitude(oldVector) / Magnitude(newVector);                      oldVector.X = magnitudeRatio * newVector.X;                      oldVector.Y = magnitudeRatio * newVector.Y;                        // Recalculate delta                      delta = newVector - oldVector;                  }              }
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationManager,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationManager.cs,Magnitude,The following statement contains a magic number: return (float)Math.Sqrt(Math.Pow(point.X' 2) + Math.Pow(point.Y' 2));
Magic Number,SkiaSharpFormsDemos.Transforms,TouchManipulationManager,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationManager.cs,Magnitude,The following statement contains a magic number: return (float)Math.Sqrt(Math.Pow(point.X' 2) + Math.Pow(point.Y' 2));
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: float textSize = 150;
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,TranslateTextEffectsPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TranslateTextEffectsPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint textPaint = new SKPaint())              {                  textPaint.Style = SKPaintStyle.Fill;                  textPaint.TextSize = textSize;                  textPaint.FakeBoldText = true;                    float x = 10;                  float y = textSize;                    // Shadow                  canvas.Translate(10' 10);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("SHADOW"' x' y' textPaint);                  canvas.Translate(-10' -10);                  textPaint.Color = SKColors.Pink;                  canvas.DrawText("SHADOW"' x' y' textPaint);                    y += 2 * textSize;                    // Engrave                  canvas.Translate(-5' -5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                  canvas.ResetMatrix();                  textPaint.Color = SKColors.White;                  canvas.DrawText("ENGRAVE"' x' y' textPaint);                    y += 2 * textSize;                    // Emboss                  canvas.Save();                  canvas.Translate(5' 5);                  textPaint.Color = SKColors.Black;                  canvas.DrawText("EMBOSS"' x' y' textPaint);                  canvas.Restore();                  textPaint.Color = SKColors.White;                  canvas.DrawText("EMBOSS"' x' y' textPaint);              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Magic Number,SkiaSharpFormsDemos.Transforms,UglyAnalogClockPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\UglyAnalogClockPage.cs,OnCanvasViewPaintSurface,The following statement contains a magic number: using (SKPaint strokePaint = new SKPaint())              using (SKPaint fillPaint = new SKPaint())              {                  strokePaint.Style = SKPaintStyle.Stroke;                  strokePaint.Color = SKColors.Black;                  strokePaint.StrokeCap = SKStrokeCap.Round;                    fillPaint.Style = SKPaintStyle.Fill;                  fillPaint.Color = SKColors.Gray;                    // Transform for 100-radius circle centered at origin                  canvas.Translate(info.Width / 2f' info.Height / 2f);                  canvas.Scale(Math.Min(info.Width / 200f' info.Height / 200f));                    // Hour and minute marks                  for (int angle = 0; angle < 360; angle += 6)                  {                      canvas.DrawCircle(0' -90' angle % 30 == 0 ? 4 : 2' fillPaint);                      canvas.RotateDegrees(6);                  }                    DateTime dateTime = DateTime.Now;                    // Hour hand                  strokePaint.StrokeWidth = 20;                  canvas.Save();                  canvas.RotateDegrees(30 * dateTime.Hour + dateTime.Minute / 2f);                  canvas.DrawLine(0' 0' 0' -50' strokePaint);                  canvas.Restore();                    // Minute hand                  strokePaint.StrokeWidth = 10;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Minute + dateTime.Second / 10f);                  canvas.DrawLine(0' 0' 0' -70' strokePaint);                  canvas.Restore();                    // Second hand                  strokePaint.StrokeWidth = 2;                  canvas.Save();                  canvas.RotateDegrees(6 * dateTime.Second);                  canvas.DrawLine(0' 10' 0' -80' strokePaint);                  canvas.Restore();              }
Missing Default,SkiaSharpFormsDemos,TouchPoint,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\TouchPoint.cs,ProcessTouchEvent,The following switch statement is missing a default case: switch (type)              {                  case TouchActionType.Pressed:                      if (!isBeingDragged && PointInCircle(location))                      {                          isBeingDragged = true;                          touchId = id;                          previousPoint = location;                          centerMoved = false;                      }                      break;                    case TouchActionType.Moved:                      if (isBeingDragged && touchId == id)                      {                          Center += location - previousPoint;                          previousPoint = location;                          centerMoved = true;                      }                      break;                    case TouchActionType.Released:                      if (isBeingDragged && touchId == id)                      {                          Center += location - previousPoint;                          isBeingDragged = false;                          centerMoved = true;                      }                      break;                    case TouchActionType.Cancelled:                      isBeingDragged = false;                      break;              }
Missing Default,SkiaSharpFormsDemos.Curves,OneDimensionalPathEffectPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\OneDimensionalPathEffectPage.xaml.cs,OnCanvasViewPaintSurface,The following switch statement is missing a default case: switch (effectStylePicker.Items[effectStylePicker.SelectedIndex])                  {                      case "Translate":                          pathPaint.PathEffect = translatePathEffect;                          break;                        case "Rotate":                          pathPaint.PathEffect = rotatePathEffect;                          break;                        case "Morph":                          pathPaint.PathEffect = morphPathEffect;                          break;                  }
Missing Default,SkiaSharpFormsDemos.Curves,PathExtensions,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Curves\PathExtensions.cs,CloneWithTransform,The following switch statement is missing a default case: switch (pathVerb)                      {                          case SKPathVerb.Move:                              pathOut.MoveTo(transform(points[0]));                              firstPoint = lastPoint = points[0];                              break;                            case SKPathVerb.Line:                              SKPoint[] linePoints = Interpolate(points[0]' points[1]);                                foreach (SKPoint pt in linePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[1];                              break;                            case SKPathVerb.Cubic:                              SKPoint[] cubicPoints = FlattenCubic(points[0]' points[1]' points[2]' points[3]);                                foreach (SKPoint pt in cubicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[3];                              break;                            case SKPathVerb.Quad:                              SKPoint[] quadPoints = FlattenQuadratic(points[0]' points[1]' points[2]);                                foreach (SKPoint pt in quadPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Conic:                              SKPoint[] conicPoints = FlattenConic(points[0]' points[1]' points[2]' iterator.ConicWeight());                                foreach (SKPoint pt in conicPoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                lastPoint = points[2];                              break;                            case SKPathVerb.Close:                              SKPoint[] closePoints = Interpolate(lastPoint' firstPoint);                                foreach (SKPoint pt in closePoints)                              {                                  pathOut.LineTo(transform(pt));                              }                                firstPoint = lastPoint = new SKPoint(0' 0);                              pathOut.Close();                              break;                      }
Missing Default,SkiaSharpFormsDemos.Paths,FingerPaintPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPaths.ContainsKey(args.Id))                      {                          SKPath path = new SKPath();                          path.MoveTo(ConvertToPixel(args.Location));                          inProgressPaths.Add(args.Id' path);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPaths.ContainsKey(args.Id))                      {                          SKPath path = inProgressPaths[args.Id];                          path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPaths.ContainsKey(args.Id))                      {                          completedPaths.Add(inProgressPaths[args.Id]);                          inProgressPaths.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPaths.ContainsKey(args.Id))                      {                          inProgressPaths.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Missing Default,SkiaSharpFormsDemos.Paths,FivePointedStarPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Paths\FivePointedStarPage.xaml.cs,OnCanvasViewPaintSurface,The following switch statement is missing a default case: switch (drawingModePicker.SelectedIndex)              {                  case 0:                      canvas.DrawPath(path' fillPaint);                      break;                    case 1:                      canvas.DrawPath(path' strokePaint);                      break;                    case 2:                      canvas.DrawPath(path' strokePaint);                      canvas.DrawPath(path' fillPaint);                      break;                    case 3:                      canvas.DrawPath(path' fillPaint);                      canvas.DrawPath(path' strokePaint);                      break;              }
Missing Default,SkiaSharpFormsDemos.Transforms,BitmapScatterViewPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\BitmapScatterViewPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      for (int i = bitmapCollection.Count - 1; i >= 0; i--)                      {                          TouchManipulationBitmap bitmap = bitmapCollection[i];                            if (bitmap.HitTest(point))                          {                              // Move bitmap to end of collection                              bitmapCollection.Remove(bitmap);                              bitmapCollection.Add(bitmap);                                // Do the touch processing                              bitmapDictionary.Add(args.Id' bitmap);                              bitmap.ProcessTouchEvent(args.Id' args.Type' point);                              canvasView.InvalidateSurface();                              break;                          }                      }                      break;                    case TouchActionType.Moved:                      if (bitmapDictionary.ContainsKey(args.Id))                      {                          TouchManipulationBitmap bitmap = bitmapDictionary[args.Id];                          bitmap.ProcessTouchEvent(args.Id' args.Type' point);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                  case TouchActionType.Cancelled:                      if (bitmapDictionary.ContainsKey(args.Id))                      {                          TouchManipulationBitmap bitmap = bitmapDictionary[args.Id];                          bitmap.ProcessTouchEvent(args.Id' args.Type' point);                          bitmapDictionary.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Missing Default,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following switch statement is missing a default case: switch (taperSide)              {                  case TaperSide.Left:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp0 = (taperFraction - 1) / size.Width;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Top:                      matrix.ScaleX = taperFraction;                      matrix.ScaleY = taperFraction;                      matrix.Persp1 = (taperFraction - 1) / size.Height;                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }                      break;                    case TaperSide.Right:                      matrix.ScaleX = 1 / taperFraction;                      matrix.Persp0 = (1 - taperFraction) / (size.Width * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }                      break;                    case TaperSide.Bottom:                      matrix.ScaleY = 1 / taperFraction;                      matrix.Persp1 = (1 - taperFraction) / (size.Height * taperFraction);                        switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }                      break;              }
Missing Default,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following switch statement is missing a default case: switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              matrix.TransY = size.Height * (1 - taperFraction) / 2;                              break;                      }
Missing Default,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following switch statement is missing a default case: switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction);                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              matrix.TransX = size.Width * (1 - taperFraction) / 2;                              break;                      }
Missing Default,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following switch statement is missing a default case: switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewY = size.Height * matrix.Persp0;                              break;                            case TaperCorner.Both:                              matrix.SkewY = (size.Height / 2) * matrix.Persp0;                              break;                      }
Missing Default,SkiaSharpFormsDemos.Transforms,TaperTransform,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TaperTransform.cs,Make,The following switch statement is missing a default case: switch (taperCorner)                      {                          case TaperCorner.RightOrBottom:                              break;                            case TaperCorner.LeftOrTop:                              matrix.SkewX = size.Width * matrix.Persp1;                              break;                            case TaperCorner.Both:                              matrix.SkewX = (size.Width / 2) * matrix.Persp1;                              break;                      }
Missing Default,SkiaSharpFormsDemos.Transforms,TouchManipulationBitmap,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationBitmap.cs,ProcessTouchEvent,The following switch statement is missing a default case: switch (type)              {                  case TouchActionType.Pressed:                      touchDictionary.Add(id' new TouchManipulationInfo                      {                          PreviousPoint = location'                          NewPoint = location                      });                      break;                    case TouchActionType.Moved:                      TouchManipulationInfo info = touchDictionary[id];                      info.NewPoint = location;                      Manipulate();                      info.PreviousPoint = info.NewPoint;                      break;                    case TouchActionType.Released:                      touchDictionary[id].NewPoint = location;                      Manipulate();                      touchDictionary.Remove(id);                      break;                    case TouchActionType.Cancelled:                      touchDictionary.Remove(id);                      break;              }
Missing Default,SkiaSharpFormsDemos.Transforms,TouchManipulationPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SkiaSharpFormsDemos\SkiaSharpFormsDemos\SkiaSharpFormsDemos\Transforms\TouchManipulationPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (bitmap.HitTest(point))                      {                          touchIds.Add(args.Id);                          bitmap.ProcessTouchEvent(args.Id' args.Type' point);                          break;                      }                      break;                    case TouchActionType.Moved:                      if (touchIds.Contains(args.Id))                      {                          bitmap.ProcessTouchEvent(args.Id' args.Type' point);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                  case TouchActionType.Cancelled:                      if (touchIds.Contains(args.Id))                      {                          bitmap.ProcessTouchEvent(args.Id' args.Type' point);                          touchIds.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
