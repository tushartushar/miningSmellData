Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ListViewColors,NamedColor,C:\repos\xamarin_xamarin-forms-samples\BoxView\ListViewColors\ListViewColors\ListViewColors\NamedColor.cs,NamedColor,The following statement contains a magic number: foreach (FieldInfo fieldInfo in typeof(Color).GetRuntimeFields ())              {                  if (fieldInfo.IsPublic &&                      fieldInfo.IsStatic &&                      fieldInfo.FieldType == typeof (Color))                  {                      // Convert the name to a friendly name.                      string name = fieldInfo.Name;                      stringBuilder.Clear();                      int index = 0;                        foreach (char ch in name)                      {                          if (index != 0 && Char.IsUpper(ch))                          {                              stringBuilder.Append(' ');                          }                          stringBuilder.Append(ch);                          index++;                      }                        // Instantiate a NamedColor object.                      Color color = (Color)fieldInfo.GetValue(null);                        NamedColor namedColor = new NamedColor                      {                          Name = name'                          FriendlyName = stringBuilder.ToString()'                          Color = color'                          RgbDisplay = String.Format("{0:X2}-{1:X2}-{2:X2}"'                                                     (int)(255 * color.R)'                                                     (int)(255 * color.G)'                                                     (int)(255 * color.B))                      };                        // Add it to the collection.                      all.Add(namedColor);                  }              }
Magic Number,ListViewColors,NamedColor,C:\repos\xamarin_xamarin-forms-samples\BoxView\ListViewColors\ListViewColors\ListViewColors\NamedColor.cs,NamedColor,The following statement contains a magic number: foreach (FieldInfo fieldInfo in typeof(Color).GetRuntimeFields ())              {                  if (fieldInfo.IsPublic &&                      fieldInfo.IsStatic &&                      fieldInfo.FieldType == typeof (Color))                  {                      // Convert the name to a friendly name.                      string name = fieldInfo.Name;                      stringBuilder.Clear();                      int index = 0;                        foreach (char ch in name)                      {                          if (index != 0 && Char.IsUpper(ch))                          {                              stringBuilder.Append(' ');                          }                          stringBuilder.Append(ch);                          index++;                      }                        // Instantiate a NamedColor object.                      Color color = (Color)fieldInfo.GetValue(null);                        NamedColor namedColor = new NamedColor                      {                          Name = name'                          FriendlyName = stringBuilder.ToString()'                          Color = color'                          RgbDisplay = String.Format("{0:X2}-{1:X2}-{2:X2}"'                                                     (int)(255 * color.R)'                                                     (int)(255 * color.G)'                                                     (int)(255 * color.B))                      };                        // Add it to the collection.                      all.Add(namedColor);                  }              }
Magic Number,ListViewColors,NamedColor,C:\repos\xamarin_xamarin-forms-samples\BoxView\ListViewColors\ListViewColors\ListViewColors\NamedColor.cs,NamedColor,The following statement contains a magic number: foreach (FieldInfo fieldInfo in typeof(Color).GetRuntimeFields ())              {                  if (fieldInfo.IsPublic &&                      fieldInfo.IsStatic &&                      fieldInfo.FieldType == typeof (Color))                  {                      // Convert the name to a friendly name.                      string name = fieldInfo.Name;                      stringBuilder.Clear();                      int index = 0;                        foreach (char ch in name)                      {                          if (index != 0 && Char.IsUpper(ch))                          {                              stringBuilder.Append(' ');                          }                          stringBuilder.Append(ch);                          index++;                      }                        // Instantiate a NamedColor object.                      Color color = (Color)fieldInfo.GetValue(null);                        NamedColor namedColor = new NamedColor                      {                          Name = name'                          FriendlyName = stringBuilder.ToString()'                          Color = color'                          RgbDisplay = String.Format("{0:X2}-{1:X2}-{2:X2}"'                                                     (int)(255 * color.R)'                                                     (int)(255 * color.G)'                                                     (int)(255 * color.B))                      };                        // Add it to the collection.                      all.Add(namedColor);                  }              }
