Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,SpinPaintShared.UWP,SpinPaintDependencyService,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared.UWP\SpinPaintDependencyService.cs,SaveBitmap,The method has an empty catch block.
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' OnTimerTick);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: float tColor = stopwatch.ElapsedMilliseconds % 10000 / 10000f;
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: fingerPaint.Color = SKColor.FromHsl(360 * tColor' 100' 50);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: fingerPaint.Color = SKColor.FromHsl(360 * tColor' 100' 50);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: fingerPaint.Color = SKColor.FromHsl(360 * tColor' 100' 50);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: float tAngle = stopwatch.ElapsedMilliseconds % 5000 / 5000f;
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: angle = 360 * tAngle;
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: SKMatrix matrix = SKMatrix.MakeRotationDegrees(-angle' bitmap.Width / 2' bitmap.Height / 2);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: SKMatrix matrix = SKMatrix.MakeRotationDegrees(-angle' bitmap.Width / 2' bitmap.Height / 2);
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: foreach (long id in idDictionary.Keys)              {                  FingerInfo fingerInfo = idDictionary[id];                    // Get the canvas size in pixels. It's square so it's only one number.                  float canvasSize = 0;                    if (canvasView is SKCanvasView)                  {                      canvasSize = (canvasView as SKCanvasView).CanvasSize.Width;                  }                  else                  {                      canvasSize = (canvasView as SKGLView).CanvasSize.Width;                  }                    // Convert Xamarin.Forms coordinates to pixels for drawing on the bitmap.                  // Also' make an offset factor if there's been resizing and the bitmap                  //      is now larger than the canvas. (It's never smaller.)                  float factor = canvasSize / (float)canvasView.Width;    // scaling factor                  float offset = (bitmapSize - canvasSize) / 2;           // bitmap always >= canvas                    SKPoint convertedPoint = new SKPoint(factor * (float)fingerInfo.ThisPosition.X + offset'                                                       factor * (float)fingerInfo.ThisPosition.Y + offset);                    // Now rotate the point based on the rotation angle                  SKPoint pt0 = matrix.MapPoint(convertedPoint);                    if (!float.IsPositiveInfinity(fingerInfo.LastPosition.X))                  {                      // Draw four lines in four quadrants.                      SKPoint pt1 = fingerInfo.LastPosition;                      bitmapCanvas.DrawLine(pt0.X' pt0.Y' pt1.X' pt1.Y' fingerPaint);                        float x0Flip = bitmap.Width - pt0.X;                      float y0Flip = bitmap.Height - pt0.Y;                      float x1Flip = bitmap.Width - pt1.X;                      float y1Flip = bitmap.Height - pt1.Y;                        bitmapCanvas.DrawLine(x0Flip' pt0.Y' x1Flip' pt1.Y' fingerPaint);                      bitmapCanvas.DrawLine(pt0.X' y0Flip' pt1.X' y1Flip' fingerPaint);                      bitmapCanvas.DrawLine(x0Flip' y0Flip' x1Flip' y1Flip' fingerPaint);                  }                    // Save the current point for next time through.                  fingerInfo.LastPosition = pt0;              }
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnPaintSurface,The following statement contains a magic number: float radius = canvasSize / 2;
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,PrepBitmap,The following statement contains a magic number: using (SKPath bitmapClipPath = new SKPath())              {                  bitmapClipPath.AddCircle(bitmapSize / 2' bitmapSize / 2' bitmapSize / 2);                  bitmapCanvas.ClipPath(bitmapClipPath);              }
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,PrepBitmap,The following statement contains a magic number: using (SKPath bitmapClipPath = new SKPath())              {                  bitmapClipPath.AddCircle(bitmapSize / 2' bitmapSize / 2' bitmapSize / 2);                  bitmapCanvas.ClipPath(bitmapClipPath);              }
Magic Number,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,PrepBitmap,The following statement contains a magic number: using (SKPath bitmapClipPath = new SKPath())              {                  bitmapClipPath.AddCircle(bitmapSize / 2' bitmapSize / 2' bitmapSize / 2);                  bitmapCanvas.ClipPath(bitmapClipPath);              }
Missing Default,SpinPaintShared,MainPage,C:\repos\xamarin_xamarin-forms-samples\SkiaSharpForms\SpinPaintShared\SpinPaintShared\SpinPaintShared\MainPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (args.IsInContact)                      {                          idDictionary.Add(args.Id' new FingerInfo                          {                              ThisPosition = args.Location'                              LastPosition = new SKPoint(float.PositiveInfinity' float.PositiveInfinity)                          });                      }                      break;                    case TouchActionType.Moved:                      if (idDictionary.ContainsKey(args.Id))                      {                          idDictionary[args.Id].ThisPosition = args.Location;                      }                      break;                    case TouchActionType.Released:                  case TouchActionType.Cancelled:                      if (idDictionary.ContainsKey(args.Id))                      {                          idDictionary.Remove(args.Id);                      }                      break;              }
