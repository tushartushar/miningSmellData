Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TouchTrackingEffectDemos,EllipseDrawingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingPage.xaml.cs,OnTouchEffectAction,Cyclomatic complexity of the method is 16
Complex Method,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,Cyclomatic complexity of the method is 8
Magic Number,TouchTrackingEffectDemos,BlackKey,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\BlackKey.cs,BlackKey,The following statement contains a magic number: DownColor = new Color(0.35);
Magic Number,TouchTrackingEffectDemos,BoxViewDraggingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\BoxViewDraggingPage.xaml.cs,AddBoxViewToLayout,The following statement contains a magic number: BoxView boxView = new BoxView              {                  WidthRequest = 100'                  HeightRequest = 100'                  Color = new Color(random.NextDouble()'                                    random.NextDouble()'                                    random.NextDouble())              };
Magic Number,TouchTrackingEffectDemos,BoxViewDraggingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\BoxViewDraggingPage.xaml.cs,AddBoxViewToLayout,The following statement contains a magic number: BoxView boxView = new BoxView              {                  WidthRequest = 100'                  HeightRequest = 100'                  Color = new Color(random.NextDouble()'                                    random.NextDouble()'                                    random.NextDouble())              };
Magic Number,TouchTrackingEffectDemos,DraggableBoxViewDraggingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\DraggableBoxViewDraggingPage.xaml.cs,AddBoxViewToLayout,The following statement contains a magic number: DraggableBoxView boxView = new DraggableBoxView              {                  WidthRequest = 100'                  HeightRequest = 100'                  Color = new Color(random.NextDouble()'                                    random.NextDouble()'                                    random.NextDouble())              };
Magic Number,TouchTrackingEffectDemos,DraggableBoxViewDraggingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\DraggableBoxViewDraggingPage.xaml.cs,AddBoxViewToLayout,The following statement contains a magic number: DraggableBoxView boxView = new DraggableBoxView              {                  WidthRequest = 100'                  HeightRequest = 100'                  Color = new Color(random.NextDouble()'                                    random.NextDouble()'                                    random.NextDouble())              };
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingFigure,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingFigure.cs,IsInEllipse,The following statement contains a magic number: return (Math.Pow(pt.X - rect.MidX' 2) / Math.Pow(rect.Width / 2' 2) +                      Math.Pow(pt.Y - rect.MidY' 2) / Math.Pow(rect.Height / 2' 2)) < 1;
Magic Number,TouchTrackingEffectDemos,EllipseDrawingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      bool isDragOperation = false;                        // Loop through the completed figures                      foreach (EllipseDrawingFigure fig in completedFigures.Reverse<EllipseDrawingFigure>())                      {                          // Check if the finger is touching one of the ellipses                          if (fig.IsInEllipse(ConvertToPixel(args.Location)))                          {                              // Tentatively assume this is a dragging operation                              isDragOperation = true;                                // Loop through all the figures currently being dragged                              foreach (EllipseDrawingFigure draggedFigure in draggingFigures.Values)                              {                                  // If there's a match' we'll need to dig deeper                                  if (fig == draggedFigure)                                  {                                      isDragOperation = false;                                      break;                                  }                              }                                if (isDragOperation)                              {                                  fig.LastFingerLocation = args.Location;                                  draggingFigures.Add(args.Id' fig);                                  break;                              }                          }                      }                        if (isDragOperation)                      {                          // Move the dragged ellipse to the end of completedFigures so it's drawn on top                          EllipseDrawingFigure fig = draggingFigures[args.Id];                          completedFigures.Remove(fig);                          completedFigures.Add(fig);                      }                      else // start making a new ellipse                      {                          // Random bytes for random color                          byte[] buffer = new byte[4];                          random.NextBytes(buffer);                            EllipseDrawingFigure figure = new EllipseDrawingFigure                          {                              Color = new SKColor(buffer[0]' buffer[1]' buffer[2]' buffer[3])'                              StartPoint = ConvertToPixel(args.Location)'                              EndPoint = ConvertToPixel(args.Location)                          };                          inProgressFigures.Add(args.Id' figure);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Moved:                      if (draggingFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = draggingFigures[args.Id];                          SKRect rect = figure.Rectangle;                          rect.Offset(ConvertToPixel(new Point(args.Location.X - figure.LastFingerLocation.X'                                                               args.Location.Y - figure.LastFingerLocation.Y)));                          figure.Rectangle = rect;                          figure.LastFingerLocation = args.Location;                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Released:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                          completedFigures.Add(figure);                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Cancelled:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      if (inProgressFigures.ContainsKey(args.Id))                      {                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;              }
Magic Number,TouchTrackingEffectDemos,EllipseDrawingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      bool isDragOperation = false;                        // Loop through the completed figures                      foreach (EllipseDrawingFigure fig in completedFigures.Reverse<EllipseDrawingFigure>())                      {                          // Check if the finger is touching one of the ellipses                          if (fig.IsInEllipse(ConvertToPixel(args.Location)))                          {                              // Tentatively assume this is a dragging operation                              isDragOperation = true;                                // Loop through all the figures currently being dragged                              foreach (EllipseDrawingFigure draggedFigure in draggingFigures.Values)                              {                                  // If there's a match' we'll need to dig deeper                                  if (fig == draggedFigure)                                  {                                      isDragOperation = false;                                      break;                                  }                              }                                if (isDragOperation)                              {                                  fig.LastFingerLocation = args.Location;                                  draggingFigures.Add(args.Id' fig);                                  break;                              }                          }                      }                        if (isDragOperation)                      {                          // Move the dragged ellipse to the end of completedFigures so it's drawn on top                          EllipseDrawingFigure fig = draggingFigures[args.Id];                          completedFigures.Remove(fig);                          completedFigures.Add(fig);                      }                      else // start making a new ellipse                      {                          // Random bytes for random color                          byte[] buffer = new byte[4];                          random.NextBytes(buffer);                            EllipseDrawingFigure figure = new EllipseDrawingFigure                          {                              Color = new SKColor(buffer[0]' buffer[1]' buffer[2]' buffer[3])'                              StartPoint = ConvertToPixel(args.Location)'                              EndPoint = ConvertToPixel(args.Location)                          };                          inProgressFigures.Add(args.Id' figure);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Moved:                      if (draggingFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = draggingFigures[args.Id];                          SKRect rect = figure.Rectangle;                          rect.Offset(ConvertToPixel(new Point(args.Location.X - figure.LastFingerLocation.X'                                                               args.Location.Y - figure.LastFingerLocation.Y)));                          figure.Rectangle = rect;                          figure.LastFingerLocation = args.Location;                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Released:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                          completedFigures.Add(figure);                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Cancelled:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      if (inProgressFigures.ContainsKey(args.Id))                      {                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;              }
Magic Number,TouchTrackingEffectDemos,EllipseDrawingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      bool isDragOperation = false;                        // Loop through the completed figures                      foreach (EllipseDrawingFigure fig in completedFigures.Reverse<EllipseDrawingFigure>())                      {                          // Check if the finger is touching one of the ellipses                          if (fig.IsInEllipse(ConvertToPixel(args.Location)))                          {                              // Tentatively assume this is a dragging operation                              isDragOperation = true;                                // Loop through all the figures currently being dragged                              foreach (EllipseDrawingFigure draggedFigure in draggingFigures.Values)                              {                                  // If there's a match' we'll need to dig deeper                                  if (fig == draggedFigure)                                  {                                      isDragOperation = false;                                      break;                                  }                              }                                if (isDragOperation)                              {                                  fig.LastFingerLocation = args.Location;                                  draggingFigures.Add(args.Id' fig);                                  break;                              }                          }                      }                        if (isDragOperation)                      {                          // Move the dragged ellipse to the end of completedFigures so it's drawn on top                          EllipseDrawingFigure fig = draggingFigures[args.Id];                          completedFigures.Remove(fig);                          completedFigures.Add(fig);                      }                      else // start making a new ellipse                      {                          // Random bytes for random color                          byte[] buffer = new byte[4];                          random.NextBytes(buffer);                            EllipseDrawingFigure figure = new EllipseDrawingFigure                          {                              Color = new SKColor(buffer[0]' buffer[1]' buffer[2]' buffer[3])'                              StartPoint = ConvertToPixel(args.Location)'                              EndPoint = ConvertToPixel(args.Location)                          };                          inProgressFigures.Add(args.Id' figure);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Moved:                      if (draggingFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = draggingFigures[args.Id];                          SKRect rect = figure.Rectangle;                          rect.Offset(ConvertToPixel(new Point(args.Location.X - figure.LastFingerLocation.X'                                                               args.Location.Y - figure.LastFingerLocation.Y)));                          figure.Rectangle = rect;                          figure.LastFingerLocation = args.Location;                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Released:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                          completedFigures.Add(figure);                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Cancelled:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      if (inProgressFigures.ContainsKey(args.Id))                      {                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;              }
Magic Number,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPolylines.ContainsKey(args.Id))                      {                          Color strokeColor = (Color)typeof(Color).GetRuntimeField(colorPicker.Items[colorPicker.SelectedIndex]).GetValue(null);                          float strokeWidth = ConvertToPixel(new float[] { 1' 2' 5' 10' 20 }[widthPicker.SelectedIndex]);                            FingerPaintPolyline polyline = new FingerPaintPolyline                          {                              StrokeColor = strokeColor'                              StrokeWidth = strokeWidth                          };                          polyline.Path.MoveTo(ConvertToPixel(args.Location));                            inProgressPolylines.Add(args.Id' polyline);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          FingerPaintPolyline polyline = inProgressPolylines[args.Id];                          polyline.Path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          completedPolylines.Add(inProgressPolylines[args.Id]);                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Magic Number,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPolylines.ContainsKey(args.Id))                      {                          Color strokeColor = (Color)typeof(Color).GetRuntimeField(colorPicker.Items[colorPicker.SelectedIndex]).GetValue(null);                          float strokeWidth = ConvertToPixel(new float[] { 1' 2' 5' 10' 20 }[widthPicker.SelectedIndex]);                            FingerPaintPolyline polyline = new FingerPaintPolyline                          {                              StrokeColor = strokeColor'                              StrokeWidth = strokeWidth                          };                          polyline.Path.MoveTo(ConvertToPixel(args.Location));                            inProgressPolylines.Add(args.Id' polyline);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          FingerPaintPolyline polyline = inProgressPolylines[args.Id];                          polyline.Path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          completedPolylines.Add(inProgressPolylines[args.Id]);                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Magic Number,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPolylines.ContainsKey(args.Id))                      {                          Color strokeColor = (Color)typeof(Color).GetRuntimeField(colorPicker.Items[colorPicker.SelectedIndex]).GetValue(null);                          float strokeWidth = ConvertToPixel(new float[] { 1' 2' 5' 10' 20 }[widthPicker.SelectedIndex]);                            FingerPaintPolyline polyline = new FingerPaintPolyline                          {                              StrokeColor = strokeColor'                              StrokeWidth = strokeWidth                          };                          polyline.Path.MoveTo(ConvertToPixel(args.Location));                            inProgressPolylines.Add(args.Id' polyline);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          FingerPaintPolyline polyline = inProgressPolylines[args.Id];                          polyline.Path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          completedPolylines.Add(inProgressPolylines[args.Id]);                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Magic Number,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following statement contains a magic number: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPolylines.ContainsKey(args.Id))                      {                          Color strokeColor = (Color)typeof(Color).GetRuntimeField(colorPicker.Items[colorPicker.SelectedIndex]).GetValue(null);                          float strokeWidth = ConvertToPixel(new float[] { 1' 2' 5' 10' 20 }[widthPicker.SelectedIndex]);                            FingerPaintPolyline polyline = new FingerPaintPolyline                          {                              StrokeColor = strokeColor'                              StrokeWidth = strokeWidth                          };                          polyline.Path.MoveTo(ConvertToPixel(args.Location));                            inProgressPolylines.Add(args.Id' polyline);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          FingerPaintPolyline polyline = inProgressPolylines[args.Id];                          polyline.Path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          completedPolylines.Add(inProgressPolylines[args.Id]);                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Magic Number,TouchTrackingEffectDemos,WhiteKey,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\WhiteKey.cs,WhiteKey,The following statement contains a magic number: UpColor = new Color(0.9);
Missing Default,TouchTrackingEffectDemos,BoxViewDraggingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\BoxViewDraggingPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      // Don't allow a second touch on an already touched BoxView                      if (!dragDictionary.ContainsKey(boxView))                      {                          dragDictionary.Add(boxView' new DragInfo(args.Id' args.Location));                            // Set Capture property to true                          TouchEffect touchEffect = (TouchEffect)boxView.Effects.FirstOrDefault(e => e is TouchEffect);                          touchEffect.Capture = true;                      }                      break;                    case TouchActionType.Moved:                      if (dragDictionary.ContainsKey(boxView) && dragDictionary[boxView].Id == args.Id)                      {                          Rectangle rect = AbsoluteLayout.GetLayoutBounds(boxView);                          Point initialLocation = dragDictionary[boxView].PressPoint;                          rect.X += args.Location.X - initialLocation.X;                          rect.Y += args.Location.Y - initialLocation.Y;                          AbsoluteLayout.SetLayoutBounds(boxView' rect);                      }                      break;                    case TouchActionType.Released:                      if (dragDictionary.ContainsKey(boxView) && dragDictionary[boxView].Id == args.Id)                      {                          dragDictionary.Remove(boxView);                      }                      break;              }
Missing Default,TouchTrackingEffectDemos,DraggableBoxView,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\DraggableBoxView.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!isBeingDragged)                      {                          isBeingDragged = true;                          touchId = args.Id;                          pressPoint = args.Location;                      }                      break;                    case TouchActionType.Moved:                      if (isBeingDragged && touchId == args.Id)                      {                          TranslationX += args.Location.X - pressPoint.X;                          TranslationY += args.Location.Y - pressPoint.Y;                      }                      break;                    case TouchActionType.Released:                      if (isBeingDragged && touchId == args.Id)                      {                          isBeingDragged = false;                      }                      break;              }
Missing Default,TouchTrackingEffectDemos,EllipseDrawingPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\EllipseDrawingPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      bool isDragOperation = false;                        // Loop through the completed figures                      foreach (EllipseDrawingFigure fig in completedFigures.Reverse<EllipseDrawingFigure>())                      {                          // Check if the finger is touching one of the ellipses                          if (fig.IsInEllipse(ConvertToPixel(args.Location)))                          {                              // Tentatively assume this is a dragging operation                              isDragOperation = true;                                // Loop through all the figures currently being dragged                              foreach (EllipseDrawingFigure draggedFigure in draggingFigures.Values)                              {                                  // If there's a match' we'll need to dig deeper                                  if (fig == draggedFigure)                                  {                                      isDragOperation = false;                                      break;                                  }                              }                                if (isDragOperation)                              {                                  fig.LastFingerLocation = args.Location;                                  draggingFigures.Add(args.Id' fig);                                  break;                              }                          }                      }                        if (isDragOperation)                      {                          // Move the dragged ellipse to the end of completedFigures so it's drawn on top                          EllipseDrawingFigure fig = draggingFigures[args.Id];                          completedFigures.Remove(fig);                          completedFigures.Add(fig);                      }                      else // start making a new ellipse                      {                          // Random bytes for random color                          byte[] buffer = new byte[4];                          random.NextBytes(buffer);                            EllipseDrawingFigure figure = new EllipseDrawingFigure                          {                              Color = new SKColor(buffer[0]' buffer[1]' buffer[2]' buffer[3])'                              StartPoint = ConvertToPixel(args.Location)'                              EndPoint = ConvertToPixel(args.Location)                          };                          inProgressFigures.Add(args.Id' figure);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Moved:                      if (draggingFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = draggingFigures[args.Id];                          SKRect rect = figure.Rectangle;                          rect.Offset(ConvertToPixel(new Point(args.Location.X - figure.LastFingerLocation.X'                                                               args.Location.Y - figure.LastFingerLocation.Y)));                          figure.Rectangle = rect;                          figure.LastFingerLocation = args.Location;                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Released:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      else if (inProgressFigures.ContainsKey(args.Id))                      {                          EllipseDrawingFigure figure = inProgressFigures[args.Id];                          figure.EndPoint = ConvertToPixel(args.Location);                          completedFigures.Add(figure);                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;                    case TouchActionType.Cancelled:                      if (draggingFigures.ContainsKey(args.Id))                      {                          draggingFigures.Remove(args.Id);                      }                      if (inProgressFigures.ContainsKey(args.Id))                      {                          inProgressFigures.Remove(args.Id);                      }                      canvasView.InvalidateSurface();                      break;              }
Missing Default,TouchTrackingEffectDemos,FingerPaintPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\FingerPaintPage.xaml.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      if (!inProgressPolylines.ContainsKey(args.Id))                      {                          Color strokeColor = (Color)typeof(Color).GetRuntimeField(colorPicker.Items[colorPicker.SelectedIndex]).GetValue(null);                          float strokeWidth = ConvertToPixel(new float[] { 1' 2' 5' 10' 20 }[widthPicker.SelectedIndex]);                            FingerPaintPolyline polyline = new FingerPaintPolyline                          {                              StrokeColor = strokeColor'                              StrokeWidth = strokeWidth                          };                          polyline.Path.MoveTo(ConvertToPixel(args.Location));                            inProgressPolylines.Add(args.Id' polyline);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Moved:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          FingerPaintPolyline polyline = inProgressPolylines[args.Id];                          polyline.Path.LineTo(ConvertToPixel(args.Location));                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Released:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          completedPolylines.Add(inProgressPolylines[args.Id]);                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;                    case TouchActionType.Cancelled:                      if (inProgressPolylines.ContainsKey(args.Id))                      {                          inProgressPolylines.Remove(args.Id);                          canvasView.InvalidateSurface();                      }                      break;              }
Missing Default,TouchTrackingEffectDemos,Key,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Effects\TouchTrackingEffect\TouchTrackingEffect\TouchTrackingEffect\Key.cs,OnTouchEffectAction,The following switch statement is missing a default case: switch (args.Type)              {                  case TouchActionType.Pressed:                      AddToList(args.Id);                      break;                    case TouchActionType.Entered:                      if (args.IsInContact)                      {                          AddToList(args.Id);                      }                      break;                    case TouchActionType.Moved:                      break;                    case TouchActionType.Released:                  case TouchActionType.Exited:                      RemoveFromList(args.Id);                      break;              }
