Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FormsVideoLibrary.Droid,VideoPlayerRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\FormsVideoLibrary\VideoPlayerRenderer.cs,SetSource,Cyclomatic complexity of the method is 8
Complex Method,TouchTracking.Droid,TouchEffect,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\TouchTracking\TouchEffect.cs,OnTouch,Cyclomatic complexity of the method is 11
Long Parameter List,TouchTracking.Droid,TouchEffect,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\TouchTracking\TouchEffect.cs,FireEvent,The method has 5 parameters. Parameters: touchEffect' id' actionType' pointerLocation' isInContact
Long Statement,DIContainerDemo.Droid,MainActivity,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\MainActivity.cs,RegisterTypes,The length of the statement  "            App.RegisterTypeWithParameters<FormsVideoLibrary.Droid.VideoPlayerRenderer>(typeof(Android.Content.Context)' this' typeof(ILogger)' "logger"); " is 142.
Long Statement,DIContainerDemo.Droid,MainActivity,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\MainActivity.cs,RegisterTypes,The length of the statement  "            App.RegisterTypeWithParameters<IPhotoPicker' Services.Droid.PhotoPicker>(typeof(Android.Content.Context)' this' typeof(ILogger)' "logger"); " is 139.
Missing Default,TouchTracking.Droid,TouchEffect,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Advanced\DependencyResolution\DIContainerDemo\DIContainerDemo.Android\TouchTracking\TouchEffect.cs,OnTouch,The following switch statement is missing a default case: switch (args.Event.ActionMasked)              {                  case MotionEventActions.Down:                  case MotionEventActions.PointerDown:                      FireEvent(this' id' TouchActionType.Pressed' screenPointerCoords' true);                        idToEffectDictionary.Add(id' this);                        capture = libTouchEffect.Capture;                      break;                    case MotionEventActions.Move:                      // Multiple Move events are bundled' so handle them in a loop                      for (pointerIndex = 0; pointerIndex < motionEvent.PointerCount; pointerIndex++)                      {                          id = motionEvent.GetPointerId(pointerIndex);                            if (capture)                          {                              senderView.GetLocationOnScreen(twoIntArray);                                screenPointerCoords = new Point(twoIntArray[0] + motionEvent.GetX(pointerIndex)'                                                              twoIntArray[1] + motionEvent.GetY(pointerIndex));                                FireEvent(this' id' TouchActionType.Moved' screenPointerCoords' true);                          }                          else                          {                              CheckForBoundaryHop(id' screenPointerCoords);                                if (idToEffectDictionary[id] != null)                              {                                  FireEvent(idToEffectDictionary[id]' id' TouchActionType.Moved' screenPointerCoords' true);                              }                          }                      }                      break;                    case MotionEventActions.Up:                  case MotionEventActions.Pointer1Up:                      if (capture)                      {                          FireEvent(this' id' TouchActionType.Released' screenPointerCoords' false);                      }                      else                      {                          CheckForBoundaryHop(id' screenPointerCoords);                            if (idToEffectDictionary[id] != null)                          {                              FireEvent(idToEffectDictionary[id]' id' TouchActionType.Released' screenPointerCoords' false);                          }                      }                      idToEffectDictionary.Remove(id);                      break;                    case MotionEventActions.Cancel:                      if (capture)                      {                          FireEvent(this' id' TouchActionType.Cancelled' screenPointerCoords' false);                      }                      else                      {                          if (idToEffectDictionary[id] != null)                          {                              FireEvent(idToEffectDictionary[id]' id' TouchActionType.Cancelled' screenPointerCoords' false);                          }                      }                      idToEffectDictionary.Remove(id);                      break;              }
