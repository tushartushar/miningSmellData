Implementation smell,Namespace,Class,File,Method,Description
Magic Number,WorkingWithMaps,GeocoderPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\GeocoderPageCode.cs,GeocoderPageCode,The following statement contains a magic number: b1.Clicked += async (sender' e) =>              {                  var fortMasonPosition = new Position(37.8044866' -122.4324132);                  var possibleAddresses = await geoCoder.GetAddressesForPositionAsync(fortMasonPosition);                  foreach (var a in possibleAddresses)                  {                      l.Text += a + "\n";                  }              };
Magic Number,WorkingWithMaps,GeocoderPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\GeocoderPageCode.cs,GeocoderPageCode,The following statement contains a magic number: b1.Clicked += async (sender' e) =>              {                  var fortMasonPosition = new Position(37.8044866' -122.4324132);                  var possibleAddresses = await geoCoder.GetAddressesForPositionAsync(fortMasonPosition);                  foreach (var a in possibleAddresses)                  {                      l.Text += a + "\n";                  }              };
Magic Number,WorkingWithMaps,GeocoderPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\GeocoderPageCode.cs,GeocoderPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Padding = new Thickness(0' 20' 0' 0)'                  Children = {                      b2'                      b1'                      l                  }              };
Magic Number,WorkingWithMaps,MapAppPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapAppPageCode.cs,MapAppPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Padding = new Thickness(5' 20' 5' 0)'                  HorizontalOptions = LayoutOptions.Fill'                  Children =                  {                      l'                      openLocation'                      openDirections                  }              };
Magic Number,WorkingWithMaps,MapAppPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapAppPageCode.cs,MapAppPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Padding = new Thickness(5' 20' 5' 0)'                  HorizontalOptions = LayoutOptions.Fill'                  Children =                  {                      l'                      openLocation'                      openDirections                  }              };
Magic Number,WorkingWithMaps,MapAppPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapAppPageCode.cs,MapAppPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Padding = new Thickness(5' 20' 5' 0)'                  HorizontalOptions = LayoutOptions.Fill'                  Children =                  {                      l'                      openLocation'                      openDirections                  }              };
Magic Number,WorkingWithMaps,MapRegionPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapRegionPageCode.cs,MapRegionPageCode,The following statement contains a magic number: Position position = new Position(36.9628066' -122.0194722);
Magic Number,WorkingWithMaps,MapRegionPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapRegionPageCode.cs,MapRegionPageCode,The following statement contains a magic number: Position position = new Position(36.9628066' -122.0194722);
Magic Number,WorkingWithMaps,MapRegionPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapRegionPageCode.cs,MapRegionPageCode,The following statement contains a magic number: MapSpan mapSpan = new MapSpan(position' 0.01' 0.01);
Magic Number,WorkingWithMaps,MapRegionPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapRegionPageCode.cs,MapRegionPageCode,The following statement contains a magic number: MapSpan mapSpan = new MapSpan(position' 0.01' 0.01);
Magic Number,WorkingWithMaps,MapRegionPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapRegionPageCode.cs,MapRegionPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Margin = new Thickness(10)'                  Children = { map }              };
Magic Number,WorkingWithMaps,MapTypesPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPage.xaml.cs,OnSliderValueChanged,The following statement contains a magic number: double latlongDegrees = 360 / (Math.Pow(2' zoomLevel));
Magic Number,WorkingWithMaps,MapTypesPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPage.xaml.cs,OnSliderValueChanged,The following statement contains a magic number: double latlongDegrees = 360 / (Math.Pow(2' zoomLevel));
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: var slider = new Slider(1' 18' 12)              {                  Margin = new Thickness(20' 0' 20' 0)              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: var slider = new Slider(1' 18' 12)              {                  Margin = new Thickness(20' 0' 20' 0)              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: var slider = new Slider(1' 18' 12)              {                  Margin = new Thickness(20' 0' 20' 0)              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: var slider = new Slider(1' 18' 12)              {                  Margin = new Thickness(20' 0' 20' 0)              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: slider.ValueChanged += (sender' e) =>              {                  double zoomLevel = e.NewValue; // between 1 and 18                  double latlongDegrees = 360 / (Math.Pow(2' zoomLevel));                  if (map.VisibleRegion != null)                  {                      map.MoveToRegion(new MapSpan(map.VisibleRegion.Center' latlongDegrees' latlongDegrees));                  }              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: slider.ValueChanged += (sender' e) =>              {                  double zoomLevel = e.NewValue; // between 1 and 18                  double latlongDegrees = 360 / (Math.Pow(2' zoomLevel));                  if (map.VisibleRegion != null)                  {                      map.MoveToRegion(new MapSpan(map.VisibleRegion.Center' latlongDegrees' latlongDegrees));                  }              };
Magic Number,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,MapTypesPageCode,The following statement contains a magic number: StackLayout buttons = new StackLayout              {                  Spacing = 30'                  HorizontalOptions = LayoutOptions.Center'                  Orientation = StackOrientation.Horizontal'                  Children = { streetButton' satelliteButton' hybridButton }              };
Magic Number,WorkingWithMaps,PinItemsSourcePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinItemsSourcePage.xaml.cs,PinItemsSourcePage,The following statement contains a magic number: map.MoveToRegion(MapSpan.FromCenterAndRadius(new Position(39.8283459' -98.5794797)' Distance.FromMiles(1500)));
Magic Number,WorkingWithMaps,PinItemsSourcePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinItemsSourcePage.xaml.cs,PinItemsSourcePage,The following statement contains a magic number: map.MoveToRegion(MapSpan.FromCenterAndRadius(new Position(39.8283459' -98.5794797)' Distance.FromMiles(1500)));
Magic Number,WorkingWithMaps,PinItemsSourcePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinItemsSourcePage.xaml.cs,PinItemsSourcePage,The following statement contains a magic number: map.MoveToRegion(MapSpan.FromCenterAndRadius(new Position(39.8283459' -98.5794797)' Distance.FromMiles(1500)));
Magic Number,WorkingWithMaps,PinPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPage.xaml.cs,OnButtonClicked,The following statement contains a magic number: Pin boardwalkPin = new Pin              {                  Position = new Position(36.9641949' -122.0177232)'                  Label = "Boardwalk"'                  Address = "Santa Cruz"'                  Type = PinType.Place              };
Magic Number,WorkingWithMaps,PinPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPage.xaml.cs,OnButtonClicked,The following statement contains a magic number: Pin boardwalkPin = new Pin              {                  Position = new Position(36.9641949' -122.0177232)'                  Label = "Boardwalk"'                  Address = "Santa Cruz"'                  Type = PinType.Place              };
Magic Number,WorkingWithMaps,PinPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPage.xaml.cs,OnButtonClicked,The following statement contains a magic number: Pin wharfPin = new Pin              {                  Position = new Position(36.9571571' -122.0173544)'                  Label = "Wharf"'                  Address = "Santa Cruz"'                  Type = PinType.Place              };
Magic Number,WorkingWithMaps,PinPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPage.xaml.cs,OnButtonClicked,The following statement contains a magic number: Pin wharfPin = new Pin              {                  Position = new Position(36.9571571' -122.0173544)'                  Label = "Wharf"'                  Address = "Santa Cruz"'                  Type = PinType.Place              };
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: Position position = new Position(36.9628066' -122.0194722);
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: Position position = new Position(36.9628066' -122.0194722);
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: MapSpan mapSpan = new MapSpan(position' 0.01' 0.01);
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: MapSpan mapSpan = new MapSpan(position' 0.01' 0.01);
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: button.Clicked += (sender' e) =>              {                  Pin boardwalkPin = new Pin                  {                      Position = new Position(36.9641949' -122.0177232)'                      Label = "Boardwalk"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    boardwalkPin.MarkerClicked += async (s' args) =>                  {                      args.HideInfoWindow = true;                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Pin Clicked"' $"{pinName} was clicked."' "Ok");                  };                    Pin wharfPin = new Pin                  {                      Position = new Position(36.9571571' -122.0173544)'                      Label = "Wharf"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    wharfPin.InfoWindowClicked += async (s' args) =>                  {                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Info Window Clicked"' $"The info window was clicked for {pinName}."' "Ok");                  };                    map.Pins.Add(boardwalkPin);                  map.Pins.Add(wharfPin);              };
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: button.Clicked += (sender' e) =>              {                  Pin boardwalkPin = new Pin                  {                      Position = new Position(36.9641949' -122.0177232)'                      Label = "Boardwalk"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    boardwalkPin.MarkerClicked += async (s' args) =>                  {                      args.HideInfoWindow = true;                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Pin Clicked"' $"{pinName} was clicked."' "Ok");                  };                    Pin wharfPin = new Pin                  {                      Position = new Position(36.9571571' -122.0173544)'                      Label = "Wharf"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    wharfPin.InfoWindowClicked += async (s' args) =>                  {                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Info Window Clicked"' $"The info window was clicked for {pinName}."' "Ok");                  };                    map.Pins.Add(boardwalkPin);                  map.Pins.Add(wharfPin);              };
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: button.Clicked += (sender' e) =>              {                  Pin boardwalkPin = new Pin                  {                      Position = new Position(36.9641949' -122.0177232)'                      Label = "Boardwalk"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    boardwalkPin.MarkerClicked += async (s' args) =>                  {                      args.HideInfoWindow = true;                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Pin Clicked"' $"{pinName} was clicked."' "Ok");                  };                    Pin wharfPin = new Pin                  {                      Position = new Position(36.9571571' -122.0173544)'                      Label = "Wharf"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    wharfPin.InfoWindowClicked += async (s' args) =>                  {                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Info Window Clicked"' $"The info window was clicked for {pinName}."' "Ok");                  };                    map.Pins.Add(boardwalkPin);                  map.Pins.Add(wharfPin);              };
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: button.Clicked += (sender' e) =>              {                  Pin boardwalkPin = new Pin                  {                      Position = new Position(36.9641949' -122.0177232)'                      Label = "Boardwalk"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    boardwalkPin.MarkerClicked += async (s' args) =>                  {                      args.HideInfoWindow = true;                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Pin Clicked"' $"{pinName} was clicked."' "Ok");                  };                    Pin wharfPin = new Pin                  {                      Position = new Position(36.9571571' -122.0173544)'                      Label = "Wharf"'                      Address = "Santa Cruz"'                      Type = PinType.Place                  };                    wharfPin.InfoWindowClicked += async (s' args) =>                  {                      string pinName = ((Pin)s).Label;                      await DisplayAlert("Info Window Clicked"' $"The info window was clicked for {pinName}."' "Ok");                  };                    map.Pins.Add(boardwalkPin);                  map.Pins.Add(wharfPin);              };
Magic Number,WorkingWithMaps,PinPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PinPageCode.cs,PinPageCode,The following statement contains a magic number: Content = new StackLayout              {                  Margin = new Thickness(10)'                  Children =                  {                      map'                      button                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msWest = new Polygon              {                  StrokeColor = Color.FromHex("#FF9900")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#88FF9900")'                  Geopath =                  {                      new Position(47.6458676' -122.1356007)'                      new Position(47.6458097' -122.142789)'                      new Position(47.6367593' -122.1428104)'                      new Position(47.6368027' -122.1398707)'                      new Position(47.6380172' -122.1376177)'                      new Position(47.640663' -122.1352359)'                      new Position(47.6426148' -122.1347209)'                      new Position(47.6458676' -122.1356007)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: msEast = new Polygon              {                  StrokeColor = Color.FromHex("#1BA1E2")'                  StrokeWidth = 8'                  FillColor = Color.FromHex("#881BA1E2")'                  Geopath =                  {                      new Position(47.6368678' -122.137305)'                      new Position(47.6368894' -122.134655)'                      new Position(47.6359424' -122.134655)'                      new Position(47.6359496' -122.1325521)'                      new Position(47.6424124' -122.1325199)'                      new Position(47.642463' -122.1338932)'                      new Position(47.6406414' -122.1344833)'                      new Position(47.6384943' -122.1361248)'                      new Position(47.6372943' -122.1376912)'                      new Position(47.6368678' -122.137305)'                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: interstateBridge = new Polyline              {                  StrokeColor = Color.Black'                  StrokeWidth = 12'                  Geopath =                  {                      new Position(47.6381401' -122.1317367)'                      new Position(47.6381473' -122.1350841)'                      new Position(47.6382847' -122.1353094)'                      new Position(47.6384582' -122.1354703)'                      new Position(47.6401136' -122.1360819)'                      new Position(47.6403883' -122.1364681)'                      new Position(47.6407426' -122.1377019)'                      new Position(47.6412558' -122.1404056)'                      new Position(47.6414148' -122.1418647)'                      new Position(47.6414654' -122.1432702)                  }              };
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: map.MoveToRegion(                  MapSpan.FromCenterAndRadius(                      new Position(47.640663' -122.1376177)' Distance.FromMiles(1)));
Magic Number,WorkingWithMaps,PolygonsPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\PolygonsPageCode.cs,PolygonsPageCode,The following statement contains a magic number: map.MoveToRegion(                  MapSpan.FromCenterAndRadius(                      new Position(47.640663' -122.1376177)' Distance.FromMiles(1)));
Magic Number,WorkingWithMaps,RandomPosition,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\RandomPosition.cs,Next,The following statement contains a magic number: return new Position(                  position.Latitude + (Random.NextDouble() * 2 - 1) * latitudeRange'                  position.Longitude + (Random.NextDouble() * 2 - 1) * longitudeRange);
Magic Number,WorkingWithMaps,RandomPosition,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\RandomPosition.cs,Next,The following statement contains a magic number: return new Position(                  position.Latitude + (Random.NextDouble() * 2 - 1) * latitudeRange'                  position.Longitude + (Random.NextDouble() * 2 - 1) * longitudeRange);
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,PinItemsSourcePageViewModel,The following statement contains a magic number: _locations = new ObservableCollection<Location>()              {                  new Location("New York' USA"' "The City That Never Sleeps"' new Position(40.67' -73.94))'                  new Location("Los Angeles' USA"' "City of Angels"' new Position(34.11' -118.41))'                  new Location("San Francisco' USA"' "Bay City"' new Position(37.77' -122.45))              };
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,NewLocation,The following statement contains a magic number: return new Location(                  $"Pin {_pinCreatedCount}"'                   $"Desc {_pinCreatedCount}"'                   RandomPosition.Next(new Position(39.8283459' -98.5794797)' 8' 19));
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,NewLocation,The following statement contains a magic number: return new Location(                  $"Pin {_pinCreatedCount}"'                   $"Desc {_pinCreatedCount}"'                   RandomPosition.Next(new Position(39.8283459' -98.5794797)' 8' 19));
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,NewLocation,The following statement contains a magic number: return new Location(                  $"Pin {_pinCreatedCount}"'                   $"Desc {_pinCreatedCount}"'                   RandomPosition.Next(new Position(39.8283459' -98.5794797)' 8' 19));
Magic Number,WorkingWithMaps.ViewModels,PinItemsSourcePageViewModel,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\ViewModels\PinItemsSourcePageViewModel.cs,NewLocation,The following statement contains a magic number: return new Location(                  $"Pin {_pinCreatedCount}"'                   $"Desc {_pinCreatedCount}"'                   RandomPosition.Next(new Position(39.8283459' -98.5794797)' 8' 19));
Missing Default,WorkingWithMaps,MapPropertiesPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapPropertiesPage.xaml.cs,OnCheckBoxCheckedChanged,The following switch statement is missing a default case: switch (checkBox.StyleId)              {                  case "scrollEnabledCheckBox":                      map.HasScrollEnabled = !map.HasScrollEnabled;                      break;                  case "zoomEnabledCheckBox":                      map.HasZoomEnabled = !map.HasZoomEnabled;                      break;                  case "showUserCheckBox":                      map.IsShowingUser = !map.IsShowingUser;                      break;                  case "moveRegionCheckBox":                      map.MoveToLastRegionOnLayoutChange = !map.MoveToLastRegionOnLayoutChange;                      break;              }
Missing Default,WorkingWithMaps,MapTypesPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPage.xaml.cs,OnButtonClicked,The following switch statement is missing a default case: switch (button.Text)              {                  case "Street":                      map.MapType = MapType.Street;                      break;                  case "Satellite":                      map.MapType = MapType.Satellite;                      break;                  case "Hybrid":                      map.MapType = MapType.Hybrid;                      break;              }
Missing Default,WorkingWithMaps,MapTypesPageCode,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\WorkingWithMaps\WorkingWithMaps\WorkingWithMaps\MapTypesPageCode.cs,OnButtonClicked,The following switch statement is missing a default case: switch (button.Text)              {                  case "Street":                      map.MapType = MapType.Street;                      break;                  case "Satellite":                      map.MapType = MapType.Satellite;                      break;                  case "Hybrid":                      map.MapType = MapType.Hybrid;                      break;              }
