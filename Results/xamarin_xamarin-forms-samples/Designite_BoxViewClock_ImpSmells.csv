Implementation smell,Namespace,Class,File,Method,Description
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromSeconds(1.0 / 60)' OnTimerTick);
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: Point center = new Point(absoluteLayout.Width / 2' absoluteLayout.Height / 2);
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: Point center = new Point(absoluteLayout.Width / 2' absoluteLayout.Height / 2);
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: double radius = 0.45 * Math.Min(absoluteLayout.Width' absoluteLayout.Height);
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: for (int index = 0; index < tickMarks.Length; index++)              {                  double size = radius / (index % 5 == 0 ? 15 : 30);                  double radians = index * 2 * Math.PI / tickMarks.Length;                  double x = center.X + radius * Math.Sin(radians) - size / 2;                  double y = center.Y - radius * Math.Cos(radians) - size / 2;                  AbsoluteLayout.SetLayoutBounds(tickMarks[index]' new Rectangle(x' y' size' size));                  tickMarks[index].Rotation = 180 * radians / Math.PI;              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,LayoutHand,The following statement contains a magic number: AbsoluteLayout.SetLayoutBounds(boxView'                  new Rectangle(center.X - 0.5 * width'                                center.Y - offset * height'                                width' height));
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: hourHand.Rotation = 30 * (dateTime.Hour % 12) + 0.5 * dateTime.Minute;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: hourHand.Rotation = 30 * (dateTime.Hour % 12) + 0.5 * dateTime.Minute;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: hourHand.Rotation = 30 * (dateTime.Hour % 12) + 0.5 * dateTime.Minute;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: minuteHand.Rotation = 6 * dateTime.Minute + 0.1 * dateTime.Second;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: minuteHand.Rotation = 6 * dateTime.Minute + 0.1 * dateTime.Second;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: double t = dateTime.Millisecond / 1000.0;
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: if (t < 0.5)              {                  t = 0.5 * Easing.SpringIn.Ease(t / 0.5);              }              else              {                  t = 0.5 * (1 + Easing.SpringOut.Ease((t - 0.5) / 0.5));              }
Magic Number,BoxViewClock,MainPage,C:\repos\xamarin_xamarin-forms-samples\BoxView\BoxViewClock\BoxViewClock\BoxViewClock\MainPage.xaml.cs,OnTimerTick,The following statement contains a magic number: secondHand.Rotation = 6 * (dateTime.Second + t);
