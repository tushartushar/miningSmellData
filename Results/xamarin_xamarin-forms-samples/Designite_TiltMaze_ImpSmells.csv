Implementation smell,Namespace,Class,File,Method,Description
Long Method,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The method has 110 lines of code.
Long Method,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The method has 138 lines of code.
Complex Method,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,Cyclomatic complexity of the method is 13
Complex Method,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,Cyclomatic complexity of the method is 16
Complex Conditional,TiltMaze,Line2D,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\Line2D.cs,SegmentIntersection,The conditional expression  "tThis < 0 || tThis > 1 || tThat < 0 || tThat > 1"  is complex.
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Accelerometer.ReadingChanged += (sender' args) =>              {                  // Smooth the reading by averaging with prior values                  acceleration = 0.5f * args.Reading.Acceleration + 0.5f * acceleration;              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Accelerometer.ReadingChanged += (sender' args) =>              {                  // Smooth the reading by averaging with prior values                  acceleration = 0.5f * args.Reading.Acceleration + 0.5f * acceleration;              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(33)' () =>              {                  TimeSpan elapsedTime = stopwatch.Elapsed;                  float deltaSeconds = (float)(elapsedTime - lastElapsedTime).TotalSeconds;                  lastElapsedTime = elapsedTime;                    if (isBallInPlay)                  {                      // MoveBall returns true for end of game                      if (MoveBall(deltaSeconds))                      {                          // Aysnchronous method                          TransitionToNewGame();                      }                  }                  return true;              });
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,TransitionToNewGame,The following statement contains a magic number: await absoluteLayout.FadeTo(0' 1000);
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,TransitionToNewGame,The following statement contains a magic number: await absoluteLayout.FadeTo(1' 500);
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: int halfWallWidth = WALL_WIDTH / 2;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: bool isBallLeftCorner = random.Next(2) == 0;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: bool isBallTopCorner = random.Next(2) == 0;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: hole = new EllipseView              {                  Color = Color.Black'                  WidthRequest = 2 * HOLE_RADIUS'                  HeightRequest = 2 * HOLE_RADIUS              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: hole = new EllipseView              {                  Color = Color.Black'                  WidthRequest = 2 * HOLE_RADIUS'                  HeightRequest = 2 * HOLE_RADIUS              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: holePosition = new Vector2((isBallLeftCorner ? 2 * mazeGrid.Width - 1 : 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 2 * mazeGrid.Height - 1 : 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: holePosition = new Vector2((isBallLeftCorner ? 2 * mazeGrid.Width - 1 : 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 2 * mazeGrid.Height - 1 : 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: holePosition = new Vector2((isBallLeftCorner ? 2 * mazeGrid.Width - 1 : 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 2 * mazeGrid.Height - 1 : 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: holePosition = new Vector2((isBallLeftCorner ? 2 * mazeGrid.Width - 1 : 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 2 * mazeGrid.Height - 1 : 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ball = new EllipseView              {                  Color = Color.Red'                  WidthRequest = 2 * BALL_RADIUS'                  HeightRequest = 2 * BALL_RADIUS              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ball = new EllipseView              {                  Color = Color.Red'                  WidthRequest = 2 * BALL_RADIUS'                  HeightRequest = 2 * BALL_RADIUS              };
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ballPosition = new Vector2((isBallLeftCorner ? 1 : 2 * mazeGrid.Width - 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 1 : 2 * mazeGrid.Height - 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ballPosition = new Vector2((isBallLeftCorner ? 1 : 2 * mazeGrid.Width - 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 1 : 2 * mazeGrid.Height - 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ballPosition = new Vector2((isBallLeftCorner ? 1 : 2 * mazeGrid.Width - 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 1 : 2 * mazeGrid.Height - 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,NewGame,The following statement contains a magic number: ballPosition = new Vector2((isBallLeftCorner ? 1 : 2 * mazeGrid.Width - 1) * (width / mazeGrid.Width / 2)'                                         (isBallTopCorner ? 1 : 2 * mazeGrid.Height - 1) * (height / mazeGrid.Height / 2));
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The following statement contains a magic number: r = r0 + v0 * t + 0.5f * a * t * t;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The following statement contains a magic number: r.Y = y + 0.01f;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The following statement contains a magic number: normal.Y > 0 && Math.Abs(r0.Y - y) < 0.1f && r.Y < y
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The following statement contains a magic number: distanceToCollision < 0.1f
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,MoveBall,The following statement contains a magic number: float vMag = (float)Math.Sqrt(v0.LengthSquared() + 2 * a.Length() * distanceToCollision);
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,WrapAngle,The following statement contains a magic number: angle = (float)Math.IEEERemainder(angle' 2 * pi);
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,WrapAngle,The following statement contains a magic number: angle += 2 * pi;
Magic Number,TiltMaze,MainPage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MainPage.xaml.cs,WrapAngle,The following statement contains a magic number: angle -= 2 * pi;
Magic Number,TiltMaze,MazeGrid,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\MazeGrid.cs,DivideChamber,The following statement contains a magic number: chamber.Width == 1 || chamber.Height >= 2 * chamber.Width
Magic Number,Xamarin.FormsBook.Platform,EllipseView,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\EllipseView.cs,OnMeasure,The following statement contains a magic number: return new SizeRequest(new Size(40' 40));
Magic Number,Xamarin.FormsBook.Platform,EllipseView,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\Sensors\TiltMaze\TiltMaze\TiltMaze\EllipseView.cs,OnMeasure,The following statement contains a magic number: return new SizeRequest(new Size(40' 40));
