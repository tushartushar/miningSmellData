Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CustomRenderer.UWP,CameraPageRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraPageRenderer.cs,InitializeCameraAsync,The length of the statement  "                    if (cameraDevice.EnclosureLocation == null || cameraDevice.EnclosureLocation.Panel == Windows.Devices.Enumeration.Panel.Unknown) " is 128.
Long Statement,CustomRenderer.UWP,CameraPageRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraPageRenderer.cs,SetPreviewRotationAsync,The length of the statement  "            // Add rotation metadata to the preview stream to ensure aspect ratio/dimensions match when rendering and getting preview frames " is 128.
Long Statement,CustomRenderer.UWP,CameraPageRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraPageRenderer.cs,TakePhotoAsync,The length of the statement  "                var orientation = CameraRotationHelper.ConvertSimpleOrientationToPhotoOrientation(_rotationHelper.GetCameraCaptureOrientation()); " is 129.
Long Statement,CustomRenderer.UWP,CameraPageRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraPageRenderer.cs,FindCameraDeviceByPanelAsync,The length of the statement  "            var desiredDevice = allVideoDevices.FirstOrDefault(d => d.EnclosureLocation != null && d.EnclosureLocation.Panel == desiredPanel); " is 130.
Long Statement,CustomRenderer.UWP,CameraPageRenderer,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraPageRenderer.cs,ReencodeAndSavePhotoAsync,The length of the statement  "                    var properties = new BitmapPropertySet { { "System.Photo.Orientation"' new BitmapTypedValue(orientation' PropertyType.UInt16) } }; " is 130.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,MirrorOrientation,The length of the statement  "            // This only affects the 90 and 270 degree cases' because rotating 0 and 180 degrees is the same clockwise and counter-clockwise " is 128.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,SimpleOrientationSensor_OrientationChanged,The length of the statement  "                // Only raise the OrientationChanged event if the device is not parallel to the ground. This allows users to take pictures of documents (FaceUp) " is 144.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,SimpleOrientationSensor_OrientationChanged,The length of the statement  "                // or the ceiling (FaceDown) in portrait or landscape' by first holding the device in the desired orientation' and then pointing the camera " is 139.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,SimpleOrientationSensor_OrientationChanged,The length of the statement  "                //Note: This assumes that the camera is either facing the same way as the screen' or the opposite way. For devices with cameras mounted " is 135.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ShouldMirrorPreview,The length of the statement  "            // It is recommended that applications mirror the preview for front-facing cameras' as it gives users a more natural experience' since it behaves more like a mirror " is 164.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,GetCameraOrientationRelativeToNativeOrientation,The length of the statement  "            var enclosureAngle = ConvertClockwiseDegreesToSimpleOrientation((int)_cameraEnclosureLocation.RotationAngleInDegreesClockwise); " is 127.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,GetCameraOrientationRelativeToNativeOrientation,The length of the statement  "            // Account for the fact that' on portrait-first devices' the built in camera sensor is read at a 90 degree offset to the native orientation " is 139.
Long Statement,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,GetCameraOrientationRelativeToNativeOrientation,The length of the statement  "            if (_displayInformation.NativeOrientation == DisplayOrientations.Portrait && !IsEnclosureLocationExternal(_cameraEnclosureLocation)) " is 132.
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertSimpleOrientationToClockwiseDegrees,The following statement contains a magic number: switch (orientation)              {                  case SimpleOrientation.Rotated90DegreesCounterclockwise:                      return 270;                  case SimpleOrientation.Rotated180DegreesCounterclockwise:                      return 180;                  case SimpleOrientation.Rotated270DegreesCounterclockwise:                      return 90;                  case SimpleOrientation.NotRotated:                  default:                      return 0;              }
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertSimpleOrientationToClockwiseDegrees,The following statement contains a magic number: switch (orientation)              {                  case SimpleOrientation.Rotated90DegreesCounterclockwise:                      return 270;                  case SimpleOrientation.Rotated180DegreesCounterclockwise:                      return 180;                  case SimpleOrientation.Rotated270DegreesCounterclockwise:                      return 90;                  case SimpleOrientation.NotRotated:                  default:                      return 0;              }
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertSimpleOrientationToClockwiseDegrees,The following statement contains a magic number: switch (orientation)              {                  case SimpleOrientation.Rotated90DegreesCounterclockwise:                      return 270;                  case SimpleOrientation.Rotated180DegreesCounterclockwise:                      return 180;                  case SimpleOrientation.Rotated270DegreesCounterclockwise:                      return 90;                  case SimpleOrientation.NotRotated:                  default:                      return 0;              }
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,AddOrientations,The following statement contains a magic number: var result = (aRot + bRot) % 360;
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,SubtractOrientations,The following statement contains a magic number: var result = (360 + (aRot - bRot)) % 360;
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,SubtractOrientations,The following statement contains a magic number: var result = (360 + (aRot - bRot)) % 360;
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertClockwiseDegreesToSimpleOrientation,The following statement contains a magic number: switch (orientation)              {                  case 270:                      return SimpleOrientation.Rotated90DegreesCounterclockwise;                  case 180:                      return SimpleOrientation.Rotated180DegreesCounterclockwise;                  case 90:                      return SimpleOrientation.Rotated270DegreesCounterclockwise;                  case 0:                  default:                      return SimpleOrientation.NotRotated;              }
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertClockwiseDegreesToSimpleOrientation,The following statement contains a magic number: switch (orientation)              {                  case 270:                      return SimpleOrientation.Rotated90DegreesCounterclockwise;                  case 180:                      return SimpleOrientation.Rotated180DegreesCounterclockwise;                  case 90:                      return SimpleOrientation.Rotated270DegreesCounterclockwise;                  case 0:                  default:                      return SimpleOrientation.NotRotated;              }
Magic Number,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,ConvertClockwiseDegreesToSimpleOrientation,The following statement contains a magic number: switch (orientation)              {                  case 270:                      return SimpleOrientation.Rotated90DegreesCounterclockwise;                  case 180:                      return SimpleOrientation.Rotated180DegreesCounterclockwise;                  case 90:                      return SimpleOrientation.Rotated270DegreesCounterclockwise;                  case 0:                  default:                      return SimpleOrientation.NotRotated;              }
Missing Default,CustomRenderer.UWP,CameraRotationHelper,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\CustomRenderers\ContentPage\UWP\CameraRotationHelper.cs,MirrorOrientation,The following switch statement is missing a default case: switch (orientation)              {                  case SimpleOrientation.Rotated90DegreesCounterclockwise:                      return SimpleOrientation.Rotated270DegreesCounterclockwise;                  case SimpleOrientation.Rotated270DegreesCounterclockwise:                      return SimpleOrientation.Rotated90DegreesCounterclockwise;              }
