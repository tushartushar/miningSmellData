Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,Cyclomatic complexity of the method is 14
Complex Method,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,Cyclomatic complexity of the method is 13
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,HomePage,The following statement contains a magic number: picker.SelectedIndex = 5;
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,OnRunAnimationButtonClicked,The following statement contains a magic number: await image.TranslateTo (0' 200' duration' GetEasingFunction ());
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePage,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePage.xaml.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Custom3:  				return new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t));  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,HomePageCS,The following statement contains a magic number: picker.SelectedIndex = 5;
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,HomePageCS,The following statement contains a magic number: Content = new StackLayout {   				Margin = new Thickness (0' 20' 0' 0)'  				Children = {  					image'  					new Label { Text = "Select easing function:" }'  					picker'  					new StackLayout {  						Orientation = StackOrientation.Horizontal'  						Children = {  							new Label { Text = "Duration:"' VerticalOptions = LayoutOptions.Center }'  							entry'  							new Label { Text = "ms"' VerticalOptions = LayoutOptions.Center }   						}	  					}'  					button  				}  			};
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,OnRunAnimationButtonClicked,The following statement contains a magic number: await image.TranslateTo (0' 200' duration' GetEasingFunction ());
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
Magic Number,EasingDemo,HomePageCS,D:\research\architectureSmells\repos\xamarin_xamarin-forms-samples\UserInterface\Animation\Easing\EasingDemo\HomePageCS.cs,GetEasingFunction,The following statement contains a magic number: switch (easingFunction) {  			case EasingFunction.BounceIn:  				return Easing.BounceIn;  			case EasingFunction.BounceOut:  				return Easing.BounceOut;  			case EasingFunction.CubicIn:  				return Easing.CubicIn;  			case EasingFunction.CubicOut:  				return Easing.CubicOut;  			case EasingFunction.CubicInOut:  				return Easing.CubicInOut;  			case EasingFunction.SinIn:  				return Easing.SinIn;  			case EasingFunction.SinOut:  				return Easing.SinOut;  			case EasingFunction.SinInOut:  				return Easing.SinInOut;  			case EasingFunction.SpringIn:  				return Easing.SpringIn;  			case EasingFunction.SpringOut:  				return Easing.SpringOut;  			case EasingFunction.Custom1:  				return new Easing (t => (int)(5 * t) / 5.0);  			case EasingFunction.Custom2:  				return new Easing (t => 9 * t * t * t - 13.5 * t * t + 5.5 * t);  			case EasingFunction.Linear:  			default:  				return Easing.Linear;  			}
