Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Fusillade.Tests.Http,HttpSchedulerCachingTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerCachingTests.cs,CachingFunctionShouldBeCalledWithContent,The length of the statement  "            var fixture = new RateLimitedHttpMessageHandler(innerHandler' Priority.UserInitiated' cacheResultFunc: async (rq' re' key' ct) => contentResponses.Add(await re.Content.ReadAsByteArrayAsync().ConfigureAwait(false)));" is 215.
Long Statement,Fusillade.Tests.Http,HttpSchedulerCachingTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerCachingTests.cs,CachingFunctionShouldPreserveHeaders,The length of the statement  "            var fixture = new RateLimitedHttpMessageHandler(innerHandler' Priority.UserInitiated' cacheResultFunc: (rq' re' key' ct) =>" is 123.
Long Statement,Fusillade.Tests.Http,HttpSchedulerCachingTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerCachingTests.cs,RoundTripIntegrationTest,The length of the statement  "            var cachingHandler = new RateLimitedHttpMessageHandler(new HttpClientHandler()' Priority.UserInitiated' cacheResultFunc: async (rq' resp' key' ct) =>" is 149.
Long Statement,Fusillade.Tests.Http,HttpSchedulerCachingTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerCachingTests.cs,OnlyCacheRelevantMethods,The length of the statement  "            var fixture = new RateLimitedHttpMessageHandler(innerHandler' Priority.UserInitiated' cacheResultFunc: (rq' re' key' ct) =>" is 123.
Complex Conditional,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The conditional expression  "bytes[bodyIndex] != 0x0D || bytes[bodyIndex + 1] != 0x0A ||                     bytes[bodyIndex + 2] != 0x0D || bytes[bodyIndex + 3] != 0x0A"  is complex.
Magic Number,Fusillade.Tests,BaseHttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\BaseHttpSchedulerSharedTests.cs,CreateFixture,The following statement contains a magic number: return new RateLimitedHttpMessageHandler(innerHandler' Priority.UserInitiated' opQueue: new OperationQueue(4));
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldCompleteADummyRequest,The following statement contains a magic number: var result = await client.SendAsync(rq).ToObservable()                 .Timeout(TimeSpan.FromSeconds(2.0)' RxApp.TaskpoolScheduler);
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldCompleteADummyRequest,The following statement contains a magic number: Assert.Equal(3 /*foo*/' bytes.Length);
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldntScheduleLotsOfStuffAtOnce,The following statement contains a magic number: new TestScheduler().With(sched =>             {                 var rqs = Enumerable.Range(0' 5)                     .Select(x => new HttpRequestMessage(HttpMethod.Get' "/" + x.ToString()))                     .ToArray();                  rqs.ToObservable()                     .Select(rq => client.SendAsync(rq))                     .Merge()                     .ToObservableChangeSet()                     .ObserveOn(ImmediateScheduler.Instance)                     .Bind(out var results)                     .Subscribe();                  sched.Start();                  Assert.Equal(4' scheduledCount);                 Assert.Equal(0' completedCount);                  var firstSubj = blockedRqs.First().Value;                 firstSubj.OnNext(Unit.Default);                 firstSubj.OnCompleted();                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(1' completedCount);                  foreach (var v in blockedRqs.Values)                 {                     v.OnNext(Unit.Default);                     v.OnCompleted();                 }                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(5' completedCount);             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldntScheduleLotsOfStuffAtOnce,The following statement contains a magic number: new TestScheduler().With(sched =>             {                 var rqs = Enumerable.Range(0' 5)                     .Select(x => new HttpRequestMessage(HttpMethod.Get' "/" + x.ToString()))                     .ToArray();                  rqs.ToObservable()                     .Select(rq => client.SendAsync(rq))                     .Merge()                     .ToObservableChangeSet()                     .ObserveOn(ImmediateScheduler.Instance)                     .Bind(out var results)                     .Subscribe();                  sched.Start();                  Assert.Equal(4' scheduledCount);                 Assert.Equal(0' completedCount);                  var firstSubj = blockedRqs.First().Value;                 firstSubj.OnNext(Unit.Default);                 firstSubj.OnCompleted();                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(1' completedCount);                  foreach (var v in blockedRqs.Values)                 {                     v.OnNext(Unit.Default);                     v.OnCompleted();                 }                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(5' completedCount);             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldntScheduleLotsOfStuffAtOnce,The following statement contains a magic number: new TestScheduler().With(sched =>             {                 var rqs = Enumerable.Range(0' 5)                     .Select(x => new HttpRequestMessage(HttpMethod.Get' "/" + x.ToString()))                     .ToArray();                  rqs.ToObservable()                     .Select(rq => client.SendAsync(rq))                     .Merge()                     .ToObservableChangeSet()                     .ObserveOn(ImmediateScheduler.Instance)                     .Bind(out var results)                     .Subscribe();                  sched.Start();                  Assert.Equal(4' scheduledCount);                 Assert.Equal(0' completedCount);                  var firstSubj = blockedRqs.First().Value;                 firstSubj.OnNext(Unit.Default);                 firstSubj.OnCompleted();                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(1' completedCount);                  foreach (var v in blockedRqs.Values)                 {                     v.OnNext(Unit.Default);                     v.OnCompleted();                 }                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(5' completedCount);             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldntScheduleLotsOfStuffAtOnce,The following statement contains a magic number: new TestScheduler().With(sched =>             {                 var rqs = Enumerable.Range(0' 5)                     .Select(x => new HttpRequestMessage(HttpMethod.Get' "/" + x.ToString()))                     .ToArray();                  rqs.ToObservable()                     .Select(rq => client.SendAsync(rq))                     .Merge()                     .ToObservableChangeSet()                     .ObserveOn(ImmediateScheduler.Instance)                     .Bind(out var results)                     .Subscribe();                  sched.Start();                  Assert.Equal(4' scheduledCount);                 Assert.Equal(0' completedCount);                  var firstSubj = blockedRqs.First().Value;                 firstSubj.OnNext(Unit.Default);                 firstSubj.OnCompleted();                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(1' completedCount);                  foreach (var v in blockedRqs.Values)                 {                     v.OnNext(Unit.Default);                     v.OnCompleted();                 }                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(5' completedCount);             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,HttpSchedulerShouldntScheduleLotsOfStuffAtOnce,The following statement contains a magic number: new TestScheduler().With(sched =>             {                 var rqs = Enumerable.Range(0' 5)                     .Select(x => new HttpRequestMessage(HttpMethod.Get' "/" + x.ToString()))                     .ToArray();                  rqs.ToObservable()                     .Select(rq => client.SendAsync(rq))                     .Merge()                     .ToObservableChangeSet()                     .ObserveOn(ImmediateScheduler.Instance)                     .Bind(out var results)                     .Subscribe();                  sched.Start();                  Assert.Equal(4' scheduledCount);                 Assert.Equal(0' completedCount);                  var firstSubj = blockedRqs.First().Value;                 firstSubj.OnNext(Unit.Default);                 firstSubj.OnCompleted();                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(1' completedCount);                  foreach (var v in blockedRqs.Values)                 {                     v.OnNext(Unit.Default);                     v.OnCompleted();                 }                  sched.Start();                  Assert.Equal(5' scheduledCount);                 Assert.Equal(5' completedCount);             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,RateLimitedSchedulerShouldStopAfterContentLimitReached,The following statement contains a magic number: fixture.ResetLimit(5);
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,RequestsToDifferentPathsArentDebounced,The following statement contains a magic number: Assert.Equal(2' messageCount);
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,RequestsToDifferentPathsArentDebounced,The following statement contains a magic number: Assert.Equal(2' messageCount);
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,DownloadARelease,The following statement contains a magic number: var fixture = CreateFixture(new HttpClientHandler()             {                 AllowAutoRedirect = true'                 MaxRequestContentBufferSize = 1048576 * 64'             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,DownloadARelease,The following statement contains a magic number: var fixture = CreateFixture(new HttpClientHandler()             {                 AllowAutoRedirect = true'                 MaxRequestContentBufferSize = 1048576 * 64'             });
Magic Number,Fusillade.Tests,HttpSchedulerSharedTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerSharedTests.cs,DownloadARelease,The following statement contains a magic number: Assert.Equal(8089690' bytes.Length);
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: bytes[bodyIndex] != 0x0D || bytes[bodyIndex + 1] != 0x0A ||                     bytes[bodyIndex + 2] != 0x0D || bytes[bodyIndex + 3] != 0x0A
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: bytes[bodyIndex] != 0x0D || bytes[bodyIndex + 1] != 0x0A ||                     bytes[bodyIndex + 2] != 0x0D || bytes[bodyIndex + 3] != 0x0A
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: bodyIndex < bytes.Length - 3
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: ret.Content = new ByteArrayContent(bytes' bodyIndex + 2' bytes.Length - bodyIndex - 2);
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: ret.Content = new ByteArrayContent(bytes' bodyIndex + 2' bytes.Length - bodyIndex - 2);
Magic Number,Fusillade.Tests,IntegrationTestHelper,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\IntegrationTestHelper.cs,GetResponse,The following statement contains a magic number: var val = line.Substring(separatorIndex + 2).TrimEnd();
Magic Number,Fusillade.Tests.Http,HttpSchedulerCachingTests,C:\research\architectureSmells\repos\paulcbetts_Fusillade\src\Fusillade.Tests\Http\HttpSchedulerCachingTests.cs,CachingFunctionShouldBeCalledWithContent,The following statement contains a magic number: Assert.Equal(3' contentResponses[0].Length);
