Implementation smell,Namespace,Class,File,Method,Description
Long Method,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The method has 100 lines of code.
Complex Method,Node.Cs.Lib.Controllers,ControllersFactoryHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\ControllersFactoryHandler.cs,InitializeDescriptors,Cyclomatic complexity of the method is 9
Complex Method,Node.Cs.Lib.Controllers,ControllerWrapperDescriptor,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\ControllerWrapperDescriptor.cs,InitializeMethodGroups,Cyclomatic complexity of the method is 8
Complex Method,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,Cyclomatic complexity of the method is 25
Complex Method,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,Cyclomatic complexity of the method is 13
Complex Method,Node.Cs.Lib.OnReceive,SessionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\SessionManager.cs,StoreContext,Cyclomatic complexity of the method is 8
Complex Method,Node.Cs.Lib.OnReceive,ViewsManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ViewsManager.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Node.Cs.Lib,NodeCsRunner,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\NodeCsRunner.cs,InitializeSettingsFromCommandLine,Cyclomatic complexity of the method is 8
Long Parameter List,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The method has 7 parameters.
Long Parameter List,Node.Cs.Lib,ExtensionHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\ExtensionHandler.cs,ExtensionHandler,The method has 5 parameters.
Long Parameter List,Node.Cs.Lib.Static,StaticHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Static\StaticHandler.cs,Initialize,The method has 6 parameters.
Long Identifier,Node.Cs.Lib.Controllers,ControllersFactoryHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\ControllersFactoryHandler.cs,Initialize,The length of the parameter controllersFactoryClassFullName is 31.
Long Identifier,Node.Cs.Lib.Controllers,ControllersFactoryHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\ControllersFactoryHandler.cs,Initialize,The length of the parameter controllersFactoryClassFullName is 31.
Long Statement,Node.Cs.Lib.Controllers,BasicControllersFactory,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\BasicControllersFactory.cs,Initialize,The length of the statement  "		var function = Function.Create ().WithBody (CodeLine.CreateVariable<IController> ("result")' CodeLine.Assign ("result"' Operation.CreateInstance (type))).Returns ("result"); " is 173.
Long Statement,Node.Cs.Lib.Controllers,ControllerWrapperDescriptor,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Controllers\ControllerWrapperDescriptor.cs,SetupMethod,The length of the statement  "		_methods.Add (verb' new Dictionary<string' ReadOnlyCollection<MethodWrapperDescriptor>> (StringComparer.OrdinalIgnoreCase)); " is 124.
Long Statement,Node.Cs.Lib.Exceptions,DefaultExceptionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Exceptions\DefaultExceptionManager.cs,BuildException,The length of the statement  "    <tr class='alt'><th>Request Tracing Directory</th><td>&nbsp;&nbsp;&nbsp;C:\Users\enrico.daros\Documents\IISExpress\TraceLogFiles\SIMPLEWEBSITE</td></tr> " is 152.
Long Statement,Node.Cs.Lib.Loaders,HandlersLoader,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Loaders\HandlersLoaders.cs,LoadHandlersFromAssembly,The length of the statement  "	var types = asm.GetTypes ().Where (t => _handlerType.IsAssignableFrom (t) && _coroutineType.IsAssignableFrom (t)).ToList (); " is 124.
Long Statement,Node.Cs.Lib.OnReceive,ContextManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ContextManager.cs,InitializeContext,The length of the statement  "	return Coroutine.InvokeAsTaskAndWait (() => Context.Initialize ((HttpListenerContext)_listener.Context' GlobalVars.SessionStorage.SessionTimeoutSeconds' GlobalVars.SessionStorage.RunId)); " is 187.
Long Statement,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The length of the statement  "				if (!parType.IsValueType && !parType.IsArray && !(parType == typeof(string)) && !parType.IsEnum && !(parType == typeof(object))) { " is 130.
Long Statement,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The length of the statement  "		var controller = (ControllerWrapperInstance)GlobalVars.ControllersFactoryHandler.Create (ControllerName + "Controller"); " is 120.
Long Statement,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The length of the statement  "			if (TryInvoke (method' allParams' controller.Instance' hasConverter' (HttpContextBase)context' isChildRequest' out methResult)) { " is 129.
Long Statement,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,Run,The length of the statement  "	yield return InvokeControllerAndWait (() => HandleRoutedRequests (RouteDefintion' LocalPath' Context' IsChildRequest)' resultDate); " is 131.
Long Statement,Node.Cs.Lib.OnReceive,ViewsManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ViewsManager.cs,Run,The length of the statement  "	var handlerInstance = GlobalVars.ExtensionHandler.CreateInstance ((HttpContextBase)Context' foundedPath' IsChildRequest); " is 121.
Long Statement,Node.Cs.Lib.PathProviders,ResourcePathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\ResourcePathProvider.cs,Initialize,The length of the statement  "	_assembly = AppDomain.CurrentDomain.GetAssemblies ().First (a => a.GetName ().Name.IndexOf (connectionString' StringComparison.OrdinalIgnoreCase) >= 0); " is 152.
Long Statement,Node.Cs.Lib.Utils,CleanUpOnMaxMemoryReached,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\CleanUpOnMaxMemoryReached.cs,Run,The length of the statement  "		if (_process.PrivateMemorySize64 > (_maxMemorySize * 0.75) || AppDomain.CurrentDomain.GetData (NodeCsRunner.CLEAR_CACHE_COMMAND) != null) { " is 139.
Long Statement,Node.Cs.Lib.Utils,ByteMatch,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\ByteMatch.cs,IsEmptyLocate,The length of the statement  "	return array == null || candidate == null || array.Length == 0 || candidate.Length == 0 || candidate.Length > array.Length; " is 123.
Long Statement,Node.Cs.Lib.Utils,MemoryCacheSessionStorage,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\MemoryCacheSessionStorage.cs,CreateSession,The length of the statement  "	yield return Step.DataStep (_memoryCache.AddOrGetExisting (sessionId' data' DateTime.Now + new TimeSpan (0' 0' SessionTimeoutSeconds))); " is 136.
Long Statement,Node.Cs.Lib.Utils,InMemorySessionStorage,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\InMemorySessionStorage.cs,CreateSession,The length of the statement  "	foreach (var item in _memoryCache.AddOrGetValue (sessionId' data' IN_MEMORY_SESSION' TimeSpan.FromSeconds (_sessionTimeoutSeconds))) { " is 134.
Long Statement,Node.Cs.Lib.Utils,OnHttpListenerReceivedCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\OnHttpListenerReceivedCoroutine.cs,Run,The length of the statement  "		yield return InvokeLocalAndWait (() => GlobalVars.SessionStorage.CreateSession (_sessionManager.StoredSid)' actionResult); " is 122.
Long Statement,Node.Cs.Lib.Contexts.ContentUtils,MultipartFormStreamConverter,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Contexts\ContentUtils\MultipartFormStreamConverter.cs,ParseSingleBlock,The length of the statement  "	var startContentDisposition = ByteMatch.IndexOf (_content' _contentDispositionBytes' startAt) + _contentDispositionBytes.Length; " is 128.
Long Statement,Node.Cs.Lib,ExtensionHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\ExtensionHandler.cs,InitializeHandlers,The length of the statement  "			var function = Function.Create ().WithBody (CodeLine.CreateVariable<ICoroutine> ("result")' CodeLine.Assign ("result"' Operation.CreateInstance (type))).Returns ("result"); " is 172.
Long Statement,Node.Cs.Lib,NodeCsRunner,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\NodeCsRunner.cs,CreateDomain,The length of the statement  "	_runner = (NodeCsRunner)_runningAppDomain.CreateInstanceAndUnwrap (typeToInvoke.Assembly.FullName' typeToInvoke.FullName); " is 122.
Long Statement,Node.Cs.Lib.Static,StaticHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Static\StaticHandler.cs,Run,The length of the statement  "		yield return InvokeLocalAndWait (() => _memoryCache.AddOrReplaceAndGet (localPath' () => ReadCacheData ()' NodeCsServer.NodeCsCache)' result); " is 142.
Long Statement,Node.Cs.Lib.Static,StaticHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Static\StaticHandler.cs,Run,The length of the statement  "	yield return InvokeLocalAndWait (() => _memoryCache.AddOrGet (localPath' () => ReadCacheData ()' NodeCsServer.NodeCsCache)' result); " is 132.
Complex Conditional,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The conditional expression  "!parType.IsValueType && !parType.IsArray && !(parType == typeof(string)) && !parType.IsEnum && !(parType == typeof(object))"  is complex.
Empty Catch Block,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The method has an empty catch block.
Empty Catch Block,Node.Cs.Lib.OnReceive,SessionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\SessionManager.cs,StoreContext,The method has an empty catch block.
Magic Number,Node.Cs.Lib.Exceptions,DefaultExceptionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Exceptions\DefaultExceptionManager.cs,HandleException,The following statement contains a magic number: if (nodeCsException == null) {  	WriteException (exception' context);  }  else if (nodeCsException.HttpCode == 500) {  	WriteException (nodeCsException' context);  }  else {  	WriteError (nodeCsException' context' nodeCsException.HttpCode);  }  
Magic Number,Node.Cs.Lib.Exceptions,DefaultExceptionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Exceptions\DefaultExceptionManager.cs,HandleException,The following statement contains a magic number: if (nodeCsException.HttpCode == 500) {  	WriteException (nodeCsException' context);  }  else {  	WriteError (nodeCsException' context' nodeCsException.HttpCode);  }  
Magic Number,Node.Cs.Lib.Exceptions,DefaultExceptionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Exceptions\DefaultExceptionManager.cs,WriteException,The following statement contains a magic number: WriteError (exception' context' 500);  
Magic Number,Node.Cs.Lib.Exceptions,DefaultExceptionManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Exceptions\DefaultExceptionManager.cs,SetupStackTrace,The following statement contains a magic number: if (statusCode != 500)  	return string.Empty;  
Magic Number,Node.Cs.Lib.OnReceive,ContextManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ContextManager.cs,InitializeCulture,The following statement contains a magic number: if (_listener.HasUserLanguage) {  	var userLanguages = _listener.UserLanguages;  	var langAvailable = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	foreach (var userLanguage in userLanguages) {  		var lang = userLanguage.Split (';') [0];  		langAvailable.Add (lang);  	}  	foreach (var lan in GlobalVars.Settings.Listener.Cultures.AvailableCultures) {  		var lk = lan.Key;  		if (langAvailable.Contains (lk)) {  			System.Threading.Thread.CurrentThread.CurrentCulture = lan.Value;  			ListenerCulture = lan.Value;  			return;  		}  		lk = lk.Substring (0' 2);  		if (langAvailable.Contains (lk)) {  			System.Threading.Thread.CurrentThread.CurrentCulture = lan.Value;  			ListenerCulture = lan.Value;  			return;  		}  	}  }  
Magic Number,Node.Cs.Lib.OnReceive,ContextManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ContextManager.cs,InitializeCulture,The following statement contains a magic number: foreach (var lan in GlobalVars.Settings.Listener.Cultures.AvailableCultures) {  	var lk = lan.Key;  	if (langAvailable.Contains (lk)) {  		System.Threading.Thread.CurrentThread.CurrentCulture = lan.Value;  		ListenerCulture = lan.Value;  		return;  	}  	lk = lk.Substring (0' 2);  	if (langAvailable.Contains (lk)) {  		System.Threading.Thread.CurrentThread.CurrentCulture = lan.Value;  		ListenerCulture = lan.Value;  		return;  	}  }  
Magic Number,Node.Cs.Lib.OnReceive,ContextManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ContextManager.cs,InitializeCulture,The following statement contains a magic number: lk = lk.Substring (0' 2);  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The following statement contains a magic number: try {  	var request = context.Request;  	var parsValues = new List<object> ();  	methResult = null;  	var methPars = method.Parameters.ToList ();  	for (int index = 0; index < methPars.Count; index++) {  		bool parValueSet = false;  		var par = methPars [index];  		object valueToAdd = null;  		if (allParams.ContainsKey (par.Name)) {  			var parValue = allParams [par.Name];  			if (parValue.GetType () != par.ParameterType) {  				object convertedValue;  				if (UniversalTypeConverter.TryConvert (parValue' par.ParameterType' out convertedValue)) {  					valueToAdd = convertedValue;  					parValueSet = true;  				}  				else if (!par.HasDefault) {  					if (par.ParameterType.IsValueType) {  						return false;  					}  					parValueSet = true;  				}  			}  			else {  				valueToAdd = parValue;  				parValueSet = true;  			}  		}  		if (par.ParameterType == typeof(FormCollection)) {  			parValueSet = true;  			valueToAdd = new FormCollection (context.Request.Form);  		}  		if (parValueSet == false && request.ContentType != null) {  			var parType = par.ParameterType;  			if (!parType.IsValueType && !parType.IsArray && !(parType == typeof(string)) && !parType.IsEnum && !(parType == typeof(object))) {  				try {  					valueToAdd = GlobalVars.ConversionService.Convert (parType' request.ContentType' request);  					parValueSet = true;  				}  				catch (Exception) {  				}  			}  		}  		if (par.HasDefault && !parValueSet) {  			parValueSet = true;  			valueToAdd = par.Default;  		}  		if (!parValueSet && string.Compare (par.Name' "returnUrl"' StringComparison.OrdinalIgnoreCase) == 0) {  			if (request.UrlReferrer != null) {  				parValueSet = true;  				valueToAdd = request.UrlReferrer.ToString ();  			}  		}  		if (!par.GetType ().IsValueType && !parValueSet) {  			parValueSet = true;  			valueToAdd = null;  		}  		if (!parValueSet)  			return false;  		parsValues.Add (valueToAdd);  	}  	var attributes = new List<Attribute> (method.Attributes);  	foreach (var attribute in attributes) {  		var filter = attribute as IFilter;  		if (filter != null) {  			if (!filter.OnPreExecute (context)) {  				methResult = NullResponse.Instance;  				return true;  			}  		}  		else if (attribute is ChildActionOnly && !isChildRequest) {  			throw new NodeCsException ("Item not found '{0}'."' 404' Context.Request.Url.ToString ());  		}  	}  	var msd = new ModelStateDictionary ();  	foreach (var par in parsValues) {  		if (ValidationAttributesService.CanValidate (par)) {  			ValidationAttributesService.ValidateModel (par' msd);  		}  	}  	controllerWrapper.Set ("ModelState"' msd);  	var result = controllerWrapper.TryInvoke (method' out methResult' parsValues.ToArray ());  	if (result) {  		foreach (var attribute in attributes) {  			var filter = attribute as IFilter;  			if (filter != null) {  				filter.OnPostExecute (context' null);  			}  		}  	}  	return result;  }  catch (Exception) {  	Logger.Info ("Not found suitable action for method '{0}'."' method.Name);  	methResult = null;  	return false;  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The following statement contains a magic number: foreach (var attribute in attributes) {  	var filter = attribute as IFilter;  	if (filter != null) {  		if (!filter.OnPreExecute (context)) {  			methResult = NullResponse.Instance;  			return true;  		}  	}  	else if (attribute is ChildActionOnly && !isChildRequest) {  		throw new NodeCsException ("Item not found '{0}'."' 404' Context.Request.Url.ToString ());  	}  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The following statement contains a magic number: if (filter != null) {  	if (!filter.OnPreExecute (context)) {  		methResult = NullResponse.Instance;  		return true;  	}  }  else if (attribute is ChildActionOnly && !isChildRequest) {  	throw new NodeCsException ("Item not found '{0}'."' 404' Context.Request.Url.ToString ());  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The following statement contains a magic number: if (attribute is ChildActionOnly && !isChildRequest) {  	throw new NodeCsException ("Item not found '{0}'."' 404' Context.Request.Url.ToString ());  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,TryInvoke,The following statement contains a magic number: throw new NodeCsException ("Item not found '{0}'."' 404' Context.Request.Url.ToString ());  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: if (!string.IsNullOrEmpty (ControllerName) && !string.IsNullOrEmpty (ActionName)) {  	var allParams = new Dictionary<string' object> (StringComparer.OrdinalIgnoreCase);  	foreach (var param in RouteInstanceParams) {  		allParams.Add (param.Key' param.Value);  	}  	foreach (var param in context.Request.QueryString.AllKeys) {  		if (param != null && !allParams.ContainsKey (param)) {  			allParams.Add (param' context.Request.QueryString [param]);  		}  	}  	foreach (var param in context.Request.Form.AllKeys) {  		if (param != null && !allParams.ContainsKey (param)) {  			allParams.Add (param' context.Request.Form [param]);  		}  	}  	var requestContentType = context.Request.ContentType;  	bool hasConverter = GlobalVars.ConversionService.HasConverter (requestContentType);  	var controller = (ControllerWrapperInstance)GlobalVars.ControllersFactoryHandler.Create (ControllerName + "Controller");  	if (controller == null) {  		throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  	}  	controller.Instance.Set ("HttpContext"' (HttpContextBase)context);  	var methods = controller.GetMethodGroup (ActionName' verb).ToList ();  	bool methodInvoked = false;  	foreach (var method in methods) {  		if (TryInvoke (method' allParams' controller.Instance' hasConverter' (HttpContextBase)context' isChildRequest' out methResult)) {  			methodInvoked = true;  			break;  		}  	}  	if (!methodInvoked) {  		throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  	}  	var enumerableResult = methResult as IEnumerable<IResponse>;  	var result = new Container ();  	yield return Coroutine.InvokeLocalAndWait (() => EnumerateResponse (enumerableResult)' result);  	var typeofResponse = result.RawData.GetType ();  	var responseHandler = GlobalVars.ResponseHandlers.Load (typeofResponse);  	var response = result.RawData as IResponse;  	if (responseHandler != null && response != null) {  		responseHandler.Handle (controller' context' response);  		yield return Step.DataStep (response);  	}  	else {  		yield return Step.DataStep (result.RawData);  	}  	if (controller != null) {  		GlobalVars.ControllersFactoryHandler.Release ((IController)controller.Instance.Instance);  	}  	yield break;  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: if (!string.IsNullOrEmpty (ControllerName) && !string.IsNullOrEmpty (ActionName)) {  	var allParams = new Dictionary<string' object> (StringComparer.OrdinalIgnoreCase);  	foreach (var param in RouteInstanceParams) {  		allParams.Add (param.Key' param.Value);  	}  	foreach (var param in context.Request.QueryString.AllKeys) {  		if (param != null && !allParams.ContainsKey (param)) {  			allParams.Add (param' context.Request.QueryString [param]);  		}  	}  	foreach (var param in context.Request.Form.AllKeys) {  		if (param != null && !allParams.ContainsKey (param)) {  			allParams.Add (param' context.Request.Form [param]);  		}  	}  	var requestContentType = context.Request.ContentType;  	bool hasConverter = GlobalVars.ConversionService.HasConverter (requestContentType);  	var controller = (ControllerWrapperInstance)GlobalVars.ControllersFactoryHandler.Create (ControllerName + "Controller");  	if (controller == null) {  		throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  	}  	controller.Instance.Set ("HttpContext"' (HttpContextBase)context);  	var methods = controller.GetMethodGroup (ActionName' verb).ToList ();  	bool methodInvoked = false;  	foreach (var method in methods) {  		if (TryInvoke (method' allParams' controller.Instance' hasConverter' (HttpContextBase)context' isChildRequest' out methResult)) {  			methodInvoked = true;  			break;  		}  	}  	if (!methodInvoked) {  		throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  	}  	var enumerableResult = methResult as IEnumerable<IResponse>;  	var result = new Container ();  	yield return Coroutine.InvokeLocalAndWait (() => EnumerateResponse (enumerableResult)' result);  	var typeofResponse = result.RawData.GetType ();  	var responseHandler = GlobalVars.ResponseHandlers.Load (typeofResponse);  	var response = result.RawData as IResponse;  	if (responseHandler != null && response != null) {  		responseHandler.Handle (controller' context' response);  		yield return Step.DataStep (response);  	}  	else {  		yield return Step.DataStep (result.RawData);  	}  	if (controller != null) {  		GlobalVars.ControllersFactoryHandler.Release ((IController)controller.Instance.Instance);  	}  	yield break;  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: if (controller == null) {  	throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: if (!methodInvoked) {  	throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  }  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  
Magic Number,Node.Cs.Lib.OnReceive,ControllersManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ControllersManager.cs,HandleRoutedRequests,The following statement contains a magic number: throw new NodeCsException ("Url '{0}' not found."' 404' Context.Request.Url.ToString ());  
Magic Number,Node.Cs.Lib.OnReceive,HttpCodesManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\HttpCodesManager.cs,Run,The following statement contains a magic number: if (Response.HttpCode == 302) {  	var redirect = (RedirectResponse)Response;  	var urlHelper = new UrlHelper ((HttpContextBase)Context);  	var realUrl = urlHelper.MergeUrl (redirect.Url);  	Context.Response.Redirect (realUrl);  }  else if (Response.HttpCode == 301) {  	var redirect = (RedirectResponse)Response;  	var urlHelper = new UrlHelper ((HttpContextBase)Context);  	var realUrl = urlHelper.MergeUrl (redirect.Url);  	Context.Response.RedirectPermanent (realUrl);  }  
Magic Number,Node.Cs.Lib.OnReceive,HttpCodesManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\HttpCodesManager.cs,Run,The following statement contains a magic number: if (Response.HttpCode == 302) {  	var redirect = (RedirectResponse)Response;  	var urlHelper = new UrlHelper ((HttpContextBase)Context);  	var realUrl = urlHelper.MergeUrl (redirect.Url);  	Context.Response.Redirect (realUrl);  }  else if (Response.HttpCode == 301) {  	var redirect = (RedirectResponse)Response;  	var urlHelper = new UrlHelper ((HttpContextBase)Context);  	var realUrl = urlHelper.MergeUrl (redirect.Url);  	Context.Response.RedirectPermanent (realUrl);  }  
Magic Number,Node.Cs.Lib.OnReceive,HttpCodesManager,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\HttpCodesManager.cs,Run,The following statement contains a magic number: if (Response.HttpCode == 301) {  	var redirect = (RedirectResponse)Response;  	var urlHelper = new UrlHelper ((HttpContextBase)Context);  	var realUrl = urlHelper.MergeUrl (redirect.Url);  	Context.Response.RedirectPermanent (realUrl);  }  
Magic Number,Node.Cs.Lib.OnReceive,ViewsManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ViewsManager.cs,Run,The following statement contains a magic number: if (foundedPath == null) {  	throw new NodeCsException ("Resource '{0}' not found."' 404' LocalPath);  }  
Magic Number,Node.Cs.Lib.OnReceive,ViewsManagerCoroutine,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\OnReceive\ViewsManager.cs,Run,The following statement contains a magic number: throw new NodeCsException ("Resource '{0}' not found."' 404' LocalPath);  
Magic Number,Node.Cs.Lib.PathProviders,ResourcePathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\ResourcePathProvider.cs,ReadText,The following statement contains a magic number: if (data.Length > preamble.Length) {  	if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  		yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  	}  	else {  		yield return Step.DataStep (result);  	}  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,ResourcePathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\ResourcePathProvider.cs,ReadText,The following statement contains a magic number: if (data.Length > preamble.Length) {  	if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  		yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  	}  	else {  		yield return Step.DataStep (result);  	}  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,ResourcePathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\ResourcePathProvider.cs,ReadText,The following statement contains a magic number: if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  	yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,ResourcePathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\ResourcePathProvider.cs,ReadText,The following statement contains a magic number: if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  	yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,FileSystemPathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\FileSystemPathProvider.cs,ReadText,The following statement contains a magic number: if (data.Length > preamble.Length) {  	if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  		yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  	}  	else {  		yield return Step.DataStep (result);  	}  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,FileSystemPathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\FileSystemPathProvider.cs,ReadText,The following statement contains a magic number: if (data.Length > preamble.Length) {  	if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  		yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  	}  	else {  		yield return Step.DataStep (result);  	}  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,FileSystemPathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\FileSystemPathProvider.cs,ReadText,The following statement contains a magic number: if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  	yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.PathProviders,FileSystemPathProvider,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\PathProviders\FileSystemPathProvider.cs,ReadText,The following statement contains a magic number: if (data [0] == preamble [0] && data [1] == preamble [1] && data [2] == preamble [2]) {  	yield return Step.DataStep (result.Remove (0' byteOrderMarkUtf8.Length));  }  else {  	yield return Step.DataStep (result);  }  
Magic Number,Node.Cs.Lib.Utils,CleanUpOnMaxMemoryReached,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\CleanUpOnMaxMemoryReached.cs,Run,The following statement contains a magic number: while (Thread.Status != CoroutineThreadStatus.Stopped) {  	if (_process.PrivateMemorySize64 > (_maxMemorySize * 0.75) || AppDomain.CurrentDomain.GetData (NodeCsRunner.CLEAR_CACHE_COMMAND) != null) {  		AppDomain.CurrentDomain.SetData (NodeCsRunner.CLEAR_CACHE_COMMAND' null);  		_memoryCache.Clear (_cacheArea);  	}  	yield return Step.Current;  }  
Magic Number,Node.Cs.Lib.Utils,CleanUpOnMaxMemoryReached,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\Utils\CleanUpOnMaxMemoryReached.cs,Run,The following statement contains a magic number: if (_process.PrivateMemorySize64 > (_maxMemorySize * 0.75) || AppDomain.CurrentDomain.GetData (NodeCsRunner.CLEAR_CACHE_COMMAND) != null) {  	AppDomain.CurrentDomain.SetData (NodeCsRunner.CLEAR_CACHE_COMMAND' null);  	_memoryCache.Clear (_cacheArea);  }  
Magic Number,Node.Cs.Lib,ExtensionHandler,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\ExtensionHandler.cs,InitializeHandlers,The following statement contains a magic number: Thread.Sleep (2 * _couroutineHandlers.Timer.Period);  
Magic Number,Node.Cs.Lib,NodeCsRunner,C:\repos\kendarorg_Node.Cs\Src\Node.Cs.Lib\NodeCsRunner.cs,Recycle,The following statement contains a magic number: Thread.Sleep (100);  
