Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,Cyclomatic complexity of the method is 12
Long Statement,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The length of the statement  "                Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "TokenCache contains {0} token(s)"' context.TokenCache.Count));" is 123.
Long Statement,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The length of the statement  "                            authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));" is 133.
Long Statement,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The length of the statement  "                            authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));" is 125.
Long Statement,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,AcquireTokenUsingCustomHttpClientFactoryAsync,The length of the statement  "                           "Authenticaiton failed due to an application problem. Contact your administrator. Internal error message: " + adalEx.Message' adalEx);" is 134.
Magic Number,AdalDesktopTestApp,MyHttpClientFactory,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\MyHttpClientFactory.cs,MyHttpClientFactory,The following statement contains a magic number: _httpClient = new HttpClient(new HttpClientHandler() { UseDefaultCredentials = true })             {                 MaxResponseContentBufferSize = 1 * 1024 * 1024 // 1 MB             };
Magic Number,AdalDesktopTestApp,MyHttpClientFactory,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\MyHttpClientFactory.cs,MyHttpClientFactory,The following statement contains a magic number: _httpClient = new HttpClient(new HttpClientHandler() { UseDefaultCredentials = true })             {                 MaxResponseContentBufferSize = 1 * 1024 * 1024 // 1 MB             };
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
Magic Number,AdalDesktopTestApp,Program,C:\research\architectureSmells\repos\MSOpenTech_azure-activedirectory-library-for-dotnet\devApps\AdalDesktopTestApp\Program.cs,RunAppAsync,The following statement contains a magic number: switch (selection)                     {                         case 1:                             // clear cache                             context.TokenCache.Clear();                             break;                         case 2: // acquire token IWA                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserCredential(User));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 3: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.SelectAccount));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 4: // acquire token interactive                             authTask = context.AcquireTokenAsync(Resource' ClientId' new Uri(RedirectUri)' new PlatformParameters(PromptBehavior.Never));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 5: // acquire token with username and password                             Console.WriteLine(string.Format(CultureInfo.CurrentCulture' "Enter password for user {0} :"' User));                             authTask = context.AcquireTokenAsync(Resource' ClientId' new UserPasswordCredential(User' Console.ReadLine()));                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 6: // acquire token silent                             authTask = context.AcquireTokenSilentAsync(Resource' ClientId);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 7: // device code flow                             authTask = GetTokenViaDeviceCodeAsync(context);                             await FetchTokenAsync(authTask).ConfigureAwait(false);                             break;                         case 8: // custom httpClient                             var authResult = await AcquireTokenUsingCustomHttpClientFactoryAsync().ConfigureAwait(false);                             await FetchTokenAsync(Task.FromResult(authResult)).ConfigureAwait(false);                             break;                         case 0:                             return;                         default:                             break;                     }
