Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,Cyclomatic complexity of the method is 11
Complex Conditional,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,The conditional expression  "t != null && t.IsPublic && t.IsClass &&                              t.IsSubclassOf(Callisto.Design.Types.PlatformTypes.DependencyObjectType)"  is complex.
Empty Catch Block,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddTables,The method has an empty catch block.
Empty Catch Block,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,The method has an empty catch block.
Empty Catch Block,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,ParseDescription,The method has an empty catch block.
Magic Number,Callisto.Design,RatingDefaults,C:\repos\timheuer_callisto\src\Design\Callisto.Design\RatingMetadata.cs,InitializeDefaults,The following statement contains a magic number: item.Properties["ItemCount"].SetValue(5);
Magic Number,Callisto.Design,RatingDefaults,C:\repos\timheuer_callisto\src\Design\Callisto.Design\RatingMetadata.cs,InitializeDefaults,The following statement contains a magic number: item.Properties["Value"].SetValue(2.5);
Magic Number,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))  			{  				try  				{  					string name = (string)member.Attribute("name");  					if (name == null)   						continue;  					bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);  					if (isType ||  						name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))  					{  						int lastDot = name.Length;  						string typeName;  						if (isType)  						{  							typeName = name.Substring(2); // skip leading "T:"  						}  						else  						{  							lastDot = name.LastIndexOf('.');  							typeName = name.Substring(2' lastDot - 2);  						}  						typeName += AssemblyFullName;  						  						Type t = Type.GetType(typeName);  						if (t != null && t.IsPublic && t.IsClass &&                              t.IsSubclassOf(Callisto.Design.Types.PlatformTypes.DependencyObjectType))  						{  							string desc = ParseDescription(member);                              if (desc == null)                                  continue;    							desc = desc.Trim();  							desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));  							if (isType)  							{  								bool isBrowsable = true;  								try  								{  									isBrowsable = IsBrowsable(t);  								}  								catch { isBrowsable = false; }  								if (isBrowsable)  									builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));  								else //Hide from intellisense  								{  									builder.AddCallback(t' b => b.AddCustomAttributes(  										new BrowsableAttribute(false)'  										new Microsoft.Windows.Design.ToolboxBrowsableAttribute(false)'  										new ToolboxItemAttribute(false)));  								}  							}  							else  							{  								string propName = name.Substring(lastDot + 1);  								PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  								if (pi != null)  								{  									bool isBrowsable = true;  									try  									{  										isBrowsable = IsBrowsable(pi);  									}  									catch { isBrowsable = false; }  									if(isBrowsable)  										builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));  									else //Hide from intellisense  										builder.AddCallback(t' b => b.AddCustomAttributes(new BrowsableAttribute(false)));  								}  							}  						}  					}  				}  				catch (Exception)  				{  				}  			}
Magic Number,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))  			{  				try  				{  					string name = (string)member.Attribute("name");  					if (name == null)   						continue;  					bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);  					if (isType ||  						name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))  					{  						int lastDot = name.Length;  						string typeName;  						if (isType)  						{  							typeName = name.Substring(2); // skip leading "T:"  						}  						else  						{  							lastDot = name.LastIndexOf('.');  							typeName = name.Substring(2' lastDot - 2);  						}  						typeName += AssemblyFullName;  						  						Type t = Type.GetType(typeName);  						if (t != null && t.IsPublic && t.IsClass &&                              t.IsSubclassOf(Callisto.Design.Types.PlatformTypes.DependencyObjectType))  						{  							string desc = ParseDescription(member);                              if (desc == null)                                  continue;    							desc = desc.Trim();  							desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));  							if (isType)  							{  								bool isBrowsable = true;  								try  								{  									isBrowsable = IsBrowsable(t);  								}  								catch { isBrowsable = false; }  								if (isBrowsable)  									builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));  								else //Hide from intellisense  								{  									builder.AddCallback(t' b => b.AddCustomAttributes(  										new BrowsableAttribute(false)'  										new Microsoft.Windows.Design.ToolboxBrowsableAttribute(false)'  										new ToolboxItemAttribute(false)));  								}  							}  							else  							{  								string propName = name.Substring(lastDot + 1);  								PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  								if (pi != null)  								{  									bool isBrowsable = true;  									try  									{  										isBrowsable = IsBrowsable(pi);  									}  									catch { isBrowsable = false; }  									if(isBrowsable)  										builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));  									else //Hide from intellisense  										builder.AddCallback(t' b => b.AddCustomAttributes(new BrowsableAttribute(false)));  								}  							}  						}  					}  				}  				catch (Exception)  				{  				}  			}
Magic Number,Callisto.Design.Common,MetadataRegistrationBase,C:\repos\timheuer_callisto\src\Design\Callisto.Design\Common\MetadataRegistrationBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))  			{  				try  				{  					string name = (string)member.Attribute("name");  					if (name == null)   						continue;  					bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);  					if (isType ||  						name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))  					{  						int lastDot = name.Length;  						string typeName;  						if (isType)  						{  							typeName = name.Substring(2); // skip leading "T:"  						}  						else  						{  							lastDot = name.LastIndexOf('.');  							typeName = name.Substring(2' lastDot - 2);  						}  						typeName += AssemblyFullName;  						  						Type t = Type.GetType(typeName);  						if (t != null && t.IsPublic && t.IsClass &&                              t.IsSubclassOf(Callisto.Design.Types.PlatformTypes.DependencyObjectType))  						{  							string desc = ParseDescription(member);                              if (desc == null)                                  continue;    							desc = desc.Trim();  							desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));  							if (isType)  							{  								bool isBrowsable = true;  								try  								{  									isBrowsable = IsBrowsable(t);  								}  								catch { isBrowsable = false; }  								if (isBrowsable)  									builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));  								else //Hide from intellisense  								{  									builder.AddCallback(t' b => b.AddCustomAttributes(  										new BrowsableAttribute(false)'  										new Microsoft.Windows.Design.ToolboxBrowsableAttribute(false)'  										new ToolboxItemAttribute(false)));  								}  							}  							else  							{  								string propName = name.Substring(lastDot + 1);  								PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  								if (pi != null)  								{  									bool isBrowsable = true;  									try  									{  										isBrowsable = IsBrowsable(pi);  									}  									catch { isBrowsable = false; }  									if(isBrowsable)  										builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));  									else //Hide from intellisense  										builder.AddCallback(t' b => b.AddCustomAttributes(new BrowsableAttribute(false)));  								}  							}  						}  					}  				}  				catch (Exception)  				{  				}  			}
