Implementation smell,Namespace,Class,File,Method,Description
Long Method,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The method has 122 lines of code.
Complex Method,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,Cyclomatic complexity of the method is 12
Complex Method,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,Cyclomatic complexity of the method is 8
Complex Method,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,UpdateNextItem,Cyclomatic complexity of the method is 8
Complex Method,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ParseUrlQueryString,Cyclomatic complexity of the method is 11
Complex Method,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,QueryString,Cyclomatic complexity of the method is 10
Long Parameter List,Callisto.Controls,WrapPanel,C:\repos\timheuer_callisto\src\Callisto\Controls\WrapPanel\WrapPanel.cs,ArrangeLine,The method has 5 parameters. Parameters: lineStart' lineEnd' directDelta' indirectOffset' indirectGrowth
Long Parameter List,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,BeginTiltEffect,The method has 5 parameters. Parameters: element' touchPoint' centerPoint' centerDelta' pointer
Long Parameter List,Callisto.OAuth,OAuthTools,C:\repos\timheuer_callisto\src\Callisto\OAuth\OAuthHelper.cs,GetSignature,The method has 5 parameters. Parameters: signatureMethod' signatureTreatment' signatureBase' consumerSecret' tokenSecret
Long Identifier,Callisto.Controls.Common,InteractionHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\InteractionHelper.cs,,The length of the parameter SequentialClickThresholdInMilliseconds is 38.
Long Identifier,Callisto.Controls.Common,InteractionHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\InteractionHelper.cs,,The length of the parameter SequentialClickThresholdInPixelsSquared is 39.
Long Identifier,Callisto.Controls,CustomDialog,C:\repos\timheuer_callisto\src\Callisto\Controls\CustomDialog\CustomDialog.cs,,The length of the parameter BackButtonCommandParameterProperty is 34.
Long Identifier,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,,The length of the parameter ContentForegroundBrushProperty is 30.
Long Identifier,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,,The length of the parameter ContentBackgroundBrushProperty is 30.
Long Statement,Callisto.Controls.Common,AppManifestHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\AppManifestHelper.cs,GetManifestVisualElementsAsync,The length of the statement  "            using (Stream manifestStream = await Windows.ApplicationModel.Package.Current.InstalledLocation.OpenStreamForReadAsync("AppxManifest.xml")) " is 139.
Long Statement,Callisto.Controls.Common,AppManifestHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\AppManifestHelper.cs,GetManifestVisualElementsAsync,The length of the statement  "            if (visualElementNode == null) throw new ArgumentNullException("Could not parse the VisualElements from the app manifest."); " is 124.
Long Statement,Callisto.Controls.Common,InteractionHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\InteractionHelper.cs,UpdateVisualStateBase,The length of the statement  "                VisualStates.GoToState(Control' useTransitions' VisualStates.StatePointerPressed' VisualStates.StatePointerOver' VisualStates.StateNormal); " is 139.
Long Statement,Callisto.Controls,DynamicTextBlock,C:\repos\timheuer_callisto\src\Callisto\Controls\DynamicTextBlock\DynamicTextBlock.cs,MeasureOverride,The length of the statement  "            Size unboundSize = wrapping ? new Size(availableSize.Width' double.PositiveInfinity) : new Size(double.PositiveInfinity' availableSize.Height); " is 143.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) }; " is 264.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) }; " is 265.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) }; " is 244.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) }; " is 249.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "            x = pointArray[0].X; // TODO: taking this solves my horizontal nudging' but is a hack...keeping it though until a better solution " is 129.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The length of the statement  "                else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X)))) " is 197.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The length of the statement  "            var calcH = this.CalculateHorizontalCenterOffset(x' ((FrameworkElement)_hostPopup.Child).ActualWidth' element.ActualWidth); " is 123.
Long Statement,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The length of the statement  "            var calcY = this.CalculateVerticalCenterOffset(y' ((FrameworkElement)_hostPopup.Child).ActualHeight' element.ActualHeight); " is 123.
Long Statement,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,UpdateNextItem,The length of the statement  "				anim.EasingFunction = new Windows.UI.Xaml.Media.Animation.CubicEase() { EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut }; " is 138.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(Control.ForegroundProperty' new Binding() {Path = new PropertyPath("Foreground")' Source = this}); " is 120.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(RatingItem.PointerOverFillProperty' new Binding() { Path = new PropertyPath("PointerOverFill")' Source = this }); " is 135.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(RatingItem.PointerPressedFillProperty' new Binding() { Path = new PropertyPath("PointerPressedFill")' Source = this }); " is 141.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(RatingItem.FontSizeProperty' new Binding() { Path = new PropertyPath("FontSize")' Source = this }); " is 121.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(RatingItem.BackgroundProperty' new Binding() { Path = new PropertyPath("Background")' Source = this }); " is 125.
Long Statement,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,PrepareContainerForItemOverride,The length of the statement  "            ratingItem.SetBinding(RatingItem.ReadOnlyFillProperty' new Binding() { Path = new PropertyPath("ReadOnlyFill")' Source = this }); " is 129.
Long Statement,Callisto.Controls,RatingItem,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\RatingItem.cs,OnDisplayValueChanged,The length of the statement  "                throw new InvalidOperationException(string.Format("Invalid attempt to change read-only property '{0}.'"' "DisplayValue")); " is 122.
Long Statement,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnApplyTemplate,The length of the statement  "                                                     FromHorizontalOffset = (SettingsPane.Edge == SettingsEdgeLocation.Right) ? CONTENT_HORIZONTAL_OFFSET : (CONTENT_HORIZONTAL_OFFSET * -1) " is 135.
Long Statement,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnLoaded,The length of the statement  "            _hostPopup.SetValue(Canvas.LeftProperty' SettingsPane.Edge == SettingsEdgeLocation.Right ? (_windowBounds.Width - _settingsWidth) : 0); " is 135.
Long Statement,Callisto.Converters,ColorBrightnessConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorBrightnessConverter.cs,Convert,The length of the statement  "            var newColor = new Color() { A = brush.Color.A' B = System.Convert.ToByte(brush.Color.B * factor' CultureInfo.InvariantCulture)' G = System.Convert.ToByte(brush.Color.G * factor' CultureInfo.InvariantCulture)' R = System.Convert.ToByte(brush.Color.R * factor' CultureInfo.InvariantCulture) }; " is 292.
Long Statement,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,TryStartTiltEffect,The length of the statement  "			Point tiltTouchPoint = e.GetCurrentPoint(element).Position; // container.TransformToVisual(element).TransformPoint(e.GetCurrentPoint(element)); " is 143.
Long Statement,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,PrepareControlForTilt,The length of the statement  "			if (element.Projection != null || (element.RenderTransform != null && element.RenderTransform.GetType() != typeof(MatrixTransform))) " is 132.
Long Statement,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,HashWith,The length of the statement  "            IBuffer hash = CryptographicEngine.Sign(cryptoKey' CryptographicBuffer.ConvertStringToBinary(input' BinaryStringEncoding.Utf8)); " is 128.
Long Statement,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,FromName,The length of the statement  "            if (colorProperty == null) throw new ArgumentException("This is not a known color name.  Use a proper hex color number."); " is 122.
Complex Conditional,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The conditional expression  "((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y))"  is complex.
Complex Conditional,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The conditional expression  "((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X)))"  is complex.
Complex Conditional,Callisto.Controls,Menu,C:\repos\timheuer_callisto\src\Callisto\Controls\Menu\Menu.cs,ChangeFocusedItem,The conditional expression  "focusedElement != null && ((focusedElement == _itemContainerList || focusedElement == this) && _items.Count > 0)"  is complex.
Complex Conditional,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The conditional expression  "(modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14)"  is complex.
Virtual Method Call from Constructor,Callisto.Controls.Primitives,Clipper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\Clipper.cs,Clipper,The constructor "Clipper" calls a virtual method "ClipContent".
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize <= 12)              {                  _arrowGlyph.Text = ARROW_GLYPH_XSMALL;              }
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize >= 13.333 && FontSize < 21.333)              {                  _arrowGlyph.Text = ARROW_GLYPH_SMALL;              }
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize >= 13.333 && FontSize < 21.333)              {                  _arrowGlyph.Text = ARROW_GLYPH_SMALL;              }
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize >= 21.333 && FontSize < 40)              {                  _arrowGlyph.Text = ARROW_GLYPH_MEDIUM;              }
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize >= 21.333 && FontSize < 40)              {                  _arrowGlyph.Text = ARROW_GLYPH_MEDIUM;              }
Magic Number,Callisto.Controls,DropDownButton,C:\repos\timheuer_callisto\src\Callisto\Controls\DropDownButton\DropDownButton.cs,EvaluateArrowGlyph,The following statement contains a magic number: if (FontSize > 40)              {                  _arrowGlyph.Text = ARROW_GLYPH_LARGE;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: if (placement == PlacementMode.Right)              {                  double num5 = Math.Max(0.0' target[0].X);                  double num6 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  if ((num6 < width) && (num6 < num5))                  {                      placement = PlacementMode.Left;                  }              }              else if (placement == PlacementMode.Left)              {                  double num7 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  double num8 = Math.Max(0.0' target[0].X);                  if ((num8 < width) && (num8 < num7))                  {                      placement = PlacementMode.Right;                  }              }              else if (placement == PlacementMode.Top)              {                  double num9 = Math.Max(0.0' target[0].Y);                  double num10 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num9 < height) && (num9 < num10))                  {                      placement = PlacementMode.Bottom;                  }              }              else if (placement == PlacementMode.Bottom)              {                  double num11 = Math.Max(0.0' target[0].Y);                  double num12 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num12 < height) && (num12 < num11))                  {                      placement = PlacementMode.Top;                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: if (placement == PlacementMode.Right)              {                  double num5 = Math.Max(0.0' target[0].X);                  double num6 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  if ((num6 < width) && (num6 < num5))                  {                      placement = PlacementMode.Left;                  }              }              else if (placement == PlacementMode.Left)              {                  double num7 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  double num8 = Math.Max(0.0' target[0].X);                  if ((num8 < width) && (num8 < num7))                  {                      placement = PlacementMode.Right;                  }              }              else if (placement == PlacementMode.Top)              {                  double num9 = Math.Max(0.0' target[0].Y);                  double num10 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num9 < height) && (num9 < num10))                  {                      placement = PlacementMode.Bottom;                  }              }              else if (placement == PlacementMode.Bottom)              {                  double num11 = Math.Max(0.0' target[0].Y);                  double num12 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num12 < height) && (num12 < num11))                  {                      placement = PlacementMode.Top;                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: if (index > 1)              {                  if ((placement == PlacementMode.Left) || (placement == PlacementMode.Right))                  {                      if (((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y)))                      {                          double num18 = bounds.Top + (bounds.Height / 2.0);                          if ((num18 > 0.0) && ((num18 - 0.0) > (window.Height - num18)))                          {                              y = window.Height - height;                          }                          else                          {                              y = 0.0;                          }                      }                  }                  else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X))))                  {                      double num19 = bounds.Left + (bounds.Width / 2.0);                      if ((num19 > 0.0) && ((num19 - 0.0) > (window.Width - num19)))                      {                          x = window.Width - width;                      }                      else                      {                          x = 0.0;                      }                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PlacePopup,The following statement contains a magic number: if (index > 1)              {                  if ((placement == PlacementMode.Left) || (placement == PlacementMode.Right))                  {                      if (((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y)))                      {                          double num18 = bounds.Top + (bounds.Height / 2.0);                          if ((num18 > 0.0) && ((num18 - 0.0) > (window.Height - num18)))                          {                              y = window.Height - height;                          }                          else                          {                              y = 0.0;                          }                      }                  }                  else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X))))                  {                      double num19 = bounds.Left + (bounds.Width / 2.0);                      if ((num19 > 0.0) && ((num19 - 0.0) > (window.Width - num19)))                      {                          x = window.Width - width;                      }                      else                      {                          x = 0.0;                      }                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: Point[] pointArray = new Point[4];
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: if ((element != null) && (relativeTo != null))              {                  GeneralTransform gt = relativeTo.TransformToVisual(_rootVisual);                  pointArray[0] = gt.TransformPoint(new Point(0.0' 0.0));                  pointArray[1] = gt.TransformPoint(new Point(element.ActualWidth' 0.0));                  pointArray[2] = gt.TransformPoint(new Point(0.0' element.ActualHeight));                  pointArray[3] = gt.TransformPoint(new Point(element.ActualWidth' element.ActualHeight));                    FrameworkElement _el = _rootVisual as FrameworkElement;                  bool flag = (_el != null) ? (_el.FlowDirection == FlowDirection.RightToLeft) : false;                  if (isRTL != flag)                  {                      // TODO: Handle RTL - GetTransformedPoints                      //for (int i = 0; i < pointArray.Length; i++)                      //{                      //    pointArray[i].X = _windowBounds.Width - pointArray[i].X;                      //}                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: if ((element != null) && (relativeTo != null))              {                  GeneralTransform gt = relativeTo.TransformToVisual(_rootVisual);                  pointArray[0] = gt.TransformPoint(new Point(0.0' 0.0));                  pointArray[1] = gt.TransformPoint(new Point(element.ActualWidth' 0.0));                  pointArray[2] = gt.TransformPoint(new Point(0.0' element.ActualHeight));                  pointArray[3] = gt.TransformPoint(new Point(element.ActualWidth' element.ActualHeight));                    FrameworkElement _el = _rootVisual as FrameworkElement;                  bool flag = (_el != null) ? (_el.FlowDirection == FlowDirection.RightToLeft) : false;                  if (isRTL != flag)                  {                      // TODO: Handle RTL - GetTransformedPoints                      //for (int i = 0; i < pointArray.Length; i++)                      //{                      //    pointArray[i].X = _windowBounds.Width - pointArray[i].X;                      //}                  }              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,CalculateHorizontalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newX = this.HorizontalOffset + initialOffset - ((flyoutWidth / 2) - (elementWidth / 2));              }              else              {                  newX = this.HorizontalOffset + initialOffset;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,CalculateHorizontalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newX = this.HorizontalOffset + initialOffset - ((flyoutWidth / 2) - (elementWidth / 2));              }              else              {                  newX = this.HorizontalOffset + initialOffset;              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,CalculateVerticalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newY = this.VerticalOffset + initialOffset;              }              else              {                  newY = this.VerticalOffset + initialOffset - (flyoutHeight / 2) + (elementHeight / 2);              }
Magic Number,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,CalculateVerticalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newY = this.VerticalOffset + initialOffset;              }              else              {                  newY = this.VerticalOffset + initialOffset - (flyoutHeight / 2) + (elementHeight / 2);              }
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,EpisodeFlipControl_SizeChanged,The following statement contains a magic number: if (_scroller != null)  			{  				if(Direction == SlideDirection.Up)  					_scroller.Height = e.NewSize.Height * 2;  				else  					_scroller.Width = e.NewSize.Width * 2;  			}
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,EpisodeFlipControl_SizeChanged,The following statement contains a magic number: if (_scroller != null)  			{  				if(Direction == SlideDirection.Up)  					_scroller.Height = e.NewSize.Height * 2;  				else  					_scroller.Width = e.NewSize.Width * 2;  			}
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,timer_Tick,The following statement contains a magic number: _timer.Interval = TimeSpan.FromSeconds(_randomizer.Next(5) + 5);
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,timer_Tick,The following statement contains a magic number: _timer.Interval = TimeSpan.FromSeconds(_randomizer.Next(5) + 5);
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,UpdateNextItem,The following statement contains a magic number: if (_translate != null)  			{  				var anim = new Windows.UI.Xaml.Media.Animation.DoubleAnimation();  				anim.Duration = new Duration(TimeSpan.FromMilliseconds(500));  				anim.From = 0;  				if(Direction == LiveTile.SlideDirection.Up)  					anim.To = -this.ActualHeight;  				else if (Direction == LiveTile.SlideDirection.Left)  					anim.To = -this.ActualWidth;    				anim.FillBehavior = Windows.UI.Xaml.Media.Animation.FillBehavior.HoldEnd;  				anim.EasingFunction = new Windows.UI.Xaml.Media.Animation.CubicEase() { EasingMode = Windows.UI.Xaml.Media.Animation.EasingMode.EaseOut };  				Windows.UI.Xaml.Media.Animation.Storyboard.SetTarget(anim' _translate);  				if(Direction == LiveTile.SlideDirection.Up  					// || this.SlideDirection == SlideView.SlideDirection.Down  					)  					Windows.UI.Xaml.Media.Animation.Storyboard.SetTargetProperty(anim' "Y");  				else  					Windows.UI.Xaml.Media.Animation.Storyboard.SetTargetProperty(anim' "X");  				sb.Children.Add(anim);  			}
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,Start,The following statement contains a magic number: if (_timer == null)  			{  				_timer = new DispatcherTimer() { Interval = TimeSpan.FromSeconds(1) };  				_timer.Tick += timer_Tick;  				_timer.Interval = TimeSpan.FromSeconds(_randomizer.Next(5) + 5);  			}
Magic Number,Callisto.Controls,LiveTile,C:\repos\timheuer_callisto\src\Callisto\Controls\LiveTile\LiveTile.cs,Start,The following statement contains a magic number: if (_timer == null)  			{  				_timer = new DispatcherTimer() { Interval = TimeSpan.FromSeconds(1) };  				_timer.Tick += timer_Tick;  				_timer.Interval = TimeSpan.FromSeconds(_randomizer.Next(5) + 5);  			}
Magic Number,Callisto.Controls,NumericUpDown,C:\repos\timheuer_callisto\src\Callisto\Controls\NumericUpDown\NumericUpDown.cs,EnsureValidDecimalPlacesValue,The following statement contains a magic number: if (decimalPlaces < 0 || decimalPlaces > 15)              {                  nud._levelsFromRootCall++;                  nud.DecimalPlaces = (int)e.OldValue;                  nud._levelsFromRootCall--;                    string message = string.Format(                      CultureInfo.InvariantCulture'                      "Not a valid Double value"'                      e.NewValue);                  throw new ArgumentException(message' "e");              }
Magic Number,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "HeaderText: black" : "HeaderText: white");                  }              }
Magic Number,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "HeaderText: black" : "HeaderText: white");                  }              }
Magic Number,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "HeaderText: black" : "HeaderText: white");                  }              }
Magic Number,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "HeaderText: black" : "HeaderText: white");                  }              }
Magic Number,Callisto.Controls,SettingsFlyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Settings\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "HeaderText: black" : "HeaderText: white");                  }              }
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: var yiq = ((brush.Color.R * 299) + (brush.Color.G * 587) + (brush.Color.B * 114)) / 1000;
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: var yiq = ((brush.Color.R * 299) + (brush.Color.G * 587) + (brush.Color.B * 114)) / 1000;
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: var yiq = ((brush.Color.R * 299) + (brush.Color.G * 587) + (brush.Color.B * 114)) / 1000;
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: var yiq = ((brush.Color.R * 299) + (brush.Color.G * 587) + (brush.Color.B * 114)) / 1000;
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: contrastColor = invert                                  ? ((yiq >= 128) ? Colors.White : Colors.Black)                                  : ((yiq >= 128) ? Colors.Black : Colors.White);
Magic Number,Callisto.Converters,ColorContrastConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\ColorContrastConverter.cs,Convert,The following statement contains a magic number: contrastColor = invert                                  ? ((yiq >= 128) ? Colors.White : Colors.Black)                                  : ((yiq >= 128) ? Colors.Black : Colors.White);
Magic Number,Callisto.Converters,DateTimeFormatHelper,C:\repos\timheuer_callisto\src\Callisto\Converters\DateTimeFormatHelper.cs,GetRelativeDayOfWeek,The following statement contains a magic number: return ((int)dt.DayOfWeek - (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek + 7) % 7;
Magic Number,Callisto.Converters,DateTimeFormatHelper,C:\repos\timheuer_callisto\src\Callisto\Converters\DateTimeFormatHelper.cs,GetRelativeDayOfWeek,The following statement contains a magic number: return ((int)dt.DayOfWeek - (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek + 7) % 7;
Magic Number,Callisto.Converters,DateTimeFormatHelper,C:\repos\timheuer_callisto\src\Callisto\Converters\DateTimeFormatHelper.cs,IsAtLeastOneWeekOld,The following statement contains a magic number: return ((int)(relative - given).TotalMinutes >= 7 * Day);
Magic Number,Callisto.Converters,DateTimeFormatHelper,C:\repos\timheuer_callisto\src\Callisto\Converters\DateTimeFormatHelper.cs,IsPastDayOfWeekWithWindow,The following statement contains a magic number: return IsPastDayOfWeek(relative' given) && ((int)(relative - given).TotalMinutes > 3 * Hour);
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,SetLocalizationCulture,The following statement contains a magic number: PluralHourStrings = new string[4] {                     TimeResources.GetString("XHoursAgo_2To4")'                     TimeResources.GetString("XHoursAgo_EndsIn1Not11")'                     TimeResources.GetString("XHoursAgo_EndsIn2To4Not12To14")'                     TimeResources.GetString("XHoursAgo_Other")                 };
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,SetLocalizationCulture,The following statement contains a magic number: PluralMinuteStrings = new string[4] {                     TimeResources.GetString("XMinutesAgo_2To4")'                     TimeResources.GetString("XMinutesAgo_EndsIn1Not11")'                     TimeResources.GetString("XMinutesAgo_EndsIn2To4Not12To14")'                     TimeResources.GetString("XMinutesAgo_Other")                };
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,SetLocalizationCulture,The following statement contains a magic number: PluralSecondStrings = new string[4] {                     TimeResources.GetString("XSecondsAgo_2To4")'                     TimeResources.GetString("XSecondsAgo_EndsIn1Not11")'                     TimeResources.GetString("XSecondsAgo_EndsIn2To4Not12To14")'                     TimeResources.GetString("XSecondsAgo_Other")                 };
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralMonth,The following statement contains a magic number: if (month >= 2 && month <= 4)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_2To4")' month.ToString(PreferredCulture));              }              else if (month >= 5 && month <= 12)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_5To12")' month.ToString(PreferredCulture));              }              else              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfMonths"));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralMonth,The following statement contains a magic number: if (month >= 2 && month <= 4)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_2To4")' month.ToString(PreferredCulture));              }              else if (month >= 5 && month <= 12)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_5To12")' month.ToString(PreferredCulture));              }              else              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfMonths"));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralMonth,The following statement contains a magic number: if (month >= 2 && month <= 4)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_2To4")' month.ToString(PreferredCulture));              }              else if (month >= 5 && month <= 12)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_5To12")' month.ToString(PreferredCulture));              }              else              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfMonths"));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralMonth,The following statement contains a magic number: if (month >= 2 && month <= 4)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_2To4")' month.ToString(PreferredCulture));              }              else if (month >= 5 && month <= 12)              {                  return string.Format(PreferredCulture' TimeResources.GetString("XMonthsAgo_5To12")' month.ToString(PreferredCulture));              }              else              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfMonths"));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: int modTen = units % 10;
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: int modHundred = units % 100;
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,GetPluralTimeUnits,The following statement contains a magic number: if (units <= 1)              {                  throw new ArgumentException(TimeResources.GetString("InvalidNumberOfTimeUnits"));              }              else if (units >= 2 && units <= 4)              {                  return string.Format(PreferredCulture' resources[0]' units.ToString(PreferredCulture));              }              else if (modTen == 1 && modHundred != 11)              {                  return string.Format(PreferredCulture' resources[1]' units.ToString(PreferredCulture));              }              else if ((modTen >= 2 && modTen <= 4) && !(modHundred >= 12 && modHundred <= 14))              {                  return string.Format(PreferredCulture' resources[2]' units.ToString(PreferredCulture));              }              else              {                  return string.Format(PreferredCulture' resources[3]' units.ToString(PreferredCulture));              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (DateTimeFormatHelper.IsFutureDateTime(current' given))              {                  // Future dates and times are not supported' but to prevent crashing an app                  // if the time they receive from a server is slightly ahead of the phone's clock                  // we'll just default to the minimum' which is "2 seconds ago".                  result = GetPluralTimeUnits(2' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Converters,RelativeTimeConverter,C:\repos\timheuer_callisto\src\Callisto\Converters\RelativeTimeConverter.cs,Convert,The following statement contains a magic number: if (difference.TotalSeconds > Year)              {                  // "over a year ago"                  result = TimeResources.GetString("OverAYearAgo");              }              else if (difference.TotalSeconds > (1.5 * Month))              {                  // "x months ago"                  int nMonths = (int)((difference.TotalSeconds + Month / 2) / Month);                  result = GetPluralMonth(nMonths);              }              else if (difference.TotalSeconds >= (3.5 * Week))              {                  // "about a month ago"                  result = TimeResources.GetString("AboutAMonthAgo");              }              else if (difference.TotalSeconds >= Week)              {                  int nWeeks = (int)(difference.TotalSeconds / Week);                  if (nWeeks > 1)                  {                      // "x weeks ago"                      result = string.Format(PreferredCulture' TimeResources.GetString("XWeeksAgo_2To4")' nWeeks.ToString(PreferredCulture));                  }                  else                  {                      // "about a week ago"                      result = TimeResources.GetString("AboutAWeekAgo");                  }              }              else if (difference.TotalSeconds >= (5 * Day))              {                  // "last <dayofweek>"                      result = string.Format(PreferredCulture' TimeResources.GetString("LastDayOfWeek")' GetDayOfWeek(given.DayOfWeek));              }              else if (difference.TotalSeconds >= Day)              {                  // "on <dayofweek>"                  result = GetOnDayOfWeek(given.DayOfWeek);              }              else if (difference.TotalSeconds >= (2 * Hour))              {                  // "x hours ago"                  int nHours = (int)(difference.TotalSeconds / Hour);                  result = GetPluralTimeUnits(nHours' PluralHourStrings);              }              else if (difference.TotalSeconds >= Hour)              {                  // "about an hour ago"                  result = TimeResources.GetString("AboutAnHourAgo");              }              else if (difference.TotalSeconds >= (2 * Minute))              {                  // "x minutes ago"                  int nMinutes = (int)(difference.TotalSeconds / Minute);                  result = GetPluralTimeUnits(nMinutes' PluralMinuteStrings);              }              else if (difference.TotalSeconds >= Minute)              {                  // "about a minute ago"                  result = TimeResources.GetString("AboutAMinuteAgo");              }              else              {                  // "x seconds ago" or default to "2 seconds ago" if less than two seconds.                  int nSeconds = ((int)difference.TotalSeconds > 1.0) ? (int)difference.TotalSeconds : 2;                  result = GetPluralTimeUnits(nSeconds' PluralSecondStrings);              }
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,TryStartTiltEffect,The following statement contains a magic number: Point elementCenter = new Point(element.ActualWidth / 2' element.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,TryStartTiltEffect,The following statement contains a magic number: Point elementCenter = new Point(element.ActualWidth / 2' element.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,GetCenterToCenterDelta,The following statement contains a magic number: Point elementCenter = new Point(element.ActualWidth / 2' element.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,GetCenterToCenterDelta,The following statement contains a magic number: Point elementCenter = new Point(element.ActualWidth / 2' element.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,GetCenterToCenterDelta,The following statement contains a magic number: Point containerCenter = new Point(container.ActualWidth / 2' container.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,GetCenterToCenterDelta,The following statement contains a magic number: Point containerCenter = new Point(container.ActualWidth / 2' container.ActualHeight / 2);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: Point normalizedPoint = new Point(  				Math.Min(Math.Max(touchPoint.X / (centerPoint.X * 2)' 0)' 1)'  				Math.Min(Math.Max(touchPoint.Y / (centerPoint.Y * 2)' 0)' 1));
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: Point normalizedPoint = new Point(  				Math.Min(Math.Max(touchPoint.X / (centerPoint.X * 2)' 0)' 1)'  				Math.Min(Math.Max(touchPoint.Y / (centerPoint.Y * 2)' 0)' 1));
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: double xMagnitude = Math.Abs(normalizedPoint.X - 0.5);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: double yMagnitude = Math.Abs(normalizedPoint.Y - 0.5);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: double xDirection = -Math.Sign(normalizedPoint.X - 0.5);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: double yDirection = Math.Sign(normalizedPoint.Y - 0.5);
Magic Number,Callisto.Effects,Tilt,C:\repos\timheuer_callisto\src\Callisto\Effects\TiltEffect.cs,ApplyTiltEffect,The following statement contains a magic number: double angle = angleMagnitude * MaxAngle * 180 / Math.PI;
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,FromUnixTime,The following statement contains a magic number: var time = new DateTime(1970' 1' 1);
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToUnixTime,The following statement contains a magic number: var timeSpan = (dateTime - new DateTime(1970' 1' 1));
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,PercentEncode,The following statement contains a magic number: foreach (var b in bytes)              {                  // [DC]: Support proper encoding of special characters (\n\r\t\b)                  if ((b > 7 && b < 11) || b == 13)                  {                      sb.Append(string.Format("%0{0:X}"' b));                  }                  else                  {                      sb.Append(string.Format("%{0:X}"' b));                  }              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,PercentEncode,The following statement contains a magic number: foreach (var b in bytes)              {                  // [DC]: Support proper encoding of special characters (\n\r\t\b)                  if ((b > 7 && b < 11) || b == 13)                  {                      sb.Append(string.Format("%0{0:X}"' b));                  }                  else                  {                      sb.Append(string.Format("%{0:X}"' b));                  }              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,PercentEncode,The following statement contains a magic number: foreach (var b in bytes)              {                  // [DC]: Support proper encoding of special characters (\n\r\t\b)                  if ((b > 7 && b < 11) || b == 13)                  {                      sb.Append(string.Format("%0{0:X}"' b));                  }                  else                  {                      sb.Append(string.Format("%{0:X}"' b));                  }              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: if (hexValue.Length < 6)              {                  throw new ArgumentException("This does not appear to be a proper hex color number");              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: byte a = 255;
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: byte r = 255;
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: byte g = 255;
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: byte b = 255;
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: if (hexValue.Length == 8)              {                  a = byte.Parse(hexValue.Substring(0' 2)' NumberStyles.HexNumber);                  startPosition = 2;              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: if (hexValue.Length == 8)              {                  a = byte.Parse(hexValue.Substring(0' 2)' NumberStyles.HexNumber);                  startPosition = 2;              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: if (hexValue.Length == 8)              {                  a = byte.Parse(hexValue.Substring(0' 2)' NumberStyles.HexNumber);                  startPosition = 2;              }
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: r = byte.Parse(hexValue.Substring(startPosition' 2)' NumberStyles.HexNumber);
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: g = byte.Parse(hexValue.Substring(startPosition + 2' 2)' NumberStyles.HexNumber);
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: g = byte.Parse(hexValue.Substring(startPosition + 2' 2)' NumberStyles.HexNumber);
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: b = byte.Parse(hexValue.Substring(startPosition + 4' 2)' NumberStyles.HexNumber);
Magic Number,Callisto,Extensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\Extensions.cs,ToColor,The following statement contains a magic number: b = byte.Parse(hexValue.Substring(startPosition + 4' 2)' NumberStyles.HexNumber);
Magic Number,Callisto,NumericExtensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\NumericExtensions.cs,AreClose,The following statement contains a magic number: double a = (Math.Abs(left) + Math.Abs(right) + 10.0) * 2.2204460492503131E-16;
Magic Number,Callisto,NumericExtensions,C:\repos\timheuer_callisto\src\Callisto\Extensions\NumericExtensions.cs,AreClose,The following statement contains a magic number: double a = (Math.Abs(left) + Math.Abs(right) + 10.0) * 2.2204460492503131E-16;
Magic Number,Callisto.OAuth,OAuthTools,C:\repos\timheuer_callisto\src\Callisto\OAuth\OAuthHelper.cs,GetNonce,The following statement contains a magic number: var nonce = new char[16];
Magic Number,Callisto.OAuth,OAuthTools,C:\repos\timheuer_callisto\src\Callisto\OAuth\OAuthHelper.cs,ConstructRequestUrl,The following statement contains a magic number: var basic = url.Scheme == "http" && url.Port == 80;
Magic Number,Callisto.OAuth,OAuthTools,C:\repos\timheuer_callisto\src\Callisto\OAuth\OAuthHelper.cs,ConstructRequestUrl,The following statement contains a magic number: var secure = url.Scheme == "https" && url.Port == 443;
Magic Number,Callisto.Controls.SettingsManagement,SettingsCommandInfo<T>,C:\repos\timheuer_callisto\src\Callisto\Controls\SettingsManagement\SettingsCommandInfo.cs,SettingsCommandInfo,The following statement contains a magic number: if (width == SettingsFlyout.SettingsFlyoutWidth.Narrow)  #pragma warning restore 0618  			{                  LiteralWidth = 346;              }              else              {                  LiteralWidth = 646;              }
Magic Number,Callisto.Controls.SettingsManagement,SettingsCommandInfo<T>,C:\repos\timheuer_callisto\src\Callisto\Controls\SettingsManagement\SettingsCommandInfo.cs,SettingsCommandInfo,The following statement contains a magic number: if (width == SettingsFlyout.SettingsFlyoutWidth.Narrow)  #pragma warning restore 0618  			{                  LiteralWidth = 346;              }              else              {                  LiteralWidth = 646;              }
Missing Default,Callisto.Controls.Common,InteractionHelper,C:\repos\timheuer_callisto\src\Callisto\Controls\Common\InteractionHelper.cs,GetLogicalKey,The following switch statement is missing a default case: switch (originalKey)                  {                      case VirtualKey.Left:                          result = VirtualKey.Right;                          break;                      case VirtualKey.Right:                          result = VirtualKey.Left;                          break;                  }
Missing Default,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following switch statement is missing a default case: switch (placement)              {                  case PlacementMode.Bottom:                  case PlacementMode.Left:                  case PlacementMode.Right:                  case PlacementMode.Top:                      Point[] target = GetTransformedPoints(element' isRTL' element);                      Point[] menu = GetTransformedPoints((FrameworkElement)_hostPopup.Child' isRTL' element);                      if (menu[0].X > menu[1].X)                      {                          return;                      }                      Point p2 = PlacePopup(_windowBounds' target' menu' placement);                      x = p2.X;                      if (isRTL)                      {                          // TODO: Handle RTL - PerformPlacement                          //x = _windowBounds.Width - x;                          //this._hostPopup.VerticalOffset = y;                          //this._hostPopup.HorizontalOffset = x;                          //return;                      }                      y = p2.Y;                      break;                  case PlacementMode.Mouse:                      throw new NotImplementedException("Mouse PlacementMode is not implemented.");              }
Missing Default,Callisto.Controls,Flyout,C:\repos\timheuer_callisto\src\Callisto\Controls\Flyout\Flyout.cs,PerformPlacement,The following switch statement is missing a default case: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Missing Default,Callisto.Controls,NumericUpDown,C:\repos\timheuer_callisto\src\Callisto\Controls\NumericUpDown\NumericUpDown.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Windows.System.VirtualKey.Up:                      DoIncrement();                      e.Handled = true;                      break;                  case Windows.System.VirtualKey.Down:                      DoDecrement();                      e.Handled = true;                      break;              }
Missing Default,Callisto.Controls,Rating,C:\repos\timheuer_callisto\src\Callisto\Controls\Rating\Rating.cs,OnKeyDown,The following switch statement is missing a default case: switch (invariantKey)              {                  case VirtualKey.Left:                      {                          RatingItem ratingItem = FocusManager.GetFocusedElement() as RatingItem;                            if (ratingItem != null)                          {                              ratingItem = GetRatingItemAtOffsetFrom(ratingItem' -1);                          }                          else                          {                              ratingItem = GetRatingItems().FirstOrDefault();                          }                          if (ratingItem != null)                          {                              if (ratingItem.Focus(FocusState.Keyboard))                              {                                  e.Handled = true;                              }                          }                      }                      break;                  case VirtualKey.Right:                      {                          RatingItem ratingItem = FocusManager.GetFocusedElement() as RatingItem;                            if (ratingItem != null)                          {                              ratingItem = GetRatingItemAtOffsetFrom(ratingItem' 1);                          }                          else                          {                              ratingItem = GetRatingItems().FirstOrDefault();                          }                          if (ratingItem != null)                          {                              if (ratingItem.Focus(FocusState.Keyboard))                              {                                  e.Handled = true;                              }                          }                      }                      break;                  case VirtualKey.Add:                      {                          if (this.IsEnabled)                          {                              RatingItem ratingItem = GetSelectedRatingItem();                              if (ratingItem != null)                              {                                  ratingItem = GetRatingItemAtOffsetFrom(ratingItem' 1);                              }                              else                              {                                  ratingItem = GetRatingItems().FirstOrDefault();                              }                              if (ratingItem != null)                              {                                  ratingItem.SelectValue();                                  e.Handled = true;                              }                          }                      }                      break;                  case VirtualKey.Subtract:                      {                          if (this.IsEnabled)                          {                              RatingItem ratingItem = GetSelectedRatingItem();                              if (ratingItem != null)                              {                                  ratingItem = GetRatingItemAtOffsetFrom(ratingItem' -1);                              }                              if (ratingItem != null)                              {                                  ratingItem.SelectValue();                                  e.Handled = true;                              }                          }                      }                      break;              }
