Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandlePlayerCommands,Cyclomatic complexity of the method is 19
Complex Method,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandleQuery,Cyclomatic complexity of the method is 14
Long Statement,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandlePlayerCommands,The length of the statement  "            IPlaybackControllerService controller = DBusServiceManager.FindInstance<IPlaybackControllerService> ("/PlaybackController"); " is 124.
Empty Catch Block,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandlePlayerCommands,The method has an empty catch block.
Magic Number,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandlePlayerCommands,The following statement contains a magic number: switch (arg.Key) {                      // For the player engine                      case "play":           player.Play ();          break;                      case "pause":          player.Pause ();         break;                      case "stop":           player.Close ();         break;                      case "toggle-playing": player.TogglePlaying (); break;                        // For the playback controller                      case "first":    controller.First ();                                    break;                      case "next":     controller.Next (ParseBool (arg.Value' "restart"));     break;                      case "previous": controller.Previous (ParseBool (arg.Value' "restart")); break;                      case "restart-or-previous":                          controller.RestartOrPrevious (ParseBool (arg.Value' "restart"));                          break;                      case "stop-when-finished":                          controller.StopWhenFinished = !ParseBool (arg.Value);                          break;                      case "set-position":                          player.Position = (uint)Math.Round (Double.Parse (arg.Value) * 1000);                          break;                      case "set-volume":                          if (arg.Value.Length > 1) {                              if (arg.Value[0] == '+') {                                  player.Volume += UInt16.Parse (arg.Value.Substring (1));                                  break;                              }                              if (arg.Value[0] == '-') {                                  var dec = UInt16.Parse (arg.Value.Substring (1));                                  player.Volume = (ushort)(player.Volume > dec ? player.Volume - dec : 0);                                  break;                              }                          }                          player.Volume = UInt16.Parse (arg.Value);                          break;                      case "set-rating":                          player.Rating = Byte.Parse (arg.Value);                          break;                      default:                          if (arg.Key.StartsWith ("query-")) {                              if (track == null) {                                  try {                                      track = player.CurrentTrack;                                  } catch {                                  }                              }                              HandleQuery (player' track' arg.Key.Substring (6));                          } else {                              command.PushArgument (arg.Key' arg.Value ?? String.Empty);                              handled_count--;                          }                          break;                  }
Magic Number,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandlePlayerCommands,The following statement contains a magic number: switch (arg.Key) {                      // For the player engine                      case "play":           player.Play ();          break;                      case "pause":          player.Pause ();         break;                      case "stop":           player.Close ();         break;                      case "toggle-playing": player.TogglePlaying (); break;                        // For the playback controller                      case "first":    controller.First ();                                    break;                      case "next":     controller.Next (ParseBool (arg.Value' "restart"));     break;                      case "previous": controller.Previous (ParseBool (arg.Value' "restart")); break;                      case "restart-or-previous":                          controller.RestartOrPrevious (ParseBool (arg.Value' "restart"));                          break;                      case "stop-when-finished":                          controller.StopWhenFinished = !ParseBool (arg.Value);                          break;                      case "set-position":                          player.Position = (uint)Math.Round (Double.Parse (arg.Value) * 1000);                          break;                      case "set-volume":                          if (arg.Value.Length > 1) {                              if (arg.Value[0] == '+') {                                  player.Volume += UInt16.Parse (arg.Value.Substring (1));                                  break;                              }                              if (arg.Value[0] == '-') {                                  var dec = UInt16.Parse (arg.Value.Substring (1));                                  player.Volume = (ushort)(player.Volume > dec ? player.Volume - dec : 0);                                  break;                              }                          }                          player.Volume = UInt16.Parse (arg.Value);                          break;                      case "set-rating":                          player.Rating = Byte.Parse (arg.Value);                          break;                      default:                          if (arg.Key.StartsWith ("query-")) {                              if (track == null) {                                  try {                                      track = player.CurrentTrack;                                  } catch {                                  }                              }                              HandleQuery (player' track' arg.Key.Substring (6));                          } else {                              command.PushArgument (arg.Key' arg.Value ?? String.Empty);                              handled_count--;                          }                          break;                  }
Missing Default,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandleWindowCommands,The following switch statement is missing a default case: switch (arg.Key) {                      case "show":                      case "present": present = true; break;                      case "fullscreen": window.Fullscreen (); break;                      case "hide":                          present = false;                          window.Hide ();                          break;                  }
Missing Default,Halie,Client,D:\research\architectureSmells\repos\GNOME_banshee\src\Clients\Halie\Halie\Client.cs,HandleQuery,The following switch statement is missing a default case: switch (query) {                  case "title":    query = "name";   break;                  case "duration": query = "length"; break;                  case "uri":      query = "URI";    break;              }
