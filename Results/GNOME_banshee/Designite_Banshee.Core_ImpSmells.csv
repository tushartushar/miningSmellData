Implementation smell,Namespace,Class,File,Method,Description
Long Method,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The method has 111 lines of code.
Complex Method,Banshee.Base,ProductInformation,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\ProductInformation.cs,LoadContributors,Cyclomatic complexity of the method is 13
Complex Method,Banshee.Base,NamingUtil,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\NamingUtil.cs,GenerateTrackCollectionName,Cyclomatic complexity of the method is 13
Complex Method,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,GenerateExportable,Cyclomatic complexity of the method is 14
Complex Method,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,Cyclomatic complexity of the method is 11
Complex Method,Banshee.IO,DirectoryScannerPipelineElement,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\DirectoryScannerPipelineElement.cs,ScanForFiles,Cyclomatic complexity of the method is 13
Complex Method,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,GetRatingAndPlayCount,Cyclomatic complexity of the method is 9
Complex Method,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,Cyclomatic complexity of the method is 9
Complex Method,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,Cyclomatic complexity of the method is 74
Long Parameter List,Banshee.Configuration,SchemaEntry,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Configuration\SchemaEntry.cs,SchemaEntry,The method has 5 parameters.
Long Parameter List,Banshee.Configuration,SchemaEntry,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Configuration\SchemaEntry.cs,SchemaEntry,The method has 7 parameters.
Long Parameter List,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The method has 5 parameters.
Long Statement,Banshee.Kernel,Scheduler,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Kernel\Scheduler.cs,Unschedule,The length of the statement  "			if ((type.IsInterface && job_type.GetInterface (type.Name) != null) || job_type == type || job_type.IsSubclassOf (job_type)) { " is 126.
Long Statement,Banshee.Base,CoverArtSpec,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\CoverArtSpec.cs,GetPathForSize,The length of the statement  "	return size == 0 ? Path.Combine (RootPath' String.Format ("{0}.jpg"' aaid)) : Path.Combine (RootPath' Path.Combine (size.ToString ()' String.Format ("{0}.jpg"' aaid))); " is 168.
Long Statement,Banshee.Base,CoverArtSpec,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\CoverArtSpec.cs,GetPathForNewFile,The length of the statement  "	if (imagePath.EndsWith ("jpg"' true' System.Globalization.CultureInfo.InvariantCulture) || imagePath.EndsWith ("jpeg"' true' System.Globalization.CultureInfo.InvariantCulture)) { " is 178.
Long Statement,Banshee.Base,CoverArtSpec,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\CoverArtSpec.cs,CreateArtworkId,The length of the statement  "	//if track provides embedded artwork but lacks tags' try hard at not giving a null artworkId' so that it can be displayed " is 121.
Long Statement,Banshee.Base,CoverArtSpec,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\CoverArtSpec.cs,CreateLegacyArtistAlbumId,The length of the statement  "	return String.IsNullOrEmpty (sm_artist) || String.IsNullOrEmpty (sm_album) ? null : String.Format ("{0}{1}{2}"' sm_artist' "-"' sm_album); " is 138.
Long Statement,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,ToString,The length of the statement  "	return String.Format ("{0} - {1} (on {2}) <{3}> [{4}]"' ArtistName' TrackTitle' AlbumTitle' Duration' Uri == null ? "<unknown>" : Uri.AbsoluteUri); " is 147.
Long Statement,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,GenerateExportable,The length of the statement  "			Log.WarningFormat ("Invalid property in {0} marked as [Exportable]: ({1} is a {2})"' property.Value.DeclaringType' property.Value.Name' value.GetType ()); " is 154.
Long Statement,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,FindExportableProperties,The length of the statement  "				string export_name = ((ExportableAttribute)exportable_attrs [0]).ExportName ?? StringUtil.CamelCaseToUnderCase (property.Name' '-'); " is 132.
Long Statement,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,FileCopy,The length of the statement  "		Assert.IsTrue (File.Exists (foo)' String.Format ("{0}: Original file should still exist after being copied"' Provider.File)); " is 125.
Long Statement,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,FileCopyWithOverwrite,The length of the statement  "		Assert.IsTrue (File.Exists (foo)' String.Format ("{0}: Original file should still exist after being copied"' Provider.File)); " is 125.
Long Statement,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DirectoryExists,The length of the statement  "		Assert.IsTrue (Directory.Exists (yoo)' String.Format ("Directory {0} should exist' but provider {1} says it doesn't"' yoo' Provider.Directory)); " is 144.
Long Statement,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The length of the statement  "		Assert.AreEqual ((byte)'b'' stream.ReadByte ()' "Error in GIO backend - shouldn't happen - fix (and the Banshee GIO backend) requires gio 2.22"); " is 145.
Long Statement,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,AssertContainsSameElements,The length of the statement  "		throw new Exception (string.Format ("Expected {0} elements' but found {1} elements"' expected.Count ()' actual.Count ())); " is 122.
Long Statement,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StoreRating,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting ID3v2 Rating={0}({1}) to File \"{2}\" as Creator \"{3}\""' rating' popm.Rating' to_file.Name' popm.User); " is 139.
Long Statement,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StoreRating,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting ID3v2 Rating={0}({1}) to File \"{2}\" as Creator \"{3}\""' rating' popm.Rating' to_file.Name' POPM_our_creator_name); " is 151.
Long Statement,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StorePlayCount,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting ID3v2 Playcount={0}({1}) to File \"{2}\" as Creator \"{3}\""' playcount' popm.PlayCount' to_file.Name' popm.User); " is 148.
Long Statement,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StorePlayCount,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting ID3v2 Playcount={0}({1}) to File \"{2}\" as Creator \"{3}\""' playcount' popm.PlayCount' to_file.Name' popm.User); " is 148.
Long Statement,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,GetRatingAndPlayCount,The length of the statement  "	Hyena.Log.DebugFormat ("Importing Ogg Rating={0}({1}) and Playcount={2}({3}) from File \"{4}\""' rating' rating_raw' playcount' playcount_raw' from_file.Name); " is 159.
Long Statement,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StoreRating,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting Ogg Rating={0}({1}) to File \"{2}\" as Creator \"{3}\""' rating' ogg_rating' to_file.Name' ratingname.Substring (rating_prefix.Length)); " is 170.
Long Statement,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,StorePlayCount,The length of the statement  "		Hyena.Log.DebugFormat ("Exporting Ogg Playcount={0}({1}) to File \"{2}\" as Creator \"{3}\""' playcount' ogg_playcount' to_file.Name' playcountname.Substring (playcount_prefix.Length)); " is 185.
Long Statement,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,ProcessUri,The length of the statement  "		TagLib.File file = Banshee.IO.DemuxVfs.OpenFile (uri.IsLocalPath ? uri.LocalPath : uri.AbsoluteUri' null' TagLib.ReadStyle.Average); " is 132.
Long Statement,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,ProcessUri,The length of the statement  "		if ((file.Properties.MediaTypes & TagLib.MediaTypes.Audio) == 0 && (file.Properties.MediaTypes & TagLib.MediaTypes.Video) == 0) { " is 129.
Long Statement,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,Choose,The length of the statement  "	return TrimZero (flip ? IsNullOrEmpty (fallback) ? priority : fallback : IsNullOrEmpty (priority) ? fallback : priority); " is 121.
Long Statement,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The length of the statement  "			string filename = System.Web.HttpUtility.UrlDecode (System.IO.Path.GetFileNameWithoutExtension (track.Uri.AbsoluteUri)); " is 120.
Long Statement,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,IsCompilation,The length of the statement  "	if (file.Tag.Performers.Length > 0 && file.Tag.AlbumArtists.Length > 0 && (file.Tag.Performers.Length != file.Tag.AlbumArtists.Length || file.Tag.FirstAlbumArtist != file.Tag.FirstPerformer)) { " is 193.
Long Statement,Banshee.I18n,Catalog,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.I18n\Catalog.cs,GetString,The length of the statement  "		IntPtr ret_ptr = domain_ptr == IntPtr.Zero ? ngettext (msgid_ptr' msgid_plural_ptr' n) : dngettext (domain_ptr' msgid_ptr' msgid_plural_ptr' n); " is 144.
Long Statement,Banshee.I18n,Catalog,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.I18n\Catalog.cs,GetDomainForAssembly,The length of the statement  "	AssemblyCatalogAttribute[] attributes = assembly.GetCustomAttributes (typeof(AssemblyCatalogAttribute)' true) as AssemblyCatalogAttribute[]; " is 140.
Long Statement,Banshee.IO.SystemIO,File,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO.SystemIO\File.cs,OpenWrite,The length of the statement  "	return overwrite ? System.IO.File.Open (uri.LocalPath' FileMode.Create' FileAccess.ReadWrite) : System.IO.File.OpenWrite (uri.LocalPath); " is 137.
Complex Conditional,Banshee.Kernel,Scheduler,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Kernel\Scheduler.cs,Unschedule,The conditional expression  "(type.IsInterface && job_type.GetInterface (type.Name) != null) || job_type == type || job_type.IsSubclassOf (job_type)"  is complex.
Complex Conditional,Banshee.IO,Provider,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Provider.cs,GetPath,The conditional expression  "LocalOnly && !String.IsNullOrEmpty (uri) && uri [0] != '/' && uri.StartsWith ("file://")"  is complex.
Complex Conditional,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,IsCompilation,The conditional expression  "file.Tag.Performers.Length > 0 && file.Tag.AlbumArtists.Length > 0 && (file.Tag.Performers.Length != file.Tag.AlbumArtists.Length || file.Tag.FirstAlbumArtist != file.Tag.FirstPerformer)"  is complex.
Empty Catch Block,Banshee.Configuration,XmlConfigurationClient,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Configuration\XmlConfigurationClient.cs,XmlConfigurationClient,The method has an empty catch block.
Empty Catch Block,Banshee.Base,PathPattern,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\PathPattern.cs,CreateFromTrackInfo,The method has an empty catch block.
Empty Catch Block,Banshee.Base,ProductInformation,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\ProductInformation.cs,LoadTranslators,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Utilities,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Utilities.cs,TrimEmptyDirectories,The method has an empty catch block.
Empty Catch Block,Banshee.IO,DirectoryScannerPipelineElement,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\DirectoryScannerPipelineElement.cs,ScanForFiles,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,Teardown,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,Teardown,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,Teardown,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,Teardown,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,FileCreate,The method has an empty catch block.
Empty Catch Block,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,Tests,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,IsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,IsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,IsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,SaveIsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,SaveIsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,SaveIsCompilation,The method has an empty catch block.
Empty Catch Block,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The method has an empty catch block.
Magic Number,Banshee.Kernel,Scheduler,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Kernel\Scheduler.cs,ProcessJobThread,The following statement contains a magic number: while (true) {  	current_running_job = null;  	if (suspend_count > 0) {  		Thread.Sleep (10);  		continue;  	}  	lock (this_mutex) {  		if (disposed) {  			job_thread = null;  			return;  		}  		try {  			current_running_job = heap.Pop ();  		} catch (InvalidOperationException) {  			job_thread = null;  			return;  		}  	}  	try {  		OnJobStarted (current_running_job);  		current_running_job.Run ();  		OnJobFinished (current_running_job);  	} catch (Exception e) {  		Log.Error (e);  	}  }  
Magic Number,Banshee.Kernel,Scheduler,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Kernel\Scheduler.cs,ProcessJobThread,The following statement contains a magic number: if (suspend_count > 0) {  	Thread.Sleep (10);  	continue;  }  
Magic Number,Banshee.Kernel,Scheduler,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Kernel\Scheduler.cs,ProcessJobThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Banshee.Configuration,XmlConfigurationClient,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Configuration\XmlConfigurationClient.cs,XmlConfigurationClient,The following statement contains a magic number: timer = new System.Timers.Timer (100);  
Magic Number,Banshee.Base,PathPattern,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\PathPattern.cs,BuildFull,The following statement contains a magic number: if (filename.Length > 200) {  	filename = filename.Remove (200);  }  
Magic Number,Banshee.Base,PathPattern,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\PathPattern.cs,BuildFull,The following statement contains a magic number: if (filename.Length > 200) {  	filename = filename.Remove (200);  }  
Magic Number,Banshee.Base,PathPattern,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Base\PathPattern.cs,BuildFull,The following statement contains a magic number: filename = filename.Remove (200);  
Magic Number,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,OnPlaybackFinished,The following statement contains a magic number: if (total_plays <= 0) {  	Score = (int)Math.Round (percentCompleted * 100);  } else {  	Score = (int)Math.Round ((((double)Score * total_plays) + (percentCompleted * 100)) / (total_plays + 1));  }  
Magic Number,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,OnPlaybackFinished,The following statement contains a magic number: if (total_plays <= 0) {  	Score = (int)Math.Round (percentCompleted * 100);  } else {  	Score = (int)Math.Round ((((double)Score * total_plays) + (percentCompleted * 100)) / (total_plays + 1));  }  
Magic Number,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,OnPlaybackFinished,The following statement contains a magic number: Score = (int)Math.Round (percentCompleted * 100);  
Magic Number,Banshee.Collection,TrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\TrackInfo.cs,OnPlaybackFinished,The following statement contains a magic number: Score = (int)Math.Round ((((double)Score * total_plays) + (percentCompleted * 100)) / (total_plays + 1));  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: if (match.Success) {  	TrackNumber = Convert.ToInt32 (match.Groups [1].ToString ());  	filename = match.Groups [2].ToString ().Trim ();  }  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: filename = match.Groups [2].ToString ().Trim ();  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: if (match.Success) {  	ArtistName = match.Groups [1].ToString ();  	AlbumTitle = match.Groups [2].ToString ();  	TrackTitle = match.Groups [3].ToString ();  } else {  	// Artist - Title  	match = Regex.Match (filename' @"\s*(.*)-\s*(.*)$");  	if (match.Success) {  		ArtistName = match.Groups [1].ToString ();  		TrackTitle = match.Groups [2].ToString ();  	} else {  		// Title  		TrackTitle = filename;  	}  }  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: if (match.Success) {  	ArtistName = match.Groups [1].ToString ();  	AlbumTitle = match.Groups [2].ToString ();  	TrackTitle = match.Groups [3].ToString ();  } else {  	// Artist - Title  	match = Regex.Match (filename' @"\s*(.*)-\s*(.*)$");  	if (match.Success) {  		ArtistName = match.Groups [1].ToString ();  		TrackTitle = match.Groups [2].ToString ();  	} else {  		// Title  		TrackTitle = filename;  	}  }  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: if (match.Success) {  	ArtistName = match.Groups [1].ToString ();  	AlbumTitle = match.Groups [2].ToString ();  	TrackTitle = match.Groups [3].ToString ();  } else {  	// Artist - Title  	match = Regex.Match (filename' @"\s*(.*)-\s*(.*)$");  	if (match.Success) {  		ArtistName = match.Groups [1].ToString ();  		TrackTitle = match.Groups [2].ToString ();  	} else {  		// Title  		TrackTitle = filename;  	}  }  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: AlbumTitle = match.Groups [2].ToString ();  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: TrackTitle = match.Groups [3].ToString ();  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: if (match.Success) {  	ArtistName = match.Groups [1].ToString ();  	TrackTitle = match.Groups [2].ToString ();  } else {  	// Title  	TrackTitle = filename;  }  
Magic Number,Banshee.Collection,FileTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\FileTrackInfo.cs,ParsePath,The following statement contains a magic number: TrackTitle = match.Groups [2].ToString ();  
Magic Number,Banshee.Collection,SampleTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\SampleTrackInfo.cs,SampleTrackInfo,The following statement contains a magic number: TrackNumber = 7;  
Magic Number,Banshee.Collection,SampleTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\SampleTrackInfo.cs,SampleTrackInfo,The following statement contains a magic number: TrackCount = 14;  
Magic Number,Banshee.Collection,SampleTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\SampleTrackInfo.cs,SampleTrackInfo,The following statement contains a magic number: DiscCount = 2;  
Magic Number,Banshee.Collection,SampleTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\SampleTrackInfo.cs,SampleTrackInfo,The following statement contains a magic number: Duration = TimeSpan.FromSeconds (182);  
Magic Number,Banshee.Collection,SampleTrackInfo,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Collection\SampleTrackInfo.cs,SampleTrackInfo,The following statement contains a magic number: Year = 1965;  
Magic Number,Banshee.IO,StreamAssist,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\StreamAssist.cs,Save,The following statement contains a magic number: Save (from' to' 8192' true);  
Magic Number,Banshee.IO,StreamAssist,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\StreamAssist.cs,Save,The following statement contains a magic number: Save (from' to' 8192' close);  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,FileProperties,The following statement contains a magic number: ForEachProvider (() => {  	Assert.AreEqual (3' File.GetSize (foo));  	Assert.IsTrue (File.GetModifiedTime (foo) > 0);  });  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,FileProperties,The following statement contains a magic number: Assert.AreEqual (3' File.GetSize (foo));  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: ForEachProvider (() => {  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (3' File.GetSize (foo));  	var demux = Provider.CreateDemuxVfs (foo.AbsoluteUri);  	Assert.IsTrue (demux.IsWritable);  	Assert.IsTrue (demux.IsReadable);  	var stream = demux.WriteStream;  	Assert.IsTrue (stream.CanWrite);  	Assert.IsTrue (stream.CanRead);  	// Make sure can actually read from WriteStream - required by TagLib#  	// stream should contain 'bar'' eg first byte == 'b'  	Assert.AreEqual (3' stream.Length);  	Assert.AreEqual ((byte)'b'' stream.ReadByte ()' "Error in GIO backend - shouldn't happen - fix (and the Banshee GIO backend) requires gio 2.22");  	stream.Position = 0;  	// Replace the first two bytes' and truncate the third  	stream.WriteByte (0xAB);  	stream.WriteByte (0xCD);  	stream.SetLength (2);  	// And verify those bytes are readable  	stream.Position = 1;  	Assert.AreEqual (0xCD' stream.ReadByte ());  	stream.Position = 0;  	Assert.AreEqual (0xAB' stream.ReadByte ());  	// And make sure the file is now the right size; 2 bytes  	demux.CloseStream (stream);  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (2' File.GetSize (foo));  });  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: ForEachProvider (() => {  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (3' File.GetSize (foo));  	var demux = Provider.CreateDemuxVfs (foo.AbsoluteUri);  	Assert.IsTrue (demux.IsWritable);  	Assert.IsTrue (demux.IsReadable);  	var stream = demux.WriteStream;  	Assert.IsTrue (stream.CanWrite);  	Assert.IsTrue (stream.CanRead);  	// Make sure can actually read from WriteStream - required by TagLib#  	// stream should contain 'bar'' eg first byte == 'b'  	Assert.AreEqual (3' stream.Length);  	Assert.AreEqual ((byte)'b'' stream.ReadByte ()' "Error in GIO backend - shouldn't happen - fix (and the Banshee GIO backend) requires gio 2.22");  	stream.Position = 0;  	// Replace the first two bytes' and truncate the third  	stream.WriteByte (0xAB);  	stream.WriteByte (0xCD);  	stream.SetLength (2);  	// And verify those bytes are readable  	stream.Position = 1;  	Assert.AreEqual (0xCD' stream.ReadByte ());  	stream.Position = 0;  	Assert.AreEqual (0xAB' stream.ReadByte ());  	// And make sure the file is now the right size; 2 bytes  	demux.CloseStream (stream);  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (2' File.GetSize (foo));  });  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: ForEachProvider (() => {  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (3' File.GetSize (foo));  	var demux = Provider.CreateDemuxVfs (foo.AbsoluteUri);  	Assert.IsTrue (demux.IsWritable);  	Assert.IsTrue (demux.IsReadable);  	var stream = demux.WriteStream;  	Assert.IsTrue (stream.CanWrite);  	Assert.IsTrue (stream.CanRead);  	// Make sure can actually read from WriteStream - required by TagLib#  	// stream should contain 'bar'' eg first byte == 'b'  	Assert.AreEqual (3' stream.Length);  	Assert.AreEqual ((byte)'b'' stream.ReadByte ()' "Error in GIO backend - shouldn't happen - fix (and the Banshee GIO backend) requires gio 2.22");  	stream.Position = 0;  	// Replace the first two bytes' and truncate the third  	stream.WriteByte (0xAB);  	stream.WriteByte (0xCD);  	stream.SetLength (2);  	// And verify those bytes are readable  	stream.Position = 1;  	Assert.AreEqual (0xCD' stream.ReadByte ());  	stream.Position = 0;  	Assert.AreEqual (0xAB' stream.ReadByte ());  	// And make sure the file is now the right size; 2 bytes  	demux.CloseStream (stream);  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (2' File.GetSize (foo));  });  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: ForEachProvider (() => {  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (3' File.GetSize (foo));  	var demux = Provider.CreateDemuxVfs (foo.AbsoluteUri);  	Assert.IsTrue (demux.IsWritable);  	Assert.IsTrue (demux.IsReadable);  	var stream = demux.WriteStream;  	Assert.IsTrue (stream.CanWrite);  	Assert.IsTrue (stream.CanRead);  	// Make sure can actually read from WriteStream - required by TagLib#  	// stream should contain 'bar'' eg first byte == 'b'  	Assert.AreEqual (3' stream.Length);  	Assert.AreEqual ((byte)'b'' stream.ReadByte ()' "Error in GIO backend - shouldn't happen - fix (and the Banshee GIO backend) requires gio 2.22");  	stream.Position = 0;  	// Replace the first two bytes' and truncate the third  	stream.WriteByte (0xAB);  	stream.WriteByte (0xCD);  	stream.SetLength (2);  	// And verify those bytes are readable  	stream.Position = 1;  	Assert.AreEqual (0xCD' stream.ReadByte ());  	stream.Position = 0;  	Assert.AreEqual (0xAB' stream.ReadByte ());  	// And make sure the file is now the right size; 2 bytes  	demux.CloseStream (stream);  	Assert.IsTrue (File.Exists (foo));  	Assert.AreEqual (2' File.GetSize (foo));  });  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: Assert.AreEqual (3' File.GetSize (foo));  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: Assert.AreEqual (3' stream.Length);  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: stream.SetLength (2);  
Magic Number,Banshee.IO,Tests,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.IO\Tests.cs,DemuxOverwriteFile,The following statement contains a magic number: Assert.AreEqual (2' File.GetSize (foo));  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: if (popm_rating < 0x80)  	// 64-127  	return 2;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: return 2;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: if (popm_rating < 0xC0)  	// 128-191  	return 3;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: return 3;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: if (popm_rating < 0xFF)  	// 192-254  	return 4;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: return 4;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,PopmToBanshee,The following statement contains a magic number: return 5;  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToPopm,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return 0x1;  case 2:  	return 0x40;  // 64  case 3:  	return 0x80;  // 128  case 4:  	return 0xC0;  // 192  case 5:  	return 0xFF;  // 255  default:  	return 0x0;  // unrated/unknown  }  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToPopm,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return 0x1;  case 2:  	return 0x40;  // 64  case 3:  	return 0x80;  // 128  case 4:  	return 0xC0;  // 192  case 5:  	return 0xFF;  // 255  default:  	return 0x0;  // unrated/unknown  }  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToPopm,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return 0x1;  case 2:  	return 0x40;  // 64  case 3:  	return 0x80;  // 128  case 4:  	return 0xC0;  // 192  case 5:  	return 0xFF;  // 255  default:  	return 0x0;  // unrated/unknown  }  
Magic Number,Banshee.Streaming,ID3v2Tagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToPopm,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return 0x1;  case 2:  	return 0x40;  // 64  case 3:  	return 0x80;  // 128  case 4:  	return 0xC0;  // 192  case 5:  	return 0xFF;  // 255  default:  	return 0x0;  // unrated/unknown  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (Double.TryParse (ogg_rating_str' NumberStyles.Number' CultureInfo.InvariantCulture' out ogg_rating)) {  	// Quod Libet Ogg ratings are stored as a value  	// between 0.0 and 1.0 inclusive' where unrated = 0.5.  	if (ogg_rating == 0.5)  		// unrated  		return 0;  	if (ogg_rating > 0.8)  		// (0.8'1.0]  		return 5;  	if (ogg_rating > 0.6)  		// (0.6'0.8]  		return 4;  	if (ogg_rating > 0.4)  		// (0.4'0.5)'(0.5'0.6]  		return 3;  	if (ogg_rating > 0.2)  		// (0.2'0.4]  		return 2;  	else  		// [0.0'0.2]  		return 1;  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating == 0.5)  	// unrated  	return 0;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.8)  	// (0.8'1.0]  	return 5;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.8)  	// (0.8'1.0]  	return 5;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: return 5;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.6)  	// (0.6'0.8]  	return 4;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.6)  	// (0.6'0.8]  	return 4;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: return 4;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.4)  	// (0.4'0.5)'(0.5'0.6]  	return 3;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.4)  	// (0.4'0.5)'(0.5'0.6]  	return 3;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: return 3;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.2)  	// (0.2'0.4]  	return 2;  else  	// [0.0'0.2]  	return 1;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: if (ogg_rating > 0.2)  	// (0.2'0.4]  	return 2;  else  	// [0.0'0.2]  	return 1;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,OggToBanshee,The following statement contains a magic number: return 2;  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToOgg,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return "0.2";  case 2:  	return "0.4";  case 3:  	return "0.6";  case 4:  	return "0.8";  case 5:  	return "1.0";  default:  	return "0.5";  // unrated/unknown  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToOgg,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return "0.2";  case 2:  	return "0.4";  case 3:  	return "0.6";  case 4:  	return "0.8";  case 5:  	return "1.0";  default:  	return "0.5";  // unrated/unknown  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToOgg,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return "0.2";  case 2:  	return "0.4";  case 3:  	return "0.6";  case 4:  	return "0.8";  case 5:  	return "1.0";  default:  	return "0.5";  // unrated/unknown  }  
Magic Number,Banshee.Streaming,OggTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamRatingTagger.cs,BansheeToOgg,The following statement contains a magic number: switch (banshee_rating) {  case 1:  	return "0.2";  case 2:  	return "0.4";  case 3:  	return "0.6";  case 4:  	return "0.8";  case 5:  	return "1.0";  default:  	return "0.5";  // unrated/unknown  }  
Magic Number,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The following statement contains a magic number: try {  	switch (tag.Name) {  	case CommonTags.Artist:  		track.ArtistName = Choose ((string)tag.Value' track.ArtistName);  		break;  	case CommonTags.ArtistSortName:  	case CommonTags.MusicBrainzSortName:  		track.ArtistNameSort = Choose ((string)tag.Value' track.ArtistNameSort);  		break;  	case CommonTags.Title:  		//track.TrackTitle = Choose ((string)tag.Value' track.TrackTitle);  		string title = Choose ((string)tag.Value' track.TrackTitle);  		// Try our best to figure out common patterns in poor radio metadata.  		// Often only one tag is sent on track changes inside the stream'  		// which is title' and usually contains artist and track title' separated  		// with a " - " string.  		if (track.IsLive && title.Contains (" - ")) {  			string[] parts = Regex.Split (title' " - ");  			track.TrackTitle = parts [1].Trim ();  			track.ArtistName = parts [0].Trim ();  			// Often' the title portion contains a postfix with more information  			// that will confuse lookups' such as "Talk [Studio Version]".  			// Strip out the [] part.  			Match match = Regex.Match (track.TrackTitle' "^(.+)[ ]+\\[.*\\]$");  			if (match.Groups.Count == 2) {  				track.TrackTitle = match.Groups [1].Value;  			}  		} else {  			track.TrackTitle = title;  		}  		break;  	case CommonTags.TitleSortName:  		track.TrackTitleSort = Choose ((string)tag.Value' track.TrackTitleSort);  		break;  	case CommonTags.Album:  		track.AlbumTitle = Choose ((string)tag.Value' track.AlbumTitle);  		break;  	case CommonTags.AlbumSortName:  		track.AlbumTitleSort = Choose ((string)tag.Value' track.AlbumTitleSort);  		break;  	case CommonTags.Disc:  	case CommonTags.AlbumDiscNumber:  		int disc = (int)tag.Value;  		track.DiscNumber = disc == 0 ? track.DiscNumber : disc;  		break;  	case CommonTags.AlbumDiscCount:  		int count = (int)tag.Value;  		track.DiscCount = count == 0 ? track.DiscCount : count;  		break;  	case CommonTags.Genre:  		track.Genre = Choose ((string)tag.Value' track.Genre);  		break;  	case CommonTags.Composer:  		track.Composer = Choose ((string)tag.Value' track.Composer);  		break;  	case CommonTags.Copyright:  		track.Copyright = Choose ((string)tag.Value' track.Copyright);  		break;  	case CommonTags.LicenseUri:  		track.LicenseUri = Choose ((string)tag.Value' track.LicenseUri);  		break;  	case CommonTags.Comment:  		track.Comment = Choose ((string)tag.Value' track.Comment);  		break;  	case CommonTags.TrackNumber:  		int track_number = (int)tag.Value;  		track.TrackNumber = track_number == 0 ? track.TrackNumber : track_number;  		break;  	case CommonTags.TrackCount:  		track.TrackCount = (int)tag.Value;  		break;  	case CommonTags.BeatsPerMinute:  		track.Bpm = (int)tag.Value;  		break;  	case CommonTags.Duration:  		if (tag.Value is TimeSpan) {  			track.Duration = (TimeSpan)tag.Value;  		} else {  			track.Duration = new TimeSpan ((uint)tag.Value * TimeSpan.TicksPerMillisecond);  		}  		break;  	case CommonTags.MoreInfoUri:  		track.MoreInfoUri = (SafeUri)tag.Value;  		break;  	/* No year tag in GST it seems                     case CommonTags.Year:                         track.Year = (uint)tag.Value;                         break;*/case CommonTags.NominalBitrate:  		track.BitRate = (int)tag.Value;  		break;  	case CommonTags.StreamType:  		track.MimeType = (string)tag.Value;  		break;  	case CommonTags.VideoCodec:  		if (tag.Value != null) {  			track.MediaAttributes |= TrackMediaAttributes.VideoStream;  		}  		break;  	/*case CommonTags.AlbumCoverId:                         foreach(string ext in TrackInfo.CoverExtensions) {                             string path = Paths.GetCoverArtPath((string) tag.Value' "." + ext);                             if(System.IO.File.Exists(path)) {                                 track.CoverArtFileName = path;                                 break;                             }                         }                         break;*/}  } catch {  }  
Magic Number,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The following statement contains a magic number: switch (tag.Name) {  case CommonTags.Artist:  	track.ArtistName = Choose ((string)tag.Value' track.ArtistName);  	break;  case CommonTags.ArtistSortName:  case CommonTags.MusicBrainzSortName:  	track.ArtistNameSort = Choose ((string)tag.Value' track.ArtistNameSort);  	break;  case CommonTags.Title:  	//track.TrackTitle = Choose ((string)tag.Value' track.TrackTitle);  	string title = Choose ((string)tag.Value' track.TrackTitle);  	// Try our best to figure out common patterns in poor radio metadata.  	// Often only one tag is sent on track changes inside the stream'  	// which is title' and usually contains artist and track title' separated  	// with a " - " string.  	if (track.IsLive && title.Contains (" - ")) {  		string[] parts = Regex.Split (title' " - ");  		track.TrackTitle = parts [1].Trim ();  		track.ArtistName = parts [0].Trim ();  		// Often' the title portion contains a postfix with more information  		// that will confuse lookups' such as "Talk [Studio Version]".  		// Strip out the [] part.  		Match match = Regex.Match (track.TrackTitle' "^(.+)[ ]+\\[.*\\]$");  		if (match.Groups.Count == 2) {  			track.TrackTitle = match.Groups [1].Value;  		}  	} else {  		track.TrackTitle = title;  	}  	break;  case CommonTags.TitleSortName:  	track.TrackTitleSort = Choose ((string)tag.Value' track.TrackTitleSort);  	break;  case CommonTags.Album:  	track.AlbumTitle = Choose ((string)tag.Value' track.AlbumTitle);  	break;  case CommonTags.AlbumSortName:  	track.AlbumTitleSort = Choose ((string)tag.Value' track.AlbumTitleSort);  	break;  case CommonTags.Disc:  case CommonTags.AlbumDiscNumber:  	int disc = (int)tag.Value;  	track.DiscNumber = disc == 0 ? track.DiscNumber : disc;  	break;  case CommonTags.AlbumDiscCount:  	int count = (int)tag.Value;  	track.DiscCount = count == 0 ? track.DiscCount : count;  	break;  case CommonTags.Genre:  	track.Genre = Choose ((string)tag.Value' track.Genre);  	break;  case CommonTags.Composer:  	track.Composer = Choose ((string)tag.Value' track.Composer);  	break;  case CommonTags.Copyright:  	track.Copyright = Choose ((string)tag.Value' track.Copyright);  	break;  case CommonTags.LicenseUri:  	track.LicenseUri = Choose ((string)tag.Value' track.LicenseUri);  	break;  case CommonTags.Comment:  	track.Comment = Choose ((string)tag.Value' track.Comment);  	break;  case CommonTags.TrackNumber:  	int track_number = (int)tag.Value;  	track.TrackNumber = track_number == 0 ? track.TrackNumber : track_number;  	break;  case CommonTags.TrackCount:  	track.TrackCount = (int)tag.Value;  	break;  case CommonTags.BeatsPerMinute:  	track.Bpm = (int)tag.Value;  	break;  case CommonTags.Duration:  	if (tag.Value is TimeSpan) {  		track.Duration = (TimeSpan)tag.Value;  	} else {  		track.Duration = new TimeSpan ((uint)tag.Value * TimeSpan.TicksPerMillisecond);  	}  	break;  case CommonTags.MoreInfoUri:  	track.MoreInfoUri = (SafeUri)tag.Value;  	break;  /* No year tag in GST it seems                     case CommonTags.Year:                         track.Year = (uint)tag.Value;                         break;*/case CommonTags.NominalBitrate:  	track.BitRate = (int)tag.Value;  	break;  case CommonTags.StreamType:  	track.MimeType = (string)tag.Value;  	break;  case CommonTags.VideoCodec:  	if (tag.Value != null) {  		track.MediaAttributes |= TrackMediaAttributes.VideoStream;  	}  	break;  /*case CommonTags.AlbumCoverId:                         foreach(string ext in TrackInfo.CoverExtensions) {                             string path = Paths.GetCoverArtPath((string) tag.Value' "." + ext);                             if(System.IO.File.Exists(path)) {                                 track.CoverArtFileName = path;                                 break;                             }                         }                         break;*/}  
Magic Number,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The following statement contains a magic number: if (track.IsLive && title.Contains (" - ")) {  	string[] parts = Regex.Split (title' " - ");  	track.TrackTitle = parts [1].Trim ();  	track.ArtistName = parts [0].Trim ();  	// Often' the title portion contains a postfix with more information  	// that will confuse lookups' such as "Talk [Studio Version]".  	// Strip out the [] part.  	Match match = Regex.Match (track.TrackTitle' "^(.+)[ ]+\\[.*\\]$");  	if (match.Groups.Count == 2) {  		track.TrackTitle = match.Groups [1].Value;  	}  } else {  	track.TrackTitle = title;  }  
Magic Number,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The following statement contains a magic number: if (match.Groups.Count == 2) {  	track.TrackTitle = match.Groups [1].Value;  }  
Missing Default,Banshee.Streaming,StreamTagger,F:\newReposMay17\GNOME_banshee\src\Core\Banshee.Core\Banshee.Streaming\StreamTagger.cs,TrackInfoMerge,The following switch statement is missing a default case: switch (tag.Name) {  case CommonTags.Artist:  	track.ArtistName = Choose ((string)tag.Value' track.ArtistName);  	break;  case CommonTags.ArtistSortName:  case CommonTags.MusicBrainzSortName:  	track.ArtistNameSort = Choose ((string)tag.Value' track.ArtistNameSort);  	break;  case CommonTags.Title:  	//track.TrackTitle = Choose ((string)tag.Value' track.TrackTitle);  	string title = Choose ((string)tag.Value' track.TrackTitle);  	// Try our best to figure out common patterns in poor radio metadata.  	// Often only one tag is sent on track changes inside the stream'  	// which is title' and usually contains artist and track title' separated  	// with a " - " string.  	if (track.IsLive && title.Contains (" - ")) {  		string[] parts = Regex.Split (title' " - ");  		track.TrackTitle = parts [1].Trim ();  		track.ArtistName = parts [0].Trim ();  		// Often' the title portion contains a postfix with more information  		// that will confuse lookups' such as "Talk [Studio Version]".  		// Strip out the [] part.  		Match match = Regex.Match (track.TrackTitle' "^(.+)[ ]+\\[.*\\]$");  		if (match.Groups.Count == 2) {  			track.TrackTitle = match.Groups [1].Value;  		}  	} else {  		track.TrackTitle = title;  	}  	break;  case CommonTags.TitleSortName:  	track.TrackTitleSort = Choose ((string)tag.Value' track.TrackTitleSort);  	break;  case CommonTags.Album:  	track.AlbumTitle = Choose ((string)tag.Value' track.AlbumTitle);  	break;  case CommonTags.AlbumSortName:  	track.AlbumTitleSort = Choose ((string)tag.Value' track.AlbumTitleSort);  	break;  case CommonTags.Disc:  case CommonTags.AlbumDiscNumber:  	int disc = (int)tag.Value;  	track.DiscNumber = disc == 0 ? track.DiscNumber : disc;  	break;  case CommonTags.AlbumDiscCount:  	int count = (int)tag.Value;  	track.DiscCount = count == 0 ? track.DiscCount : count;  	break;  case CommonTags.Genre:  	track.Genre = Choose ((string)tag.Value' track.Genre);  	break;  case CommonTags.Composer:  	track.Composer = Choose ((string)tag.Value' track.Composer);  	break;  case CommonTags.Copyright:  	track.Copyright = Choose ((string)tag.Value' track.Copyright);  	break;  case CommonTags.LicenseUri:  	track.LicenseUri = Choose ((string)tag.Value' track.LicenseUri);  	break;  case CommonTags.Comment:  	track.Comment = Choose ((string)tag.Value' track.Comment);  	break;  case CommonTags.TrackNumber:  	int track_number = (int)tag.Value;  	track.TrackNumber = track_number == 0 ? track.TrackNumber : track_number;  	break;  case CommonTags.TrackCount:  	track.TrackCount = (int)tag.Value;  	break;  case CommonTags.BeatsPerMinute:  	track.Bpm = (int)tag.Value;  	break;  case CommonTags.Duration:  	if (tag.Value is TimeSpan) {  		track.Duration = (TimeSpan)tag.Value;  	} else {  		track.Duration = new TimeSpan ((uint)tag.Value * TimeSpan.TicksPerMillisecond);  	}  	break;  case CommonTags.MoreInfoUri:  	track.MoreInfoUri = (SafeUri)tag.Value;  	break;  /* No year tag in GST it seems                     case CommonTags.Year:                         track.Year = (uint)tag.Value;                         break;*/case CommonTags.NominalBitrate:  	track.BitRate = (int)tag.Value;  	break;  case CommonTags.StreamType:  	track.MimeType = (string)tag.Value;  	break;  case CommonTags.VideoCodec:  	if (tag.Value != null) {  		track.MediaAttributes |= TrackMediaAttributes.VideoStream;  	}  	break;  /*case CommonTags.AlbumCoverId:                         foreach(string ext in TrackInfo.CoverExtensions) {                             string path = Paths.GetCoverArtPath((string) tag.Value' "." + ext);                             if(System.IO.File.Exists(path)) {                                 track.CoverArtFileName = path;                                 break;                             }                         }                         break;*/}  
