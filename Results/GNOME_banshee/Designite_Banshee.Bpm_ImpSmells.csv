Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Banshee.Bpm,BpmEntry,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmEntry.cs,OnPlayClicked,The length of the statement  "		if (ServiceManager.PlayerEngine.CurrentTrack == track && ServiceManager.PlayerEngine.CurrentState == PlayerState.Playing) { " is 123.
Long Statement,Banshee.Bpm,BpmService,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmService.cs,InstallPreferences,The length of the statement  "	enabled_pref = ServiceManager.SourceManager.MusicLibrary.PreferencesPage ["misc"].Add (new SchemaPreference<bool> (EnabledSchema' Catalog.GetString ("_Automatically detect BPM for all songs")' Catalog.GetString ("Detect beats per minute (BPM) for all songs that don't already have a value set")' delegate { " is 306.
Long Statement,Banshee.Bpm,BpmTrackEditorModifier,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTrackEditorModifier.cs,Modify,The length of the statement  "					extra_page.AddField (slot.Parent as Gtk.Box' new BpmEntry ()' null' slot.LabelClosure' delegate (EditorTrackInfo track' Widget widget) { " is 136.
Magic Number,Banshee.Bpm,BpmEntry,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmEntry.cs,BuildWidgets,The following statement contains a magic number: Spacing = 6;  
Magic Number,Banshee.Bpm,BpmEntry,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmEntry.cs,BuildWidgets,The following statement contains a magic number: bpm_entry = new SpinButton (0' 9999' 1);  
Magic Number,Banshee.Bpm,BpmEntry,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmEntry.cs,BuildWidgets,The following statement contains a magic number: bpm_entry.MaxLength = bpm_entry.WidthChars = 4;  
Magic Number,Banshee.Bpm,BpmService,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmService.cs,ServiceStartup,The following statement contains a magic number: Banshee.ServiceStack.Application.RunTimeout (4000' delegate {  	Detect ();  	return false;  });  
Magic Number,Banshee.Bpm,BpmTapAdapter,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTapAdapter.cs,OnTapped,The following statement contains a magic number: if (last_tap != 0) {  	int period = now - last_tap;  	Console.WriteLine ("{0} ms since last tap; eq {1} BPM"' period' 60000 / period);  	tap_periods [tap_index] = period;  	tap_index = (tap_index + 1) % (NUM_PERIODS - 1);  	CalculateAverage ();  	if (timeout_id != 0) {  		GLib.Source.Remove (timeout_id);  	}  	// If the next tap doesn't come soon enough' Reset the tap history  	timeout_id = GLib.Timeout.Add ((uint)(1.5 * period)' OnTapTimeout);  }  
Magic Number,Banshee.Bpm,BpmTapAdapter,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTapAdapter.cs,OnTapped,The following statement contains a magic number: if (last_tap != 0) {  	int period = now - last_tap;  	Console.WriteLine ("{0} ms since last tap; eq {1} BPM"' period' 60000 / period);  	tap_periods [tap_index] = period;  	tap_index = (tap_index + 1) % (NUM_PERIODS - 1);  	CalculateAverage ();  	if (timeout_id != 0) {  		GLib.Source.Remove (timeout_id);  	}  	// If the next tap doesn't come soon enough' Reset the tap history  	timeout_id = GLib.Timeout.Add ((uint)(1.5 * period)' OnTapTimeout);  }  
Magic Number,Banshee.Bpm,BpmTapAdapter,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTapAdapter.cs,OnTapped,The following statement contains a magic number: Console.WriteLine ("{0} ms since last tap; eq {1} BPM"' period' 60000 / period);  
Magic Number,Banshee.Bpm,BpmTapAdapter,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTapAdapter.cs,OnTapped,The following statement contains a magic number: timeout_id = GLib.Timeout.Add ((uint)(1.5 * period)' OnTapTimeout);  
Magic Number,Banshee.Bpm,BpmTapAdapter,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.Bpm\Banshee.Bpm\BpmTapAdapter.cs,CalculateAverage,The following statement contains a magic number: avg_bpm = 60000 * count / sum;  
