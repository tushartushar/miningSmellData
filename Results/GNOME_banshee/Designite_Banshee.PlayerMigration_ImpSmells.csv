Implementation smell,Namespace,Class,File,Method,Description
Long Method,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The method has 113 lines of code.
Long Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The method has 158 lines of code.
Complex Method,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,Cyclomatic complexity of the method is 18
Complex Method,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportCore,Cyclomatic complexity of the method is 9
Complex Method,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,Cyclomatic complexity of the method is 42
Complex Method,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportStaticPlaylists,Cyclomatic complexity of the method is 8
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,HandleImportDialog,Cyclomatic complexity of the method is 14
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessLibraryXml,Cyclomatic complexity of the method is 12
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,Cyclomatic complexity of the method is 13
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,Cyclomatic complexity of the method is 81
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessPlaylist,Cyclomatic complexity of the method is 21
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,Cyclomatic complexity of the method is 20
Complex Method,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,Cyclomatic complexity of the method is 10
Long Statement,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The length of the statement  "		// TODO migrating more than the podcast subscriptions (eg whether to auto sync them etc) means 1) we need to have those features " is 128.
Long Statement,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportCore,The length of the statement  "	SafeUri rhythmbox_playlists_uri = new SafeUri (Hyena.Paths.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal)' ".local"' "share"' "rhythmbox"' "playlists.xml")); " is 182.
Long Statement,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportCore,The length of the statement  "		rhythmbox_playlists_uri = new SafeUri (Hyena.Paths.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal)' ".gnome2"' "rhythmbox"' "playlists.xml")); " is 166.
Long Statement,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportStaticPlaylists,The length of the statement  "			HyenaSqliteCommand insert_command = new HyenaSqliteCommand (String.Format (@"INSERT INTO CorePlaylistEntries (PlaylistID' TrackID) VALUES ({0}' ?)"' playlist.DbId)); " is 165.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,HandleImportDialog,The length of the statement  "					message = Catalog.GetString ("Banshee is not familiar with this version of the iTunes library format." + " Importing may or may not work as expected' or at all. Would you like to attempt to import anyway?"); " is 207.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The length of the statement  "					date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal); " is 130.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The length of the statement  "					last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal); " is 131.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessPlaylist,The length of the statement  "				if (name == "Library" || name == "Music Videos" || name == "Audiobooks" || name == "Music" || name == "Movies" || name == "Party Shuffle" || name == "Podcasts" || name == "Party Shuffle" || name == "Purchased Music" || name == "Genius" || name == "TV Shows") { " is 260.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessRegularPlaylist,The length of the statement  "					ServiceManager.DbConnection.Execute ("INSERT INTO CorePlaylistEntries (PlaylistID' TrackID) VALUES (?' ?)"' playlist_source.DbId' track_id); " is 140.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The length of the statement  "	SafeUri safe_uri = CreateSafeUri (Path.Combine (data.local_prefix' uri.Substring (index' uri.Length - index))' data.empty_library); " is 131.
Long Statement,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The length of the statement  "				using (var reader = ServiceManager.DbConnection.Query (String.Format (@"SELECT Uri FROM CoreTracks WHERE lower(Uri) LIKE ""%{0}"""' lower_uri.Substring (i + 1)))) { " is 164.
Long Statement,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,PackCheckboxes,The length of the statement  "	string possible_location = System.IO.Path.Combine (System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.MyMusic)' "iTunes")' ItunesPlayerImportSource.LibraryFilename); " is 191.
Long Statement,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,PackCheckboxes,The length of the statement  "		label1.Markup = String.Format ("<b>{0}</b>"' GLib.Markup.EscapeText (String.Format (Catalog.GetString (@"Locate your ""{0}"" file...")' ItunesPlayerImportSource.LibraryFilename))); " is 180.
Long Statement,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,OnBrowseButtonClicked,The length of the statement  "	using (FileChooserDialog file_chooser = new FileChooserDialog (String.Format (Catalog.GetString (@"Locate ""{0}""")' ItunesPlayerImportSource.LibraryFilename)' this' FileChooserAction.Open' Stock.Cancel' ResponseType.Cancel' Stock.Open' ResponseType.Ok)) { " is 256.
Complex Conditional,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The conditional expression  "rating > 0 || playcount > 0 || created > 0 || accessed > 0"  is complex.
Complex Conditional,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessPlaylist,The conditional expression  "name == "Library" || name == "Music Videos" || name == "Audiobooks" || name == "Music" || name == "Movies" || name == "Party Shuffle" || name == "Podcasts" || name == "Party Shuffle" || name == "Purchased Music" || name == "Genius" || name == "TV Shows""  is complex.
Virtual Method Call from Constructor,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesImportDialog,The constructor "ItunesImportDialog" calls a virtual method "PackCheckboxes".
Empty Catch Block,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The method has an empty catch block.
Empty Catch Block,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The method has an empty catch block.
Empty Catch Block,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,The method has an empty catch block.
Empty Catch Block,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The method has an empty catch block.
Empty Catch Block,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessRegularPlaylist,The method has an empty catch block.
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	HyenaSqliteCommand cmd = new HyenaSqliteCommand (@"                     SELECT DISTINCT NULL'                            tags.url'                            tags.title'                            artist.name'                            genre.name'                            album.name'                            year.name'                            tags.track'                            tags.length                      FROM  tags'                            artist'                            album'                            genre'                            year                      WHERE tags.deviceid = -1                        AND tags.artist = artist.id                        AND tags.album = album.id                        AND tags.genre = genre.id                        AND tags.year = year.id");  	HyenaSqliteCommand stats_cmd = new HyenaSqliteCommand (@"                                                      SELECT DISTINCT (rating+rating%2)/2' playcounter' createdate' accessdate                                                      FROM   statistics                                                      WHERE  url = ? AND deviceid = -1");  	int processed = 0;  	IDataReader reader = conn.Query (cmd);  	while (reader.Read ()) {  		if (CheckForCanceled ())  			break;  		processed++;  		try {  			string path = (string)reader [1];  			SafeUri uri = null;  			if (path.StartsWith ("./")) {  				uri = new SafeUri (path.Substring (1));  			} else if (path.StartsWith ("/")) {  				uri = new SafeUri (path);  			} else {  				continue;  			}  			string title = (string)reader [2];  			string artist = (string)reader [3];  			//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  			// the following fields are not critical and can be skipped if something goes wrong  			int rating = 0' playcount = 0;  			long created = 0' accessed = 0;  			// Try to read stats  			try {  				IDataReader stats_reader = conn.Query (stats_cmd' path);  				while (stats_reader.Read ()) {  					rating = Convert.ToInt32 (stats_reader [0]);  					playcount = Convert.ToInt32 (stats_reader [1]);  					created = Convert.ToInt64 (stats_reader [2]);  					accessed = Convert.ToInt64 (stats_reader [3]);  				}  				stats_reader.Dispose ();  			} catch (Exception) {  			}  			UpdateUserJob (processed' count' artist' title);  			try {  				DatabaseTrackInfo track = import_manager.ImportTrack (uri);  				if (track == null) {  					throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  				}  				if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  					track.Rating = rating;  					track.PlayCount = playcount;  					if (created > 0)  						track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  					if (accessed > 0)  						track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  					track.Save (false);  				}  			} catch (Exception e) {  				LogError (SafeUri.UriToFilename (uri)' e);  			}  		} catch (Exception e) {  			Log.Error (e);  			// something went wrong' skip entry  		}  	}  	reader.Dispose ();  	import_manager.NotifyAllSources ();  	// TODO migrating more than the podcast subscriptions (eg whether to auto sync them etc) means 1) we need to have those features  	// and 2) we need to depend on Migo and/or the Podcast extension  	DBusCommandService cmd_service = ServiceManager.Get<DBusCommandService> ();  	if (cmd_service != null && ServiceManager.DbConnection.TableExists ("PodcastSyndications")) {  		foreach (string podcast_url in conn.QueryEnumerable<string> ("SELECT url FROM podcastchannels")) {  			cmd_service.PushFile (podcast_url.Replace ("http:"' "feed:"));  		}  	}  } catch (Exception e) {  	Log.Error (e);  	LogError (amarok_db_path' Catalog.GetString ("Importing from Amarok failed"));  } finally {  	conn.Dispose ();  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	HyenaSqliteCommand cmd = new HyenaSqliteCommand (@"                     SELECT DISTINCT NULL'                            tags.url'                            tags.title'                            artist.name'                            genre.name'                            album.name'                            year.name'                            tags.track'                            tags.length                      FROM  tags'                            artist'                            album'                            genre'                            year                      WHERE tags.deviceid = -1                        AND tags.artist = artist.id                        AND tags.album = album.id                        AND tags.genre = genre.id                        AND tags.year = year.id");  	HyenaSqliteCommand stats_cmd = new HyenaSqliteCommand (@"                                                      SELECT DISTINCT (rating+rating%2)/2' playcounter' createdate' accessdate                                                      FROM   statistics                                                      WHERE  url = ? AND deviceid = -1");  	int processed = 0;  	IDataReader reader = conn.Query (cmd);  	while (reader.Read ()) {  		if (CheckForCanceled ())  			break;  		processed++;  		try {  			string path = (string)reader [1];  			SafeUri uri = null;  			if (path.StartsWith ("./")) {  				uri = new SafeUri (path.Substring (1));  			} else if (path.StartsWith ("/")) {  				uri = new SafeUri (path);  			} else {  				continue;  			}  			string title = (string)reader [2];  			string artist = (string)reader [3];  			//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  			// the following fields are not critical and can be skipped if something goes wrong  			int rating = 0' playcount = 0;  			long created = 0' accessed = 0;  			// Try to read stats  			try {  				IDataReader stats_reader = conn.Query (stats_cmd' path);  				while (stats_reader.Read ()) {  					rating = Convert.ToInt32 (stats_reader [0]);  					playcount = Convert.ToInt32 (stats_reader [1]);  					created = Convert.ToInt64 (stats_reader [2]);  					accessed = Convert.ToInt64 (stats_reader [3]);  				}  				stats_reader.Dispose ();  			} catch (Exception) {  			}  			UpdateUserJob (processed' count' artist' title);  			try {  				DatabaseTrackInfo track = import_manager.ImportTrack (uri);  				if (track == null) {  					throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  				}  				if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  					track.Rating = rating;  					track.PlayCount = playcount;  					if (created > 0)  						track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  					if (accessed > 0)  						track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  					track.Save (false);  				}  			} catch (Exception e) {  				LogError (SafeUri.UriToFilename (uri)' e);  			}  		} catch (Exception e) {  			Log.Error (e);  			// something went wrong' skip entry  		}  	}  	reader.Dispose ();  	import_manager.NotifyAllSources ();  	// TODO migrating more than the podcast subscriptions (eg whether to auto sync them etc) means 1) we need to have those features  	// and 2) we need to depend on Migo and/or the Podcast extension  	DBusCommandService cmd_service = ServiceManager.Get<DBusCommandService> ();  	if (cmd_service != null && ServiceManager.DbConnection.TableExists ("PodcastSyndications")) {  		foreach (string podcast_url in conn.QueryEnumerable<string> ("SELECT url FROM podcastchannels")) {  			cmd_service.PushFile (podcast_url.Replace ("http:"' "feed:"));  		}  	}  } catch (Exception e) {  	Log.Error (e);  	LogError (amarok_db_path' Catalog.GetString ("Importing from Amarok failed"));  } finally {  	conn.Dispose ();  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	HyenaSqliteCommand cmd = new HyenaSqliteCommand (@"                     SELECT DISTINCT NULL'                            tags.url'                            tags.title'                            artist.name'                            genre.name'                            album.name'                            year.name'                            tags.track'                            tags.length                      FROM  tags'                            artist'                            album'                            genre'                            year                      WHERE tags.deviceid = -1                        AND tags.artist = artist.id                        AND tags.album = album.id                        AND tags.genre = genre.id                        AND tags.year = year.id");  	HyenaSqliteCommand stats_cmd = new HyenaSqliteCommand (@"                                                      SELECT DISTINCT (rating+rating%2)/2' playcounter' createdate' accessdate                                                      FROM   statistics                                                      WHERE  url = ? AND deviceid = -1");  	int processed = 0;  	IDataReader reader = conn.Query (cmd);  	while (reader.Read ()) {  		if (CheckForCanceled ())  			break;  		processed++;  		try {  			string path = (string)reader [1];  			SafeUri uri = null;  			if (path.StartsWith ("./")) {  				uri = new SafeUri (path.Substring (1));  			} else if (path.StartsWith ("/")) {  				uri = new SafeUri (path);  			} else {  				continue;  			}  			string title = (string)reader [2];  			string artist = (string)reader [3];  			//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  			// the following fields are not critical and can be skipped if something goes wrong  			int rating = 0' playcount = 0;  			long created = 0' accessed = 0;  			// Try to read stats  			try {  				IDataReader stats_reader = conn.Query (stats_cmd' path);  				while (stats_reader.Read ()) {  					rating = Convert.ToInt32 (stats_reader [0]);  					playcount = Convert.ToInt32 (stats_reader [1]);  					created = Convert.ToInt64 (stats_reader [2]);  					accessed = Convert.ToInt64 (stats_reader [3]);  				}  				stats_reader.Dispose ();  			} catch (Exception) {  			}  			UpdateUserJob (processed' count' artist' title);  			try {  				DatabaseTrackInfo track = import_manager.ImportTrack (uri);  				if (track == null) {  					throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  				}  				if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  					track.Rating = rating;  					track.PlayCount = playcount;  					if (created > 0)  						track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  					if (accessed > 0)  						track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  					track.Save (false);  				}  			} catch (Exception e) {  				LogError (SafeUri.UriToFilename (uri)' e);  			}  		} catch (Exception e) {  			Log.Error (e);  			// something went wrong' skip entry  		}  	}  	reader.Dispose ();  	import_manager.NotifyAllSources ();  	// TODO migrating more than the podcast subscriptions (eg whether to auto sync them etc) means 1) we need to have those features  	// and 2) we need to depend on Migo and/or the Podcast extension  	DBusCommandService cmd_service = ServiceManager.Get<DBusCommandService> ();  	if (cmd_service != null && ServiceManager.DbConnection.TableExists ("PodcastSyndications")) {  		foreach (string podcast_url in conn.QueryEnumerable<string> ("SELECT url FROM podcastchannels")) {  			cmd_service.PushFile (podcast_url.Replace ("http:"' "feed:"));  		}  	}  } catch (Exception e) {  	Log.Error (e);  	LogError (amarok_db_path' Catalog.GetString ("Importing from Amarok failed"));  } finally {  	conn.Dispose ();  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	HyenaSqliteCommand cmd = new HyenaSqliteCommand (@"                     SELECT DISTINCT NULL'                            tags.url'                            tags.title'                            artist.name'                            genre.name'                            album.name'                            year.name'                            tags.track'                            tags.length                      FROM  tags'                            artist'                            album'                            genre'                            year                      WHERE tags.deviceid = -1                        AND tags.artist = artist.id                        AND tags.album = album.id                        AND tags.genre = genre.id                        AND tags.year = year.id");  	HyenaSqliteCommand stats_cmd = new HyenaSqliteCommand (@"                                                      SELECT DISTINCT (rating+rating%2)/2' playcounter' createdate' accessdate                                                      FROM   statistics                                                      WHERE  url = ? AND deviceid = -1");  	int processed = 0;  	IDataReader reader = conn.Query (cmd);  	while (reader.Read ()) {  		if (CheckForCanceled ())  			break;  		processed++;  		try {  			string path = (string)reader [1];  			SafeUri uri = null;  			if (path.StartsWith ("./")) {  				uri = new SafeUri (path.Substring (1));  			} else if (path.StartsWith ("/")) {  				uri = new SafeUri (path);  			} else {  				continue;  			}  			string title = (string)reader [2];  			string artist = (string)reader [3];  			//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  			// the following fields are not critical and can be skipped if something goes wrong  			int rating = 0' playcount = 0;  			long created = 0' accessed = 0;  			// Try to read stats  			try {  				IDataReader stats_reader = conn.Query (stats_cmd' path);  				while (stats_reader.Read ()) {  					rating = Convert.ToInt32 (stats_reader [0]);  					playcount = Convert.ToInt32 (stats_reader [1]);  					created = Convert.ToInt64 (stats_reader [2]);  					accessed = Convert.ToInt64 (stats_reader [3]);  				}  				stats_reader.Dispose ();  			} catch (Exception) {  			}  			UpdateUserJob (processed' count' artist' title);  			try {  				DatabaseTrackInfo track = import_manager.ImportTrack (uri);  				if (track == null) {  					throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  				}  				if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  					track.Rating = rating;  					track.PlayCount = playcount;  					if (created > 0)  						track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  					if (accessed > 0)  						track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  					track.Save (false);  				}  			} catch (Exception e) {  				LogError (SafeUri.UriToFilename (uri)' e);  			}  		} catch (Exception e) {  			Log.Error (e);  			// something went wrong' skip entry  		}  	}  	reader.Dispose ();  	import_manager.NotifyAllSources ();  	// TODO migrating more than the podcast subscriptions (eg whether to auto sync them etc) means 1) we need to have those features  	// and 2) we need to depend on Migo and/or the Podcast extension  	DBusCommandService cmd_service = ServiceManager.Get<DBusCommandService> ();  	if (cmd_service != null && ServiceManager.DbConnection.TableExists ("PodcastSyndications")) {  		foreach (string podcast_url in conn.QueryEnumerable<string> ("SELECT url FROM podcastchannels")) {  			cmd_service.PushFile (podcast_url.Replace ("http:"' "feed:"));  		}  	}  } catch (Exception e) {  	Log.Error (e);  	LogError (amarok_db_path' Catalog.GetString ("Importing from Amarok failed"));  } finally {  	conn.Dispose ();  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (reader.Read ()) {  	if (CheckForCanceled ())  		break;  	processed++;  	try {  		string path = (string)reader [1];  		SafeUri uri = null;  		if (path.StartsWith ("./")) {  			uri = new SafeUri (path.Substring (1));  		} else if (path.StartsWith ("/")) {  			uri = new SafeUri (path);  		} else {  			continue;  		}  		string title = (string)reader [2];  		string artist = (string)reader [3];  		//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  		// the following fields are not critical and can be skipped if something goes wrong  		int rating = 0' playcount = 0;  		long created = 0' accessed = 0;  		// Try to read stats  		try {  			IDataReader stats_reader = conn.Query (stats_cmd' path);  			while (stats_reader.Read ()) {  				rating = Convert.ToInt32 (stats_reader [0]);  				playcount = Convert.ToInt32 (stats_reader [1]);  				created = Convert.ToInt64 (stats_reader [2]);  				accessed = Convert.ToInt64 (stats_reader [3]);  			}  			stats_reader.Dispose ();  		} catch (Exception) {  		}  		UpdateUserJob (processed' count' artist' title);  		try {  			DatabaseTrackInfo track = import_manager.ImportTrack (uri);  			if (track == null) {  				throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  			}  			if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  				track.Rating = rating;  				track.PlayCount = playcount;  				if (created > 0)  					track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  				if (accessed > 0)  					track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  				track.Save (false);  			}  		} catch (Exception e) {  			LogError (SafeUri.UriToFilename (uri)' e);  		}  	} catch (Exception e) {  		Log.Error (e);  		// something went wrong' skip entry  	}  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (reader.Read ()) {  	if (CheckForCanceled ())  		break;  	processed++;  	try {  		string path = (string)reader [1];  		SafeUri uri = null;  		if (path.StartsWith ("./")) {  			uri = new SafeUri (path.Substring (1));  		} else if (path.StartsWith ("/")) {  			uri = new SafeUri (path);  		} else {  			continue;  		}  		string title = (string)reader [2];  		string artist = (string)reader [3];  		//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  		// the following fields are not critical and can be skipped if something goes wrong  		int rating = 0' playcount = 0;  		long created = 0' accessed = 0;  		// Try to read stats  		try {  			IDataReader stats_reader = conn.Query (stats_cmd' path);  			while (stats_reader.Read ()) {  				rating = Convert.ToInt32 (stats_reader [0]);  				playcount = Convert.ToInt32 (stats_reader [1]);  				created = Convert.ToInt64 (stats_reader [2]);  				accessed = Convert.ToInt64 (stats_reader [3]);  			}  			stats_reader.Dispose ();  		} catch (Exception) {  		}  		UpdateUserJob (processed' count' artist' title);  		try {  			DatabaseTrackInfo track = import_manager.ImportTrack (uri);  			if (track == null) {  				throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  			}  			if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  				track.Rating = rating;  				track.PlayCount = playcount;  				if (created > 0)  					track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  				if (accessed > 0)  					track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  				track.Save (false);  			}  		} catch (Exception e) {  			LogError (SafeUri.UriToFilename (uri)' e);  		}  	} catch (Exception e) {  		Log.Error (e);  		// something went wrong' skip entry  	}  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (reader.Read ()) {  	if (CheckForCanceled ())  		break;  	processed++;  	try {  		string path = (string)reader [1];  		SafeUri uri = null;  		if (path.StartsWith ("./")) {  			uri = new SafeUri (path.Substring (1));  		} else if (path.StartsWith ("/")) {  			uri = new SafeUri (path);  		} else {  			continue;  		}  		string title = (string)reader [2];  		string artist = (string)reader [3];  		//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  		// the following fields are not critical and can be skipped if something goes wrong  		int rating = 0' playcount = 0;  		long created = 0' accessed = 0;  		// Try to read stats  		try {  			IDataReader stats_reader = conn.Query (stats_cmd' path);  			while (stats_reader.Read ()) {  				rating = Convert.ToInt32 (stats_reader [0]);  				playcount = Convert.ToInt32 (stats_reader [1]);  				created = Convert.ToInt64 (stats_reader [2]);  				accessed = Convert.ToInt64 (stats_reader [3]);  			}  			stats_reader.Dispose ();  		} catch (Exception) {  		}  		UpdateUserJob (processed' count' artist' title);  		try {  			DatabaseTrackInfo track = import_manager.ImportTrack (uri);  			if (track == null) {  				throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  			}  			if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  				track.Rating = rating;  				track.PlayCount = playcount;  				if (created > 0)  					track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  				if (accessed > 0)  					track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  				track.Save (false);  			}  		} catch (Exception e) {  			LogError (SafeUri.UriToFilename (uri)' e);  		}  	} catch (Exception e) {  		Log.Error (e);  		// something went wrong' skip entry  	}  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (reader.Read ()) {  	if (CheckForCanceled ())  		break;  	processed++;  	try {  		string path = (string)reader [1];  		SafeUri uri = null;  		if (path.StartsWith ("./")) {  			uri = new SafeUri (path.Substring (1));  		} else if (path.StartsWith ("/")) {  			uri = new SafeUri (path);  		} else {  			continue;  		}  		string title = (string)reader [2];  		string artist = (string)reader [3];  		//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  		// the following fields are not critical and can be skipped if something goes wrong  		int rating = 0' playcount = 0;  		long created = 0' accessed = 0;  		// Try to read stats  		try {  			IDataReader stats_reader = conn.Query (stats_cmd' path);  			while (stats_reader.Read ()) {  				rating = Convert.ToInt32 (stats_reader [0]);  				playcount = Convert.ToInt32 (stats_reader [1]);  				created = Convert.ToInt64 (stats_reader [2]);  				accessed = Convert.ToInt64 (stats_reader [3]);  			}  			stats_reader.Dispose ();  		} catch (Exception) {  		}  		UpdateUserJob (processed' count' artist' title);  		try {  			DatabaseTrackInfo track = import_manager.ImportTrack (uri);  			if (track == null) {  				throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  			}  			if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  				track.Rating = rating;  				track.PlayCount = playcount;  				if (created > 0)  					track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  				if (accessed > 0)  					track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  				track.Save (false);  			}  		} catch (Exception e) {  			LogError (SafeUri.UriToFilename (uri)' e);  		}  	} catch (Exception e) {  		Log.Error (e);  		// something went wrong' skip entry  	}  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	string path = (string)reader [1];  	SafeUri uri = null;  	if (path.StartsWith ("./")) {  		uri = new SafeUri (path.Substring (1));  	} else if (path.StartsWith ("/")) {  		uri = new SafeUri (path);  	} else {  		continue;  	}  	string title = (string)reader [2];  	string artist = (string)reader [3];  	//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  	// the following fields are not critical and can be skipped if something goes wrong  	int rating = 0' playcount = 0;  	long created = 0' accessed = 0;  	// Try to read stats  	try {  		IDataReader stats_reader = conn.Query (stats_cmd' path);  		while (stats_reader.Read ()) {  			rating = Convert.ToInt32 (stats_reader [0]);  			playcount = Convert.ToInt32 (stats_reader [1]);  			created = Convert.ToInt64 (stats_reader [2]);  			accessed = Convert.ToInt64 (stats_reader [3]);  		}  		stats_reader.Dispose ();  	} catch (Exception) {  	}  	UpdateUserJob (processed' count' artist' title);  	try {  		DatabaseTrackInfo track = import_manager.ImportTrack (uri);  		if (track == null) {  			throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  		}  		if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  			track.Rating = rating;  			track.PlayCount = playcount;  			if (created > 0)  				track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  			if (accessed > 0)  				track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  			track.Save (false);  		}  	} catch (Exception e) {  		LogError (SafeUri.UriToFilename (uri)' e);  	}  } catch (Exception e) {  	Log.Error (e);  	// something went wrong' skip entry  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	string path = (string)reader [1];  	SafeUri uri = null;  	if (path.StartsWith ("./")) {  		uri = new SafeUri (path.Substring (1));  	} else if (path.StartsWith ("/")) {  		uri = new SafeUri (path);  	} else {  		continue;  	}  	string title = (string)reader [2];  	string artist = (string)reader [3];  	//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  	// the following fields are not critical and can be skipped if something goes wrong  	int rating = 0' playcount = 0;  	long created = 0' accessed = 0;  	// Try to read stats  	try {  		IDataReader stats_reader = conn.Query (stats_cmd' path);  		while (stats_reader.Read ()) {  			rating = Convert.ToInt32 (stats_reader [0]);  			playcount = Convert.ToInt32 (stats_reader [1]);  			created = Convert.ToInt64 (stats_reader [2]);  			accessed = Convert.ToInt64 (stats_reader [3]);  		}  		stats_reader.Dispose ();  	} catch (Exception) {  	}  	UpdateUserJob (processed' count' artist' title);  	try {  		DatabaseTrackInfo track = import_manager.ImportTrack (uri);  		if (track == null) {  			throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  		}  		if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  			track.Rating = rating;  			track.PlayCount = playcount;  			if (created > 0)  				track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  			if (accessed > 0)  				track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  			track.Save (false);  		}  	} catch (Exception e) {  		LogError (SafeUri.UriToFilename (uri)' e);  	}  } catch (Exception e) {  	Log.Error (e);  	// something went wrong' skip entry  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	string path = (string)reader [1];  	SafeUri uri = null;  	if (path.StartsWith ("./")) {  		uri = new SafeUri (path.Substring (1));  	} else if (path.StartsWith ("/")) {  		uri = new SafeUri (path);  	} else {  		continue;  	}  	string title = (string)reader [2];  	string artist = (string)reader [3];  	//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  	// the following fields are not critical and can be skipped if something goes wrong  	int rating = 0' playcount = 0;  	long created = 0' accessed = 0;  	// Try to read stats  	try {  		IDataReader stats_reader = conn.Query (stats_cmd' path);  		while (stats_reader.Read ()) {  			rating = Convert.ToInt32 (stats_reader [0]);  			playcount = Convert.ToInt32 (stats_reader [1]);  			created = Convert.ToInt64 (stats_reader [2]);  			accessed = Convert.ToInt64 (stats_reader [3]);  		}  		stats_reader.Dispose ();  	} catch (Exception) {  	}  	UpdateUserJob (processed' count' artist' title);  	try {  		DatabaseTrackInfo track = import_manager.ImportTrack (uri);  		if (track == null) {  			throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  		}  		if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  			track.Rating = rating;  			track.PlayCount = playcount;  			if (created > 0)  				track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  			if (accessed > 0)  				track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  			track.Save (false);  		}  	} catch (Exception e) {  		LogError (SafeUri.UriToFilename (uri)' e);  	}  } catch (Exception e) {  	Log.Error (e);  	// something went wrong' skip entry  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	string path = (string)reader [1];  	SafeUri uri = null;  	if (path.StartsWith ("./")) {  		uri = new SafeUri (path.Substring (1));  	} else if (path.StartsWith ("/")) {  		uri = new SafeUri (path);  	} else {  		continue;  	}  	string title = (string)reader [2];  	string artist = (string)reader [3];  	//Console.WriteLine ("Amarok import has {0}/{1} - {2}"' artist' title' uri);  	// the following fields are not critical and can be skipped if something goes wrong  	int rating = 0' playcount = 0;  	long created = 0' accessed = 0;  	// Try to read stats  	try {  		IDataReader stats_reader = conn.Query (stats_cmd' path);  		while (stats_reader.Read ()) {  			rating = Convert.ToInt32 (stats_reader [0]);  			playcount = Convert.ToInt32 (stats_reader [1]);  			created = Convert.ToInt64 (stats_reader [2]);  			accessed = Convert.ToInt64 (stats_reader [3]);  		}  		stats_reader.Dispose ();  	} catch (Exception) {  	}  	UpdateUserJob (processed' count' artist' title);  	try {  		DatabaseTrackInfo track = import_manager.ImportTrack (uri);  		if (track == null) {  			throw new Exception (String.Format (Catalog.GetString ("Unable to import track: {0}")' uri.AbsoluteUri));  		}  		if (rating > 0 || playcount > 0 || created > 0 || accessed > 0) {  			track.Rating = rating;  			track.PlayCount = playcount;  			if (created > 0)  				track.DateAdded = Hyena.DateTimeUtil.FromTimeT (created);  			if (accessed > 0)  				track.LastPlayed = Hyena.DateTimeUtil.FromTimeT (accessed);  			track.Save (false);  		}  	} catch (Exception e) {  		LogError (SafeUri.UriToFilename (uri)' e);  	}  } catch (Exception e) {  	Log.Error (e);  	// something went wrong' skip entry  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	IDataReader stats_reader = conn.Query (stats_cmd' path);  	while (stats_reader.Read ()) {  		rating = Convert.ToInt32 (stats_reader [0]);  		playcount = Convert.ToInt32 (stats_reader [1]);  		created = Convert.ToInt64 (stats_reader [2]);  		accessed = Convert.ToInt64 (stats_reader [3]);  	}  	stats_reader.Dispose ();  } catch (Exception) {  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: try {  	IDataReader stats_reader = conn.Query (stats_cmd' path);  	while (stats_reader.Read ()) {  		rating = Convert.ToInt32 (stats_reader [0]);  		playcount = Convert.ToInt32 (stats_reader [1]);  		created = Convert.ToInt64 (stats_reader [2]);  		accessed = Convert.ToInt64 (stats_reader [3]);  	}  	stats_reader.Dispose ();  } catch (Exception) {  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (stats_reader.Read ()) {  	rating = Convert.ToInt32 (stats_reader [0]);  	playcount = Convert.ToInt32 (stats_reader [1]);  	created = Convert.ToInt64 (stats_reader [2]);  	accessed = Convert.ToInt64 (stats_reader [3]);  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: while (stats_reader.Read ()) {  	rating = Convert.ToInt32 (stats_reader [0]);  	playcount = Convert.ToInt32 (stats_reader [1]);  	created = Convert.ToInt64 (stats_reader [2]);  	accessed = Convert.ToInt64 (stats_reader [3]);  }  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: created = Convert.ToInt64 (stats_reader [2]);  
Magic Number,Banshee.PlayerMigration,AmarokPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\AmarokPlayerImportSource.cs,ImportCore,The following statement contains a magic number: accessed = Convert.ToInt64 (stats_reader [3]);  
Magic Number,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,The following statement contains a magic number: foreach (XmlElement song in songs) {  	if (CheckForCanceled ()) {  		break;  	}  	processed++;  	string title = String.Empty' genre = String.Empty' artist = String.Empty' album = String.Empty;  	int year = 0' rating = 0' play_count = 0' track_number = 0;  	DateTime date_added = DateTime.Now' last_played = DateTime.MinValue;  	SafeUri uri = null;  	foreach (XmlElement child in song.ChildNodes) {  		if (child == null || child.InnerText == null || child.InnerText == String.Empty) {  			continue;  		}  		try {  			switch (child.Name) {  			case "title":  				title = child.InnerText;  				break;  			case "genre":  				genre = child.InnerText;  				break;  			case "artist":  				artist = child.InnerText;  				break;  			case "album":  				album = child.InnerText;  				break;  			case "track-number":  				track_number = Int32.Parse (child.InnerText);  				break;  			case "location":  				uri = new SafeUri (child.InnerText);  				break;  			case "date":  				if (child.InnerText != "0") {  					year = (new DateTime (1' 1' 1).AddDays (Double.Parse (child.InnerText))).Year;  				}  				break;  			case "rating":  				rating = Int32.Parse (child.InnerText);  				break;  			case "play-count":  				play_count = Int32.Parse (child.InnerText);  				break;  			case "last-played":  				last_played = Hyena.DateTimeUtil.ToDateTime (Int64.Parse (child.InnerText));  				break;  			case "first-seen":  				date_added = Hyena.DateTimeUtil.ToDateTime (Int64.Parse (child.InnerText));  				;  				break;  			}  		} catch (Exception) {  			// parsing InnerText failed  		}  	}  	if (uri == null) {  		continue;  	}  	UpdateUserJob (processed' count' artist' title);  	try {  		DatabaseTrackInfo track = manager.ImportTrack (uri);  		if (track == null) {  			LogError (SafeUri.UriToFilename (uri)' Catalog.GetString ("Unable to import song."));  			continue;  		}  		track.TrackTitle = title;  		track.ArtistName = artist;  		track.Genre = genre;  		track.AlbumTitle = album;  		track.TrackNumber = track_number;  		track.Year = year;  		track.DateAdded = date_added;  		track.Rating = (rating >= 0 && rating <= 5) ? rating : 0;  		track.PlayCount = (play_count >= 0) ? play_count : 0;  		track.LastPlayed = last_played;  		track.Save (false);  	} catch (Exception e) {  		LogError (SafeUri.UriToFilename (uri)' e);  	}  }  
Magic Number,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,The following statement contains a magic number: try {  	DatabaseTrackInfo track = manager.ImportTrack (uri);  	if (track == null) {  		LogError (SafeUri.UriToFilename (uri)' Catalog.GetString ("Unable to import song."));  		continue;  	}  	track.TrackTitle = title;  	track.ArtistName = artist;  	track.Genre = genre;  	track.AlbumTitle = album;  	track.TrackNumber = track_number;  	track.Year = year;  	track.DateAdded = date_added;  	track.Rating = (rating >= 0 && rating <= 5) ? rating : 0;  	track.PlayCount = (play_count >= 0) ? play_count : 0;  	track.LastPlayed = last_played;  	track.Save (false);  } catch (Exception e) {  	LogError (SafeUri.UriToFilename (uri)' e);  }  
Magic Number,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,The following statement contains a magic number: track.Rating = (rating >= 0 && rating <= 5) ? rating : 0;  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,The following statement contains a magic number: if (!found) {  	var builder = new StringBuilder (path.Length - 17);  	for (int j = 3; j < itunes_music_uri_parts.Length; j++) {  		string part = itunes_music_uri_parts [j];  		builder.Append (part);  		if (part.Length > 0) {  			builder.Append (Path.DirectorySeparatorChar);  		}  	}  	string local_path = builder.ToString ();  	System.Threading.Monitor.Enter (mutex);  	ThreadAssist.ProxyToMain (delegate {  		System.Threading.Monitor.Enter (mutex);  		using (var dialog = new ItunesMusicDirectoryDialog (local_path)) {  			if (dialog.Run () == (int)ResponseType.Ok) {  				data.local_prefix = dialog.UserMusicDirectory;  				data.user_provided_prefix = true;  				data.default_query = local_path;  				ok = true;  			} else {  				ok = false;  			}  			dialog.Destroy ();  			System.Threading.Monitor.Pulse (mutex);  			System.Threading.Monitor.Exit (mutex);  		}  	});  	System.Threading.Monitor.Wait (mutex);  	System.Threading.Monitor.Exit (mutex);  	if (ok) {  		return true;  	} else {  		LogError (data.library_uri' "Unable to locate iTunes directory from iTunes URI");  		return false;  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,The following statement contains a magic number: if (!found) {  	var builder = new StringBuilder (path.Length - 17);  	for (int j = 3; j < itunes_music_uri_parts.Length; j++) {  		string part = itunes_music_uri_parts [j];  		builder.Append (part);  		if (part.Length > 0) {  			builder.Append (Path.DirectorySeparatorChar);  		}  	}  	string local_path = builder.ToString ();  	System.Threading.Monitor.Enter (mutex);  	ThreadAssist.ProxyToMain (delegate {  		System.Threading.Monitor.Enter (mutex);  		using (var dialog = new ItunesMusicDirectoryDialog (local_path)) {  			if (dialog.Run () == (int)ResponseType.Ok) {  				data.local_prefix = dialog.UserMusicDirectory;  				data.user_provided_prefix = true;  				data.default_query = local_path;  				ok = true;  			} else {  				ok = false;  			}  			dialog.Destroy ();  			System.Threading.Monitor.Pulse (mutex);  			System.Threading.Monitor.Exit (mutex);  		}  	});  	System.Threading.Monitor.Wait (mutex);  	System.Threading.Monitor.Exit (mutex);  	if (ok) {  		return true;  	} else {  		LogError (data.library_uri' "Unable to locate iTunes directory from iTunes URI");  		return false;  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,The following statement contains a magic number: for (int j = 3; j < itunes_music_uri_parts.Length; j++) {  	string part = itunes_music_uri_parts [j];  	builder.Append (part);  	if (part.Length > 0) {  		builder.Append (Path.DirectorySeparatorChar);  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,The following statement contains a magic number: data.query_dirs = new string[step - 2];  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessMusicFolderPath,The following statement contains a magic number: for (int j = step - 2; j >= 0; j--) {  	if (j > 0) {  		data.query_dirs [j - 1] = tmp_query_dirs [j];  	}  	data.default_query += tmp_query_dirs [j] + Path.DirectorySeparatorChar;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: using (xml_reader) {  	while (xml_reader.ReadToFollowing ("key")) {  		xml_reader.Read ();  		string key = xml_reader.ReadContentAsString ();  		xml_reader.Read ();  		xml_reader.Read ();  		try {  			switch (key) {  			case "Track ID":  				itunes_id = Int32.Parse (xml_reader.ReadContentAsString ());  				break;  			case "Name":  				title = xml_reader.ReadContentAsString ();  				break;  			case "Sort Name":  				title_sort = xml_reader.ReadContentAsString ();  				break;  			case "Genre":  				genre = xml_reader.ReadContentAsString ();  				break;  			case "Artist":  				artist = xml_reader.ReadContentAsString ();  				break;  			case "Sort Artist":  				artist_sort = xml_reader.ReadContentAsString ();  				break;  			case "Album Artist":  				album_artist = xml_reader.ReadContentAsString ();  				break;  			case "Sort Album Artist":  				album_artist_sort = xml_reader.ReadContentAsString ();  				break;  			case "Composer":  				composer = xml_reader.ReadContentAsString ();  				break;  			case "Album":  				album = xml_reader.ReadContentAsString ();  				break;  			case "Sort Album":  				album_sort = xml_reader.ReadContentAsString ();  				break;  			case "Grouping":  				grouping = xml_reader.ReadContentAsString ();  				break;  			case "Year":  				year = Int32.Parse (xml_reader.ReadContentAsString ());  				break;  			case "Rating":  				rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  				break;  			case "Play Count":  				play_count = Int32.Parse (xml_reader.ReadContentAsString ());  				break;  			case "Track Number":  				track_number = Int32.Parse (xml_reader.ReadContentAsString ());  				break;  			case "Date Added":  				date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  				break;  			case "Play Date UTC":  				last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  				break;  			case "Location":  				uri = ConvertToLocalUri (xml_reader.ReadContentAsString ());  				break;  			}  		} catch {  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: while (xml_reader.ReadToFollowing ("key")) {  	xml_reader.Read ();  	string key = xml_reader.ReadContentAsString ();  	xml_reader.Read ();  	xml_reader.Read ();  	try {  		switch (key) {  		case "Track ID":  			itunes_id = Int32.Parse (xml_reader.ReadContentAsString ());  			break;  		case "Name":  			title = xml_reader.ReadContentAsString ();  			break;  		case "Sort Name":  			title_sort = xml_reader.ReadContentAsString ();  			break;  		case "Genre":  			genre = xml_reader.ReadContentAsString ();  			break;  		case "Artist":  			artist = xml_reader.ReadContentAsString ();  			break;  		case "Sort Artist":  			artist_sort = xml_reader.ReadContentAsString ();  			break;  		case "Album Artist":  			album_artist = xml_reader.ReadContentAsString ();  			break;  		case "Sort Album Artist":  			album_artist_sort = xml_reader.ReadContentAsString ();  			break;  		case "Composer":  			composer = xml_reader.ReadContentAsString ();  			break;  		case "Album":  			album = xml_reader.ReadContentAsString ();  			break;  		case "Sort Album":  			album_sort = xml_reader.ReadContentAsString ();  			break;  		case "Grouping":  			grouping = xml_reader.ReadContentAsString ();  			break;  		case "Year":  			year = Int32.Parse (xml_reader.ReadContentAsString ());  			break;  		case "Rating":  			rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  			break;  		case "Play Count":  			play_count = Int32.Parse (xml_reader.ReadContentAsString ());  			break;  		case "Track Number":  			track_number = Int32.Parse (xml_reader.ReadContentAsString ());  			break;  		case "Date Added":  			date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  			break;  		case "Play Date UTC":  			last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  			break;  		case "Location":  			uri = ConvertToLocalUri (xml_reader.ReadContentAsString ());  			break;  		}  	} catch {  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: try {  	switch (key) {  	case "Track ID":  		itunes_id = Int32.Parse (xml_reader.ReadContentAsString ());  		break;  	case "Name":  		title = xml_reader.ReadContentAsString ();  		break;  	case "Sort Name":  		title_sort = xml_reader.ReadContentAsString ();  		break;  	case "Genre":  		genre = xml_reader.ReadContentAsString ();  		break;  	case "Artist":  		artist = xml_reader.ReadContentAsString ();  		break;  	case "Sort Artist":  		artist_sort = xml_reader.ReadContentAsString ();  		break;  	case "Album Artist":  		album_artist = xml_reader.ReadContentAsString ();  		break;  	case "Sort Album Artist":  		album_artist_sort = xml_reader.ReadContentAsString ();  		break;  	case "Composer":  		composer = xml_reader.ReadContentAsString ();  		break;  	case "Album":  		album = xml_reader.ReadContentAsString ();  		break;  	case "Sort Album":  		album_sort = xml_reader.ReadContentAsString ();  		break;  	case "Grouping":  		grouping = xml_reader.ReadContentAsString ();  		break;  	case "Year":  		year = Int32.Parse (xml_reader.ReadContentAsString ());  		break;  	case "Rating":  		rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  		break;  	case "Play Count":  		play_count = Int32.Parse (xml_reader.ReadContentAsString ());  		break;  	case "Track Number":  		track_number = Int32.Parse (xml_reader.ReadContentAsString ());  		break;  	case "Date Added":  		date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  		break;  	case "Play Date UTC":  		last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  		break;  	case "Location":  		uri = ConvertToLocalUri (xml_reader.ReadContentAsString ());  		break;  	}  } catch {  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: switch (key) {  case "Track ID":  	itunes_id = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Name":  	title = xml_reader.ReadContentAsString ();  	break;  case "Sort Name":  	title_sort = xml_reader.ReadContentAsString ();  	break;  case "Genre":  	genre = xml_reader.ReadContentAsString ();  	break;  case "Artist":  	artist = xml_reader.ReadContentAsString ();  	break;  case "Sort Artist":  	artist_sort = xml_reader.ReadContentAsString ();  	break;  case "Album Artist":  	album_artist = xml_reader.ReadContentAsString ();  	break;  case "Sort Album Artist":  	album_artist_sort = xml_reader.ReadContentAsString ();  	break;  case "Composer":  	composer = xml_reader.ReadContentAsString ();  	break;  case "Album":  	album = xml_reader.ReadContentAsString ();  	break;  case "Sort Album":  	album_sort = xml_reader.ReadContentAsString ();  	break;  case "Grouping":  	grouping = xml_reader.ReadContentAsString ();  	break;  case "Year":  	year = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Rating":  	rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  	break;  case "Play Count":  	play_count = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Track Number":  	track_number = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Date Added":  	date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  	break;  case "Play Date UTC":  	last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  	break;  case "Location":  	uri = ConvertToLocalUri (xml_reader.ReadContentAsString ());  	break;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: try {  	DatabaseTrackInfo track = import_manager.ImportTrack (uri);  	if (track == null) {  		LogError (SafeUri.UriToFilename (uri)' Catalog.GetString ("Unable to import song."));  		return;  	}  	if (!String.IsNullOrEmpty (title)) {  		track.TrackTitle = title;  	}  	if (!String.IsNullOrEmpty (title_sort)) {  		track.TrackTitleSort = title_sort;  	}  	if (!String.IsNullOrEmpty (artist)) {  		track.ArtistName = artist;  	}  	if (!String.IsNullOrEmpty (artist_sort)) {  		track.ArtistNameSort = artist_sort;  	}  	if (!String.IsNullOrEmpty (genre)) {  		track.Genre = genre;  	}  	if (!String.IsNullOrEmpty (album_artist)) {  		track.AlbumArtist = album_artist;  	}  	if (!String.IsNullOrEmpty (album_artist_sort)) {  		track.AlbumArtistSort = album_artist_sort;  	}  	if (!String.IsNullOrEmpty (composer)) {  		track.Composer = composer;  	}  	if (!String.IsNullOrEmpty (album)) {  		track.AlbumTitle = album;  	}  	if (!String.IsNullOrEmpty (album_sort)) {  		track.AlbumTitleSort = album_sort;  	}  	if (!String.IsNullOrEmpty (grouping)) {  		track.Grouping = grouping;  	}  	if (year > 0) {  		track.Year = year;  	}  	if (data.get_ratings && rating > 0 && rating <= 5) {  		track.Rating = rating;  	}  	if (data.get_stats && play_count > 0) {  		track.PlayCount = play_count;  	}  	if (track_number > 0) {  		track.TrackNumber = track_number;  	}  	if (data.get_stats) {  		track.DateAdded = date_added;  	}  	if (data.get_stats && last_played > DateTime.MinValue) {  		track.LastPlayed = last_played;  	}  	data.track_ids.Add (itunes_id' track.TrackId);  	track.Save (false);  } catch (Exception e) {  	LogError (SafeUri.UriToFilename (uri)' e);  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following statement contains a magic number: if (data.get_ratings && rating > 0 && rating <= 5) {  	track.Rating = rating;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The following statement contains a magic number: if (data.user_provided_prefix && index != -1) {  	index += data.default_query.Length;  } else if (index == -1 && data.query_dirs.Length > 0) {  	int count = 0;  	string path = data.query_dirs [data.query_dirs.Length - 1];  	do {  		for (int k = data.query_dirs.Length - 2; k >= count; k--) {  			path = Path.Combine (path' data.query_dirs [k]);  		}  		index = uri.IndexOf (path);  		count++;  	} while (index == -1 && count < data.query_dirs.Length);  	if (index == -1) {  		index = uri.IndexOf (data.fallback_dir);  		if (index != -1) {  			index += data.fallback_dir.Length + 1;  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The following statement contains a magic number: if (index == -1 && data.query_dirs.Length > 0) {  	int count = 0;  	string path = data.query_dirs [data.query_dirs.Length - 1];  	do {  		for (int k = data.query_dirs.Length - 2; k >= count; k--) {  			path = Path.Combine (path' data.query_dirs [k]);  		}  		index = uri.IndexOf (path);  		count++;  	} while (index == -1 && count < data.query_dirs.Length);  	if (index == -1) {  		index = uri.IndexOf (data.fallback_dir);  		if (index != -1) {  			index += data.fallback_dir.Length + 1;  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The following statement contains a magic number: do {  	for (int k = data.query_dirs.Length - 2; k >= count; k--) {  		path = Path.Combine (path' data.query_dirs [k]);  	}  	index = uri.IndexOf (path);  	count++;  } while (index == -1 && count < data.query_dirs.Length);  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUri,The following statement contains a magic number: for (int k = data.query_dirs.Length - 2; k >= count; k--) {  	path = Path.Combine (path' data.query_dirs [k]);  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	// If it's a '%'' treat the two subsiquent characters as a UTF-8 byte in hex.  	if (input [i] == '%') {  		byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  		// If it's a non-ascii character' or there are already some non-ascii  		// characters in the buffer' then queue it for UTF-8 decoding.  		if (using_buffer || (code & 0x80) != 0) {  			if (using_buffer) {  				if (buffer [1] == 0) {  					buffer [1] = code;  				} else {  					byte[] new_buffer = new byte[buffer.Length + 1];  					for (int j = 0; j < buffer.Length; j++) {  						new_buffer [j] = buffer [j];  					}  					buffer = new_buffer;  					buffer [buffer.Length - 1] = code;  				}  			} else {  				buffer [0] = code;  				using_buffer = true;  			}  		} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  		else {  			builder.Append ((char)code);  		}  		i += 2;  	} else {  		// If we have something in the buffer' decode it.  		if (using_buffer) {  			builder.Append (Encoding.UTF8.GetString (buffer));  			if (buffer.Length > 2) {  				buffer = new byte[2];  			} else {  				buffer [1] = 0;  			}  			using_buffer = false;  		}  		// And add our regular characters and convert to local directory separator char.  		if (input [i] == '/') {  			builder.Append (Path.DirectorySeparatorChar);  		} else {  			builder.Append (input [i]);  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	// If it's a '%'' treat the two subsiquent characters as a UTF-8 byte in hex.  	if (input [i] == '%') {  		byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  		// If it's a non-ascii character' or there are already some non-ascii  		// characters in the buffer' then queue it for UTF-8 decoding.  		if (using_buffer || (code & 0x80) != 0) {  			if (using_buffer) {  				if (buffer [1] == 0) {  					buffer [1] = code;  				} else {  					byte[] new_buffer = new byte[buffer.Length + 1];  					for (int j = 0; j < buffer.Length; j++) {  						new_buffer [j] = buffer [j];  					}  					buffer = new_buffer;  					buffer [buffer.Length - 1] = code;  				}  			} else {  				buffer [0] = code;  				using_buffer = true;  			}  		} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  		else {  			builder.Append ((char)code);  		}  		i += 2;  	} else {  		// If we have something in the buffer' decode it.  		if (using_buffer) {  			builder.Append (Encoding.UTF8.GetString (buffer));  			if (buffer.Length > 2) {  				buffer = new byte[2];  			} else {  				buffer [1] = 0;  			}  			using_buffer = false;  		}  		// And add our regular characters and convert to local directory separator char.  		if (input [i] == '/') {  			builder.Append (Path.DirectorySeparatorChar);  		} else {  			builder.Append (input [i]);  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	// If it's a '%'' treat the two subsiquent characters as a UTF-8 byte in hex.  	if (input [i] == '%') {  		byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  		// If it's a non-ascii character' or there are already some non-ascii  		// characters in the buffer' then queue it for UTF-8 decoding.  		if (using_buffer || (code & 0x80) != 0) {  			if (using_buffer) {  				if (buffer [1] == 0) {  					buffer [1] = code;  				} else {  					byte[] new_buffer = new byte[buffer.Length + 1];  					for (int j = 0; j < buffer.Length; j++) {  						new_buffer [j] = buffer [j];  					}  					buffer = new_buffer;  					buffer [buffer.Length - 1] = code;  				}  			} else {  				buffer [0] = code;  				using_buffer = true;  			}  		} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  		else {  			builder.Append ((char)code);  		}  		i += 2;  	} else {  		// If we have something in the buffer' decode it.  		if (using_buffer) {  			builder.Append (Encoding.UTF8.GetString (buffer));  			if (buffer.Length > 2) {  				buffer = new byte[2];  			} else {  				buffer [1] = 0;  			}  			using_buffer = false;  		}  		// And add our regular characters and convert to local directory separator char.  		if (input [i] == '/') {  			builder.Append (Path.DirectorySeparatorChar);  		} else {  			builder.Append (input [i]);  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	// If it's a '%'' treat the two subsiquent characters as a UTF-8 byte in hex.  	if (input [i] == '%') {  		byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  		// If it's a non-ascii character' or there are already some non-ascii  		// characters in the buffer' then queue it for UTF-8 decoding.  		if (using_buffer || (code & 0x80) != 0) {  			if (using_buffer) {  				if (buffer [1] == 0) {  					buffer [1] = code;  				} else {  					byte[] new_buffer = new byte[buffer.Length + 1];  					for (int j = 0; j < buffer.Length; j++) {  						new_buffer [j] = buffer [j];  					}  					buffer = new_buffer;  					buffer [buffer.Length - 1] = code;  				}  			} else {  				buffer [0] = code;  				using_buffer = true;  			}  		} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  		else {  			builder.Append ((char)code);  		}  		i += 2;  	} else {  		// If we have something in the buffer' decode it.  		if (using_buffer) {  			builder.Append (Encoding.UTF8.GetString (buffer));  			if (buffer.Length > 2) {  				buffer = new byte[2];  			} else {  				buffer [1] = 0;  			}  			using_buffer = false;  		}  		// And add our regular characters and convert to local directory separator char.  		if (input [i] == '/') {  			builder.Append (Path.DirectorySeparatorChar);  		} else {  			builder.Append (input [i]);  		}  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (input [i] == '%') {  	byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  	// If it's a non-ascii character' or there are already some non-ascii  	// characters in the buffer' then queue it for UTF-8 decoding.  	if (using_buffer || (code & 0x80) != 0) {  		if (using_buffer) {  			if (buffer [1] == 0) {  				buffer [1] = code;  			} else {  				byte[] new_buffer = new byte[buffer.Length + 1];  				for (int j = 0; j < buffer.Length; j++) {  					new_buffer [j] = buffer [j];  				}  				buffer = new_buffer;  				buffer [buffer.Length - 1] = code;  			}  		} else {  			buffer [0] = code;  			using_buffer = true;  		}  	} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  	else {  		builder.Append ((char)code);  	}  	i += 2;  } else {  	// If we have something in the buffer' decode it.  	if (using_buffer) {  		builder.Append (Encoding.UTF8.GetString (buffer));  		if (buffer.Length > 2) {  			buffer = new byte[2];  		} else {  			buffer [1] = 0;  		}  		using_buffer = false;  	}  	// And add our regular characters and convert to local directory separator char.  	if (input [i] == '/') {  		builder.Append (Path.DirectorySeparatorChar);  	} else {  		builder.Append (input [i]);  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (input [i] == '%') {  	byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  	// If it's a non-ascii character' or there are already some non-ascii  	// characters in the buffer' then queue it for UTF-8 decoding.  	if (using_buffer || (code & 0x80) != 0) {  		if (using_buffer) {  			if (buffer [1] == 0) {  				buffer [1] = code;  			} else {  				byte[] new_buffer = new byte[buffer.Length + 1];  				for (int j = 0; j < buffer.Length; j++) {  					new_buffer [j] = buffer [j];  				}  				buffer = new_buffer;  				buffer [buffer.Length - 1] = code;  			}  		} else {  			buffer [0] = code;  			using_buffer = true;  		}  	} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  	else {  		builder.Append ((char)code);  	}  	i += 2;  } else {  	// If we have something in the buffer' decode it.  	if (using_buffer) {  		builder.Append (Encoding.UTF8.GetString (buffer));  		if (buffer.Length > 2) {  			buffer = new byte[2];  		} else {  			buffer [1] = 0;  		}  		using_buffer = false;  	}  	// And add our regular characters and convert to local directory separator char.  	if (input [i] == '/') {  		builder.Append (Path.DirectorySeparatorChar);  	} else {  		builder.Append (input [i]);  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (input [i] == '%') {  	byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  	// If it's a non-ascii character' or there are already some non-ascii  	// characters in the buffer' then queue it for UTF-8 decoding.  	if (using_buffer || (code & 0x80) != 0) {  		if (using_buffer) {  			if (buffer [1] == 0) {  				buffer [1] = code;  			} else {  				byte[] new_buffer = new byte[buffer.Length + 1];  				for (int j = 0; j < buffer.Length; j++) {  					new_buffer [j] = buffer [j];  				}  				buffer = new_buffer;  				buffer [buffer.Length - 1] = code;  			}  		} else {  			buffer [0] = code;  			using_buffer = true;  		}  	} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  	else {  		builder.Append ((char)code);  	}  	i += 2;  } else {  	// If we have something in the buffer' decode it.  	if (using_buffer) {  		builder.Append (Encoding.UTF8.GetString (buffer));  		if (buffer.Length > 2) {  			buffer = new byte[2];  		} else {  			buffer [1] = 0;  		}  		using_buffer = false;  	}  	// And add our regular characters and convert to local directory separator char.  	if (input [i] == '/') {  		builder.Append (Path.DirectorySeparatorChar);  	} else {  		builder.Append (input [i]);  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (input [i] == '%') {  	byte code = Byte.Parse (input.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber);  	// If it's a non-ascii character' or there are already some non-ascii  	// characters in the buffer' then queue it for UTF-8 decoding.  	if (using_buffer || (code & 0x80) != 0) {  		if (using_buffer) {  			if (buffer [1] == 0) {  				buffer [1] = code;  			} else {  				byte[] new_buffer = new byte[buffer.Length + 1];  				for (int j = 0; j < buffer.Length; j++) {  					new_buffer [j] = buffer [j];  				}  				buffer = new_buffer;  				buffer [buffer.Length - 1] = code;  			}  		} else {  			buffer [0] = code;  			using_buffer = true;  		}  	} // If it's a lone ascii character' there's no need for fancy UTF-8 decoding.  	else {  		builder.Append ((char)code);  	}  	i += 2;  } else {  	// If we have something in the buffer' decode it.  	if (using_buffer) {  		builder.Append (Encoding.UTF8.GetString (buffer));  		if (buffer.Length > 2) {  			buffer = new byte[2];  		} else {  			buffer [1] = 0;  		}  		using_buffer = false;  	}  	// And add our regular characters and convert to local directory separator char.  	if (input [i] == '/') {  		builder.Append (Path.DirectorySeparatorChar);  	} else {  		builder.Append (input [i]);  	}  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: i += 2;  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (using_buffer) {  	builder.Append (Encoding.UTF8.GetString (buffer));  	if (buffer.Length > 2) {  		buffer = new byte[2];  	} else {  		buffer [1] = 0;  	}  	using_buffer = false;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (using_buffer) {  	builder.Append (Encoding.UTF8.GetString (buffer));  	if (buffer.Length > 2) {  		buffer = new byte[2];  	} else {  		buffer [1] = 0;  	}  	using_buffer = false;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (buffer.Length > 2) {  	buffer = new byte[2];  } else {  	buffer [1] = 0;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: if (buffer.Length > 2) {  	buffer = new byte[2];  } else {  	buffer [1] = 0;  }  
Magic Number,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ConvertToLocalUriFormat,The following statement contains a magic number: buffer = new byte[2];  
Magic Number,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesImportDialog,The following statement contains a magic number: ContentArea.BorderWidth = 8;  
Magic Number,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesImportDialog,The following statement contains a magic number: ContentArea.Spacing = 8;  
Magic Number,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,PackCheckboxes,The following statement contains a magic number: if (Banshee.IO.File.Exists (new SafeUri (possible_location))) {  	library_uri = possible_location;  } else {  	HBox hbox = new HBox ();  	hbox.Spacing = 8;  	Image image = new Image (IconTheme.Default.LoadIcon ("gtk-open"' 18' 0));  	hbox.PackStart (image' false' false' 0);  	Label label1 = new Label ();  	label1.Markup = String.Format ("<b>{0}</b>"' GLib.Markup.EscapeText (String.Format (Catalog.GetString (@"Locate your ""{0}"" file...")' ItunesPlayerImportSource.LibraryFilename)));  	label1.SetAlignment (0.0f' 0.5f);  	hbox.PackStart (label1' false' false' 0);  	Button browse_button = new Button (hbox);  	browse_button.Clicked += OnBrowseButtonClicked;  	ContentArea.PackStart (browse_button' false' false' 0);  	ratings.Sensitive = stats.Sensitive = playlists.Sensitive = import_button.Sensitive = false;  }  
Magic Number,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,PackCheckboxes,The following statement contains a magic number: if (Banshee.IO.File.Exists (new SafeUri (possible_location))) {  	library_uri = possible_location;  } else {  	HBox hbox = new HBox ();  	hbox.Spacing = 8;  	Image image = new Image (IconTheme.Default.LoadIcon ("gtk-open"' 18' 0));  	hbox.PackStart (image' false' false' 0);  	Label label1 = new Label ();  	label1.Markup = String.Format ("<b>{0}</b>"' GLib.Markup.EscapeText (String.Format (Catalog.GetString (@"Locate your ""{0}"" file...")' ItunesPlayerImportSource.LibraryFilename)));  	label1.SetAlignment (0.0f' 0.5f);  	hbox.PackStart (label1' false' false' 0);  	Button browse_button = new Button (hbox);  	browse_button.Clicked += OnBrowseButtonClicked;  	ContentArea.PackStart (browse_button' false' false' 0);  	ratings.Sensitive = stats.Sensitive = playlists.Sensitive = import_button.Sensitive = false;  }  
Magic Number,Banshee.PlayerMigration,ItunesImportDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,PackCheckboxes,The following statement contains a magic number: hbox.Spacing = 8;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: DefaultHeight = 650;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: DefaultWidth = 814;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: vbox.BorderWidth = 8;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: vbox.Spacing = 10;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: hbox.Spacing = 10;  
Magic Number,Banshee.PlayerMigration,ItunesMusicDirectoryDialog,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportDialogs.cs,ItunesMusicDirectoryDialog,The following statement contains a magic number: message.WidthRequest = 750;  
Missing Default,Banshee.PlayerMigration,RhythmboxPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\RhythmboxPlayerImportSource.cs,ImportSongs,The following switch statement is missing a default case: switch (child.Name) {  case "title":  	title = child.InnerText;  	break;  case "genre":  	genre = child.InnerText;  	break;  case "artist":  	artist = child.InnerText;  	break;  case "album":  	album = child.InnerText;  	break;  case "track-number":  	track_number = Int32.Parse (child.InnerText);  	break;  case "location":  	uri = new SafeUri (child.InnerText);  	break;  case "date":  	if (child.InnerText != "0") {  		year = (new DateTime (1' 1' 1).AddDays (Double.Parse (child.InnerText))).Year;  	}  	break;  case "rating":  	rating = Int32.Parse (child.InnerText);  	break;  case "play-count":  	play_count = Int32.Parse (child.InnerText);  	break;  case "last-played":  	last_played = Hyena.DateTimeUtil.ToDateTime (Int64.Parse (child.InnerText));  	break;  case "first-seen":  	date_added = Hyena.DateTimeUtil.ToDateTime (Int64.Parse (child.InnerText));  	;  	break;  }  
Missing Default,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessLibraryXml,The following switch statement is missing a default case: switch (key) {  case "Music Folder":  	if (!ProcessMusicFolderPath (xml_reader.ReadContentAsString ())) {  		return;  	}  	break;  case "Tracks":  	ProcessSongs (import_manager' xml_reader.ReadSubtree ());  	break;  case "Playlists":  	if (data.get_playlists) {  		ProcessPlaylists (xml_reader.ReadSubtree ());  	}  	break;  }  
Missing Default,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessSong,The following switch statement is missing a default case: switch (key) {  case "Track ID":  	itunes_id = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Name":  	title = xml_reader.ReadContentAsString ();  	break;  case "Sort Name":  	title_sort = xml_reader.ReadContentAsString ();  	break;  case "Genre":  	genre = xml_reader.ReadContentAsString ();  	break;  case "Artist":  	artist = xml_reader.ReadContentAsString ();  	break;  case "Sort Artist":  	artist_sort = xml_reader.ReadContentAsString ();  	break;  case "Album Artist":  	album_artist = xml_reader.ReadContentAsString ();  	break;  case "Sort Album Artist":  	album_artist_sort = xml_reader.ReadContentAsString ();  	break;  case "Composer":  	composer = xml_reader.ReadContentAsString ();  	break;  case "Album":  	album = xml_reader.ReadContentAsString ();  	break;  case "Sort Album":  	album_sort = xml_reader.ReadContentAsString ();  	break;  case "Grouping":  	grouping = xml_reader.ReadContentAsString ();  	break;  case "Year":  	year = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Rating":  	rating = Int32.Parse (xml_reader.ReadContentAsString ()) / 20;  	break;  case "Play Count":  	play_count = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Track Number":  	track_number = Int32.Parse (xml_reader.ReadContentAsString ());  	break;  case "Date Added":  	date_added = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  	break;  case "Play Date UTC":  	last_played = DateTime.Parse (xml_reader.ReadContentAsString ()' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AssumeUniversal);  	break;  case "Location":  	uri = ConvertToLocalUri (xml_reader.ReadContentAsString ());  	break;  }  
Missing Default,Banshee.PlayerMigration,ItunesPlayerImportSource,F:\newReposMay17\GNOME_banshee\src\Extensions\Banshee.PlayerMigration\Banshee.PlayerMigration\ItunesPlayerImportSource.cs,ProcessPlaylist,The following switch statement is missing a default case: switch (key) {  case "Name":  	xml_reader.Read ();  	name = xml_reader.ReadContentAsString ();  	if (name == "Library" || name == "Music Videos" || name == "Audiobooks" || name == "Music" || name == "Movies" || name == "Party Shuffle" || name == "Podcasts" || name == "Party Shuffle" || name == "Purchased Music" || name == "Genius" || name == "TV Shows") {  		skip = true;  	}  	break;  case "Smart Info":  	skip = true;  	break;  case "Smart Criteria":  	skip = true;  	break;  case "Playlist Items":  	xml_reader.Read ();  	if (!skip) {  		ProcessPlaylist (name' xml_reader.ReadSubtree ());  		processed = true;  	}  	break;  }  
