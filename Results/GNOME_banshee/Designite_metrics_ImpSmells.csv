Implementation smell,Namespace,Class,File,Method,Description
Complex Method,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,Cyclomatic complexity of the method is 11
Long Parameter List,metrics,MultiUserSample,C:\repos\GNOME_banshee\extras\metrics\MultiUserSample.cs,Import,The method has 5 parameters. Parameters: db' user_id' metric_name' stamp' val
Complex Conditional,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,GetMetricType,The conditional expression  "name.EndsWith ("LongSqliteCommand") || name.EndsWith ("At") || name.StartsWith ("Assemblies/") ||                      name.EndsWith ("child_sort_id") || name.EndsWith ("separate_by_type") || name.EndsWith ("expanded")"  is complex.
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: latest_samples.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine ("Total unique users for this time slice: {0}"' reader[1]);                  Console.WriteLine ("First report was on {0}"' SqliteUtils.FromDbFormat (typeof(DateTime)' reader[2]));                  Console.WriteLine ("Last report was on {0}"' SqliteUtils.FromDbFormat (typeof(DateTime)' reader[3]));                  Console.WriteLine ();              };
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: latest_samples.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine ("Total unique users for this time slice: {0}"' reader[1]);                  Console.WriteLine ("First report was on {0}"' SqliteUtils.FromDbFormat (typeof(DateTime)' reader[2]));                  Console.WriteLine ("Last report was on {0}"' SqliteUtils.FromDbFormat (typeof(DateTime)' reader[3]));                  Console.WriteLine ();              };
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: numeric_slice.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine (String.Format ("   Users:  {0}"' fmt)' reader[5]);                  Console.WriteLine (String.Format ("   Min:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[1]));                  Console.WriteLine (String.Format ("   Avg:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[3]));                  Console.WriteLine (String.Format ("   Median: {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[4]));                  Console.WriteLine (String.Format ("   Max:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[2]));                  Console.WriteLine ();              };
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: numeric_slice.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine (String.Format ("   Users:  {0}"' fmt)' reader[5]);                  Console.WriteLine (String.Format ("   Min:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[1]));                  Console.WriteLine (String.Format ("   Avg:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[3]));                  Console.WriteLine (String.Format ("   Median: {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[4]));                  Console.WriteLine (String.Format ("   Max:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[2]));                  Console.WriteLine ();              };
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: numeric_slice.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine (String.Format ("   Users:  {0}"' fmt)' reader[5]);                  Console.WriteLine (String.Format ("   Min:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[1]));                  Console.WriteLine (String.Format ("   Avg:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[3]));                  Console.WriteLine (String.Format ("   Median: {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[4]));                  Console.WriteLine (String.Format ("   Max:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[2]));                  Console.WriteLine ();              };
Magic Number,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following statement contains a magic number: numeric_slice.Cache.AggregatesUpdated += (reader) => {                  Console.WriteLine (String.Format ("   Users:  {0}"' fmt)' reader[5]);                  Console.WriteLine (String.Format ("   Min:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[1]));                  Console.WriteLine (String.Format ("   Avg:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[3]));                  Console.WriteLine (String.Format ("   Median: {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[4]));                  Console.WriteLine (String.Format ("   Max:    {0}"' fmt)' Metric.ToString (numeric_slice.MetricName' reader[2]));                  Console.WriteLine ();              };
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Database,The following statement contains a magic number: Execute ("PRAGMA cache_size = ?"' 32768 * 4);
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Database,The following statement contains a magic number: Execute ("PRAGMA cache_size = ?"' 32768 * 4);
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: var max_report_size = 150 * 1024;
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: var max_report_size = 150 * 1024;
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,Database,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Import,The following statement contains a magic number: foreach (var file in System.IO.Directory.GetFiles ("data")) {                  var match = report_number_regex.Match (file);                  if (!match.Success) {                      continue;                  }                    long num = Int64.Parse (match.Groups[1].Captures[0].Value);                  if (num <= last_report_number) {                      continue;                  }                    var file_size = new System.IO.FileInfo (file).Length;                  if (file_size > max_report_size) {                      Log.InformationFormat ("Skipping {0} because too large ({1:N0} KB compressed)"' file' file_size/1024.0);                      continue;                  }                    last_report_number = num;                  Log.DebugFormat ("Importing {0}"' file);                    try {                      JsonObject o = null;                      using (var stream = System.IO.File.OpenRead (file)) {                          using (var gzip_stream = new GZipInputStream (stream)) {                              using (var txt_stream = new System.IO.StreamReader (gzip_stream)) {                                  o = new Deserializer (txt_stream.ReadToEnd ()).Deserialize () as JsonObject;                              }                          }                      }                        if (o == null)                          throw new Exception ("Unable to parse JSON; empty file' maybe?");                        string user_id = (string) o["ID"];                      int format_version = (int) o["FormatVersion"];                      if (format_version != MetricsCollection.FormatVersion) {                          Log.WarningFormat ("Ignoring user report with old FormatVersion: {0}"' format_version);                          continue;                      }                        var metrics = o["Metrics"] as JsonObject;                      foreach (string metric_name in metrics.Keys) {                          // Skip these; they are a ton of data' and really more for debug purposes                          if (metric_name == "Banshee/LongSqliteCommand")                              continue;                            var samples = metrics[metric_name] as JsonArray;                            string name = metric_name;                          if (name.StartsWith (collapse_source_metric)) {                              string [] pieces = name.Split ('/');                              var reduced_name = pieces[2].Substring (8' pieces[2].IndexOfAny (collapse_source_chars' 8) - 8);                              name = String.Format ("{0}{1}/{2}"' collapse_source_metric' reduced_name' pieces[pieces.Length - 1]);                          }                            foreach (JsonArray sample in samples) {                              sample_provider.Save (MultiUserSample.Import (db' user_id' name' (string)sample[0]' (object)sample[1]));                          }                      }                      db.CommitTransaction ();                  } catch (Exception e) {                      Log.Exception (String.Format ("Failed to read {0}"' file)' e);                      db.RollbackTransaction ();                  }                    last_config.Value = last_report_number.ToString ();                  Config.Save (last_config);                    db.BeginTransaction ();              }
Magic Number,metrics,MedianFunction<T>,C:\repos\GNOME_banshee\extras\metrics\Database.cs,Final,The following statement contains a magic number: return list[list.Count / 2];
Missing Default,metrics,MetaMetrics,C:\repos\GNOME_banshee\extras\metrics\MetaMetrics.cs,MetaMetrics,The following switch statement is missing a default case: switch (GetMetricType (metric)) {                  case "string":                      Console.WriteLine ("{0}:"' metric);                      string_summary.ChangeMetric (db' metric);                      break;                  //case "timespan" : SummarizeNumeric<TimeSpan> (metric); break;                  //case "datetime" : SummarizeNumeric<DateTime> (metric); break;                  case "float":                      Console.WriteLine ("{0}:"' metric);                      //SummarizeNumeric<long> (metric_cache);                      numeric_slice.ChangeMetric (db' metric);                      break;                  //case "float":                      //SummarizeNumeric<double> (metric_cache);                      //break;                  }
