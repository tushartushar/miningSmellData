Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Banshee.OpticalDisc.AudioCd,AudioCdDiscModel,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdDiscModel.cs,LoadDiscMetadata,Cyclomatic complexity of the method is 13
Long Parameter List,Banshee.OpticalDisc,DiscSource,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc\DiscSource.cs,DiscSource,The method has 5 parameters. Parameters: service' model' genericName' name' order
Long Statement,Banshee.OpticalDisc.AudioCd,AudioCdSource,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdSource.cs,BeginAutoRip,The length of the statement  "                SetStatus (Catalog.GetString ("Automatic import off since this album is already in the Music Library.")' true' false' null); " is 124.
Long Statement,Banshee.OpticalDisc.AudioCd,AudioCdSource,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdSource.cs,SetupGui,The length of the statement  "            Properties.SetStringList ("Icon.Name"' "media-optical-cd-audio"' "media-optical-cd"' "media-optical"' "gnome-dev-cdrom-audio"' "source-cd-audio"); " is 146.
Empty Catch Block,Banshee.OpticalDisc.AudioCd,AudioCdDiscModel,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdDiscModel.cs,LoadDiscMetadata,The method has an empty catch block.
Empty Catch Block,Banshee.OpticalDisc.AudioCd,AudioCdService,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdService.cs,DeviceCommandMatchesSource,The method has an empty catch block.
Empty Catch Block,Banshee.OpticalDisc.Dvd,DvdService,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.Dvd\DvdService.cs,DeviceCommandMatchesSource,The method has an empty catch block.
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdDiscModel,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdDiscModel.cs,LoadDiscMetadata,The following statement contains a magic number: try {                  LocalDisc mb_disc = (LocalDisc)state;                    OnMetadataQueryStarted (mb_disc);                    Release release = Release.Query (mb_disc).First ();                    if (release == null || release.Score < 100) {                      OnMetadataQueryFinished (false);                      return;                  }                                    var tracks = release.GetTracks ();                  if (tracks.Count != Count) {                      OnMetadataQueryFinished (false);                      return;                  }                    disc_title = release.GetTitle ();                    int disc_number = 1;                  int i = 0;                    foreach (Disc disc in release.GetDiscs ()) {                      i++;                      if (disc.Id == mb_disc.Id) {                          disc_number = i;                      }                  }                    DateTime release_date = DateTime.MaxValue;                    foreach (Event release_event in release.GetEvents ()) {                      if (release_event.Date != null) {                          try {                              // Handle "YYYY" dates                              var date_str = release_event.Date;                              DateTime date = DateTime.Parse (                                  date_str.Length > 4 ? date_str : date_str + "-01"'                                  ApplicationContext.InternalCultureInfo                              );                                if (date < release_date) {                                  release_date = date;                              }                          } catch {                          }                      }                  }                    DatabaseArtistInfo artist = new DatabaseArtistInfo ();                  var mb_artist = release.GetArtist ();                  artist.Name = mb_artist.GetName ();                  artist.NameSort = mb_artist.GetSortName ();                  artist.MusicBrainzId = mb_artist.Id;                  bool is_compilation = false;                    DatabaseAlbumInfo album = new DatabaseAlbumInfo ();                  album.Title = disc_title;                  album.ArtistName = artist.Name;                  album.MusicBrainzId = release.Id;                  album.ReleaseDate = release_date == DateTime.MaxValue ? DateTime.MinValue : release_date;                    i = 0;                  foreach (Track track in tracks) {                      AudioCdTrackInfo model_track = (AudioCdTrackInfo)this[i++];                      var mb_track_artist = track.GetArtist ();                        model_track.MusicBrainzId = track.Id;                      model_track.TrackTitle = track.GetTitle ();                      model_track.ArtistName = mb_track_artist.GetName ();                      model_track.AlbumTitle = disc_title;                      model_track.DiscNumber = disc_number;                      model_track.Album = album;                        model_track.Artist = new DatabaseArtistInfo ();                      model_track.Artist.Name = model_track.ArtistName;                      model_track.Artist.NameSort = mb_track_artist.GetSortName ();                      model_track.Artist.MusicBrainzId = mb_track_artist.Id;                        if (release_date != DateTime.MinValue) {                          model_track.Year = release_date.Year;                      }                        if (!is_compilation && mb_track_artist.Id != artist.MusicBrainzId) {                          is_compilation = true;                      }                  }                    if (is_compilation) {                      album.IsCompilation = true;                      for (i = 0; i < tracks.Count; i++) {                          AudioCdTrackInfo model_track = (AudioCdTrackInfo)this[i];                          model_track.IsCompilation = true;                          model_track.AlbumArtist = artist.Name;                          model_track.AlbumArtistSort = artist.NameSort;                      }                  }                    OnMetadataQueryFinished (true);              } catch (Exception ex) {                  Log.DebugException (ex);                  OnMetadataQueryFinished (false);              }
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdDiscModel,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdDiscModel.cs,LoadDiscMetadata,The following statement contains a magic number: try {                  LocalDisc mb_disc = (LocalDisc)state;                    OnMetadataQueryStarted (mb_disc);                    Release release = Release.Query (mb_disc).First ();                    if (release == null || release.Score < 100) {                      OnMetadataQueryFinished (false);                      return;                  }                                    var tracks = release.GetTracks ();                  if (tracks.Count != Count) {                      OnMetadataQueryFinished (false);                      return;                  }                    disc_title = release.GetTitle ();                    int disc_number = 1;                  int i = 0;                    foreach (Disc disc in release.GetDiscs ()) {                      i++;                      if (disc.Id == mb_disc.Id) {                          disc_number = i;                      }                  }                    DateTime release_date = DateTime.MaxValue;                    foreach (Event release_event in release.GetEvents ()) {                      if (release_event.Date != null) {                          try {                              // Handle "YYYY" dates                              var date_str = release_event.Date;                              DateTime date = DateTime.Parse (                                  date_str.Length > 4 ? date_str : date_str + "-01"'                                  ApplicationContext.InternalCultureInfo                              );                                if (date < release_date) {                                  release_date = date;                              }                          } catch {                          }                      }                  }                    DatabaseArtistInfo artist = new DatabaseArtistInfo ();                  var mb_artist = release.GetArtist ();                  artist.Name = mb_artist.GetName ();                  artist.NameSort = mb_artist.GetSortName ();                  artist.MusicBrainzId = mb_artist.Id;                  bool is_compilation = false;                    DatabaseAlbumInfo album = new DatabaseAlbumInfo ();                  album.Title = disc_title;                  album.ArtistName = artist.Name;                  album.MusicBrainzId = release.Id;                  album.ReleaseDate = release_date == DateTime.MaxValue ? DateTime.MinValue : release_date;                    i = 0;                  foreach (Track track in tracks) {                      AudioCdTrackInfo model_track = (AudioCdTrackInfo)this[i++];                      var mb_track_artist = track.GetArtist ();                        model_track.MusicBrainzId = track.Id;                      model_track.TrackTitle = track.GetTitle ();                      model_track.ArtistName = mb_track_artist.GetName ();                      model_track.AlbumTitle = disc_title;                      model_track.DiscNumber = disc_number;                      model_track.Album = album;                        model_track.Artist = new DatabaseArtistInfo ();                      model_track.Artist.Name = model_track.ArtistName;                      model_track.Artist.NameSort = mb_track_artist.GetSortName ();                      model_track.Artist.MusicBrainzId = mb_track_artist.Id;                        if (release_date != DateTime.MinValue) {                          model_track.Year = release_date.Year;                      }                        if (!is_compilation && mb_track_artist.Id != artist.MusicBrainzId) {                          is_compilation = true;                      }                  }                    if (is_compilation) {                      album.IsCompilation = true;                      for (i = 0; i < tracks.Count; i++) {                          AudioCdTrackInfo model_track = (AudioCdTrackInfo)this[i];                          model_track.IsCompilation = true;                          model_track.AlbumArtist = artist.Name;                          model_track.AlbumArtistSort = artist.NameSort;                      }                  }                    OnMetadataQueryFinished (true);              } catch (Exception ex) {                  Log.DebugException (ex);                  OnMetadataQueryFinished (false);              }
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdRipper,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdRipper.cs,OnProgress,The following statement contains a magic number: if (poll_diff.TotalMilliseconds >= 1000) {                  factor = ((total_ripped_duration - last_speed_poll_duration).TotalMilliseconds                      * (poll_diff.TotalMilliseconds / 1000.0)) / 1000.0;                    last_speed_poll_duration = total_ripped_duration;                  last_speed_poll_time = DateTime.Now;                  last_speed_poll_factor = factor > 1 ? factor : 0;              }
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdRipper,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdRipper.cs,OnProgress,The following statement contains a magic number: if (poll_diff.TotalMilliseconds >= 1000) {                  factor = ((total_ripped_duration - last_speed_poll_duration).TotalMilliseconds                      * (poll_diff.TotalMilliseconds / 1000.0)) / 1000.0;                    last_speed_poll_duration = total_ripped_duration;                  last_speed_poll_time = DateTime.Now;                  last_speed_poll_factor = factor > 1 ? factor : 0;              }
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdRipper,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdRipper.cs,OnProgress,The following statement contains a magic number: if (poll_diff.TotalMilliseconds >= 1000) {                  factor = ((total_ripped_duration - last_speed_poll_duration).TotalMilliseconds                      * (poll_diff.TotalMilliseconds / 1000.0)) / 1000.0;                    last_speed_poll_duration = total_ripped_duration;                  last_speed_poll_time = DateTime.Now;                  last_speed_poll_factor = factor > 1 ? factor : 0;              }
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdRipper,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdRipper.cs,OnProgress,The following statement contains a magic number: user_job.Status = last_speed_poll_factor > 1 && last_speed_poll_factor <= 200                  ? String.Format ("{0} ({1:0.0}x)"' status' last_speed_poll_factor)                  : status;
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdService,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdService.cs,InstallPreferences,The following statement contains a magic number: pref_page = new Banshee.Preferences.SourcePage ("audio-cd"' Catalog.GetString ("Audio CDs")' "media-cdrom"' 400);
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdService,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdService.cs,InstallPreferences,The following statement contains a magic number: pref_section = pref_page.Add (new Section ("audio-cd"' Catalog.GetString ("Audio CD Importing")' 20));
Magic Number,Banshee.OpticalDisc.AudioCd,AudioCdSource,C:\repos\GNOME_banshee\src\Extensions\Banshee.OpticalDisc\Banshee.OpticalDisc.AudioCd\AudioCdSource.cs,UpdateActions,The following statement contains a magic number: if (rip_action != null) {                  string title = Model.Title;                  int max_title_length = 20;                  title = title.Length > max_title_length                      ? String.Format ("{0}\u2026"' title.Substring (0' max_title_length).Trim ())                      : title;                  rip_action.Label = String.Format (Catalog.GetString ("Import \u201f{0}\u201d")' title);                  rip_action.ShortLabel = Catalog.GetString ("Import CD");                  rip_action.IconName = "media-import-audio-cd";                  rip_action.Sensitive = AudioCdRipper.Supported && Model.EnabledCount > 0;              }
