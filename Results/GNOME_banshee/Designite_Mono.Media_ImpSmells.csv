Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Media.Playlists.Xspf,Playlist,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\Playlist.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,Cyclomatic complexity of the method is 9
Empty Catch Block,Media.Playlists.Xspf,Playlist,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\Playlist.cs,Sniff,The method has an empty catch block.
Magic Number,Media.Playlists.Xspf,Playlist,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\Playlist.cs,Save,The following statement contains a magic number: writer.Indentation = 2;
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: year += 2000 - (year < 50 ? 0 : 1);
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: year += 2000 - (year < 50 ? 0 : 1);
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: year < 1000
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: int ms = m.Groups["ms"].Success ? (int)Math.Round(1000 * Double.Parse(m.Groups["ms"].Value'                      System.Globalization.NumberFormatInfo.InvariantInfo)) : 0;
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Month,The following statement contains a magic number: i < 12
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,D:\research\architectureSmells\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
