Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,Media.Playlists.Xspf,Playlist,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\Playlist.cs,Sniff,The method has an empty catch block.
Magic Number,Media.Playlists.Xspf,Playlist,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\Playlist.cs,Save,The following statement contains a magic number: writer.Indentation = 2;
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: try {                  bool isRfc822 = m.Groups["rfc822"].Success;                  int year = Int32.Parse(m.Groups["year"].Value);                    if(year < 1000) {                      year += 2000 - (year < 50 ? 0 : 1);                  }                    int month;                  if(isRfc822) {                      month = ParseRfc822Month(m.Groups["month"].Value);                  } else {                      month = m.Groups["month"].Success ? Int32.Parse(m.Groups["month"].Value) : 1;                  }                    int day = m.Groups["day"].Success ? Int32.Parse(m.Groups["day"].Value) : 1;                  int hour = m.Groups["hour"].Success ? Int32.Parse(m.Groups["hour"].Value) : 0;                  int min = m.Groups["min"].Success ? Int32.Parse(m.Groups["min"].Value) : 0;                  int sec = m.Groups["sec"].Success ? Int32.Parse(m.Groups["sec"].Value) : 0;                  int ms = m.Groups["ms"].Success ? (int)Math.Round(1000 * Double.Parse(m.Groups["ms"].Value'                      System.Globalization.NumberFormatInfo.InvariantInfo)) : 0;                    TimeSpan offset = TimeSpan.Zero;                  if(m.Groups["ofs"].Success) {                      offset = isRfc822                          ? ParseRfc822Offset(m.Groups["ofs"].Value)                          : ParseW3COffset(m.Groups["ofs"].Value);                  }                      return new W3CDateTime(new DateTime(year' month' day' hour' min' sec' ms)' offset);              } catch(Exception e) {                  throw new FormatException("Input is not a valid W3C or RFC822 date"' e);              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: try {                  bool isRfc822 = m.Groups["rfc822"].Success;                  int year = Int32.Parse(m.Groups["year"].Value);                    if(year < 1000) {                      year += 2000 - (year < 50 ? 0 : 1);                  }                    int month;                  if(isRfc822) {                      month = ParseRfc822Month(m.Groups["month"].Value);                  } else {                      month = m.Groups["month"].Success ? Int32.Parse(m.Groups["month"].Value) : 1;                  }                    int day = m.Groups["day"].Success ? Int32.Parse(m.Groups["day"].Value) : 1;                  int hour = m.Groups["hour"].Success ? Int32.Parse(m.Groups["hour"].Value) : 0;                  int min = m.Groups["min"].Success ? Int32.Parse(m.Groups["min"].Value) : 0;                  int sec = m.Groups["sec"].Success ? Int32.Parse(m.Groups["sec"].Value) : 0;                  int ms = m.Groups["ms"].Success ? (int)Math.Round(1000 * Double.Parse(m.Groups["ms"].Value'                      System.Globalization.NumberFormatInfo.InvariantInfo)) : 0;                    TimeSpan offset = TimeSpan.Zero;                  if(m.Groups["ofs"].Success) {                      offset = isRfc822                          ? ParseRfc822Offset(m.Groups["ofs"].Value)                          : ParseW3COffset(m.Groups["ofs"].Value);                  }                      return new W3CDateTime(new DateTime(year' month' day' hour' min' sec' ms)' offset);              } catch(Exception e) {                  throw new FormatException("Input is not a valid W3C or RFC822 date"' e);              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: try {                  bool isRfc822 = m.Groups["rfc822"].Success;                  int year = Int32.Parse(m.Groups["year"].Value);                    if(year < 1000) {                      year += 2000 - (year < 50 ? 0 : 1);                  }                    int month;                  if(isRfc822) {                      month = ParseRfc822Month(m.Groups["month"].Value);                  } else {                      month = m.Groups["month"].Success ? Int32.Parse(m.Groups["month"].Value) : 1;                  }                    int day = m.Groups["day"].Success ? Int32.Parse(m.Groups["day"].Value) : 1;                  int hour = m.Groups["hour"].Success ? Int32.Parse(m.Groups["hour"].Value) : 0;                  int min = m.Groups["min"].Success ? Int32.Parse(m.Groups["min"].Value) : 0;                  int sec = m.Groups["sec"].Success ? Int32.Parse(m.Groups["sec"].Value) : 0;                  int ms = m.Groups["ms"].Success ? (int)Math.Round(1000 * Double.Parse(m.Groups["ms"].Value'                      System.Globalization.NumberFormatInfo.InvariantInfo)) : 0;                    TimeSpan offset = TimeSpan.Zero;                  if(m.Groups["ofs"].Success) {                      offset = isRfc822                          ? ParseRfc822Offset(m.Groups["ofs"].Value)                          : ParseW3COffset(m.Groups["ofs"].Value);                  }                      return new W3CDateTime(new DateTime(year' month' day' hour' min' sec' ms)' offset);              } catch(Exception e) {                  throw new FormatException("Input is not a valid W3C or RFC822 date"' e);              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,Parse,The following statement contains a magic number: try {                  bool isRfc822 = m.Groups["rfc822"].Success;                  int year = Int32.Parse(m.Groups["year"].Value);                    if(year < 1000) {                      year += 2000 - (year < 50 ? 0 : 1);                  }                    int month;                  if(isRfc822) {                      month = ParseRfc822Month(m.Groups["month"].Value);                  } else {                      month = m.Groups["month"].Success ? Int32.Parse(m.Groups["month"].Value) : 1;                  }                    int day = m.Groups["day"].Success ? Int32.Parse(m.Groups["day"].Value) : 1;                  int hour = m.Groups["hour"].Success ? Int32.Parse(m.Groups["hour"].Value) : 0;                  int min = m.Groups["min"].Success ? Int32.Parse(m.Groups["min"].Value) : 0;                  int sec = m.Groups["sec"].Success ? Int32.Parse(m.Groups["sec"].Value) : 0;                  int ms = m.Groups["ms"].Success ? (int)Math.Round(1000 * Double.Parse(m.Groups["ms"].Value'                      System.Globalization.NumberFormatInfo.InvariantInfo)) : 0;                    TimeSpan offset = TimeSpan.Zero;                  if(m.Groups["ofs"].Success) {                      offset = isRfc822                          ? ParseRfc822Offset(m.Groups["ofs"].Value)                          : ParseW3COffset(m.Groups["ofs"].Value);                  }                      return new W3CDateTime(new DateTime(year' month' day' hour' min' sec' ms)' offset);              } catch(Exception e) {                  throw new FormatException("Input is not a valid W3C or RFC822 date"' e);              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Month,The following statement contains a magic number: for(int i = 0; i < 12; i++) {                  if(monthName == MonthNames[i]) {                      return i + 1;                  }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
Magic Number,Media.Playlists.Xspf,W3CDateTime,C:\repos\GNOME_banshee\src\Libraries\Mono.Media\Media.Playlists.Xspf\W3CDateTime.cs,ParseRfc822Offset,The following statement contains a magic number: switch(s) {                  case "UT":                  case "GMT": break;                  case "EDT": hours = -4; break;                  case "EST":                  case "CDT": hours = -5; break;                  case "CST":                  case "MDT": hours = -6; break;                  case "MST":                  case "PDT": hours = -7; break;                  case "PST": hours = -8; break;                  default:                      if(s[0] == '+') {                          string sfmt = s.Substring(1' 2) + ":" + s.Substring(3' 2);                          return TimeSpan.Parse(sfmt);                      } else {                          return TimeSpan.Parse(s.Insert(s.Length - 2' ":"));                      }              }
