Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeviceInitialize,Cyclomatic complexity of the method is 9
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,Cyclomatic complexity of the method is 9
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The length of the statement  "                                file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i+1' album_artist.Length)).Trim ()); " is 120.
Complex Conditional,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,The conditional expression  "CoverArtSize > -1 && !String.IsNullOrEmpty (CoverArtFileType) &&                      !String.IsNullOrEmpty (CoverArtFileName) && (FolderDepth == -1 || FolderDepth > 0)"  is complex.
Empty Catch Block,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeleteTrackFile,The method has an empty catch block.
Empty Catch Block,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeleteTrackFile,The method has an empty catch block.
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.Podcast)) {                  string album = FileNamePattern.Escape (track.DisplayAlbumTitle);                  string title = FileNamePattern.Escape (track.DisplayTrackTitle);                  file_path = System.IO.Path.Combine ("Podcasts"' album);                  file_path = System.IO.Path.Combine (file_path' title);              } else if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {                  string album = FileNamePattern.Escape (track.DisplayAlbumTitle);                  string title = FileNamePattern.Escape (track.DisplayTrackTitle);                  file_path = System.IO.Path.Combine (album' title);              } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {                  // If the folder_depth property exists' we have to put the files in a hiearchy of                  // the exact given depth (not including the mount point/audio_folder).                  if (FolderDepth != -1) {                      int depth = FolderDepth;                        bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);                        string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);                      string track_album  = FileNamePattern.Escape (track.DisplayAlbumTitle);                      string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));                      string track_title  = FileNamePattern.Escape (track.DisplayTrackTitle);                        if (depth == 0) {                          // Artist - Album - 01 - Title                          string track_artist = FileNamePattern.Escape (track.DisplayArtistName);                          file_path = is_album_unknown ?                              String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) :                              String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);                      } else if (depth == 1) {                          // Artist - Album/01 - Title                          file_path = is_album_unknown ?                              album_artist :                              String.Format ("{0} - {1}"' album_artist' track_album);                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      } else if (depth == 2) {                          // Artist/Album/01 - Title                          file_path = album_artist;                          if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {                              file_path = System.IO.Path.Combine (file_path' track_album);                          }                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      } else {                          // If the *required* depth is more than 2..go nuts!                          for (int i = 0; i < depth - 2; i++) {                              if (i == 0) {                                  file_path = album_artist.Substring (0' Math.Min (i+1' album_artist.Length)).Trim ();                              } else {                                  file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i+1' album_artist.Length)).Trim ());                              }                            }                            // Finally add on the Artist/Album/01 - Track                          file_path = System.IO.Path.Combine (file_path' album_artist);                          file_path = System.IO.Path.Combine (file_path' track_album);                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      }                  } else {                      file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);                  }              }
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.Podcast)) {                  string album = FileNamePattern.Escape (track.DisplayAlbumTitle);                  string title = FileNamePattern.Escape (track.DisplayTrackTitle);                  file_path = System.IO.Path.Combine ("Podcasts"' album);                  file_path = System.IO.Path.Combine (file_path' title);              } else if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {                  string album = FileNamePattern.Escape (track.DisplayAlbumTitle);                  string title = FileNamePattern.Escape (track.DisplayTrackTitle);                  file_path = System.IO.Path.Combine (album' title);              } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {                  // If the folder_depth property exists' we have to put the files in a hiearchy of                  // the exact given depth (not including the mount point/audio_folder).                  if (FolderDepth != -1) {                      int depth = FolderDepth;                        bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);                        string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);                      string track_album  = FileNamePattern.Escape (track.DisplayAlbumTitle);                      string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));                      string track_title  = FileNamePattern.Escape (track.DisplayTrackTitle);                        if (depth == 0) {                          // Artist - Album - 01 - Title                          string track_artist = FileNamePattern.Escape (track.DisplayArtistName);                          file_path = is_album_unknown ?                              String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) :                              String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);                      } else if (depth == 1) {                          // Artist - Album/01 - Title                          file_path = is_album_unknown ?                              album_artist :                              String.Format ("{0} - {1}"' album_artist' track_album);                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      } else if (depth == 2) {                          // Artist/Album/01 - Title                          file_path = album_artist;                          if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {                              file_path = System.IO.Path.Combine (file_path' track_album);                          }                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      } else {                          // If the *required* depth is more than 2..go nuts!                          for (int i = 0; i < depth - 2; i++) {                              if (i == 0) {                                  file_path = album_artist.Substring (0' Math.Min (i+1' album_artist.Length)).Trim ();                              } else {                                  file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i+1' album_artist.Length)).Trim ());                              }                            }                            // Finally add on the Artist/Album/01 - Track                          file_path = System.IO.Path.Combine (file_path' album_artist);                          file_path = System.IO.Path.Combine (file_path' track_album);                          file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));                      }                  } else {                      file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);                  }              }
Magic Number,Banshee.Dap.MassStorage,WebOSDevice,C:\repos\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\WebOSDevice.cs,SourceInitialize,The following statement contains a magic number: amazon_base_dir = System.IO.Path.Combine (Source.Volume.MountPoint' audio_folders[2]);
