Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeviceInitialize,Cyclomatic complexity of the method is 11
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,SyncPlaylists,Cyclomatic complexity of the method is 9
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,Cyclomatic complexity of the method is 9
Complex Method,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,Cyclomatic complexity of the method is 12
Complex Method,Banshee.Dap.MassStorage,KeyValueParser,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\KeyValueParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Banshee.Dap.MassStorage,AndroidDevice,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\AndroidDevice.cs,GetIconNames,Cyclomatic complexity of the method is 10
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeviceInitialize,The length of the statement  "			Log.Information ("Mass Storage Support Loading iPod"' "The USB mass storage audio player support is loading an iPod because it has an .is_audio_player file. " + "If you aren't running Rockbox or don't know what you're doing' things might not behave as expected."); " is 264.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddDapProperties,The length of the statement  "		AddDapProperty (String.Format (Catalog.GetPluralString ("Audio Folder"' "Audio Folders"' AudioFolders.Length)' AudioFolders.Length)' System.String.Join ("\n"' AudioFolders)); " is 174.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddDapProperties,The length of the statement  "		AddDapProperty (String.Format (Catalog.GetPluralString ("Video Folder"' "Video Folders"' VideoFolders.Length)' VideoFolders.Length)' System.String.Join ("\n"' VideoFolders)); " is 174.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,OnImportFinished,The length of the statement  "		var insert_cmd = new Hyena.Data.Sqlite.HyenaSqliteCommand ("INSERT INTO CorePlaylistEntries (PlaylistID' TrackID) VALUES (?' ?)"); " is 130.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,OnImportFinished,The length of the statement  "			string base_folder = ms_device.RootPath != null ? BaseDirectory : System.IO.Path.GetDirectoryName (SafeUri.UriToFilename (playlist_path)); " is 138.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,SyncPlaylists,The length of the statement  "			SafeUri playlist_path = new SafeUri (System.IO.Path.Combine (PlaylistsWritePath' String.Format ("{0}.{1}"' escaped_name' PlaylistTypes [0].FileExtension))); " is 156.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,The length of the statement  "	if (CoverArtSize > -1 && !String.IsNullOrEmpty (CoverArtFileType) && !String.IsNullOrEmpty (CoverArtFileName) && (FolderDepth == -1 || FolderDepth > 0)) { " is 154.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,The length of the statement  "		SafeUri cover_uri = new SafeUri (System.IO.Path.Combine (System.IO.Path.GetDirectoryName (new_uri.LocalPath)' CoverArtFileName)); " is 129.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The length of the statement  "				file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title); " is 202.
Long Statement,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The length of the statement  "						file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ()); " is 122.
Long Statement,Banshee.Dap.MassStorage,AndroidDevice,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\AndroidDevice.cs,GetTrackPath,The length of the statement  "	path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo ("%artist%%path_sep%%album%%path_sep%{%track_number%. }%title%"' track); " is 139.
Long Statement,Banshee.Dap.MassStorage,NookDevice,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\NookDevice.cs,GetTrackPath,The length of the statement  "	path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo ("%artist%%path_sep%%album%%path_sep%{%track_number%. }%title%"' track); " is 139.
Complex Conditional,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,AddTrackToDevice,The conditional expression  "CoverArtSize > -1 && !String.IsNullOrEmpty (CoverArtFileType) && !String.IsNullOrEmpty (CoverArtFileName) && (FolderDepth == -1 || FolderDepth > 0)"  is complex.
Empty Catch Block,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeleteTrackFile,The method has an empty catch block.
Empty Catch Block,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,DeleteTrackFile,The method has an empty catch block.
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.Podcast)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine ("Podcasts"' album);  	file_path = System.IO.Path.Combine (file_path' title);  } else if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine (album' title);  } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.Podcast)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine ("Podcasts"' album);  	file_path = System.IO.Path.Combine (file_path' title);  } else if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine (album' title);  } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine (album' title);  } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (track.HasAttribute (TrackMediaAttributes.VideoStream)) {  	string album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string title = FileNamePattern.Escape (track.DisplayTrackTitle);  	file_path = System.IO.Path.Combine (album' title);  } else if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (ms_device == null || !ms_device.GetTrackPath (track' out file_path)) {  	// If the folder_depth property exists' we have to put the files in a hiearchy of  	// the exact given depth (not including the mount point/audio_folder).  	if (FolderDepth != -1) {  		int depth = FolderDepth;  		bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  		string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  		string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  		string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  		string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  		if (depth == 0) {  			// Artist - Album - 01 - Title  			string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  			file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  		} else if (depth == 1) {  			// Artist - Album/01 - Title  			file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else if (depth == 2) {  			// Artist/Album/01 - Title  			file_path = album_artist;  			if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  				file_path = System.IO.Path.Combine (file_path' track_album);  			}  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		} else {  			// If the *required* depth is more than 2..go nuts!  			for (int i = 0; i < depth - 2; i++) {  				if (i == 0) {  					file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  				} else {  					file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  				}  			}  			// Finally add on the Artist/Album/01 - Track  			file_path = System.IO.Path.Combine (file_path' album_artist);  			file_path = System.IO.Path.Combine (file_path' track_album);  			file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  		}  	} else {  		file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  	}  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (FolderDepth != -1) {  	int depth = FolderDepth;  	bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  	string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  	string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  	string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  	if (depth == 0) {  		// Artist - Album - 01 - Title  		string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  		file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  	} else if (depth == 1) {  		// Artist - Album/01 - Title  		file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	} else if (depth == 2) {  		// Artist/Album/01 - Title  		file_path = album_artist;  		if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  			file_path = System.IO.Path.Combine (file_path' track_album);  		}  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	} else {  		// If the *required* depth is more than 2..go nuts!  		for (int i = 0; i < depth - 2; i++) {  			if (i == 0) {  				file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  			} else {  				file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  			}  		}  		// Finally add on the Artist/Album/01 - Track  		file_path = System.IO.Path.Combine (file_path' album_artist);  		file_path = System.IO.Path.Combine (file_path' track_album);  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	}  } else {  	file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (FolderDepth != -1) {  	int depth = FolderDepth;  	bool is_album_unknown = String.IsNullOrEmpty (track.AlbumTitle);  	string album_artist = FileNamePattern.Escape (track.DisplayAlbumArtistName);  	string track_album = FileNamePattern.Escape (track.DisplayAlbumTitle);  	string track_number = FileNamePattern.Escape (String.Format ("{0:00}"' track.TrackNumber));  	string track_title = FileNamePattern.Escape (track.DisplayTrackTitle);  	if (depth == 0) {  		// Artist - Album - 01 - Title  		string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  		file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  	} else if (depth == 1) {  		// Artist - Album/01 - Title  		file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	} else if (depth == 2) {  		// Artist/Album/01 - Title  		file_path = album_artist;  		if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  			file_path = System.IO.Path.Combine (file_path' track_album);  		}  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	} else {  		// If the *required* depth is more than 2..go nuts!  		for (int i = 0; i < depth - 2; i++) {  			if (i == 0) {  				file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  			} else {  				file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  			}  		}  		// Finally add on the Artist/Album/01 - Track  		file_path = System.IO.Path.Combine (file_path' album_artist);  		file_path = System.IO.Path.Combine (file_path' track_album);  		file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  	}  } else {  	file_path = MusicLibrarySource.MusicFileNamePattern.CreateFromTrackInfo (track);  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 0) {  	// Artist - Album - 01 - Title  	string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  	file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  } else if (depth == 1) {  	// Artist - Album/01 - Title  	file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 0) {  	// Artist - Album - 01 - Title  	string track_artist = FileNamePattern.Escape (track.DisplayArtistName);  	file_path = is_album_unknown ? String.Format ("{0} - {1} - {2}"' track_artist' track_number' track_title) : String.Format ("{0} - {1} - {2} - {3}"' track_artist' track_album' track_number' track_title);  } else if (depth == 1) {  	// Artist - Album/01 - Title  	file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 1) {  	// Artist - Album/01 - Title  	file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 1) {  	// Artist - Album/01 - Title  	file_path = is_album_unknown ? album_artist : String.Format ("{0} - {1}"' album_artist' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: if (depth == 2) {  	// Artist/Album/01 - Title  	file_path = album_artist;  	if (!is_album_unknown || ms_device.MinimumFolderDepth == depth) {  		file_path = System.IO.Path.Combine (file_path' track_album);  	}  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  } else {  	// If the *required* depth is more than 2..go nuts!  	for (int i = 0; i < depth - 2; i++) {  		if (i == 0) {  			file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  		} else {  			file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  		}  	}  	// Finally add on the Artist/Album/01 - Track  	file_path = System.IO.Path.Combine (file_path' album_artist);  	file_path = System.IO.Path.Combine (file_path' track_album);  	file_path = System.IO.Path.Combine (file_path' String.Format ("{0} - {1}"' track_number' track_title));  }  
Magic Number,Banshee.Dap.MassStorage,MassStorageSource,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\MassStorageSource.cs,GetTrackPath,The following statement contains a magic number: for (int i = 0; i < depth - 2; i++) {  	if (i == 0) {  		file_path = album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ();  	} else {  		file_path = System.IO.Path.Combine (file_path' album_artist.Substring (0' Math.Min (i + 1' album_artist.Length)).Trim ());  	}  }  
Magic Number,Banshee.Dap.MassStorage,WebOSDevice,F:\newReposMay17\GNOME_banshee\src\Dap\Banshee.Dap.MassStorage\Banshee.Dap.MassStorage\WebOSDevice.cs,SourceInitialize,The following statement contains a magic number: amazon_base_dir = System.IO.Path.Combine (Source.Volume.MountPoint' audio_folders [2]);  
