Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SortNetwork.Json.Switchables,JsonConverterForSwitchable,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Switchables\JsonConverterForSwitchable.cs,ReadJson,Cyclomatic complexity of the method is 12
Long Parameter List,SortNetwork.Results,CompetePoolGen,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\CompetePoolGen.cs,CompetePoolGen,The method has 10 parameters.
Long Parameter List,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,Make,The method has 5 parameters.
Long Parameter List,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,MakeTest,The method has 6 parameters.
Long Parameter List,SortNetwork.Results,SorterResultImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,SorterResultImpl,The method has 6 parameters.
Long Parameter List,SortNetwork.Diff,SorterDiffImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Diff\SorterDiff.cs,SorterDiffImpl,The method has 5 parameters.
Long Parameter List,SortNetwork.Diff,SorterResultDiffImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Diff\SorterResultDiff.cs,SorterResultDiffImpl,The method has 5 parameters.
Long Parameter List,SortNetwork.KeySets,KeyPair,C:\repos\tp-nscan_WpfWorklist\SortNetwork\KeySets\IKeyPair.cs,Make,The method has 5 parameters.
Long Parameter List,SortNetwork.KeySets,KeyPairImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\KeySets\IKeyPair.cs,KeyPairImpl,The method has 5 parameters.
Long Parameter List,SortNetwork.Sorters,Sorter,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Sorters\Sorter.cs,Mutate,The method has 6 parameters.
Long Parameter List,SortNetwork.Sorters,Sorter,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Sorters\Sorter.cs,MutateSeveral,The method has 6 parameters.
Long Statement,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,Make,The length of the statement  "	return new SorterResultImpl (sorter: sorter' switchResults: switchResults' countOfTests: countOfTests' successfulSorts: successfulSorts' switchesUsed: switchesUsed); " is 165.
Long Statement,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,MakeTest,The length of the statement  "	var switchResults = Enumerable.Range (0' sorter.SwitchCount).Select (i => SwitchResult.Make (index: i' keyPair: sorter.SwitchAtIndex (i).KeyPair' useCount: rnd.Next ())); " is 170.
Long Statement,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,MakeTest,The length of the statement  "	return new SorterResultImpl (sorter: sorter' switchResults: switchResults' countOfTests: countOfTests' successfulSorts: successfulSorts' switchesUsed: switchesUsed); " is 165.
Long Statement,SortNetwork.Results,SorterResult,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Results\SorterResult.cs,LongSwitchReport,The length of the statement  "		sb.Append (switchUsage.UseCount > 0 ? string.Format ("\t[{0} : {1}]"' switchUsage.KeyPair.ToLabel ()' switchUsage.UseCount) : string.Format ("\t[{0}]"' switchUsage.KeyPair.ToLabel ())); " is 185.
Long Statement,SortNetwork.Json.Results,SorterResultToJson,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Results\SorterResultToJson.cs,ToSorterResult,The length of the statement  "	return SorterResult.Make (sorter: SorterToJson.ToSorter (sorterResultToJson.Sorter)' switchResults: sorterResultToJson.SwitchResultsToJson.Select (T => T.V.ToSwitchResult (sorterResultToJson.Sorter.KeyCount))' countOfTests: sorterResultToJson.CountOfTests' successfulSorts: sorterResultToJson.SuccessfulSorts' switchesUsed: sorterResultToJson.SwitchesUsed); " is 357.
Long Statement,SortNetwork.Json.Results,SwitchResultToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Results\SwitchResultToJson.cs,ToSwitchResult,The length of the statement  "	return SwitchResult.Make (int.Parse (pcs [0])' KeySet.Instance.GetKeyPair (int.Parse (pcs [1])' int.Parse (pcs [2])' keyCount)' int.Parse (pcs [3])); " is 149.
Long Statement,SortNetwork.Json.Results,SwitchResultToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Results\SwitchResultToJson.cs,ToShortString,The length of the statement  "	return string.Format ("{0} {1} {2} {3}"' @switch.Index' @switch.KeyPair.LowKey' @switch.KeyPair.HiKey' @switch.UseCount); " is 121.
Long Statement,SortNetwork.Json.Sorters,SwitchToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Sorters\SwitchToJson.cs,ToSwitch,The length of the statement  "	return Switch.Make (int.Parse (pcs [0])' KeySet.Instance.GetKeyPair (int.Parse (pcs [1])' int.Parse (pcs [2])' keyCount)); " is 122.
Long Statement,SortNetwork.Sorters,Sorter,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Sorters\Sorter.cs,StringValue,The length of the statement  "	return sorter.Switches.Aggregate (string.Empty' (s' bv) => s + (string.IsNullOrEmpty (s) ? string.Empty : "'  ") + bv.KeyPair.ToLabel ()); " is 138.
Long Statement,SortNetwork.Sorters,Sorter,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Sorters\Sorter.cs,Mutate,The length of the statement  "	return sorterMaker (rndIdMaker.Next ()' sorter.Switches.Select (T => Switch.Make (T.Index' mutateOrNot.Next () ? T.KeyPair.Mutate (rndSwitchSelector) : T.KeyPair))); " is 165.
Long Statement,SortNetwork.Switchables,SwitchableBitArray,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,AllForKeyCount,The length of the statement  "	return SortableBitArrayUtils.AllBitSetsOfLength (keyCount).Select (bits => new SwitchableBitArrayImpl (bits' keyCount)); " is 120.
Long Statement,SortNetwork.TestData,TestSorterResults,C:\repos\tp-nscan_WpfWorklist\SortNetwork\TestData\TestSorterResults.cs,SorterResult,The length of the statement  "	return SortNetwork.Results.SorterResult.MakeTest (sorter: TestData.TestSorters.Sorter (seed' guid)' rndSeed: seed' countOfTests: TestConstants.ResultTestCount' switchesUsed: TestConstants.SwitchesPerSorter' successfulSorts: TestConstants.ResultTestCount); " is 255.
Long Statement,SortNetwork.TestData,TestSorterResults,C:\repos\tp-nscan_WpfWorklist\SortNetwork\TestData\TestSorterResults.cs,SorterResultRepo,The length of the statement  "	return Enumerable.Range (0' TestConstants.SorterCount).Select (i => SorterResult (rndInt.Next ()' rndGuid.Next ())).ToSorterResultRepo (); " is 138.
Long Statement,SortNetwork.TestData,TestSorters,C:\repos\tp-nscan_WpfWorklist\SortNetwork\TestData\TestSorters.cs,Sorter,The length of the statement  "	return KeySet.Instance.AllKeyPairsForKeyCount (TestConstants.KeyCount).RandomDraw (Randy.Fast (seed).ToInt ()' TestConstants.SwitchesPerSorter).ToSorter (guid); " is 160.
Long Statement,SortNetwork.TestData,TestSorters,C:\repos\tp-nscan_WpfWorklist\SortNetwork\TestData\TestSorters.cs,SorterRepo,The length of the statement  "	return KeySet.Instance.AllKeyPairsForKeyCount (TestConstants.KeyCount).RandomDraw (Randy.Fast (seed).ToInt ()).ToSorters (TestConstants.SwitchesPerSorter' TestConstants.SorterCount' Randy.Fast (seed).ToGuid ()).ToSorterRepo (); " is 227.
Long Statement,SortNetwork.TestData,TestSwitchable,C:\repos\tp-nscan_WpfWorklist\SortNetwork\TestData\TestSwitchable.cs,SwitchableRepo,The length of the statement  "	return SwitchableBitArray.MakeRandoms (keyCount: TestConstants.KeyCount' random: Randy.Fast (seed)' itemCount: TestConstants.SwitchableCount).ToSwitchableRepo (); " is 162.
Magic Number,SortNetwork.Json.Results,SwitchResultToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Results\SwitchResultToJson.cs,ToSwitchResult,The following statement contains a magic number: return SwitchResult.Make (int.Parse (pcs [0])' KeySet.Instance.GetKeyPair (int.Parse (pcs [1])' int.Parse (pcs [2])' keyCount)' int.Parse (pcs [3]));  
Magic Number,SortNetwork.Json.Results,SwitchResultToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Results\SwitchResultToJson.cs,ToSwitchResult,The following statement contains a magic number: return SwitchResult.Make (int.Parse (pcs [0])' KeySet.Instance.GetKeyPair (int.Parse (pcs [1])' int.Parse (pcs [2])' keyCount)' int.Parse (pcs [3]));  
Magic Number,SortNetwork.Json.Sorters,SwitchToJsonEx,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Json\Sorters\SwitchToJson.cs,ToSwitch,The following statement contains a magic number: return Switch.Make (int.Parse (pcs [0])' KeySet.Instance.GetKeyPair (int.Parse (pcs [1])' int.Parse (pcs [2])' keyCount));  
Magic Number,SortNetwork.Switchables,SwitchableBitArray,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,MakeRandoms,The following statement contains a magic number: for (var i = 0; i < itemCount; i++) {  	yield return Make (Generators.RandomBits (keyCount' random.ToBool ()' 0.5).Take (keyCount)' keyCount);  }  
Magic Number,SortNetwork.Switchables,SwitchableBitArray,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,MakeRandoms,The following statement contains a magic number: yield return Make (Generators.RandomBits (keyCount' random.ToBool ()' 0.5).Take (keyCount)' keyCount);  
Magic Number,SortNetwork.Switchables,SwitchableBitArray,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,MakeRandom,The following statement contains a magic number: return Make (Generators.RandomBits (keyCount' random' 0.5).Take (keyCount)' keyCount);  
Magic Number,SortNetwork.Switchables,SwitchableBitArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Values.Aggregate (1' (current' value) => (current * 397) ^ (value ? 3 : 1));  	//var hashCode = 1;  	//foreach (var value in Values)  	//{  	//    hashCode = (hashCode * 397) ^ (value ? 3 : 1);  	//}  	//return hashCode;  }  
Magic Number,SortNetwork.Switchables,SwitchableBitArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Values.Aggregate (1' (current' value) => (current * 397) ^ (value ? 3 : 1));  	//var hashCode = 1;  	//foreach (var value in Values)  	//{  	//    hashCode = (hashCode * 397) ^ (value ? 3 : 1);  	//}  	//return hashCode;  }  
Magic Number,SortNetwork.Switchables,SwitchableBitArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,GetHashCode,The following statement contains a magic number: return Values.Aggregate (1' (current' value) => (current * 397) ^ (value ? 3 : 1));  
Magic Number,SortNetwork.Switchables,SwitchableBitArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableBitArray.cs,GetHashCode,The following statement contains a magic number: return Values.Aggregate (1' (current' value) => (current * 397) ^ (value ? 3 : 1));  
Magic Number,SortNetwork.Switchables,SwitchableIntArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableIntArray.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return Values.Aggregate (1' (current' value) => (current * 397) ^ value);  }  
Magic Number,SortNetwork.Switchables,SwitchableIntArrayImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableIntArray.cs,GetHashCode,The following statement contains a magic number: return Values.Aggregate (1' (current' value) => (current * 397) ^ value);  
Magic Number,SortNetwork.Switchables,SwitchableShort,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,MakeRandom,The following statement contains a magic number: return Make (Generators.RandomBits (16' random' 0.5).ToArray ().ToUshort ());  
Magic Number,SortNetwork.Switchables,SwitchableShort,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,MakeRandom,The following statement contains a magic number: return Make (Generators.RandomBits (16' random' 0.5).ToArray ().ToUshort ());  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: for (int i = 0; i < 65536; i++) {  	values [i] = new SwitchableShortImpl ((ushort)i);  }  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [32768] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [49152] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [57344] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [61440] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [63488] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [64512] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65024] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65280] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65408] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65472] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65504] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65520] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65528] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65532] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65534] = true;  
Magic Number,SortNetwork.Switchables,SwitchableShortImpl,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,SwitchableShortImpl,The following statement contains a magic number: isSortedMap [65535] = true;  
Magic Number,SortNetwork.Switchables,ShortSwitchMaps,C:\repos\tp-nscan_WpfWorklist\SortNetwork\Switchables\SwitchableShort.cs,MakeMap,The following statement contains a magic number: for (var i = 0; i < 65536; i++) {  	retMap [i] = SwitchableShort.Make (((ushort)i).SortBitPair (lowBit' hiBit));  }  
