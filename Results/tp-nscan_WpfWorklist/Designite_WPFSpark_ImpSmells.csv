Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,Cyclomatic complexity of the method is 15
Complex Method,WPFSpark,FluidStatusBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidStatusBar\FluidStatusBar.xaml.cs,OnFadeOutDirectionChanged,Cyclomatic complexity of the method is 13
Complex Method,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,Cyclomatic complexity of the method is 13
Complex Method,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetIndexFromCell,Cyclomatic complexity of the method is 9
Complex Method,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetCellFromIndex,Cyclomatic complexity of the method is 11
Complex Method,WPFSpark,FluidMouseDragBehavior,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidMouseDragBehavior.cs,OnPreviewMouseMove,Cyclomatic complexity of the method is 25
Complex Method,WPFSpark,FluidWrapPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidWrapPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 14
Complex Method,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,Cyclomatic complexity of the method is 14
Complex Method,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,Cyclomatic complexity of the method is 22
Complex Method,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,Cyclomatic complexity of the method is 13
Complex Method,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,Cyclomatic complexity of the method is 10
Long Parameter List,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,Initialize,The method has 5 parameters.
Long Parameter List,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CreateTransform,The method has 5 parameters.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	//baseRect = new Rect(baseRect.Location.X' baseRect.Location.Y' baseRect.Width + leftHalf + rightHalf' baseRect.Height + topHalf + bottomHalf); " is 143.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	double tolerance = baseRect.Height < baseRect.Width ? baseRect.Height / baseRect.Width : baseRect.Width / baseRect.Height; " is 122.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	Rect topLeftRect = new Rect (baseRect.Location.X - tolerance' baseRect.Location.Y - tolerance' Math.Max (0.0' cornerRadius.TopLeft - leftHalf)' Math.Max (0.0' cornerRadius.TopLeft - topHalf)); " is 192.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	Rect topRightRect = new Rect (baseRect.Location.X + baseRect.Width - cornerRadius.TopRight + rightHalf + tolerance' baseRect.Location.Y - tolerance' Math.Max (0.0' cornerRadius.TopRight - rightHalf)' Math.Max (0.0' cornerRadius.TopRight - topHalf)); " is 249.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	Rect bottomRightRect = new Rect (baseRect.Location.X + baseRect.Width - cornerRadius.BottomRight + rightHalf + tolerance' baseRect.Location.Y + baseRect.Height - cornerRadius.BottomRight + bottomHalf + tolerance' Math.Max (0.0' cornerRadius.BottomRight - rightHalf)' Math.Max (0.0' cornerRadius.BottomRight - bottomHalf)); " is 322.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	Rect bottomLeftRect = new Rect (baseRect.Location.X - tolerance' baseRect.Location.Y + baseRect.Height - cornerRadius.BottomLeft + bottomHalf + tolerance' Math.Max (0.0' cornerRadius.BottomLeft - leftHalf)' Math.Max (0.0' cornerRadius.BottomLeft - bottomHalf)); " is 261.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "		topRightRect = new Rect (baseRect.Left + newWidth' topRightRect.Location.Y' Math.Max (0.0' baseRect.Width - newWidth)' topRightRect.Height); " is 140.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	// Adjust the height of the TopRight and BottomRight rectangles so that they are proportional to the height of the baseRect " is 123.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "		bottomRightRect = new Rect (bottomRightRect.Location.X' baseRect.Top + newHeight' bottomRightRect.Width' Math.Max (0.0' baseRect.Height - newHeight)); " is 150.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	// Adjust the width of the BottomLeft and BottomRight rectangles so that they are proportional to the width of the baseRect " is 123.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "		bottomRightRect = new Rect (baseRect.Left + newWidth' bottomRightRect.Location.Y' Math.Max (0.0' baseRect.Width - newWidth)' bottomRightRect.Height); " is 149.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "	// Adjust the height of the TopLeft and BottomLeft rectangles so that they are proportional to the height of the baseRect " is 121.
Long Statement,WPFSpark,GeometryHelper,C:\repos\tp-nscan_WpfWorklist\WPFSpark\Common\GeometryHelper.cs,GetRoundRectangle,The length of the statement  "		bottomLeftRect = new Rect (bottomLeftRect.Location.X' baseRect.Top + newHeight' bottomLeftRect.Width' Math.Max (0.0' baseRect.Height - newHeight)); " is 147.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,AddChild,The length of the statement  "					double newLocationX = ((TranslateTransform)(((TransformGroup)headerCollection [index].RenderTransform).Children [0])).X; " is 120.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,MoveForward,The length of the statement  "		double distanceToMove = ((TranslateTransform)(((TransformGroup)headerCollection [count].RenderTransform).Children [0])).X; " is 122.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,MoveForward,The length of the statement  "			Storyboard transition = CreateTransition (child' new Point (newTranslationX' 0.0)' TimeSpan.FromMilliseconds (TRANSITION_DURATION)' easingFn); " is 142.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,MoveBack,The length of the statement  "		double distanceToMove = ((TranslateTransform)(((TransformGroup)headerCollection [headerCollection.Count - 1].RenderTransform).Children [0])).X - ((TranslateTransform)(((TransformGroup)headerCollection [headerCollection.Count - count].RenderTransform).Children [0])).X + headerCollection [headerCollection.Count - 1].DesiredSize.Width; " is 334.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,MoveBack,The length of the statement  "			Storyboard transition = CreateTransition (child' new Point (newTranslationX' 0.0)' TimeSpan.FromMilliseconds (TRANSITION_DURATION)' null); " is 138.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,GetNextAvailablePosition,The length of the statement  "		transX = ((TranslateTransform)(((TransformGroup)lastChild.RenderTransform).Children [0])).X + lastChild.DesiredSize.Width; " is 122.
Long Statement,WPFSpark,PivotHeaderPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotHeaderPanel.cs,CreateTransition,The length of the statement  "	Storyboard.SetTargetProperty (translateAnimationX' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)")); " is 153.
Long Statement,WPFSpark,PivotPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotPanel.cs,UpdatePivotItemHeader,The length of the statement  "	if ((pivotItems.Contains (item)) && (item.PivotHeader != null) && (!headerPanel.Contains ((UIElement)item.PivotHeader))) { " is 122.
Long Statement,WPFSpark,PivotPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotPanel.cs,UpdatePivotItemContent,The length of the statement  "	if ((pivotItems.Contains (item)) && (item.PivotContent != null) && (!rootGrid.Children.Contains ((UIElement)item.PivotContent))) { " is 130.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,Initialize,The length of the statement  "	if ((panelSize.Width != panelWidth) || (panelSize.Height != panelHeight) || (cellSize.Width != cellWidth) || (cellSize.Height != cellHeight)) { " is 143.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CreateTransition,The length of the statement  "	Storyboard.SetTargetProperty (translateAnimationX' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)")); " is 153.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CreateTransition,The length of the statement  "	Storyboard.SetTargetProperty (translateAnimationY' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.Y)")); " is 153.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CreateTransition,The length of the statement  "	Storyboard.SetTargetProperty (scaleAnimationX' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)")); " is 150.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CreateTransition,The length of the statement  "	Storyboard.SetTargetProperty (scaleAnimationY' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)")); " is 150.
Long Statement,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,CalculateCellsPerLine,The length of the statement  "	double count = (panelOrientation == Orientation.Horizontal) ? panelSize.Width / cellSize.Width : panelSize.Height / cellSize.Height; " is 132.
Long Statement,WPFSpark,FluidWrapPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidWrapPanel.cs,UpdateFluidLayout,The length of the statement  "				TimeSpan duration = (ElementEasing != null) ? DEFAULT_ANIMATION_TIME_WITH_EASING : DEFAULT_ANIMATION_TIME_WITHOUT_EASING; " is 121.
Long Statement,WPFSpark,FluidWrapPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidWrapPanel.cs,FluidDrag,The length of the statement  "			dragElement.RenderTransform = layoutManager.CreateTransform (positionInParent.X - dragStartPoint.X' positionInParent.Y - dragStartPoint.Y' DragScale' DragScale); " is 161.
Long Statement,WPFSpark,FluidWrapPanel,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidWrapPanel.cs,EndFluidDrag,The length of the statement  "			dragElement.RenderTransform = layoutManager.CreateTransform (positionInParent.X - dragStartPoint.X' positionInParent.Y - dragStartPoint.Y' DragScale' DragScale); " is 161.
Long Statement,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The length of the statement  "		Point pt1 = new Point (innerRadius * (float)Math.Cos (ConvertDegreesToRadians (angle))' innerRadius * (float)Math.Sin (ConvertDegreesToRadians (angle))); " is 153.
Long Statement,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The length of the statement  "		Point pt2 = new Point (outerRadius * (float)Math.Cos (ConvertDegreesToRadians (angle))' outerRadius * (float)Math.Sin (ConvertDegreesToRadians (angle))); " is 153.
Long Statement,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRender,The length of the statement  "		Pen p = new Pen (new SolidColorBrush (Color.FromArgb (alpha' this.TickColor.R' this.TickColor.G' this.TickColor.B))' TickWidth); " is 128.
Long Statement,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateContentBorderMargin,The length of the statement  "		contentBorder.Margin = new Thickness (-(this.Width * contentBorderMargin) + 1' 0' -(this.Width * contentBorderMargin) + 1' 0); " is 126.
Complex Conditional,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,Initialize,The conditional expression  "(panelSize.Width != panelWidth) || (panelSize.Height != panelHeight) || (cellSize.Width != cellWidth) || (cellSize.Height != cellHeight)"  is complex.
Complex Conditional,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetIndexFromPoint,The conditional expression  "(p.X > 0.00D) && (p.X < panelSize.Width) && (p.Y > 0.00D) && (p.Y < panelSize.Height)"  is complex.
Complex Conditional,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetCellFromPoint,The conditional expression  "(p.X < 0.00D) || (p.X > panelSize.Width) || (p.Y < 0.00D) || (p.Y > panelSize.Height)"  is complex.
Magic Number,WPFSpark,PivotContentControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotContentControl.cs,PivotContentControl,The following statement contains a magic number: slideInAnimation.From = new Thickness (200' 0' 0' 0);  
Magic Number,WPFSpark,PivotContentControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidPivotPanel\PivotContentControl.cs,PivotContentControl,The following statement contains a magic number: slideInAnimation.Duration = new Duration (TimeSpan.FromSeconds (0.3));  
Magic Number,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,The following statement contains a magic number: halfRows = (int)((double)maxRows / (double)2);  
Magic Number,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,The following statement contains a magic number: if ((maxRows % 2) == 0) {  	isTop = row < halfRows;  }  // Odd number of rows  else {  	if (row == halfRows) {  		isCenterHeight = true;  		isTop = false;  	}  	else {  		isTop = row < halfRows;  	}  }  
Magic Number,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,The following statement contains a magic number: halfCols = (int)((double)maxCols / (double)2);  
Magic Number,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,The following statement contains a magic number: if ((maxCols % 2) == 0) {  	isLeft = column < halfCols;  }  // Odd number of columns  else {  	if (column == halfCols) {  		isCenterWidth = true;  		isLeft = false;  	}  	else {  		isLeft = column < halfCols;  	}  }  
Magic Number,WPFSpark,FluidLayoutManager,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidWrapPanel\FluidLayoutManager.cs,GetInitialLocationOfChild,The following statement contains a magic number: if (isCenterHeight && isCenterWidth) {  	double posX = (halfCols) * cellSize.Width;  	double posY = (halfRows + 2) * cellSize.Height;  	return new Point (posX' posY);  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,OnDurationBChanged,The following statement contains a magic number: UpdateKeyTimes (2' newDurationB);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,OnDurationCChanged,The following statement contains a magic number: UpdateKeyTimes (3' newDurationC);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: if ((width > 0.0) && (this.Visibility == System.Windows.Visibility.Visible)) {  	double Point0 = -10;  	double PointA = width * KeyFrameA;  	double PointB = width * KeyFrameB;  	double PointC = width + 10;  	// Update the keyframes stored in the map  	UpdateKeyFrame (0' Point0);  	UpdateKeyFrame (1' PointA);  	UpdateKeyFrame (2' PointB);  	UpdateKeyFrame (3' PointC);  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: if ((width > 0.0) && (this.Visibility == System.Windows.Visibility.Visible)) {  	double Point0 = -10;  	double PointA = width * KeyFrameA;  	double PointB = width * KeyFrameB;  	double PointC = width + 10;  	// Update the keyframes stored in the map  	UpdateKeyFrame (0' Point0);  	UpdateKeyFrame (1' PointA);  	UpdateKeyFrame (2' PointB);  	UpdateKeyFrame (3' PointC);  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: if ((width > 0.0) && (this.Visibility == System.Windows.Visibility.Visible)) {  	double Point0 = -10;  	double PointA = width * KeyFrameA;  	double PointB = width * KeyFrameB;  	double PointC = width + 10;  	// Update the keyframes stored in the map  	UpdateKeyFrame (0' Point0);  	UpdateKeyFrame (1' PointA);  	UpdateKeyFrame (2' PointB);  	UpdateKeyFrame (3' PointC);  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: if ((width > 0.0) && (this.Visibility == System.Windows.Visibility.Visible)) {  	double Point0 = -10;  	double PointA = width * KeyFrameA;  	double PointB = width * KeyFrameB;  	double PointC = width + 10;  	// Update the keyframes stored in the map  	UpdateKeyFrame (0' Point0);  	UpdateKeyFrame (1' PointA);  	UpdateKeyFrame (2' PointB);  	UpdateKeyFrame (3' PointC);  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: UpdateKeyFrame (2' PointB);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyFrames,The following statement contains a magic number: UpdateKeyFrame (3' PointC);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: switch (key) {  case 1:  	UpdateKeyTime (1' newDuration);  	UpdateKeyTime (2' newDuration + DurationB);  	UpdateKeyTime (3' newDuration + DurationB + DurationC);  	break;  case 2:  	UpdateKeyTime (2' DurationA + newDuration);  	UpdateKeyTime (3' DurationA + newDuration + DurationC);  	break;  case 3:  	UpdateKeyTime (3' DurationA + DurationB + newDuration);  	break;  default:  	break;  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: UpdateKeyTime (2' newDuration + DurationB);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: UpdateKeyTime (3' newDuration + DurationB + DurationC);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: UpdateKeyTime (2' DurationA + newDuration);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: UpdateKeyTime (3' DurationA + newDuration + DurationC);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateKeyTimes,The following statement contains a magic number: UpdateKeyTime (3' DurationA + DurationB + newDuration);  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateTimelineDelay,The following statement contains a magic number: if (sb != null) {  	for (int i = 0; i < sb.Children.Count; i++) {  		// The first five animations are for translation  		// The next five animations are for opacity  		if (i == 5)  			nextDelay = newDelay;  		else  			nextDelay += newDelay;  		DoubleAnimationUsingKeyFrames timeline = sb.Children [i] as DoubleAnimationUsingKeyFrames;  		if (timeline != null) {  			timeline.SetValue (DoubleAnimationUsingKeyFrames.BeginTimeProperty' nextDelay.TimeSpan);  		}  	}  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateTimelineDelay,The following statement contains a magic number: for (int i = 0; i < sb.Children.Count; i++) {  	// The first five animations are for translation  	// The next five animations are for opacity  	if (i == 5)  		nextDelay = newDelay;  	else  		nextDelay += newDelay;  	DoubleAnimationUsingKeyFrames timeline = sb.Children [i] as DoubleAnimationUsingKeyFrames;  	if (timeline != null) {  		timeline.SetValue (DoubleAnimationUsingKeyFrames.BeginTimeProperty' nextDelay.TimeSpan);  	}  }  
Magic Number,WPFSpark,FluidProgressBar,C:\repos\tp-nscan_WpfWorklist\WPFSpark\FluidProgressBar\FluidProgressBar.xaml.cs,UpdateTimelineDelay,The following statement contains a magic number: if (i == 5)  	nextDelay = newDelay;  else  	nextDelay += newDelay;  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: switch (winMode) {  // Only close button should be visible if the mode is CanClose/PaneCanClose  case WindowMode.CanClose:  case WindowMode.PaneCanClose:  	if (minimizeButton != null)  		minimizeButton.Visibility = Visibility.Collapsed;  	if (maximizeButton != null)  		maximizeButton.Visibility = Visibility.Collapsed;  	break;  // Only minimize and close buttons should be visible if the mode is Pane/CanMinimize  case WindowMode.Pane:  case WindowMode.CanMinimize:  default:  	if (minimizeButton != null) {  		minimizeButton.Visibility = Visibility.Visible;  		Grid.SetColumn (minimizeButton' 3);  	}  	if (maximizeButton != null)  		maximizeButton.Visibility = Visibility.Collapsed;  	break;  // All buttons - minimize' maximize and close will be visible if the mode is CanMaximize  case WindowMode.CanMaximize:  	if (minimizeButton != null) {  		minimizeButton.Visibility = Visibility.Visible;  		Grid.SetColumn (minimizeButton' 2);  	}  	if (maximizeButton != null) {  		maximizeButton.Visibility = Visibility.Visible;  	}  	break;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: switch (winMode) {  // Only close button should be visible if the mode is CanClose/PaneCanClose  case WindowMode.CanClose:  case WindowMode.PaneCanClose:  	if (minimizeButton != null)  		minimizeButton.Visibility = Visibility.Collapsed;  	if (maximizeButton != null)  		maximizeButton.Visibility = Visibility.Collapsed;  	break;  // Only minimize and close buttons should be visible if the mode is Pane/CanMinimize  case WindowMode.Pane:  case WindowMode.CanMinimize:  default:  	if (minimizeButton != null) {  		minimizeButton.Visibility = Visibility.Visible;  		Grid.SetColumn (minimizeButton' 3);  	}  	if (maximizeButton != null)  		maximizeButton.Visibility = Visibility.Collapsed;  	break;  // All buttons - minimize' maximize and close will be visible if the mode is CanMaximize  case WindowMode.CanMaximize:  	if (minimizeButton != null) {  		minimizeButton.Visibility = Visibility.Visible;  		Grid.SetColumn (minimizeButton' 2);  	}  	if (maximizeButton != null) {  		maximizeButton.Visibility = Visibility.Visible;  	}  	break;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: if (minimizeButton != null) {  	minimizeButton.Visibility = Visibility.Visible;  	Grid.SetColumn (minimizeButton' 3);  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: Grid.SetColumn (minimizeButton' 3);  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: if (minimizeButton != null) {  	minimizeButton.Visibility = Visibility.Visible;  	Grid.SetColumn (minimizeButton' 2);  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateWindowFrame,The following statement contains a magic number: Grid.SetColumn (minimizeButton' 2);  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: if (IsAboutEnabled) {  	// Show the About button  	aboutButton.Visibility = Visibility.Visible;  	// Set the location of the about button based   	// on the visibility of the minimize and maximize buttons  	switch (WindowFrameMode) {  	case WindowMode.CanClose:  	case WindowMode.PaneCanClose:  		Grid.SetColumn (aboutButton' 3);  		break;  	case WindowMode.Pane:  	case WindowMode.CanMinimize:  		Grid.SetColumn (aboutButton' 2);  		break;  	case WindowMode.CanMaximize:  	default:  		Grid.SetColumn (aboutButton' 1);  		break;  	}  }  else {  	// Hide the About button  	aboutButton.Visibility = Visibility.Collapsed;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: if (IsAboutEnabled) {  	// Show the About button  	aboutButton.Visibility = Visibility.Visible;  	// Set the location of the about button based   	// on the visibility of the minimize and maximize buttons  	switch (WindowFrameMode) {  	case WindowMode.CanClose:  	case WindowMode.PaneCanClose:  		Grid.SetColumn (aboutButton' 3);  		break;  	case WindowMode.Pane:  	case WindowMode.CanMinimize:  		Grid.SetColumn (aboutButton' 2);  		break;  	case WindowMode.CanMaximize:  	default:  		Grid.SetColumn (aboutButton' 1);  		break;  	}  }  else {  	// Hide the About button  	aboutButton.Visibility = Visibility.Collapsed;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: switch (WindowFrameMode) {  case WindowMode.CanClose:  case WindowMode.PaneCanClose:  	Grid.SetColumn (aboutButton' 3);  	break;  case WindowMode.Pane:  case WindowMode.CanMinimize:  	Grid.SetColumn (aboutButton' 2);  	break;  case WindowMode.CanMaximize:  default:  	Grid.SetColumn (aboutButton' 1);  	break;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: switch (WindowFrameMode) {  case WindowMode.CanClose:  case WindowMode.PaneCanClose:  	Grid.SetColumn (aboutButton' 3);  	break;  case WindowMode.Pane:  case WindowMode.CanMinimize:  	Grid.SetColumn (aboutButton' 2);  	break;  case WindowMode.CanMaximize:  default:  	Grid.SetColumn (aboutButton' 1);  	break;  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: Grid.SetColumn (aboutButton' 3);  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateAboutButton,The following statement contains a magic number: Grid.SetColumn (aboutButton' 2);  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: foreach (EventTrigger trigger in tb.Triggers) {  	if (trigger.RoutedEvent.Name == "TargetUpdated") {  		if ((trigger.Actions != null) && (trigger.Actions.Count > 0)) {  			BeginStoryboard bsb = trigger.Actions [0] as BeginStoryboard;  			if (bsb != null) {  				foreach (Timeline timeLine in bsb.Storyboard.Children) {  					ThicknessAnimation anim = timeLine as ThicknessAnimation;  					if (anim != null) {  						Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  						anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  						anim.SetValue (ThicknessAnimation.ToProperty' margin);  					}  				}  			}  		}  	}  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: if (trigger.RoutedEvent.Name == "TargetUpdated") {  	if ((trigger.Actions != null) && (trigger.Actions.Count > 0)) {  		BeginStoryboard bsb = trigger.Actions [0] as BeginStoryboard;  		if (bsb != null) {  			foreach (Timeline timeLine in bsb.Storyboard.Children) {  				ThicknessAnimation anim = timeLine as ThicknessAnimation;  				if (anim != null) {  					Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  					anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  					anim.SetValue (ThicknessAnimation.ToProperty' margin);  				}  			}  		}  	}  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: if ((trigger.Actions != null) && (trigger.Actions.Count > 0)) {  	BeginStoryboard bsb = trigger.Actions [0] as BeginStoryboard;  	if (bsb != null) {  		foreach (Timeline timeLine in bsb.Storyboard.Children) {  			ThicknessAnimation anim = timeLine as ThicknessAnimation;  			if (anim != null) {  				Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  				anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  				anim.SetValue (ThicknessAnimation.ToProperty' margin);  			}  		}  	}  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: if (bsb != null) {  	foreach (Timeline timeLine in bsb.Storyboard.Children) {  		ThicknessAnimation anim = timeLine as ThicknessAnimation;  		if (anim != null) {  			Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  			anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  			anim.SetValue (ThicknessAnimation.ToProperty' margin);  		}  	}  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: foreach (Timeline timeLine in bsb.Storyboard.Children) {  	ThicknessAnimation anim = timeLine as ThicknessAnimation;  	if (anim != null) {  		Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  		anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  		anim.SetValue (ThicknessAnimation.ToProperty' margin);  	}  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,UpdateTriggerMargin,The following statement contains a magic number: if (anim != null) {  	Thickness startThickness = new Thickness (margin.Left + 200' margin.Top' margin.Right' margin.Bottom);  	anim.SetValue (ThicknessAnimation.FromProperty' startThickness);  	anim.SetValue (ThicknessAnimation.ToProperty' margin);  }  
Magic Number,WPFSpark,SparkWindow,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SparkWindow\SparkWindow.cs,OnTitleBarMouseDown,The following statement contains a magic number: if (WindowFrameMode == WindowMode.CanMaximize && e.ClickCount == 2) {  	ToggleMaximize ();  	return;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceProgress,The following statement contains a magic number: if (progress < 0.0) {  	return 0.0;  }  else if (progress > 100.0) {  	return 100.0;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceProgress,The following statement contains a magic number: if (progress < 0.0) {  	return 0.0;  }  else if (progress > 100.0) {  	return 100.0;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceProgress,The following statement contains a magic number: if (progress > 100.0) {  	return 100.0;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceProgress,The following statement contains a magic number: if (progress > 100.0) {  	return 100.0;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceProgress,The following statement contains a magic number: return 100.0;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceAlphaTicksPercentage,The following statement contains a magic number: if (desiredAlphaTicksPercentage > 100.0)  	return 100.0;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceAlphaTicksPercentage,The following statement contains a magic number: if (desiredAlphaTicksPercentage > 100.0)  	return 100.0;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CoerceAlphaTicksPercentage,The following statement contains a magic number: return 100.0;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,ConvertDegreesToRadians,The following statement contains a magic number: return ((Math.PI / (double)180) * degrees);  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The following statement contains a magic number: angleIncrement = (360 / (double)TickCount);  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The following statement contains a magic number: alphaChange = (int)((double)(255 - LowestAlpha) / (double)((AlphaTicksPercentage / 100.0) * TickCount));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The following statement contains a magic number: alphaChange = (int)((double)(255 - LowestAlpha) / (double)((AlphaTicksPercentage / 100.0) * TickCount));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The following statement contains a magic number: centerPoint = new Point (this.Width / 2' this.Height / 2);  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,CalculateSpokesPoints,The following statement contains a magic number: centerPoint = new Point (this.Width / 2' this.Height / 2);  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < TickCount; i++) {  	if (!IsIndeterminate) {  		if (progressSpokes > 0)  			alpha = (byte)(i < progressSpokes ? 255 : DEFAULT_PROGRESS_ALPHA);  		else  			alpha = (byte)DEFAULT_PROGRESS_ALPHA;  	}  	Pen p = new Pen (new SolidColorBrush (Color.FromArgb (alpha' this.TickColor.R' this.TickColor.G' this.TickColor.B))' TickWidth);  	p.StartLineCap = p.EndLineCap = TickStyle;  	dc.DrawLine (p' spokes [i].StartPoint' spokes [i].EndPoint);  	if (IsIndeterminate) {  		alpha -= (byte)alphaChange;  		if (alpha < LowestAlpha)  			alpha = (byte)LowestAlpha;  	}  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRender,The following statement contains a magic number: if (!IsIndeterminate) {  	if (progressSpokes > 0)  		alpha = (byte)(i < progressSpokes ? 255 : DEFAULT_PROGRESS_ALPHA);  	else  		alpha = (byte)DEFAULT_PROGRESS_ALPHA;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRender,The following statement contains a magic number: if (progressSpokes > 0)  	alpha = (byte)(i < progressSpokes ? 255 : DEFAULT_PROGRESS_ALPHA);  else  	alpha = (byte)DEFAULT_PROGRESS_ALPHA;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRender,The following statement contains a magic number: alpha = (byte)(i < progressSpokes ? 255 : DEFAULT_PROGRESS_ALPHA);  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: this.Dispatcher.BeginInvoke (new Action (() =>  {  	if (Rotation == Direction.CLOCKWISE) {  		renderStartAngle += angleIncrement;  		if (renderStartAngle >= 360)  			renderStartAngle -= 360;  	}  	else if (Rotation == Direction.ANTICLOCKWISE) {  		renderStartAngle -= angleIncrement;  		if (renderStartAngle <= -360)  			renderStartAngle += 360;  	}  	// Force re-rendering of control  	InvalidateVisual ();  }));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: this.Dispatcher.BeginInvoke (new Action (() =>  {  	if (Rotation == Direction.CLOCKWISE) {  		renderStartAngle += angleIncrement;  		if (renderStartAngle >= 360)  			renderStartAngle -= 360;  	}  	else if (Rotation == Direction.ANTICLOCKWISE) {  		renderStartAngle -= angleIncrement;  		if (renderStartAngle <= -360)  			renderStartAngle += 360;  	}  	// Force re-rendering of control  	InvalidateVisual ();  }));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: this.Dispatcher.BeginInvoke (new Action (() =>  {  	if (Rotation == Direction.CLOCKWISE) {  		renderStartAngle += angleIncrement;  		if (renderStartAngle >= 360)  			renderStartAngle -= 360;  	}  	else if (Rotation == Direction.ANTICLOCKWISE) {  		renderStartAngle -= angleIncrement;  		if (renderStartAngle <= -360)  			renderStartAngle += 360;  	}  	// Force re-rendering of control  	InvalidateVisual ();  }));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: this.Dispatcher.BeginInvoke (new Action (() =>  {  	if (Rotation == Direction.CLOCKWISE) {  		renderStartAngle += angleIncrement;  		if (renderStartAngle >= 360)  			renderStartAngle -= 360;  	}  	else if (Rotation == Direction.ANTICLOCKWISE) {  		renderStartAngle -= angleIncrement;  		if (renderStartAngle <= -360)  			renderStartAngle += 360;  	}  	// Force re-rendering of control  	InvalidateVisual ();  }));  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	renderStartAngle += angleIncrement;  	if (renderStartAngle >= 360)  		renderStartAngle -= 360;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	renderStartAngle += angleIncrement;  	if (renderStartAngle >= 360)  		renderStartAngle -= 360;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	renderStartAngle += angleIncrement;  	if (renderStartAngle >= 360)  		renderStartAngle -= 360;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	renderStartAngle += angleIncrement;  	if (renderStartAngle >= 360)  		renderStartAngle -= 360;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (renderStartAngle >= 360)  	renderStartAngle -= 360;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (renderStartAngle >= 360)  	renderStartAngle -= 360;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: renderStartAngle -= 360;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.ANTICLOCKWISE) {  	renderStartAngle -= angleIncrement;  	if (renderStartAngle <= -360)  		renderStartAngle += 360;  }  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (renderStartAngle <= -360)  	renderStartAngle += 360;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: if (renderStartAngle <= -360)  	renderStartAngle += 360;  
Magic Number,WPFSpark,SprocketControl,C:\repos\tp-nscan_WpfWorklist\WPFSpark\SprocketControl\SprocketControl.cs,OnRenderTimerElapsed,The following statement contains a magic number: renderStartAngle += 360;  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (isCheckedLeft) {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 0);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 0);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 3);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 4);  }  else {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 3);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 4);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 0);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 0);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (isCheckedLeft) {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 0);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 0);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 3);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 4);  }  else {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 3);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 4);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 0);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 0);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (isCheckedLeft) {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 0);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 0);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 3);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 4);  }  else {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 3);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 4);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 0);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 0);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (isCheckedLeft) {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 0);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 0);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 3);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 4);  }  else {  	if (checkedBorder != null)  		Grid.SetColumn (checkedBorder' 3);  	if (checkedContent != null)  		Grid.SetColumn (checkedContent' 4);  	if (unCheckedBorder != null)  		Grid.SetColumn (unCheckedBorder' 0);  	if (unCheckedContent != null)  		Grid.SetColumn (unCheckedContent' 0);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (unCheckedBorder != null)  	Grid.SetColumn (unCheckedBorder' 3);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: Grid.SetColumn (unCheckedBorder' 3);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (unCheckedContent != null)  	Grid.SetColumn (unCheckedContent' 4);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: Grid.SetColumn (unCheckedContent' 4);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (checkedBorder != null)  	Grid.SetColumn (checkedBorder' 3);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: Grid.SetColumn (checkedBorder' 3);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: if (checkedContent != null)  	Grid.SetColumn (checkedContent' 4);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,UpdateToggleSwitchContents,The following statement contains a magic number: Grid.SetColumn (checkedContent' 4);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: if (thumbPercentage <= 0.5) {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 2;  	Grid.SetColumnSpan (contentBorder' 1);  }  else {  	// Calculate the width of the RootGrid Columns  	rootGrid.ColumnDefinitions [0].Width = new GridLength (contentPercentage' GridUnitType.Star);  	rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  	rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  	// Adjust the thumb  	TargetColumnInternal = 1;  	Grid.SetColumnSpan (contentBorder' 2);  }  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * thumbPercentage)' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: rootGrid.ColumnDefinitions [2].Width = new GridLength (thumbPercentage' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: TargetColumnInternal = 2;  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: rootGrid.ColumnDefinitions [1].Width = new GridLength (1.0 - (2 * contentPercentage)' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: rootGrid.ColumnDefinitions [2].Width = new GridLength (contentPercentage' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: Grid.SetColumnSpan (contentBorder' 2);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: contentGrid.ColumnDefinitions [2].Width = new GridLength (center' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: contentGrid.ColumnDefinitions [3].Width = new GridLength (centerLeftRight' GridUnitType.Star);  
Magic Number,WPFSpark,ToggleSwitch,C:\repos\tp-nscan_WpfWorklist\WPFSpark\ToggleSwitch\ToggleSwitch.cs,CalculateLayout,The following statement contains a magic number: contentGrid.ColumnDefinitions [4].Width = new GridLength (leftRight' GridUnitType.Star);  
