Implementation smell,Namespace,Class,File,Method,Description
Long Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The method has 184 lines of code.
Long Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,The method has 106 lines of code.
Long Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The method has 111 lines of code.
Long Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The method has 130 lines of code.
Long Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.FactorizationExamples,Evd,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\Factorization\Evd.cs,Run,The method has 107 lines of code.
Complex Method,MathUtils.Samples.MathNet.Numerics,ConsoleHelper,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ConsoleHelper.cs,DisplayHistogram,Cyclomatic complexity of the method is 8
Complex Method,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,Cyclomatic complexity of the method is 13
Long Parameter List,MathUtils.Collections,List,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\List.cs,Recombine,The method has 5 parameters.
Long Parameter List,MathUtils.Diff,Hamming,C:\repos\tp-nscan_WpfWorklist\MathUtils\Diff\Hamming.cs,Distance,The method has 5 parameters.
Long Parameter List,MathUtils.Geometry,UniformLattice,C:\repos\tp-nscan_WpfWorklist\MathUtils\Geometry\UniformLattice.cs,UniformLattice,The method has 5 parameters.
Long Identifier,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the parameter systemCryptoRandomNumberGenerator is 33.
Long Statement,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,BlockIntegral,The length of the statement  "		throw new ArgumentException (String.Format ("Expected at least 1 partition' found {0} in {1}"' partitions' "Integration.BlockStyle")); " is 134.
Long Statement,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,TrapezoidIntegral,The length of the statement  "		throw new ArgumentException (String.Format ("Expected at least 1 partition' found {0} in {1}"' partitions' "Integration.BlockStyle")); " is 134.
Long Statement,MathUtils.Functions,Sampler,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Sampler.cs,UniformSample,The length of the statement  "		throw new ArgumentException (String.Format ("Expected more than 1 partition' found {0} in {1}"' partitions' "Sampler.Uniform")); " is 128.
Long Statement,MathUtils.Rand,RandomGuid,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The length of the statement  "	return new Guid ((uint)_rando.NextInt ()' (ushort)_rando.NextInt ()' (ushort)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()' (byte)_rando.NextInt ()); " is 296.
Long Statement,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The length of the statement  "		return lowerBound + (int)((RealUnitUint * (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (upperBound - (long)lowerBound)); " is 120.
Long Statement,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} is power of two = {1}. {2} is power of two = {3}"' 5' 5.IsPowerOfTwo ()' 16' IntegerTheory.IsPowerOfTwo (16)); " is 135.
Long Statement,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} is perfect square = {1}. {2} is perfect square = {3}"' 37' 37.IsPerfectSquare ()' 81' IntegerTheory.IsPerfectSquare (81)); " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	// - RNG(int seed): iуууnitializes a new instance with specific seed value. Thread safe property is set to Control.ThreadSafeRandomNumberGenerators " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	// - RNG(bool threadSafe) : initializes a new instance with the seed value set to DateTime.Now.Ticks and specific thread safe property " is 134.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	// - RNG(bool threadSafe) : initializes a new instance with the seed value set to DateTime.Now.Ticks and thread safe property set to Control.ThreadSafeRandomNumberGenerators " is 173.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	// - double[] NextDouble(int n): returns an "n"-size array of uniformly distributed random doubles in the interval [0.0'1.0]; " is 125.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Generate 10 random double values using Multiplicative congruential generator with a modulus of 2^31-1 and a multiplier of 1132489760"); " is 159.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"2. Generate 10 random integer values using Multiplicative congruential generator with a modulus of 2^59 and a multiplier of 13^13"); " is 153.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"4. Generate 10 random integer values in range [50;100] using multiple recursive generator with 2 components of order 3"); " is 142.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"5. Generate 10 random bytes using Parallel Additive Lagged Fibonacci pseudo-random number generator"); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	// 6. A random number generator based on the "System.Security.Cryptography.RandomNumberGenerator" class in the .NET library " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"6. Generate 10 random decimal values using RNG based on the 'System.Security.Cryptography.RandomNumberGenerator'"); " is 136.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"7. Generate 10 random full Int32 range values using Wichmann-Hill’s 1982 combined multiplicative congruential generator"); " is 143.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"8. Generate 10 random full Int64 range values using Wichmann-Hill’s 2006 combined multiplicative congruential generator"); " is 143.
Long Statement,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The length of the statement  "	Console.WriteLine (@"9. Generate 10 random nonnegative values less than Int64.MaxValue using Multiply-with-carry Xorshift pseudo random number generator"); " is 155.
Long Statement,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the ChiSquare distribution class with parameter DegreesOfFreedom = {0}"' chiSquare.DegreesOfFreedom); " is 156.
Long Statement,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Biased sample standard deviation"' data.PopulationStandardDeviation ().ToString (" #0.00000;-#0.00000")); " is 132.
Long Statement,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Standard deviation"' descriptiveStatistics.StandardDeviation.ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The length of the statement  "	Console.WriteLine (@"5. Correlation coefficient between 1000 samples of ChiSquare(5) and ChiSquare(2.5) is {0}"' Correlation.Pearson (data' dataB).ToString ("N04")); " is 165.
Long Statement,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The length of the statement  "	Console.WriteLine (@"6. Correlation coefficient between 1000 samples of f(x) = x * 2 and f(x) = x * x is {0}"' Correlation.Pearson (data' dataB).ToString ("N04")); " is 163.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Beta distribution class with parameters a = {0} and b = {1}"' beta.A' beta.B); " is 137.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' beta.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 139.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' beta.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 120.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' beta.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 126.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Cauchy distribution class with parameters Location = {0} and Scale = {1}"' cauchy.Location' cauchy.Scale); " is 165.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' cauchy.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 141.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' cauchy.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' cauchy.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Chi distribution class with parameter DegreesOfFreedom = {0}"' chi.DegreesOfFreedom); " is 144.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' chi.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 138.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' chi.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 125.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the ChiSquare distribution class with parameter DegreesOfFreedom = {0}"' chiSquare.DegreesOfFreedom); " is 156.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' chiSquare.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 144.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' chiSquare.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 125.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' chiSquare.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 131.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the ContinuousUniform distribution class with parameters Lower = {0}' Upper = {1}"' continuousUniform.Lower' continuousUniform.Upper); " is 189.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' continuousUniform.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 152.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' continuousUniform.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 133.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' continuousUniform.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 139.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Smallest element in the domain"' continuousUniform.Minimum.ToString (" #0.00000;-#0.00000")); " is 120.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Erlang distribution class with parameters Shape = {0}' Scale = {1}"' erlang.Shape' erlang.Scale); " is 156.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' erlang.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 141.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' erlang.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' erlang.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Exponential distribution class with parameter Lambda = {0}"' exponential.Lambda); " is 140.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' exponential.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 146.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' exponential.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' exponential.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 133.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The length of the statement  "	// 1. Initialize the new instance of the FisherSnedecor distribution class with parameter DegreeOfFreedom1 = 50' DegreeOfFreedom2 = 20. " is 135.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the FisherSnedecor distribution class with parameters DegreeOfFreedom1 = {0}' DegreeOfFreedom2 = {1}"' fisherSnedecor.DegreeOfFreedom1' fisherSnedecor.DegreeOfFreedom2); " is 224.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' fisherSnedecor.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 149.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' fisherSnedecor.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 130.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' fisherSnedecor.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 136.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Gamma distribution class with parameters Shape = {0}' Scale = {1}"' gamma.Shape' gamma.Scale); " is 153.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' gamma.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 140.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' gamma.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 121.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' gamma.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the InverseGamma distribution class with parameters Shape = {0}' Scale = {1}"' inverseGamma.Shape' inverseGamma.Scale); " is 174.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' inverseGamma.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' inverseGamma.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' inverseGamma.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 134.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Laplace distribution class with parameters Location = {0}' Scale = {1}"' laplace.Location' laplace.Scale); " is 165.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' laplace.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 142.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' laplace.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' laplace.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 129.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the LogNormal distribution class with parameters Mu = {0}' Sigma = {1}"' logNormal.Mu' logNormal.Sigma); " is 159.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' logNormal.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 144.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' logNormal.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 125.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' logNormal.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 131.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Normal distribution class with parameters Mean = {0}' StdDev = {1}"' normal.Mean' normal.StdDev); " is 156.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' normal.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 141.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' normal.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' normal.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Pareto distribution class with parameters Shape = {0}' Scale = {1}"' pareto.Shape' pareto.Scale); " is 156.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' pareto.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 141.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' pareto.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' pareto.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Rayleigh distribution class with parameter Scale = {0}"' rayleigh.Scale); " is 132.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' rayleigh.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 143.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' rayleigh.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 124.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' rayleigh.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 130.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The length of the statement  "	// 1. Initialize the new instance of the Stable distribution class with parameters Alpha = 2.0' Beta = 0' Scale = 1' Location = 0. " is 130.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Stable distribution class with parameters Alpha = {0}' Beta = {1}' Scale = {2}' Location = {3}"' stable.Alpha' stable.Beta' stable.Scale' stable.Location); " is 214.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' stable.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 141.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' stable.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' stable.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The length of the statement  "	// 1. Initialize the new instance of the StudentT distribution class with parameters Location = 0' Scale = 1' DegreesOfFreedom = 1 " is 130.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the StudentT distribution class with parameters Location = {0}' Scale = {1}' DegreesOfFreedom = {2}"' studentT.Location' studentT.Scale' studentT.DegreesOfFreedom); " is 219.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' studentT.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 143.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' studentT.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 124.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' studentT.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 130.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Weibull distribution class with parameterы Scale = {0}' Shape = {1}"' weibull.Scale' weibull.Shape); " is 159.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' weibull.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000")); " is 142.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability density at location '0.3'"' weibull.Density (0.3).ToString (" #0.00000;-#0.00000")); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability density at location '0.3'"' weibull.DensityLn (0.3).ToString (" #0.00000;-#0.00000")); " is 129.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Bernoulli distribution class with parameter P = {0}"' bernoulli.P); " is 126.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' bernoulli.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 140.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' bernoulli.Probability (3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' bernoulli.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Binomial distribution class with parameters P = {0}' N = {1}"' binomial.P' binomial.N); " is 146.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 139.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000")); " is 121.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Categorical distribution class with parameters P = (0.1' 0.2' 0.25' 0.45)"); " is 135.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 139.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000")); " is 121.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the ConwayMaxwellPoisson distribution class with parameters Lambda = {0}' Nu = {1}"' binomial.Lambda' binomial.Nu); " is 170.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 139.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000")); " is 121.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The length of the statement  "	// 1. Initialize the new instance of the DiscreteUniform distribution class with parameters LowerBound = 2' UpperBound = 10 " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the DiscreteUniform distribution class with parameters LowerBound = {0}' UpperBound = {1}"' discreteUniform.LowerBound' discreteUniform.UpperBound); " is 203.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' discreteUniform.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 146.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' discreteUniform.Probability (3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' discreteUniform.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 134.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Geometric distribution class with parameter P = {0}"' geometric.P); " is 126.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' geometric.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 140.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' geometric.Probability (3).ToString (" #0.00000;-#0.00000")); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' geometric.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The length of the statement  "	// 1. Initialize the new instance of the Hypergeometric distribution class with parameters PopulationSize = 10' M = 2' N = 8 " is 124.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Hypergeometric distribution class with parameters PopulationSize = {0}' M = {1}' N = {2}"' hypergeometric.PopulationSize' hypergeometric.M' hypergeometric.N); " is 217.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' hypergeometric.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 145.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' hypergeometric.Probability (3).ToString (" #0.00000;-#0.00000")); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' hypergeometric.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 133.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the NegativeBinomial distribution class with parameters P = {0}' N = {1}"' negativeBinomial.P' negativeBinomial.R); " is 170.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' negativeBinomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' negativeBinomial.Probability (3).ToString (" #0.00000;-#0.00000")); " is 129.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' negativeBinomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 135.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Poisson distribution class with parameter Lambda = {0}"' poisson.Lambda); " is 132.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' poisson.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 138.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Probability mass at location '3'"' poisson.Probability (3).ToString (" #0.00000;-#0.00000")); " is 120.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' poisson.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 126.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Initialize the new instance of the Zipf distribution class with parameters S = {0}' N = {1}"' zipf.S' zipf.N); " is 134.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' zipf.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000")); " is 135.
Long Statement,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The length of the statement  "	Console.WriteLine (@"{0} - Log probability mass at location '3'"' zipf.ProbabilityLn (3).ToString (" #0.00000;-#0.00000")); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,Run,The length of the statement  "		Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05")); " is 179.
Long Statement,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,Run,The length of the statement  "		Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05")); " is 179.
Long Statement,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithoutPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithoutPoles.cs,Run,The length of the statement  "		Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05")); " is 179.
Long Statement,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithPoles.cs,Run,The length of the statement  "		Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05")); " is 179.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise multiplies matrix with another matrix using method PointwiseMultiply. (result = A.PointwiseMultiply(B))"); " is 137.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise multiplies matrix with another matrix using method PointwiseMultiply. (A.PointwiseMultiply(B' A))"); " is 131.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise divide matrix with another matrix using method PointwiseDivide. (result = A.PointwiseDivide(B))"); " is 129.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise divide matrix with another matrix using method PointwiseDivide. (A.PointwiseDivide(B' A))"); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixInitialization,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixInitialization.cs,Run,The length of the statement  "	// 1. Initialize a new instance of the matrix from a 2D array. This constructor will allocate a completely new memory block for storing the dense matrix. " is 153.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixInitialization,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixInitialization.cs,Run,The length of the statement  "	// 4. Initialize a new instance of the matrix from a one dimensional array. This array should store the matrix in column-major order.  " is 133.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixInitialization,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixInitialization.cs,Run,The length of the statement  "	// 5. Initialize a square matrix with all zero's except for ones on the diagonal. Identity matrix (http://en.wikipedia.org/wiki/Identity_matrix). " is 145.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise multiplies vector with another vector using method PointwiseMultiply. (result = X.PointwiseMultiply(Y))"); " is 137.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise multiplies vector with another vector using method PointwiseMultiply. (X.PointwiseMultiply(Y' X))"); " is 131.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise divide vector with another vector using method PointwiseDivide. (result = X.PointwiseDivide(Y))"); " is 129.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The length of the statement  "	Console.WriteLine (@"Pointwise divide vector with another vector using method PointwiseDivide. (X.PointwiseDivide(Y' X))"); " is 123.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,BiCgStabSolver,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\BiCgStabSolver.cs,Run,The length of the statement  "	// - CalculationStoppedWithoutConvergence: calculation has been stopped due to reaching the stopping limits' but that convergence was not achieved; " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,CompositeSolverExample,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\CompositeSolverExample.cs,Run,The length of the statement  "	// "class UserBiCgStab : IIterativeSolverSetup<double>" which uses regular BiCgStab solver. But user may create any other solver  " is 128.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,CompositeSolverExample,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\CompositeSolverExample.cs,Run,The length of the statement  "	// - CalculationStoppedWithoutConvergence: calculation has been stopped due to reaching the stopping limits' but that convergence was not achieved; " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,GpBiCgSolver,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\GpBiCgSolver.cs,Run,The length of the statement  "	// - CalculationStoppedWithoutConvergence: calculation has been stopped due to reaching the stopping limits' but that convergence was not achieved; " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,MlkBiCgStabSolver,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\MlkBiCgStabSolver.cs,Run,The length of the statement  "	// - CalculationStoppedWithoutConvergence: calculation has been stopped due to reaching the stopping limits' but that convergence was not achieved; " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.LinearAlgebra.IterativeSolversExamples,TFQMRSolver,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\IterativeSolvers\TFQMRSolver.cs,Run,The length of the statement  "	// - CalculationStoppedWithoutConvergence: calculation has been stopped due to reaching the stopping limits' but that convergence was not achieved; " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The length of the statement  "	// 1. Get 20 samples of f(x) = (x * x) / 2 at the roots of the Chebyshev polynomial of the first kind within interval [0' 10]  " is 125.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The length of the statement  "	Console.WriteLine (@"1. Get 20 samples of f(x) = (x * x) / 2 at the roots of the Chebyshev polynomial of the first kind within interval [0' 10]"); " is 146.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The length of the statement  "	// 2. Get 20 samples of f(x) = (x * x) / 2 at the roots of the Chebyshev polynomial of the second kind within interval [0' 10] " is 126.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The length of the statement  "	Console.WriteLine (@"2. Get 20 samples of f(x) = (x * x) / 2 at the roots of the Chebyshev polynomial of the second kind within interval [0' 10]"); " is 147.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The length of the statement  "	Console.WriteLine (@"2. Get 10 samples of f(x) = (x * x) / 2 equidistant starting at x=1 with step = 0.5 and retrieve sample points"); " is 134.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The length of the statement  "	Console.WriteLine (@" 4. Sample f(x) = (x * x) / 2 equidistant  to an integer-domain function starting at x = 0 and step = 2"); " is 127.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Run,The length of the statement  "	Console.WriteLine (@" 1. Get 10 random samples of f(x) = (x * x) / 2 using continuous uniform distribution on [-10' 10]"); " is 122.
Long Statement,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Run,The length of the statement  "	Console.WriteLine (@"2. Get 10 random samples of f(x) = (x * x) / 2 using Exponential(1) distribution and retrieve sample points"); " is 131.
Long Statement,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,SplitToEvenIntervals,The length of the statement  "		yield return new RealInterval (realInterval.GetTicValue (i' segmentCount)' realInterval.GetTicValue (i + 1' segmentCount)); " is 123.
Long Statement,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The length of the statement  "			yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2); " is 234.
Long Statement,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The length of the statement  "		yield return new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' lastValue.Value + (lastValue.Value - lastlastValue.Value) / 2); " is 139.
Long Statement,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ZoomBy,The length of the statement  "	return new RealInterval (interval.Center () - interval.Span () * factor / 2' interval.Center () + interval.Span () * factor / 2); " is 129.
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _x;  	hashCode = (hashCode * 397) ^ _y;  	hashCode = (hashCode * 397) ^ _maxX;  	hashCode = (hashCode * 397) ^ _maxY;  	return hashCode;  }  
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _x;  	hashCode = (hashCode * 397) ^ _y;  	hashCode = (hashCode * 397) ^ _maxX;  	hashCode = (hashCode * 397) ^ _maxY;  	return hashCode;  }  
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _x;  	hashCode = (hashCode * 397) ^ _y;  	hashCode = (hashCode * 397) ^ _maxX;  	hashCode = (hashCode * 397) ^ _maxY;  	return hashCode;  }  
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _y;  
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _maxX;  
Magic Number,MathUtils.Collections,TorusPoint,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\TorusPoint.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _maxY;  
Magic Number,MathUtils.Collections,List,C:\repos\tp-nscan_WpfWorklist\MathUtils\Collections\List.cs,Recombine,The following statement contains a magic number: if (ct < 2) {  	throw new Exception ("arrays must be length 2 or more");  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: if (J != 0.0) {  	M = (((double)numPoints * xy) - (x1 * y1)) / J;  	M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  	B = ((y1 * x2) - (x1 * xy)) / J;  	B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  }  else {  	M = 0;  	B = 0;  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: M = Math.Floor (1.0E3 * M + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,LeastSquaresFitLinear,The following statement contains a magic number: B = Math.Floor (1.0E3 * B + 0.5) / 1.0E3;  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,Variance,The following statement contains a magic number: for (var i = 0; i < data.Count (); i++) {  	deviation [i] = Math.Pow ((data [i] - mean)' 2);  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,Variance,The following statement contains a magic number: deviation [i] = Math.Pow ((data [i] - mean)' 2);  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,VarianceReg,The following statement contains a magic number: for (var i = 0; i < data.Count (); i++) {  	deviation [i] = Math.Pow ((data [i] - mean)' 2);  }  
Magic Number,MathUtils.Distributions,Stats,C:\repos\tp-nscan_WpfWorklist\MathUtils\Distributions\Stats.cs,VarianceReg,The following statement contains a magic number: deviation [i] = Math.Pow ((data [i] - mean)' 2);  
Magic Number,MathUtils.Functions,Gauss,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Gauss.cs,MeanZeroSigmaOne,The following statement contains a magic number: return Math.Exp (-x * x / 2.0) / Math.Sqrt (2 * Math.PI);  
Magic Number,MathUtils.Functions,Gauss,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Gauss.cs,MeanZeroSigmaOne,The following statement contains a magic number: return Math.Exp (-x * x / 2.0) / Math.Sqrt (2 * Math.PI);  
Magic Number,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,TrapezoidIntegral,The following statement contains a magic number: for (var x = domain.Min; x < domain.Max; x += interval) {  	curTotal += (f (x) + f (x + interval)) * interval / 2;  }  
Magic Number,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,TrapezoidIntegral,The following statement contains a magic number: curTotal += (f (x) + f (x + interval)) * interval / 2;  
Magic Number,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,TrapezoidIntegral,The following statement contains a magic number: for (int i = 1; i < pointList.Count (); i++) {  	retVal += (pointList [i].Y + pointList [i - 1].Y) * (pointList [i].X - pointList [i - 1].X) * 0.5;  }  
Magic Number,MathUtils.Functions,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Integration.cs,TrapezoidIntegral,The following statement contains a magic number: retVal += (pointList [i].Y + pointList [i - 1].Y) * (pointList [i].X - pointList [i - 1].X) * 0.5;  
Magic Number,MathUtils.Functions,Sampler,C:\repos\tp-nscan_WpfWorklist\MathUtils\Functions\Sampler.cs,UniformSample,The following statement contains a magic number: if (partitions < 2) {  	throw new ArgumentException (String.Format ("Expected more than 1 partition' found {0} in {1}"' partitions' "Sampler.Uniform"));  }  
Magic Number,MathUtils.Geometry,BoundingRectangle,C:\repos\tp-nscan_WpfWorklist\MathUtils\Geometry\BoundingRectangle.cs,BoundingRect,The following statement contains a magic number: return new Rect (new Point (center.X - radius' center.Y - radius)' new Size (radius * 2' radius * 2));  
Magic Number,MathUtils.Geometry,BoundingRectangle,C:\repos\tp-nscan_WpfWorklist\MathUtils\Geometry\BoundingRectangle.cs,BoundingRect,The following statement contains a magic number: return new Rect (new Point (center.X - radius' center.Y - radius)' new Size (radius * 2' radius * 2));  
Magic Number,MathUtils.Geometry,BoundingRectangle,C:\repos\tp-nscan_WpfWorklist\MathUtils\Geometry\BoundingRectangle.cs,BoundingRect,The following statement contains a magic number: return new Rect (new Point (center.X - width / 2' center.Y - height / 2)' new Size (width' height));  
Magic Number,MathUtils.Geometry,BoundingRectangle,C:\repos\tp-nscan_WpfWorklist\MathUtils\Geometry\BoundingRectangle.cs,BoundingRect,The following statement contains a magic number: return new Rect (new Point (center.X - width / 2' center.Y - height / 2)' new Size (width' height));  
Magic Number,MathUtils.AvlTree,Map,C:\repos\tp-nscan_WpfWorklist\MathUtils\ImTree\Map.cs,Add,The following statement contains a magic number: if (Math.Abs (b) == 2)// 2 or -2 means unbalanced   {  	if (b == 2)// L  	 {  		var llh = n.Left.Left == null ? 0 : n.Left.Left.Height;  		var lrh = n.Left.Right == null ? 0 : n.Left.Right.Height;  		var lb = llh - lrh;  		if (lb == 1)// LL  		 {  			// rotate right  			n = RotateRight (n);  		}  		else// LR  		 {  			// rotate left  			// rotate right  			l = RotateLeft (l);  			n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  			n = RotateRight (n);  		}  	}  	else// R  	 {  		var rlh = n.Right.Left == null ? 0 : n.Right.Left.Height;  		var rrh = n.Right.Right == null ? 0 : n.Right.Right.Height;  		var rb = rlh - rrh;  		if (rb == 1)// RL  		 {  			// rotate right  			// rotate left  			r = RotateRight (r);  			n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  			n = RotateLeft (n);  		}  		else// RR  		 {  			// rotate left  			n = RotateLeft (n);  		}  	}  }  
Magic Number,MathUtils.AvlTree,Map,C:\repos\tp-nscan_WpfWorklist\MathUtils\ImTree\Map.cs,Add,The following statement contains a magic number: if (Math.Abs (b) == 2)// 2 or -2 means unbalanced   {  	if (b == 2)// L  	 {  		var llh = n.Left.Left == null ? 0 : n.Left.Left.Height;  		var lrh = n.Left.Right == null ? 0 : n.Left.Right.Height;  		var lb = llh - lrh;  		if (lb == 1)// LL  		 {  			// rotate right  			n = RotateRight (n);  		}  		else// LR  		 {  			// rotate left  			// rotate right  			l = RotateLeft (l);  			n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  			n = RotateRight (n);  		}  	}  	else// R  	 {  		var rlh = n.Right.Left == null ? 0 : n.Right.Left.Height;  		var rrh = n.Right.Right == null ? 0 : n.Right.Right.Height;  		var rb = rlh - rrh;  		if (rb == 1)// RL  		 {  			// rotate right  			// rotate left  			r = RotateRight (r);  			n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  			n = RotateLeft (n);  		}  		else// RR  		 {  			// rotate left  			n = RotateLeft (n);  		}  	}  }  
Magic Number,MathUtils.AvlTree,Map,C:\repos\tp-nscan_WpfWorklist\MathUtils\ImTree\Map.cs,Add,The following statement contains a magic number: if (b == 2)// L   {  	var llh = n.Left.Left == null ? 0 : n.Left.Left.Height;  	var lrh = n.Left.Right == null ? 0 : n.Left.Right.Height;  	var lb = llh - lrh;  	if (lb == 1)// LL  	 {  		// rotate right  		n = RotateRight (n);  	}  	else// LR  	 {  		// rotate left  		// rotate right  		l = RotateLeft (l);  		n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  		n = RotateRight (n);  	}  }  else// R   {  	var rlh = n.Right.Left == null ? 0 : n.Right.Left.Height;  	var rrh = n.Right.Right == null ? 0 : n.Right.Right.Height;  	var rb = rlh - rrh;  	if (rb == 1)// RL  	 {  		// rotate right  		// rotate left  		r = RotateRight (r);  		n = new Node<TKey' TValue> (n.Key' n.Value' l' r);  		n = RotateLeft (n);  	}  	else// RR  	 {  		// rotate left  		n = RotateLeft (n);  	}  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSet,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSet.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSet,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSet.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSet,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSet.cs,ComputeSums,The following statement contains a magic number: XSquaredSum += Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Interpolation,LeastSquaresSet,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSet.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSet,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSet.cs,ComputeSums,The following statement contains a magic number: XSquaredSum -= Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,LeastSquaresSetF1,The following statement contains a magic number: foreach (var point in points) {  	var count = 5.5 / point.X;  	for (int i = 0; i < count; i++) {  		Add (point);  	}  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,ComputeSums,The following statement contains a magic number: XSquaredSum += Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF1,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF1.cs,ComputeSums,The following statement contains a magic number: XSquaredSum -= Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,LeastSquaresSetF2,The following statement contains a magic number: foreach (var point in points) {  	var count = 30.0 / (point.X * point.X);  	for (int i = 0; i < count; i++) {  		Add (point);  	}  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Add) {  	XSum += p.X;  	YSum += p.Y;  	XSquaredSum += Math.Pow (p.X' 2.0);  	XyProductSum += (p.X * p.Y);  }  else if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,ComputeSums,The following statement contains a magic number: XSquaredSum += Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,ComputeSums,The following statement contains a magic number: if (mode == SumMode.Subtract) {  	XSum -= p.X;  	YSum -= p.Y;  	XSquaredSum -= Math.Pow (p.X' 2.0);  	XyProductSum -= (p.X * p.Y);  }  
Magic Number,MathUtils.Interpolation,LeastSquaresSetF2,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interpolation\LeastSquaresSetF2.cs,ComputeSums,The following statement contains a magic number: XSquaredSum -= Math.Pow (p.X' 2.0);  
Magic Number,MathUtils.Rand,Randy,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,ToBool,The following statement contains a magic number: return new RandomBool (rando.Rando' 0.5);  
Magic Number,MathUtils.Rand,RandoFast,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: return (_random.Next () % 2) == 1;  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return (int)((RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return (int)((RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((RealUnitUint * (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (upperBound - (long)lowerBound));  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((RealUnitUint * (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (upperBound - (long)lowerBound));  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return lowerBound + (int)((RealUnitUint * (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (upperBound - (long)lowerBound));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return lowerBound + (int)((RealUnitUint * (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (upperBound - (long)lowerBound));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return lowerBound + (int)((RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * range);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,Next,The following statement contains a magic number: return lowerBound + (int)((RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * range);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextDouble,The following statement contains a magic number: return RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextDouble,The following statement contains a magic number: return RealUnitInt * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: for (var bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch?tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 24);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i] = (byte)(w >> 24);  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBytes,The following statement contains a magic number: buffer [i] = (byte)(w >> 24);  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextByte,The following statement contains a magic number: _byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Rand,FastRandom,C:\repos\tp-nscan_WpfWorklist\MathUtils\Rand\Randy.cs,NextByte,The following statement contains a magic number: _byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,MathUtils.Samples.MathNet.Numerics,ConsoleHelper,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ConsoleHelper.cs,DisplayHistogram,The following statement contains a magic number: rowMaxLength = (rowMaxLength / 10) * 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics,ConsoleHelper,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ConsoleHelper.cs,DisplayHistogram,The following statement contains a magic number: rowMaxLength = (rowMaxLength / 10) * 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (x => 1 / (Math.Pow (x' 3) + 1)' 0' 1);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (x => Math.Exp (-x / 5) * (2 + Math.Sin (2 * x))' 0' 100);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (x => Math.Exp (-x / 5) * (2 + Math.Sin (2 * x))' 0' 100);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (x => Math.Exp (-x / 5) * (2 + Math.Sin (2 * x))' 0' 100);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (x => Math.Exp (-x / 5) * (2 + Math.Sin (2 * x))' 0' 100);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (TargetFunctionA' 0' 100' 1e-4);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,Run,The following statement contains a magic number: result = Integrate.OnClosedInterval (TargetFunctionA' 0' 100' 1e-4);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp (-x / 5) * (2 + Math.Sin (2 * x));  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp (-x / 5) * (2 + Math.Sin (2 * x));  
Magic Number,MathUtils.Samples.MathNet.Numerics,Integration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Integration.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp (-x / 5) * (2 + Math.Sin (2 * x));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is even = {1}. {2} is even = {3}"' 1' IntegerTheory.IsEven (1)' 2' 2.IsEven ());  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is even = {1}. {2} is even = {3}"' 1' IntegerTheory.IsEven (1)' 2' 2.IsEven ());  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is odd = {1}. {2} is odd = {3}"' 1' 1.IsOdd ()' 2' IntegerTheory.IsOdd (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is odd = {1}. {2} is odd = {3}"' 1' 1.IsOdd ()' 2' IntegerTheory.IsOdd (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is power of two = {1}. {2} is power of two = {3}"' 5' 5.IsPowerOfTwo ()' 16' IntegerTheory.IsPowerOfTwo (16));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is power of two = {1}. {2} is power of two = {3}"' 5' 5.IsPowerOfTwo ()' 16' IntegerTheory.IsPowerOfTwo (16));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is power of two = {1}. {2} is power of two = {3}"' 5' 5.IsPowerOfTwo ()' 16' IntegerTheory.IsPowerOfTwo (16));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is power of two = {1}. {2} is power of two = {3}"' 5' 5.IsPowerOfTwo ()' 16' IntegerTheory.IsPowerOfTwo (16));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (97.CeilingToPowerOfTwo ());  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (16.PowerOfTwo ());  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is perfect square = {1}. {2} is perfect square = {3}"' 37' 37.IsPerfectSquare ()' 81' IntegerTheory.IsPerfectSquare (81));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is perfect square = {1}. {2} is perfect square = {3}"' 37' 37.IsPerfectSquare ()' 81' IntegerTheory.IsPerfectSquare (81));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is perfect square = {1}. {2} is perfect square = {3}"' 37' 37.IsPerfectSquare ()' 81' IntegerTheory.IsPerfectSquare (81));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} is perfect square = {1}. {2} is perfect square = {3}"' 37' 37.IsPerfectSquare ()' 81' IntegerTheory.IsPerfectSquare (81));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (32' 36));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (32' 36));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (492' -984' 123' 246));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (492' -984' 123' 246));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (492' -984' 123' 246));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.GreatestCommonDivisor (492' -984' 123' 246));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.LeastCommonMultiple (16' 12));  
Magic Number,MathUtils.Samples.MathNet.Numerics,NumberTheory,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\NumberTheory.cs,Run,The following statement contains a magic number: Console.WriteLine (IntegerTheory.LeastCommonMultiple (16' 12));  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mcg59.Next () + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mersenneTwister.Next (100) + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mersenneTwister.Next (100) + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: Console.Write (mersenneTwister.Next (100) + @" ");  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mrg32K3A.Next (50' 100) + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mrg32K3A.Next (50' 100) + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (mrg32K3A.Next (50' 100) + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: Console.Write (mrg32K3A.Next (50' 100) + @" ");  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: Console.Write (mrg32K3A.Next (50' 100) + @" ");  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (systemCryptoRandomNumberGenerator.NextDecimal ().ToString ("N") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (rngWh1982.NextFullRangeInt32 () + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (rngWh2006.NextFullRangeInt32 () + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,RandomNumberGeneration,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\RandomNumberGeneration.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (xorshift.NextInt64 () + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (x => x * 2' 0' 100' 1000);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (x => x * 2' 0' 100' 1000);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (x => x * 2' 0' 100' 1000);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The following statement contains a magic number: dataB = SignalGenerator.EquidistantInterval (x => x * x' 0' 100' 1000);  
Magic Number,MathUtils.Samples.MathNet.Numerics,Statistics,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Statistics.cs,Run,The following statement contains a magic number: dataB = SignalGenerator.EquidistantInterval (x => x * x' 0' 100' 1000);  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' beta.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' beta.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' beta.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (beta.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.A = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.B = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.A = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.B = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.A = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,BetaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\BetaDistribution.cs,Run,The following statement contains a magic number: beta.B = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' cauchy.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' cauchy.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' cauchy.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,CauchyDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\CauchyDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (cauchy.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' chi.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' chi.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' chi.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (chi.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: chi.DegreesOfFreedom = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiDistribution.cs,Run,The following statement contains a magic number: chi.DegreesOfFreedom = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' chiSquare.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' chiSquare.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' chiSquare.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (chiSquare.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: chiSquare.DegreesOfFreedom = 4;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ChiSquareDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ChiSquareDistribution.cs,Run,The following statement contains a magic number: chiSquare.DegreesOfFreedom = 8;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' continuousUniform.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' continuousUniform.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' continuousUniform.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (continuousUniform.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: continuousUniform.Upper = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ContinuousUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ContinuousUniformDistribution.cs,Run,The following statement contains a magic number: continuousUniform.Lower = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' erlang.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' erlang.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' erlang.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (erlang.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: erlang.Shape = 3;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: erlang.Shape = 9;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ErlangDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ErlangDistribution.cs,Run,The following statement contains a magic number: erlang.Scale = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' exponential.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' exponential.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' exponential.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (exponential.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: exponential.Lambda = 9;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ExponentialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ExponentialDistribution.cs,Run,The following statement contains a magic number: exponential.Lambda = 0.01;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' fisherSnedecor.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' fisherSnedecor.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' fisherSnedecor.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (fisherSnedecor.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: fisherSnedecor.DegreeOfFreedom1 = 20;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: fisherSnedecor.DegreeOfFreedom2 = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: fisherSnedecor.DegreeOfFreedom1 = 100;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,FisherSnedecorDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\FisherSnedecorDistribution.cs,Run,The following statement contains a magic number: fisherSnedecor.DegreeOfFreedom2 = 100;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' gamma.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' gamma.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' gamma.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (gamma.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,GammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\GammaDistribution.cs,Run,The following statement contains a magic number: gamma.Shape = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' inverseGamma.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' inverseGamma.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' inverseGamma.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (inverseGamma.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: inverseGamma.Shape = 8;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,InverseGammaDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\InverseGammaDistribution.cs,Run,The following statement contains a magic number: inverseGamma.Scale = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' laplace.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' laplace.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' laplace.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (laplace.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: data = new double[100000];  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: laplace.Scale = 4;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LaplaceDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LaplaceDistribution.cs,Run,The following statement contains a magic number: laplace.Location = -10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' logNormal.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' logNormal.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' logNormal.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (logNormal.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: logNormal.Sigma = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: logNormal.Mu = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,LogNormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\LogNormalDistribution.cs,Run,The following statement contains a magic number: logNormal.Sigma = 0.25;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' normal.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' normal.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' normal.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (normal.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: normal.Mean = -10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,NormalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\NormalDistribution.cs,Run,The following statement contains a magic number: normal.StdDev = 0.01;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' pareto.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' pareto.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' pareto.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (pareto.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: pareto.Shape = 50;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,ParetoDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\ParetoDistribution.cs,Run,The following statement contains a magic number: pareto.Scale = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' rayleigh.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' rayleigh.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' rayleigh.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (rayleigh.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: rayleigh.Scale = 4;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,RayleighDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\RayleighDistribution.cs,Run,The following statement contains a magic number: rayleigh.Scale = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' stable.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' stable.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' stable.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (stable.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: stable.Alpha = 1.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: stable.Location = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StableDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StableDistribution.cs,Run,The following statement contains a magic number: stable.Scale = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' studentT.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' studentT.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' studentT.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (studentT.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: studentT.DegreesOfFreedom = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,StudentTDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\StudentTDistribution.cs,Run,The following statement contains a magic number: studentT.DegreesOfFreedom = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '0.3'"' weibull.CumulativeDistribution (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability density at location '0.3'"' weibull.Density (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability density at location '0.3'"' weibull.DensityLn (0.3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (weibull.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: weibull.Shape = 1.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.ContinuousDistributionsExamples,WeibullDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\ContinuousDistributions\WeibullDistribution.cs,Run,The following statement contains a magic number: weibull.Shape = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' bernoulli.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' bernoulli.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' bernoulli.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (bernoulli.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: bernoulli.P = 0.9;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BernoulliDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BernoulliDistribution.cs,Run,The following statement contains a magic number: bernoulli.P = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (binomial.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: binomial.P = 0.7;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: binomial.P = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,BinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\BinomialDistribution.cs,Run,The following statement contains a magic number: binomial.N = 40;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (binomial.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: binomial.P = new[] {  	0.6'  	0.2'  	0.1'  	0.1  };  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: binomial.P = new[] {  	0.6'  	0.2'  	0.1'  	0.1  };  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: binomial.P = new[] {  	0.6'  	0.2'  	0.1'  	0.1  };  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,CategoricalDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\CategoricalDistribution.cs,Run,The following statement contains a magic number: binomial.P = new[] {  	0.6'  	0.2'  	0.1'  	0.1  };  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' binomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' binomial.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' binomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (binomial.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: binomial.Lambda = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: binomial.Lambda = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ConwayMaxwellPoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ConwayMaxwellPoissonDistribution.cs,Run,The following statement contains a magic number: binomial.Nu = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' discreteUniform.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' discreteUniform.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' discreteUniform.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (discreteUniform.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: discreteUniform.LowerBound = -10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: discreteUniform.UpperBound = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,DiscreteUniformDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\DiscreteUniformDistribution.cs,Run,The following statement contains a magic number: discreteUniform.UpperBound = 40;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' geometric.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' geometric.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' geometric.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (geometric.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: geometric.P = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,GeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\GeometricDistribution.cs,Run,The following statement contains a magic number: geometric.P = 0.8;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' hypergeometric.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' hypergeometric.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' hypergeometric.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (hypergeometric.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: hypergeometric.PopulationSize = 52;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: hypergeometric.M = 13;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,HypergeometricDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\HypergeometricDistribution.cs,Run,The following statement contains a magic number: hypergeometric.N = 5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' negativeBinomial.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' negativeBinomial.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' negativeBinomial.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (negativeBinomial.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: negativeBinomial.P = 0.7;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,NegativeBinomialDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\NegativeBinomialDistribution.cs,Run,The following statement contains a magic number: negativeBinomial.P = 0.5;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' poisson.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' poisson.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' poisson.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (poisson.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: poisson.Lambda = 4;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,PoissonDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\PoissonDistribution.cs,Run,The following statement contains a magic number: poisson.Lambda = 10;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Сumulative distribution at location '3'"' zipf.CumulativeDistribution (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Probability mass at location '3'"' zipf.Probability (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: Console.WriteLine (@"{0} - Log probability mass at location '3'"' zipf.ProbabilityLn (3).ToString (" #0.00000;-#0.00000"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (zipf.Sample ().ToString ("N05") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: zipf.S = 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.DiscreteDistributionsExamples,ZipfDistribution,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\DiscreteDistributions\ZipfDistribution.cs,Run,The following statement contains a magic number: zipf.N = 20;  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,Run,The following statement contains a magic number: Console.WriteLine (@"5. Differentiate at point 5.2 = {0}"' method.Differentiate (5.2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,Run,The following statement contains a magic number: Console.WriteLine (@"6. Integrate at point 5.2 = {0}"' method.Integrate (5.2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 10]  	var point = rng.NextDouble () * 10;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 10]  	var point = rng.NextDouble () * 10;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,AkimaSpline,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\AkimaSpline.cs,TargetFunction,The following statement contains a magic number: return (x * x) - (2 * x);  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,Run,The following statement contains a magic number: Console.WriteLine (@"5. Differentiate at point 5.2 = {0}"' method.Differentiate (5.2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,Run,The following statement contains a magic number: Console.WriteLine (@"6. Integrate at point 5.2 = {0}"' method.Integrate (5.2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 10]  	var point = rng.NextDouble () * 10;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 10]  	var point = rng.NextDouble () * 10;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,LinearBetweenPoints,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\LinearBetweenPoints.cs,TargetFunction,The following statement contains a magic number: return (x * x) - (2 * x);  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithoutPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithoutPoles.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 5]  	var point = rng.NextDouble () * 5;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithoutPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithoutPoles.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 5]  	var point = rng.NextDouble () * 5;  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithPoles.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 5]  	var point = rng.Next (0' 5);  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.InterpolationExamples,RationalWithPoles,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Interpolation\RationalWithPoles.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	// Generate random value from [0' 5]  	var point = rng.Next (0' 5);  	Console.WriteLine (@"Interpolate at {0} = {1}. Function({0}) = {2}"' point.ToString ("N05")' method.Interpolate (point).ToString ("N05")' TargetFunction (point).ToString ("N05"));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The following statement contains a magic number: resultM = (DenseMatrix)matrixA.Multiply (3.0);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The following statement contains a magic number: matrixA.Multiply (3.0' matrixA);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The following statement contains a magic number: resultM = (DenseMatrix)matrixA.Divide (3.0);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixArithmeticOperations.cs,Run,The following statement contains a magic number: matrixA.Divide (3.0' matrixA);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.ColumnEnumerator (2' 4)) {  	Console.WriteLine (@"Column {0}: {1}"' keyValuePair.Item1' keyValuePair.Item2.ToString ("#0.00\t"' formatProvider));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.ColumnEnumerator (2' 4)) {  	Console.WriteLine (@"Column {0}: {1}"' keyValuePair.Item1' keyValuePair.Item2.ToString ("#0.00\t"' formatProvider));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.RowEnumerator (4' 3)) {  	Console.WriteLine (@"Row {0}: {1}"' keyValuePair.Item1' keyValuePair.Item2.ToString ("#0.00\t"' formatProvider));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixDataAccessor.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.RowEnumerator (4' 3)) {  	Console.WriteLine (@"Row {0}: {1}"' keyValuePair.Item1' keyValuePair.Item2.ToString ("#0.00\t"' formatProvider));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.ColumnEnumerator ()) {  	Console.WriteLine (@"Column {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: Console.WriteLine (@"Column {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in normalized.ColumnEnumerator ()) {  	Console.WriteLine (@"Column {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: Console.WriteLine (@"Column {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in matrix.RowEnumerator ()) {  	Console.WriteLine (@"Row {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: Console.WriteLine (@"Row {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: normalized = matrix.NormalizeRows (2);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: foreach (var keyValuePair in normalized.RowEnumerator ()) {  	Console.WriteLine (@"Row {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixNorms,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixNorms.cs,Run,The following statement contains a magic number: Console.WriteLine (@"Row {0} 2-nd norm is: {1}"' keyValuePair.Item1' keyValuePair.Item2.Norm (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: result = matrix.InsertRow (3' vector);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetColumn (2' (Vector)vector);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetRow (3' (double[])vector);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetDiagonal (new[] {  	5.0'  	4.0'  	3.0'  	2.0'  	1.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetDiagonal (new[] {  	5.0'  	4.0'  	3.0'  	2.0'  	1.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetDiagonal (new[] {  	5.0'  	4.0'  	3.0'  	2.0'  	1.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetDiagonal (new[] {  	5.0'  	4.0'  	3.0'  	2.0'  	1.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetSubMatrix (1' 3' 1' 3' DenseMatrix.Identity (3));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetSubMatrix (1' 3' 1' 3' DenseMatrix.Identity (3));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: matrix.SetSubMatrix (1' 3' 1' 3' DenseMatrix.Identity (3));  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: permutations = new Permutation (new[] {  	1'  	0'  	4'  	3'  	2  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: permutations = new Permutation (new[] {  	1'  	0'  	4'  	3'  	2  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,MatrixRowColumnOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\MatrixRowColumnOperations.cs,Run,The following statement contains a magic number: permutations = new Permutation (new[] {  	1'  	0'  	4'  	3'  	2  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The following statement contains a magic number: resultV = 3.0 * vectorX;  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The following statement contains a magic number: vectorX.Multiply (3.0' vectorX);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The following statement contains a magic number: resultV = vectorX.Divide (3.0);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorArithmeticOperations,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorArithmeticOperations.cs,Run,The following statement contains a magic number: vectorX.Divide (3.0' vectorX);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.SetValues (new[] {  	9.0'  	8.0'  	7.0'  	6.0'  	5.0'  	4.0'  	3.0'  	2.0'  	1.0'  	0.0  });  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.CopySubVectorTo (cloneA' 3' 3' 4);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.CopySubVectorTo (cloneA' 3' 3' 4);  
Magic Number,MathUtils.Samples.MathNet.Numerics.LinearAlgebraExamples,VectorDataAccessor,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\LinearAlgebra\VectorDataAccessor.cs,Run,The following statement contains a magic number: vectorA.CopySubVectorTo (cloneA' 3' 3' 4);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The following statement contains a magic number: result = SignalGenerator.ChebyshevNodesSecondKind (Function' 0' 10' 20);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Run,The following statement contains a magic number: result = SignalGenerator.ChebyshevNodesSecondKind (Function' 0' 10' 20);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Chebyshev,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Chebyshev.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: result = SignalGenerator.EquidistantStartingAt (Function' 1' 0.5' 10' out samplePoints);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: result = SignalGenerator.EquidistantStartingAt (Function' 1' 0.5' 10' out samplePoints);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: result = SignalGenerator.EquidistantPeriodic (Function' 10' 5' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: result = SignalGenerator.EquidistantPeriodic (Function' 10' 5' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: result = SignalGenerator.EquidistantPeriodic (Function' 10' 5' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Run,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	Console.Write (equidistant (i).ToString ("N") + @" ");  }  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Equidistant,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Equidistant.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Run,The following statement contains a magic number: result = SignalGenerator.Random (Function' exponential' 10' out samplePoints);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Run,The following statement contains a magic number: result = SignalGenerator.Random (TwoDomainFunction' chiSquare' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,Function,The following statement contains a magic number: return Math.Pow (x' 2) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SignalsExamples,Random,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\Signals\Random.cs,TwoDomainFunction,The following statement contains a magic number: return (x * y) / 2;  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Beta (1.0' 3.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaLn (1.0' 3.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaIncomplete (1.0' 3.0' 0.7));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaIncomplete (1.0' 3.0' 0.7));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaIncomplete (1.0' 3.0' 1.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaRegularized (1.0' 3.0' 0.7));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaRegularized (1.0' 3.0' 0.7));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Beta,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Beta.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BetaRegularized (1.0' 3.0' 1.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.DiGamma (5.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.DiGammaInv (1.5));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Harmonic (10));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GeneralHarmonic (10' 3.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GeneralHarmonic (10' 3.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Logistic (3.0));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Common,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Common.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Logit (0.3));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Erf (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Erfc (2));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (SpecialFunctions.Erfc' -1.0' 1.0' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.ErfInv (0.5));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (SpecialFunctions.ErfInv' -1.0' 1.0' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.ErfcInv (0.5));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,ErrorFunction,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\ErrorFunction.cs,Run,The following statement contains a magic number: data = SignalGenerator.EquidistantInterval (SpecialFunctions.ErfcInv' -1.0' 1.0' 10);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Factorial (5).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.FactorialLn (5).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Binomial (10' 8).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Binomial (10' 8).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BinomialLn (10' 8).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.BinomialLn (10' 8).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Multinomial (10' new[] {  	2'  	3'  	5  }).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Multinomial (10' new[] {  	2'  	3'  	5  }).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Multinomial (10' new[] {  	2'  	3'  	5  }).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Factorial,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Factorial.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Multinomial (10' new[] {  	2'  	3'  	5  }).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Gamma (10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLn (10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 14).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 14).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 100).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 100).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaUpperIncomplete (10' 0).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerIncomplete (10' 10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerRegularized (10' 14).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerRegularized (10' 14).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerRegularized (10' 100).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaLowerRegularized (10' 100).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaUpperRegularized (10' 0).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaUpperRegularized (10' 10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Gamma,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Gamma.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.GammaUpperRegularized (10' 10).ToString ("N"));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Stability,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Stability.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.ExponentialMinusOne (4.2876));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Stability,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Stability.cs,Run,The following statement contains a magic number: Console.WriteLine (Math.Exp (4.2876) - 1);  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Stability,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Stability.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Hypotenuse (5' 3));  
Magic Number,MathUtils.Samples.MathNet.Numerics.SpecialFunctionsExamples,Stability,C:\repos\tp-nscan_WpfWorklist\MathUtils\Samples\MathNet.Numerics\SpecialFunctions\Stability.cs,Run,The following statement contains a magic number: Console.WriteLine (SpecialFunctions.Hypotenuse (5' 3));  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 2) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 4) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 8) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 16) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 32) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 64) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: yield return (data & 128) > 0;  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: if (length > 16) {  	throw new Exception ("Length too long");  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToBools,The following statement contains a magic number: if (length > 32) {  	throw new Exception ("Length too long");  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: if (length <= 16) {  	foreach (var @ushort in Enumerable.Range (0' (int)Math.Pow (2' length))) {  		yield return ((ushort)@ushort).ToBools (length).ToArray ();  	}  	yield break;  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: if (length <= 16) {  	foreach (var @ushort in Enumerable.Range (0' (int)Math.Pow (2' length))) {  		yield return ((ushort)@ushort).ToBools (length).ToArray ();  	}  	yield break;  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: foreach (var @ushort in Enumerable.Range (0' (int)Math.Pow (2' length))) {  	yield return ((ushort)@ushort).ToBools (length).ToArray ();  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: if (length <= 32) {  	foreach (var @uint in Enumerable.Range (0' (int)Math.Pow (2' length))) {  		yield return ((uint)@uint).ToBools (length).ToArray ();  	}  	yield break;  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: if (length <= 32) {  	foreach (var @uint in Enumerable.Range (0' (int)Math.Pow (2' length))) {  		yield return ((uint)@uint).ToBools (length).ToArray ();  	}  	yield break;  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,AllBitSetsOfLength,The following statement contains a magic number: foreach (var @uint in Enumerable.Range (0' (int)Math.Pow (2' length))) {  	yield return ((uint)@uint).ToBools (length).ToArray ();  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToByte,The following statement contains a magic number: if (bits.Length > 8) {  	throw new ArgumentException ("array length must be <= 8");  }  
Magic Number,MathUtils.SortableUtils,SortableBitArrayUtils,C:\repos\tp-nscan_WpfWorklist\MathUtils\SortableUtils\SortableBitArrayUtils.cs,ToUshort,The following statement contains a magic number: if (bits.Length > 16) {  	throw new ArgumentException ("array length must be <= 16");  }  
Magic Number,MathUtils.Interval,IntInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\IntInterval.cs,GetHashCode,The following statement contains a magic number: unchecked {  	// ReSharper disable NonReadonlyFieldInGetHashCode  	return (_min.GetHashCode () * 397) ^ _max.GetHashCode ();  	// ReSharper restore NonReadonlyFieldInGetHashCode  }  
Magic Number,MathUtils.Interval,IntInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\IntInterval.cs,GetHashCode,The following statement contains a magic number: return (_min.GetHashCode () * 397) ^ _max.GetHashCode ();  
Magic Number,MathUtils.Interval,RealInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealInterval.cs,Accomodate,The following statement contains a magic number: if (valList.Count < 2) {  	return Empty;  }  
Magic Number,MathUtils.Interval,RealInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealInterval.cs,Accomodate,The following statement contains a magic number: if (valList.Count < 2) {  	return Empty;  }  
Magic Number,MathUtils.Interval,RealInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealInterval.cs,GetHashCode,The following statement contains a magic number: unchecked {  	// ReSharper disable NonReadonlyFieldInGetHashCode  	return (_min.GetHashCode () * 397) ^ _max.GetHashCode ();  	// ReSharper restore NonReadonlyFieldInGetHashCode  }  
Magic Number,MathUtils.Interval,RealInterval,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealInterval.cs,GetHashCode,The following statement contains a magic number: return (_min.GetHashCode () * 397) ^ _max.GetHashCode ();  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,Center,The following statement contains a magic number: return (ri.Min + ri.Max) / 2;  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: foreach (var value in values) {  	if (lastValue.HasValue) {  		yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  		lastlastValue = lastValue;  	}  	lastValue = value;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: foreach (var value in values) {  	if (lastValue.HasValue) {  		yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  		lastlastValue = lastValue;  	}  	lastValue = value;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: foreach (var value in values) {  	if (lastValue.HasValue) {  		yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  		lastlastValue = lastValue;  	}  	lastValue = value;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: foreach (var value in values) {  	if (lastValue.HasValue) {  		yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  		lastlastValue = lastValue;  	}  	lastValue = value;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastValue.HasValue) {  	yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  	lastlastValue = lastValue;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastValue.HasValue) {  	yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  	lastlastValue = lastValue;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastValue.HasValue) {  	yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  	lastlastValue = lastValue;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastValue.HasValue) {  	yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  	lastlastValue = lastValue;  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return (lastlastValue.HasValue) ? new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' (value + lastValue.Value) / 2) : new RealInterval (lastValue.Value - (value - lastValue.Value) / 2' (value + lastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastlastValue.HasValue) {  	yield return new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' lastValue.Value + (lastValue.Value - lastlastValue.Value) / 2);  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: if (lastlastValue.HasValue) {  	yield return new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' lastValue.Value + (lastValue.Value - lastlastValue.Value) / 2);  }  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' lastValue.Value + (lastValue.Value - lastlastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ToPaddedRealIntevals,The following statement contains a magic number: yield return new RealInterval ((lastlastValue.Value + lastValue.Value) / 2' lastValue.Value + (lastValue.Value - lastlastValue.Value) / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ZoomBy,The following statement contains a magic number: return new RealInterval (interval.Center () - interval.Span () * factor / 2' interval.Center () + interval.Span () * factor / 2);  
Magic Number,MathUtils.Interval,RealIntervalExt,C:\repos\tp-nscan_WpfWorklist\MathUtils\Interval\RealIntervalExt.cs,ZoomBy,The following statement contains a magic number: return new RealInterval (interval.Center () - interval.Span () * factor / 2' interval.Center () + interval.Span () * factor / 2);  
