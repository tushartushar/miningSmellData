Implementation smell,Namespace,Class,File,Method,Description
Long Method,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,TokenizeExpression,The method has 129 lines of code.
Complex Method,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,TokenizeExpression,Cyclomatic complexity of the method is 27
Complex Method,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,ParseParameters,Cyclomatic complexity of the method is 9
Complex Method,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,ExecuteTokens,Cyclomatic complexity of the method is 8
Complex Method,EquationEditor.ViewModels.Operator,OperatorsVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\Operator\OperatorsVm.cs,OperatorsVm,Cyclomatic complexity of the method is 9
Complex Method,EquationEditor.ViewModels.Operator,OperatorUtils,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\Operator\OperatorUtils.cs,ToResourceName,Cyclomatic complexity of the method is 8
Long Parameter List,EquationEditor.Models.Operator,OperatorBase,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Operator\OperatorBase.cs,OperatorBase,The method has 5 parameters.
Long Parameter List,EquationEditor.ViewModels.Equation,EquationElementNodeVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\Equation\EquationElementNodeVm.cs,EquationElementNodeVm,The method has 5 parameters.
Long Statement,EquationEditor.ViewModels.Elements,ElementListVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\Elements\ElementListVm.cs,DoTheSearch,The length of the statement  "	LoadElementVms (string.IsNullOrEmpty (searchText) ? _elements : _elements.Where (T => (T.ElementDescr.Contains (searchText)) || (T.ElementCode.Contains (searchText)))); " is 168.
Long Statement,EquationEditor.ViewModels,EquationEditorVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\EquationEditorVm.cs,AddAnElement,The length of the statement  "	var elementNodeVm = new EquationElementNodeVm (3.0' elementSource.ElementDescr' elementSource.DisplayName' "element"' elementSource.ScampsDataType) { " is 149.
Long Statement,EquationEditor.ViewModels,EquationEditorVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\EquationEditorVm.cs,AddAnOperator,The length of the statement  "	var operatorNodeVm = new EquationOperatorNodeVm (operatorSourceVm.Name' operatorSourceVm.Name' operatorSourceVm.ScampsDataType' operatorSourceVm.OperatorBase.Description) { " is 172.
Long Statement,EquationEditor.ViewModels,TrashCan,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\TrashCan.cs,Drop,The length of the statement  "		var arg = new EquationOperatorArgNodeVm (sourceNode.ParentNode.AllowedScampsDataType.ToResourceName ()' sourceNode.ParentNode.AllowedScampsDataType) { " is 150.
Magic Number,EquationEditor.DesignData,DesignElementRepository,C:\repos\tp-nscan_WpfWorklist\EquationEditor\DesignData\DesignElementRepository.cs,DesignElementRepository,The following statement contains a magic number: for (var i = 0; i < 1750; i++) {  	_elements.Add (new Element (ScampsDataType.Numeric) {  		ElementCode = "AA01"'  		ElementDescr = "Dude' this is a good element"  	});  	_elements.Add (new Element (ScampsDataType.Date) {  		ElementCode = "AB01"'  		ElementDescr = "Wassup homie' this is another good element"  	});  	_elements.Add (new Element (ScampsDataType.Time) {  		ElementCode = "AC01"'  		ElementDescr = "Golly gee' Mitt Romney loves this element"  	});  	_elements.Add (new Element (ScampsDataType.Bool) {  		ElementCode = "AD01"'  		ElementDescr = "Oooh yaaah' The Michelle Bachman element "  	});  	_elements.Add (new Element (ScampsDataType.Timespan) {  		ElementCode = "BA01"'  		ElementDescr = "999' the Herman Cain elements "  	});  	_elements.Add (new Element (ScampsDataType.Numeric) {  		ElementCode = "CA01"'  		ElementDescr = "You betchya! Presenting the Sarah Palin element"  	});  	_elements.Add (new Element (ScampsDataType.Numeric) {  		ElementCode = "CD01"'  		ElementDescr = "Food Stamps anyone? The Newt Gingrich element"  	});  	_elements.Add (new Element (ScampsDataType.Numeric) {  		ElementCode = "CD02"'  		ElementDescr = "Crazy Uncle time! The Ron Paul element"  	});  }  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: switch (s) {  case "+":  case "-":  	return 1;  case "*":  case "/":  	return 2;  case "^":  	return 3;  case UnaryMinus:  	return 10;  }  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: switch (s) {  case "+":  case "-":  	return 1;  case "*":  case "/":  	return 2;  case "^":  	return 3;  case UnaryMinus:  	return 10;  }  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: switch (s) {  case "+":  case "-":  	return 1;  case "*":  case "/":  	return 2;  case "^":  	return 3;  case UnaryMinus:  	return 10;  }  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: return 2;  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: return 3;  
Magic Number,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following statement contains a magic number: return 10;  
Magic Number,EquationEditor.ViewModels.Equation,EquationOperatorNodeVm,C:\repos\tp-nscan_WpfWorklist\EquationEditor\ViewModels\Equation\EquationOperatorNodeVm.cs,DoTheRemoveChild,The following statement contains a magic number: if (target == null || ChildNodeVms.Count () < 2) {  	return;  }  
Missing Default,EquationEditor.Models.Equation.SoftCircuits,Eval,C:\repos\tp-nscan_WpfWorklist\EquationEditor\Models\Equation\SoftCircuits\Eval.cs,GetPrecedence,The following switch statement is missing a default case: switch (s) {  case "+":  case "-":  	return 1;  case "*":  case "/":  	return 2;  case "^":  	return 3;  case UnaryMinus:  	return 10;  }  
