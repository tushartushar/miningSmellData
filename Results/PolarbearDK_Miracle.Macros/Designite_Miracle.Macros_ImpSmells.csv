Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Miracle.Macros,GenericMacro,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\GenericMacro.cs,Parse,The length of the statement  "	for (int startMacroPos = macro.IndexOf (StartMacro' StringComparison.InvariantCultureIgnoreCase); startMacroPos != -1;) { " is 121.
Long Statement,Miracle.Macros,GenericMacro,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\GenericMacro.cs,Parse,The length of the statement  "		int endMacroPos = macro.IndexOf (EndMacro' startMacroPos + StartMacro.Length' StringComparison.InvariantCultureIgnoreCase); " is 123.
Long Statement,Miracle.Macros,GenericMacro,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\GenericMacro.cs,Parse,The length of the statement  "			IMacroFragment<T> macroFragment = FragmentFactory (macro.Substring (startMacroPos + StartMacro.Length' endMacroPos - startMacroPos - StartMacro.Length)); " is 153.
Long Statement,Miracle.Macros,Macro,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\Macro.cs,FragmentFactory,The length of the statement  "	return PropertyMacroFragment<T>.Factory (propertyPath' format) ?? StaticMacroFragment<T>.Factory (typeof(DateTime)' propertyPath' format) ?? StaticMacroFragment<T>.Factory (typeof(Environment)' propertyPath' format) ?? StaticMacroFragment<T>.Factory (typeof(Thread)' propertyPath' format); " is 289.
Long Statement,Miracle.Macros,PropertyMacroFragment,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\PropertyMacroFragment.cs,Factory,The length of the statement  "	NestedProperty nestedProperty = NestedProperty.Factory (typeof(T)' property' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public); " is 144.
Long Statement,Miracle.Macros,StaticMacroFragment,C:\repos\PolarbearDK_Miracle.Macros\Source\Miracle.Macros\StaticMacroFragment.cs,Factory,The length of the statement  "	NestedProperty nestedProperty = NestedProperty.Factory (staticTypeSource' property' BindingFlags.Static | BindingFlags.Public); " is 127.
