Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReAttach.Tests.Mocks,ReAttachMocks,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\Mocks\ReAttachMocks.cs,CreateMockDTE,The length of the statement  "			processesEnumerable.Setup(ie => ie.GetEnumerator()).Returns(() => MockProcessList.Select(p => p.Object).GetEnumerator()); " is 121.
Long Statement,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadErrorTest,The length of the statement  "			Assert.IsNull(repository.LoadTargets()' "Either SecurityException wasn't thrown' or there's a problem with error handling in load method."); " is 140.
Long Statement,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The length of the statement  "			const string json1 = "{\"ProcessId\":7024'\"ProcessName\":\"test1.exe\"'\"ProcessPath\":\"test1.exe\"'\"ProcessUser\":\"TEST1\"'\"ServerName\":\"\"'\"IsAttached\":false'\"IsLocal\":true'\"Engine\":null}"; " is 204.
Long Statement,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The length of the statement  "			const string json2 = "{\"ProcessId\":7025'\"ProcessName\":\"test2.exe\"'\"ProcessPath\":\"test2.exe\"'\"ProcessUser\":\"TEST2\"'\"ServerName\":\"\"'\"IsAttached\":false'\"IsLocal\":true'\"Engine\":null}"; " is 204.
Long Statement,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadTest,The length of the statement  "			const string json = "{\"ProcessId\":7024'\"ProcessName\":\"test1.exe\"'\"ProcessPath\":\"PROCESS-PATH\"'\"ProcessUser\":\"TEST1\"'\"ServerName\":\"\"'\"IsAttached\":false'\"IsLocal\":true'\"Engine\":null}"; " is 206.
Long Statement,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,RecordAttachTest,The length of the statement  "			Assert.AreEqual(1' _mocks.MockReAttachHistoryItems.Count(i => i.IsAttached)' "Invalid number of processes claimed to be attached."); " is 132.
Long Statement,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,RecordRemoteAttachTest,The length of the statement  "			Assert.AreEqual(1' _mocks.MockReAttachHistoryItems.Count(i => i.IsAttached)' "Invalid number of processes claimed to be attached."); " is 132.
Magic Number,ReAttach.Tests.Mocks,ReAttachMocks,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\Mocks\ReAttachMocks.cs,CreateMockDTE,The following statement contains a magic number: process.Setup(p => p.Name).Returns("name" + i / 2);
Magic Number,ReAttach.Tests.Mocks,ReAttachMocks,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\Mocks\ReAttachMocks.cs,CreateMockDTE,The following statement contains a magic number: process.Setup(p => p.UserName).Returns("user" + i / 2);
Magic Number,ReAttach.Tests.Mocks,ReAttachMocks,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\Mocks\ReAttachMocks.cs,CreateMockDTE,The following statement contains a magic number: i < 10
Magic Number,ReAttach.Tests.UnitTests,ExtensionsTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ExtensionsTests.cs,GetProcessIdTest,The following statement contains a magic number: const int expectedPid = 123;
Magic Number,ReAttach.Tests.UnitTests,ReAttachHistoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachHistoryTests.cs,SaveTest,The following statement contains a magic number: repository.Verify(r => r.SaveTargets(It.IsAny<ReAttachTargetList>())' Times.Exactly(2));
Magic Number,ReAttach.Tests.UnitTests,ReAttachHistoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachHistoryTests.cs,LoadTest,The following statement contains a magic number: repository.Verify(r => r.LoadTargets()' Times.Exactly(2));
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,SaveTest,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,SaveTest,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,SaveErrorTest,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadErrorTest,The following statement contains a magic number: key.Verify(k => k.OpenSubKey(It.IsAny<string>())' Times.Exactly(2));
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The following statement contains a magic number: subkey.Setup(k => k.GetValue(ReAttachConstants.ReAttachRegistryHistoryKeyPrefix + 2)).Returns("invalid-json-item");
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The following statement contains a magic number: subkey.Setup(k => k.GetValue(ReAttachConstants.ReAttachRegistryHistoryKeyPrefix + 3)).Returns(json2);
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The following statement contains a magic number: Assert.AreEqual(2' result.Count' "Invalid number of results loaded.");
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadInvalidDataTest,The following statement contains a magic number: i <= 2
Magic Number,ReAttach.Tests.UnitTests,ReAttachRegistryRepositoryTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachRegistryRepositoryTests.cs,LoadTest,The following statement contains a magic number: const int items = 3;
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: i <= 10
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: Assert.AreEqual(5' list.Count);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: Assert.AreEqual(10' list[0].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: Assert.AreEqual(6' list[4].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,MaxItemsTest,The following statement contains a magic number: Assert.AreEqual(6' list[4].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: Assert.AreEqual(3' list[0].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: Assert.AreEqual(2' list[1].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: i <= 5
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: Assert.AreEqual(5' list[0].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddFirstTest,The following statement contains a magic number: Assert.AreEqual(4' list[1].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(2' list[1].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: i <= 5
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(5' list[4].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(5' list[4].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(4' list[3].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddLastTest,The following statement contains a magic number: Assert.AreEqual(4' list[3].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: var indices = new[] {1' 2' 3' 4' 5};
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: var indices = new[] {1' 2' 3' 4' 5};
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: var indices = new[] {1' 2' 3' 4' 5};
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: var indices = new[] {1' 2' 3' 4' 5};
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: i <= 5
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,ContainsTest,The following statement contains a magic number: Assert.IsNull(list[123]);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: i <= 4
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreEqual(4' list.Count);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: list.AddFirst(new ReAttachTarget(3' "path3"' "user3"));
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreNotEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreNotEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreEqual(3' list[0].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementFirstTest,The following statement contains a magic number: Assert.AreEqual(4' list.Count);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: var list = new ReAttachTargetList(5);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: i <= 4
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(4' list.Count);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: list.AddLast(new ReAttachTarget(3' "path3"' "user3"));
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreNotEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreNotEqual(3' list[2].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[3].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(3' list[3].ProcessId);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetListTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetListTests.cs,AddExistingElementLastTest,The following statement contains a magic number: Assert.AreEqual(4' list.Count);
Magic Number,ReAttach.Tests.UnitTests,ReAttachTargetTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachTargetTests.cs,EqualityTest,The following statement contains a magic number: var p4 = new ReAttachTarget(2' @"c:\CmD.eXe"' @"DOMAIn\USeRNAmE");
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,ReAttachNoCandidatesTest,The following statement contains a magic number: Assert.IsFalse(debugger.ReAttach(new ReAttachTarget(123' "not-name1"' "user1")));
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,ReAttachNoCandidatesTest,The following statement contains a magic number: Assert.IsFalse(debugger.ReAttach(new ReAttachTarget(123' "name1"' "not-user1")));
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,ReAttachNoCandidatesTest,The following statement contains a magic number: Assert.IsTrue(debugger.ReAttach(new ReAttachTarget(123' "name1"' "user1")));
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,ReAttachHighestPidTest,The following statement contains a magic number: Assert.IsTrue(debugger.ReAttach(new ReAttachTarget(5' "name1"' "user1")));
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,RecordAttachTest,The following statement contains a magic number: process2.Setup(p => p.GetPhysicalProcessId(It.IsAny<AD_PROCESS_ID[]>())).Returns(123);
Magic Number,ReAttach.Tests.UnitTests,ReAttachDebuggerTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachDebuggerTests.cs,RecordRemoteAttachTest,The following statement contains a magic number: process2.Setup(p => p.GetPhysicalProcessId(It.IsAny<AD_PROCESS_ID[]>())).Returns(123);
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,WillDoReAttachIfHistoryItemsArePresent,The following statement contains a magic number: i < 5
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,WillDoReAttachIfHistoryItemsArePresent,The following statement contains a magic number: var id = new CommandID(ReAttachConstants.ReAttachPackageCmdSet' ReAttachConstants.ReAttachCommandId + 3);
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,WillDoReAttachIfHistoryItemsArePresent,The following statement contains a magic number: _mocks.MockReAttachDebugger.Verify(d => d.ReAttach(_mocks.MockReAttachHistoryItems[3])' Times.Once());
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,NoDialogShownWhenTargetIsAlreadyRunning,The following statement contains a magic number: _mocks.MockReAttachHistoryItems.AddFirst(new ReAttachTarget(123' "path"' "user"));
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,CommandsShouldBeVisibleIfTheirInHistoryAndNotAttached,The following statement contains a magic number: _mocks.MockReAttachHistoryItems.AddFirst(new ReAttachTarget(123' "name" + i' "user" + i));
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,CommandsShouldBeVisibleIfTheirInHistoryAndNotAttached,The following statement contains a magic number: i <= 3
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,CommandsShouldBeVisibleIfTheirInHistoryAndNotAttached,The following statement contains a magic number: Assert.AreEqual(3' ui.Commands.Count(c => c.Visible)' "Incorrect number of commands visible.");
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,CommandsShouldBeVisibleIfTheirInHistoryAndNotAttached,The following statement contains a magic number: _mocks.MockReAttachHistoryItems[2].IsAttached = true;
Magic Number,ReAttach.Tests.UnitTests,ReAttachUiTests,D:\research\architectureSmells\repos\erlandranvinge_ReAttach\ReAttach.Tests\UnitTests\ReAttachUiTests.cs,CommandsShouldBeVisibleIfTheirInHistoryAndNotAttached,The following statement contains a magic number: Assert.AreEqual(2' ui.Commands.Count(c => c.Visible)' "Incorrect number of commands visible.");
