Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DoubleToString,Cyclomatic complexity of the method is 10
Long Parameter List,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The method has 6 parameters. Parameters: low' w' high' buffer' length' kappa
Long Parameter List,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,RoundWeed,The method has 7 parameters. Parameters: buffer' length' distance_too_high_w' unsafe_interval' rest' ten_kappa' unit
Long Parameter List,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateDecimalRepresentation,The method has 5 parameters. Parameters: decimal_digits' length' decimal_point' digits_after_point' writer
Long Identifier,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,Grisu3,The length of the parameter ten_mk_minimal_binary_exponent is 30.
Long Identifier,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,Grisu3,The length of the parameter ten_mk_maximal_binary_exponent is 30.
Complex Conditional,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,RoundWeed,The conditional expression  "rest < small_distance &&  // Negated condition 1                     unsafe_interval - rest >= ten_kappa &&  // Negated condition 2                     (rest + ten_kappa < small_distance ||  // buffer{-1} > w_high                      small_distance - rest >= rest + ten_kappa - small_distance)"  is complex.
Complex Conditional,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,RoundWeed,The conditional expression  "rest < big_distance &&                  unsafe_interval - rest >= ten_kappa &&                  (rest + ten_kappa < big_distance ||                   big_distance - rest > rest + ten_kappa - big_distance)"  is complex.
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong a = f_ >> 32;
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong c = other.f_ >> 32;
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong tmp = (bd >> 32) + (ad & kM32) + (bc & kM32);
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: tmp += 1U << 31;
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: ulong result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Multiply,The following statement contains a magic number: e_ += other.e_ + 64;
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Normalize,The following statement contains a magic number: while ((f & k10MSBits) == 0)              {                  f <<= 10;                  e -= 10;              }
Magic Number,GrisuDotNet,DiyFp,C:\repos\kring_grisu.net\grisu.net\DiyFp.cs,Normalize,The following statement contains a magic number: while ((f & k10MSBits) == 0)              {                  f <<= 10;                  e -= 10;              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DoubleToString,The following statement contains a magic number: int exponentRepLength = decimal_rep_length + 3;
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DoubleToString,The following statement contains a magic number: if (absExponent >= 10)              {                  ++exponentRepLength;                  if (absExponent >= 100)                      ++exponentRepLength;              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DoubleToString,The following statement contains a magic number: if (absExponent >= 10)              {                  ++exponentRepLength;                  if (absExponent >= 100)                      ++exponentRepLength;              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: while (kappa > 0)              {                  int digit = (int)(integrals / divisor);                  buffer[length] = (char)('0' + digit);                  ++length;                  integrals %= divisor;                  kappa--;                  // Note that kappa now equals the exponent of the divisor and that the                  // invariant thus holds again.                  ulong rest =                      ((ulong)(integrals) << -one.E) + fractionals;                  // Invariant: too_high = buffer * 10^kappa + DiyFp(rest' one.e())                  // Reminder: unsafe_interval.e() == one.e()                  if (rest < unsafeIntervalF)                  {                      // Rounding down (by not emitting the remaining digits) yields a number                      // that lies within the unsafe interval.                      too_high.Subtract(ref w);                      return RoundWeed(buffer' length' too_high.F'                                       unsafeIntervalF' rest'                                       (ulong)(divisor) << -one.E' unit);                  }                  divisor /= 10;              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: Debug.Assert(one.E >= -60);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: Debug.Assert(0xFFFFFFFFFFFFFFFF / 10 >= one.F);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: while (true)              {                  fractionals *= 10;                  unit *= 10;                  unsafe_interval.F *= 10;                  // Integer division by one.                  int digit = (int)(fractionals >> -one.E);                  buffer[length] = (char)('0' + digit);                  ++length;                  fractionals &= one.F - 1;  // Modulo by one.                  kappa--;                  if (fractionals < unsafe_interval.F)                  {                      too_high.Subtract(ref w);                      return RoundWeed(buffer' length' too_high.F * unit'                                       unsafe_interval.F' fractionals' one.F' unit);                  }              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: while (true)              {                  fractionals *= 10;                  unit *= 10;                  unsafe_interval.F *= 10;                  // Integer division by one.                  int digit = (int)(fractionals >> -one.E);                  buffer[length] = (char)('0' + digit);                  ++length;                  fractionals &= one.F - 1;  // Modulo by one.                  kappa--;                  if (fractionals < unsafe_interval.F)                  {                      too_high.Subtract(ref w);                      return RoundWeed(buffer' length' too_high.F * unit'                                       unsafe_interval.F' fractionals' one.F' unit);                  }              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,DigitGen,The following statement contains a magic number: while (true)              {                  fractionals *= 10;                  unit *= 10;                  unsafe_interval.F *= 10;                  // Integer division by one.                  int digit = (int)(fractionals >> -one.E);                  buffer[length] = (char)('0' + digit);                  ++length;                  fractionals &= one.F - 1;  // Modulo by one.                  kappa--;                  if (fractionals < unsafe_interval.F)                  {                      too_high.Subtract(ref w);                      return RoundWeed(buffer' length' too_high.F * unit'                                       unsafe_interval.F' fractionals' one.F' unit);                  }              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,BiggestPowerTen,The following statement contains a magic number: int exponent_plus_one_guess = ((number_bits + 1) * 1233 >> 12);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,BiggestPowerTen,The following statement contains a magic number: int exponent_plus_one_guess = ((number_bits + 1) * 1233 >> 12);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,RoundWeed,The following statement contains a magic number: return (2 * unit <= rest) && (rest <= unsafe_interval - 4 * unit);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,RoundWeed,The following statement contains a magic number: return (2 * unit <= rest) && (rest <= unsafe_interval - 4 * unit);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: Debug.Assert(exponent < 1e4);
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,Grisu,C:\repos\kring_grisu.net\grisu.net\Grisu.cs,CreateExponentialRepresentation,The following statement contains a magic number: if (exponent >= 100)              {                  writer.Write((char)('0' + exponent / 100));                  exponent %= 100;                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else if (exponent >= 10)              {                  writer.Write((char)('0' + exponent / 10));                  exponent %= 10;                  writer.Write((char)('0' + exponent));              }              else              {                  writer.Write(exponent);              }
Magic Number,GrisuDotNet,GrisuDouble,C:\repos\kring_grisu.net\grisu.net\GrisuDouble.cs,UpperBoundary,The following statement contains a magic number: return new DiyFp(Significand * 2 + 1' Exponent - 1);
Magic Number,GrisuDotNet,GrisuDouble,C:\repos\kring_grisu.net\grisu.net\GrisuDouble.cs,NormalizedBoundaries,The following statement contains a magic number: while ((plusF & k10MSBits) == 0)              {                  plusF <<= 10;                  plusE -= 10;              }
Magic Number,GrisuDotNet,GrisuDouble,C:\repos\kring_grisu.net\grisu.net\GrisuDouble.cs,NormalizedBoundaries,The following statement contains a magic number: while ((plusF & k10MSBits) == 0)              {                  plusF <<= 10;                  plusE -= 10;              }
Magic Number,GrisuDotNet,GrisuDouble,C:\repos\kring_grisu.net\grisu.net\GrisuDouble.cs,NormalizedBoundaries,The following statement contains a magic number: if (significand_is_zero && vE != kDenormalExponent)              {                  // The boundary is closer. Think of v = 1000e10 and v- = 9999e9.                  // Then the boundary (== (v - v-)/2) is not just at a distance of 1e9 but                  // at a distance of 1e8.                  // The only exception is for the smallest normal: the largest denormal is                  // at the same distance as its successor.                  // Note: denormals have the same exponent as the smallest normals.                  minusF = (vF << 2) - 1;                  minusE = vE - 2;              }              else              {                  minusF = (vF << 1) - 1;                  minusE = vE - 1;              }
Magic Number,GrisuDotNet,GrisuDouble,C:\repos\kring_grisu.net\grisu.net\GrisuDouble.cs,NormalizedBoundaries,The following statement contains a magic number: if (significand_is_zero && vE != kDenormalExponent)              {                  // The boundary is closer. Think of v = 1000e10 and v- = 9999e9.                  // Then the boundary (== (v - v-)/2) is not just at a distance of 1e9 but                  // at a distance of 1e8.                  // The only exception is for the smallest normal: the largest denormal is                  // at the same distance as its successor.                  // Note: denormals have the same exponent as the smallest normals.                  minusF = (vF << 2) - 1;                  minusE = vE - 2;              }              else              {                  minusF = (vF << 1) - 1;                  minusE = vE - 1;              }
