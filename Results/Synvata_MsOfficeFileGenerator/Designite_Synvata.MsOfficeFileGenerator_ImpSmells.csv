Implementation smell,Namespace,Class,File,Method,Description
Long Method,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,CreateStylesheet,The method has 113 lines of code.
Complex Method,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,SetCellTypeAndValue,Cyclomatic complexity of the method is 8
Long Parameter List,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetCell,The method has 5 parameters.
Long Statement,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnProperties,The length of the statement  "	IOrderedEnumerable<ExcelColumnProperty> excelColProperties = excelColumnProperties.OrderBy (p => p.ExcelColumnAttr.Index); " is 122.
Long Statement,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,SetDefaultNumberFormatId,The length of the statement  "		if (p.ExcelColumnAttr.NumberFormatId == uint.MaxValue && string.IsNullOrEmpty (p.ExcelColumnAttr.NumberingFormatString)) { " is 122.
Long Statement,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetEntityPropertyValue,The length of the statement  "	PropertyInfo entityProperty = entityProperties.FirstOrDefault (pi => pi.Name.Equals (propertyName' StringComparison.CurrentCultureIgnoreCase)); " is 143.
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetDefinedNames,The following statement contains a magic number: foreach (DefinedName dn in definedNames) {  	// assume none of these defined names are cell range (e.g. "A1"' not "A1:B1").  	referenceSegments = dn.Text.Split ('!');  	sheetName = referenceSegments [0].Trim ('\'');  	referenceSegments = referenceSegments [1].Split ('$');  	columnName = referenceSegments [1];  	rowIndex = uint.Parse (referenceSegments [2]);  	definedNameData = new DefinedNameData (dn.Name' sheetName' columnName' rowIndex);  	definedNameDataSet.Add (definedNameData);  }  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetDefinedNames,The following statement contains a magic number: rowIndex = uint.Parse (referenceSegments [2]);  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo).ToString () + columnName;  	dividend = (int)((dividend - modulo) / 26);  }  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo).ToString () + columnName;  	dividend = (int)((dividend - modulo) / 26);  }  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo).ToString () + columnName;  	dividend = (int)((dividend - modulo) / 26);  }  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: modulo = (dividend - 1) % 26;  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: columnName = Convert.ToChar (65 + modulo).ToString () + columnName;  
Magic Number,Synvata.MsOfficeFileGenerator.Excel,ExcelGenerator,C:\repos\Synvata_MsOfficeFileGenerator\Synvata.MsOfficeFileGenerator\Excel\ExcelGenerator.cs,GetExcelColumnName,The following statement contains a magic number: dividend = (int)((dividend - modulo) / 26);  
