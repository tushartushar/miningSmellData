Implementation smell,Namespace,Class,File,Method,Description
Long Method,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,ChangeValue,The method has 273 lines of code.
Long Method,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,CoerceSpinnerValue,The method has 141 lines of code.
Long Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnKeyDown,The method has 148 lines of code.
Long Method,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,SetAttribute,The method has 266 lines of code.
Long Method,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The method has 250 lines of code.
Complex Method,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,Cyclomatic complexity of the method is 10
Complex Method,PropertyTools.Wpf,FilePicker,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\FilePicker\FilePicker.cs,Browse,Cyclomatic complexity of the method is 8
Complex Method,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,ChangeValue,Cyclomatic complexity of the method is 51
Complex Method,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,CoerceSpinnerValue,Cyclomatic complexity of the method is 32
Complex Method,PropertyTools.Wpf,FontFamilyConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\FontFamilyConverter.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,PropertyTools.Wpf,DataGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\Operators\DataGridOperator.cs,SetPropertiesFromDescriptor,Cyclomatic complexity of the method is 8
Complex Method,PropertyTools.Wpf,DataGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\Operators\DataGridOperator.cs,TryConvert,Cyclomatic complexity of the method is 13
Complex Method,PropertyTools.Wpf,ListOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\Operators\ListOperator.cs,GenerateColumnDefinitions,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,AutoFiller,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\AutoFiller.cs,TryExtrapolate,Cyclomatic complexity of the method is 8
Complex Method,PropertyTools.Wpf,AutoFiller,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\AutoFiller.cs,TryExtrapolate,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,GetCell,Cyclomatic complexity of the method is 10
Complex Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,ChangeCurrentCell,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnApplyTemplate,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateCells,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateGridSize,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,RadioButtonList,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\RadioButtonList\RadioButtonList.cs,UpdateContent,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,TypeHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TypeHelper.cs,Is,Cyclomatic complexity of the method is 9
Complex Method,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateControl,Cyclomatic complexity of the method is 25
Complex Method,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,CreatePropertyItems,Cyclomatic complexity of the method is 8
Complex Method,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,SetProperties,Cyclomatic complexity of the method is 12
Complex Method,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,SetAttribute,Cyclomatic complexity of the method is 46
Complex Method,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateControls,Cyclomatic complexity of the method is 12
Complex Method,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,Cyclomatic complexity of the method is 24
Complex Method,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DropTargetPreviewDrop,Cyclomatic complexity of the method is 10
Long Parameter List,PropertyTools.Wpf,Bitmap,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\Bitmap.cs,TryApplyVisualTransform,The method has 5 parameters. Parameters: point' v' inverse' throwOnError' success
Long Parameter List,PropertyTools.Wpf,AutoFiller,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\AutoFiller.cs,TryExtrapolate,The method has 5 parameters. Parameters: cell' currentCell' selectionCell' autoFillRef' result
Long Parameter List,PropertyTools.Wpf,CaptureScreenshot,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\CaptureScreenshot.cs,BitBlt,The method has 9 parameters. Parameters: hdc' nXDest' nYDest' nWidth' nHeight' hdcSrc' nXSrc' nYSrc' dwRop
Long Parameter List,PropertyTools.Wpf,CaptureScreenshot,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\CaptureScreenshot.cs,CreateBitmap,The method has 5 parameters. Parameters: nWidth' nHeight' cPlanes' cBitsPerPel' lpvBits
Long Identifier,PropertyTools.Wpf,DirectoryPicker,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\FilePicker\DirectoryPicker.cs,,The length of the parameter FolderBrowserDialogServiceProperty is 34.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter AlternatingRowsBackgroundProperty is 33.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter MultiChangeInChangedColumnOnlyProperty is 38.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter DefaultHorizontalAlignmentProperty is 34.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter IsMoveAfterEnterEnabledProperty is 31.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter ItemHeaderPropertyPathProperty is 30.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter RowHeadersFormatStringProperty is 30.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter ColumnHeadersFormatStringProperty is 33.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter HorizontalScrollBarVisibilityConverter is 38.
Long Identifier,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,,The length of the parameter suspendCollectionChangedNotifications is 37.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter CategoryControlTemplateProperty is 31.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter CategoryHeaderTemplateProperty is 30.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter DescriptionIconAlignmentProperty is 32.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter EnableLabelWidthResizingProperty is 32.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter EnumAsRadioButtonsLimitProperty is 31.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter ShowReadOnlyPropertiesProperty is 30.
Long Identifier,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,,The length of the parameter ValidationErrorTemplateProperty is 31.
Long Identifier,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The length of the parameter positionRelativeToItemContainer is 31.
Long Statement,PropertyTools.Wpf,ScreenGrab,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Behaviors\ScreenGrab.cs,Grab,The length of the statement  "            var bitmap = new RenderTargetBitmap((int)(bounds.Width * resolution / 96.0)' (int)(bounds.Height * resolution / 96.0)' resolution' resolution' PixelFormats.Pbgra32); " is 165.
Long Statement,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnApplyTemplate,The length of the statement  "                predefinedColorPanel.AddHandler(Selector.SelectionChangedEvent' (SelectionChangedEventHandler)this.OnPredefinedColorPanelSelectionChanged' true); " is 145.
Long Statement,PropertyTools.Wpf,EnumDescriptionConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\EnumDescriptionConverter.cs,Convert,The length of the statement  "            var field = value.GetType().GetFields(BindingFlags.Static | BindingFlags.GetField | BindingFlags.Public).FirstOrDefault(f => f.GetValue(null).Equals(value)); " is 157.
Long Statement,PropertyTools.Wpf,EnumDescriptionConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\EnumDescriptionConverter.cs,Convert,The length of the statement  "                var descriptionAttribute = field.GetCustomAttributes<System.ComponentModel.DescriptionAttribute>(true).FirstOrDefault(); " is 120.
Long Statement,PropertyTools.Wpf,EnumDescriptionConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\EnumDescriptionConverter.cs,Convert,The length of the statement  "                var descriptionAttribute2 = field.GetCustomAttributes<PropertyTools.DataAnnotations.DescriptionAttribute>(true).FirstOrDefault(); " is 129.
Long Statement,PropertyTools.Wpf,CaptureScreenshot,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\CaptureScreenshot.cs,Capture,The length of the statement  "            var bitmapSource = Imaging.CreateBitmapSourceFromHBitmap(bitmapHandle' IntPtr.Zero' Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions()); " is 139.
Long Statement,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnApplyTemplate,The length of the statement  "            this.CommandBindings.Add(new CommandBinding(ApplicationCommands.Delete' (s' e) => this.Clear()' (s' e) => e.CanExecute = this.CanClear)); " is 137.
Long Statement,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,SetValues,The length of the statement  "            var bottomRight = new CellRef(Math.Max(range.BottomRow' range.TopRow + rows - 1)' Math.Max(range.BottomRight.Column' range.LeftColumn + columns - 1)); " is 150.
Long Statement,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateSelectionVisibility,The length of the statement  "            this.autoFillBox.Visibility = this.IsAutoFillEnabled && this.CurrentCell.Row < this.Rows && this.CurrentCell.Column < this.Columns " is 130.
Long Statement,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The length of the statement  "                rowDefinition.SetBinding(System.Windows.Controls.RowDefinition.HeightProperty' new Binding { Source = sheetDefinition' Path = new PropertyPath("Height")' Mode = BindingMode.TwoWay }); " is 183.
Long Statement,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateTextBox,The length of the statement  "            c.ToolTip = $"Binding: {binding.Path.Path} {binding.Mode} {binding.Source}\nConverter: {d.Converter} {d.ConverterParameter}\nBindingSource: {d.BindingSource}"; " is 159.
Long Statement,PropertyTools.Wpf,ReflectionExtensions,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Extensions\ReflectionExtensions.cs,GetFirstAttributeOrDefault,The length of the statement  "            return descriptor.Attributes.Cast<Attribute>().FirstOrDefault(attribute => attribute.GetType().IsAssignableFrom(attributeType)); " is 128.
Long Statement,PropertyTools.Wpf,AboutDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\AboutDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PropertyTools.Wpf;component/dialogs/aboutdialog.xaml"' System.UriKind.Relative); " is 126.
Long Statement,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PropertyTools.Wpf;component/dialogs/wizarddialog.xaml"' System.UriKind.Relative); " is 127.
Long Statement,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PropertyTools.Wpf;component/dialogs/propertydialog.xaml"' System.UriKind.Relative); " is 129.
Long Statement,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateComboBoxControl,The length of the statement  "            var c = new ComboBox { IsEditable = property.IsEditable' ItemsSource = property.ItemsSource' VerticalContentAlignment = VerticalAlignment.Center }; " is 147.
Long Statement,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The length of the statement  "                        pi.OptionalDescriptor != null ? new Binding(pi.OptionalDescriptor.Name) : new Binding(pi.Descriptor.Name) { Converter = NullToBoolConverter }); " is 143.
Long Statement,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The length of the statement  "                        new Binding(pi.RadioDescriptor.Name) { Converter = new EnumToBooleanConverter() { EnumType = pi.RadioDescriptor.PropertyType }' ConverterParameter = pi.RadioValue }); " is 166.
Long Statement,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The length of the statement  "                    pi.OptionalDescriptor != null ? new Binding(pi.OptionalDescriptor.Name) : new Binding(pi.Descriptor.Name) { Converter = NullToBoolConverter }); " is 143.
Long Statement,PropertyTools.Wpf,ReflectionMath,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ReflectionMath.cs,TryParse,The length of the statement  "                        return m.Name == "Parse" && p.Length == 2 && p[0].ParameterType.IsAssignableFrom(t1) && p[1].ParameterType.IsAssignableFrom(t2); " is 128.
Long Statement,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,CreateOrUpdateInsertionAdorner,The length of the statement  "                    // This way I get the AdornerLayer within ScrollContentPresenter' and not the one under AdornerDecorator (Snoop is awesome). " is 124.
Long Statement,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DropTargetPreviewDrop,The length of the statement  "                dropTarget.Drop(itemsToDrop' this.dropPosition' (DragDropEffect)e.Effects' (PropertyTools.DragDropKeyStates)this.initialKeyStates); " is 131.
Long Statement,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,BrowseEventHandler,The length of the statement  "                        // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid. " is 162.
Long Statement,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,BrowseEventHandler,The length of the statement  "                        // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid. " is 162.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,PropertyTools.Wpf,Bitmap,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\Bitmap.cs,OnSourceChanged,The conditional expression  "((oldValue != null) && (bitmap.sourceDownloaded != null))                  && (!oldValue.IsFrozen && (oldValue is BitmapSource))"  is complex.
Complex Conditional,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,IsNumeric,The conditional expression  "value is double || value is int || value is uint || value is long || value is ulong || value is short                  || value is ushort || value is byte || value is sbyte || value is float || value is decimal"  is complex.
Complex Conditional,PropertyTools.Wpf,ListListOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\Operators\ListListOperator.cs,SetValue,The conditional expression  "list == null || cell.Row < 0 || cell.Column < 0 || cell.Row >= list.Count"  is complex.
Complex Conditional,PropertyTools.Wpf,DataGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\Operators\DataGridOperator.cs,GetCellValue,The conditional expression  "cell.Column < 0 || cell.Column >= owner.Columns || cell.Row < 0 || cell.Row >= owner.Rows"  is complex.
Complex Conditional,PropertyTools.Wpf,AutoFiller,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\AutoFiller.cs,TryExtrapolate,The conditional expression  "i >= selMinRow && i <= selMaxRow && j >= selMinCol && j <= selMaxCol"  is complex.
Complex Conditional,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The conditional expression  "(dragSource == null || !dragSource.IsDraggable)                          || (dropTarget == null || !dropTarget.CanDrop(dragSource' this.dropPosition' (DragDropEffect)e.Effects))"  is complex.
Empty Catch Block,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,Pick,The method has an empty catch block.
Empty Catch Block,PropertyTools.Wpf,ValueToBooleanConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ValueToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Empty Catch Block,PropertyTools.Wpf,ValueToBooleanConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ValueToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Empty Catch Block,PropertyTools.Wpf,EnumToBooleanConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\EnumToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Empty Catch Block,PropertyTools.Wpf,EnumToBooleanConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\EnumToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Magic Number,PropertyTools.Wpf,ScreenGrab,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Behaviors\ScreenGrab.cs,Grab,The following statement contains a magic number: var bitmap = new RenderTargetBitmap((int)(bounds.Width * resolution / 96.0)' (int)(bounds.Height * resolution / 96.0)' resolution' resolution' PixelFormats.Pbgra32);
Magic Number,PropertyTools.Wpf,ScreenGrab,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Behaviors\ScreenGrab.cs,Grab,The following statement contains a magic number: var bitmap = new RenderTargetBitmap((int)(bounds.Width * resolution / 96.0)' (int)(bounds.Height * resolution / 96.0)' resolution' resolution' PixelFormats.Pbgra32);
Magic Number,PropertyTools.Wpf,Bitmap,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\Bitmap.cs,AreClose,The following statement contains a magic number: return (delta < 1.53E-06) && (delta > -1.53E-06);
Magic Number,PropertyTools.Wpf,Bitmap,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\Bitmap.cs,AreClose,The following statement contains a magic number: return (delta < 1.53E-06) && (delta > -1.53E-06);
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: byte x = i <= 255 ? (byte)i : (byte)255;
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: byte x = i <= 255 ? (byte)i : (byte)255;
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == HueProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(y / 360' hsv[1]' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == HueProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(y / 360' hsv[1]' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == HueProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(y / 360' hsv[1]' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == SaturationProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(hsv[0]' y / 100' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == SaturationProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(hsv[0]' y / 100' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == SaturationProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(hsv[0]' y / 100' hsv[2]' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == BrightnessProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(hsv[0]' hsv[1]' y / 100' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnComponentChanged,The following statement contains a magic number: if (e.Property == BrightnessProperty)              {                  this.SelectedColor = ColorHelper.HsvToColor(hsv[0]' hsv[1]' y / 100' color.A / 255.0);                  this.UpdateRGB(this.SelectedColor.Value);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,OnIsPickingChanged,The following statement contains a magic number: if (this.IsPicking && this.pickingTimer == null)              {                  this.pickingTimer = new DispatcherTimer { Interval = TimeSpan.FromMilliseconds(100) };                  this.pickingTimer.Tick += this.Pick;                  this.pickingTimer.Start();                    // Mouse.SetCursor(PickerCursor);              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,InitPalette,The following statement contains a magic number: StandardColors = new ObservableCollection<Color>                  {                      Colors.Firebrick'                      Colors.Red'                      Colors.Tomato'                      Colors.OrangeRed'                      Colors.Orange'                      Colors.Gold'                      Colors.Yellow'                      Colors.YellowGreen'                      Colors.SeaGreen'                      Colors.DeepSkyBlue'                      Colors.CornflowerBlue'                      Colors.LightBlue'                      Colors.DarkCyan'                      Colors.MidnightBlue'                      Colors.DarkOrchid'                      Colors.Transparent'                      Color.FromArgb(128' 0' 0' 0)'                      Color.FromArgb(128' 255' 255' 255)'                      ColorHelper.UndefinedColor'                      ColorHelper.Automatic                  };
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,InitPalette,The following statement contains a magic number: StandardColors = new ObservableCollection<Color>                  {                      Colors.Firebrick'                      Colors.Red'                      Colors.Tomato'                      Colors.OrangeRed'                      Colors.Orange'                      Colors.Gold'                      Colors.Yellow'                      Colors.YellowGreen'                      Colors.SeaGreen'                      Colors.DeepSkyBlue'                      Colors.CornflowerBlue'                      Colors.LightBlue'                      Colors.DarkCyan'                      Colors.MidnightBlue'                      Colors.DarkOrchid'                      Colors.Transparent'                      Color.FromArgb(128' 0' 0' 0)'                      Color.FromArgb(128' 255' 255' 255)'                      ColorHelper.UndefinedColor'                      ColorHelper.Automatic                  };
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,InitPalette,The following statement contains a magic number: StandardColors = new ObservableCollection<Color>                  {                      Colors.Firebrick'                      Colors.Red'                      Colors.Tomato'                      Colors.OrangeRed'                      Colors.Orange'                      Colors.Gold'                      Colors.Yellow'                      Colors.YellowGreen'                      Colors.SeaGreen'                      Colors.DeepSkyBlue'                      Colors.CornflowerBlue'                      Colors.LightBlue'                      Colors.DarkCyan'                      Colors.MidnightBlue'                      Colors.DarkOrchid'                      Colors.Transparent'                      Color.FromArgb(128' 0' 0' 0)'                      Color.FromArgb(128' 255' 255' 255)'                      ColorHelper.UndefinedColor'                      ColorHelper.Automatic                  };
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,InitPalette,The following statement contains a magic number: StandardColors = new ObservableCollection<Color>                  {                      Colors.Firebrick'                      Colors.Red'                      Colors.Tomato'                      Colors.OrangeRed'                      Colors.Orange'                      Colors.Gold'                      Colors.Yellow'                      Colors.YellowGreen'                      Colors.SeaGreen'                      Colors.DeepSkyBlue'                      Colors.CornflowerBlue'                      Colors.LightBlue'                      Colors.DarkCyan'                      Colors.MidnightBlue'                      Colors.DarkOrchid'                      Colors.Transparent'                      Color.FromArgb(128' 0' 0' 0)'                      Color.FromArgb(128' 255' 255' 255)'                      ColorHelper.UndefinedColor'                      ColorHelper.Automatic                  };
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,InitPalette,The following statement contains a magic number: StandardColors = new ObservableCollection<Color>                  {                      Colors.Firebrick'                      Colors.Red'                      Colors.Tomato'                      Colors.OrangeRed'                      Colors.Orange'                      Colors.Gold'                      Colors.Yellow'                      Colors.YellowGreen'                      Colors.SeaGreen'                      Colors.DeepSkyBlue'                      Colors.CornflowerBlue'                      Colors.LightBlue'                      Colors.DarkCyan'                      Colors.MidnightBlue'                      Colors.DarkOrchid'                      Colors.Transparent'                      Color.FromArgb(128' 0' 0' 0)'                      Color.FromArgb(128' 255' 255' 255)'                      ColorHelper.UndefinedColor'                      ColorHelper.Automatic                  };
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,Pick,The following statement contains a magic number: if (this.IsPickKeyDown())              {                  try                  {                      Point pt = CaptureScreenshot.GetMouseScreenPosition();                      BitmapSource bmp = CaptureScreenshot.Capture(new Rect(pt' new Size(1' 1)));                      var pixels = new byte[4];                      bmp.CopyPixels(pixels' 4' 0);                      this.SelectedColor = Color.FromArgb(0xFF' pixels[2]' pixels[1]' pixels[0]);                  }                  // ReSharper disable once EmptyGeneralCatchClause                  catch                  {                  }              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,Pick,The following statement contains a magic number: if (this.IsPickKeyDown())              {                  try                  {                      Point pt = CaptureScreenshot.GetMouseScreenPosition();                      BitmapSource bmp = CaptureScreenshot.Capture(new Rect(pt' new Size(1' 1)));                      var pixels = new byte[4];                      bmp.CopyPixels(pixels' 4' 0);                      this.SelectedColor = Color.FromArgb(0xFF' pixels[2]' pixels[1]' pixels[0]);                  }                  // ReSharper disable once EmptyGeneralCatchClause                  catch                  {                  }              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,Pick,The following statement contains a magic number: if (this.IsPickKeyDown())              {                  try                  {                      Point pt = CaptureScreenshot.GetMouseScreenPosition();                      BitmapSource bmp = CaptureScreenshot.Capture(new Rect(pt' new Size(1' 1)));                      var pixels = new byte[4];                      bmp.CopyPixels(pixels' 4' 0);                      this.SelectedColor = Color.FromArgb(0xFF' pixels[2]' pixels[1]' pixels[0]);                  }                  // ReSharper disable once EmptyGeneralCatchClause                  catch                  {                  }              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateOpacityVariations,The following statement contains a magic number: for (int i = 1; i <= 9; i++)              {                  this.OpacityVariations.Add(Color.FromArgb((byte)(255 * (i * 0.1))' color.R' color.G' color.B));              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateOpacityVariations,The following statement contains a magic number: for (int i = 1; i <= 9; i++)              {                  this.OpacityVariations.Add(Color.FromArgb((byte)(255 * (i * 0.1))' color.R' color.G' color.B));              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateOpacityVariations,The following statement contains a magic number: for (int i = 1; i <= 9; i++)              {                  this.OpacityVariations.Add(Color.FromArgb((byte)(255 * (i * 0.1))' color.R' color.G' color.B));              }
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateHSV,The following statement contains a magic number: this.Hue = (int)(hsv[0] * 360);
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateHSV,The following statement contains a magic number: this.Saturation = (int)(hsv[1] * 100);
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateHSV,The following statement contains a magic number: this.Brightness = (int)(hsv[2] * 100);
Magic Number,PropertyTools.Wpf,ColorPickerPanel,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\ColorPickerPanel.cs,UpdateHSV,The following statement contains a magic number: this.Brightness = (int)(hsv[2] * 100);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdatePositionAndSaturationAndValue,The following statement contains a magic number: this.Saturation = 100.0 * positionX / this.ActualWidth;
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdatePositionAndSaturationAndValue,The following statement contains a magic number: this.Value = 100.0 * (1 - positionY / this.ActualHeight);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateSelectedColor,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateSelectedColor,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateSelectedColor,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.thumbTransform.X = this.Saturation * 0.01 * this.ActualWidth;
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.thumbTransform.Y = (100 - this.Value) * 0.01 * this.ActualHeight;
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.thumbTransform.Y = (100 - this.Value) * 0.01 * this.ActualHeight;
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,HsvControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\HsvControl.cs,UpdateThumbPosition,The following statement contains a magic number: this.SelectedColor = ColorHelper.HsvToColor(this.Hue / 360.0' this.Saturation / 100.0' this.Value / 100.0);
Magic Number,PropertyTools.Wpf,SpectrumSlider,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\SpectrumSlider.cs,SetBackground,The following statement contains a magic number: var backgroundBrush = new LinearGradientBrush                  {                     StartPoint = new Point(0.5' 1)' EndPoint = new Point(0.5' 0)                  };
Magic Number,PropertyTools.Wpf,SpectrumSlider,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\SpectrumSlider.cs,SetBackground,The following statement contains a magic number: var backgroundBrush = new LinearGradientBrush                  {                     StartPoint = new Point(0.5' 1)' EndPoint = new Point(0.5' 0)                  };
Magic Number,PropertyTools.Wpf,SpectrumSlider,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\ColorPicker\SpectrumSlider.cs,SetBackground,The following statement contains a magic number: const int SpectrumColorCount = 30;
Magic Number,PropertyTools.Wpf,FormattingTextBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\FormattingTextBox.cs,UnFormat,The following statement contains a magic number: if (match.Groups.Count > 3 && !string.IsNullOrEmpty(match.Groups[3].Value))              {                  s = s.Replace(match.Groups[3].Value' string.Empty);              }
Magic Number,PropertyTools.Wpf,FormattingTextBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\FormattingTextBox.cs,UnFormat,The following statement contains a magic number: if (match.Groups.Count > 3 && !string.IsNullOrEmpty(match.Groups[3].Value))              {                  s = s.Replace(match.Groups[3].Value' string.Empty);              }
Magic Number,PropertyTools.Wpf,FormattingTextBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\FormattingTextBox.cs,UnFormat,The following statement contains a magic number: if (match.Groups.Count > 3 && !string.IsNullOrEmpty(match.Groups[3].Value))              {                  s = s.Replace(match.Groups[3].Value' string.Empty);              }
Magic Number,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,Compare,The following statement contains a magic number: if (c1 == null)              {                  return -2;              }
Magic Number,PropertyTools.Wpf,ColorToComponentConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToComponentConverter.cs,Convert,The following statement contains a magic number: switch (component)              {                  case "R":                      return c.R;                  case "G":                      return c.G;                  case "B":                      return c.B;                  case "A":                      return c.A;                  case "H":                      return (int)(hsv[0] * 360);                  case "S":                      return (int)(hsv[1] * 100);                  case "V":                      return (int)(hsv[2] * 100);              }
Magic Number,PropertyTools.Wpf,ColorToComponentConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToComponentConverter.cs,Convert,The following statement contains a magic number: switch (component)              {                  case "R":                      return c.R;                  case "G":                      return c.G;                  case "B":                      return c.B;                  case "A":                      return c.A;                  case "H":                      return (int)(hsv[0] * 360);                  case "S":                      return (int)(hsv[1] * 100);                  case "V":                      return (int)(hsv[2] * 100);              }
Magic Number,PropertyTools.Wpf,ColorToComponentConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToComponentConverter.cs,Convert,The following statement contains a magic number: switch (component)              {                  case "R":                      return c.R;                  case "G":                      return c.G;                  case "B":                      return c.B;                  case "A":                      return c.A;                  case "H":                      return (int)(hsv[0] * 360);                  case "S":                      return (int)(hsv[1] * 100);                  case "V":                      return (int)(hsv[2] * 100);              }
Magic Number,PropertyTools.Wpf,ColorToComponentConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToComponentConverter.cs,Convert,The following statement contains a magic number: switch (component)              {                  case "R":                      return c.R;                  case "G":                      return c.G;                  case "B":                      return c.B;                  case "A":                      return c.A;                  case "H":                      return (int)(hsv[0] * 360);                  case "S":                      return (int)(hsv[1] * 100);                  case "V":                      return (int)(hsv[2] * 100);              }
Magic Number,PropertyTools.Wpf,ColorToStringConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToStringConverter.cs,Convert,The following statement contains a magic number: double nearestDist = 30;
Magic Number,PropertyTools.Wpf,ColorToStringConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToStringConverter.cs,Convert,The following statement contains a magic number: if (color.A < 255)              {                  return string.Format("{0}' {1:0} %"' nearestColor' color.A / 2.55);              }
Magic Number,PropertyTools.Wpf,ColorToStringConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToStringConverter.cs,Convert,The following statement contains a magic number: if (color.A < 255)              {                  return string.Format("{0}' {1:0} %"' nearestColor' color.A / 2.55);              }
Magic Number,PropertyTools.Wpf,HueToColorConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\HueToColorConverter.cs,Convert,The following statement contains a magic number: return ColorHelper.HsvToColor(doubleValue / 360' 1' 1);
Magic Number,PropertyTools.Wpf,CellRefConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\CellRefConverter.cs,Convert,The following statement contains a magic number: for (int i = columnString.Length - 1; i >= 0; i--)              {                  column += (column * 26) + columnString[i] - 'A';              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AutoSizeColumn,The following statement contains a magic number: var newWidth = (int)maximumWidth + 2;
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AutoSizeRow,The following statement contains a magic number: this.sheetGrid.RowDefinitions[row].Height = new GridLength((int)maximumHeight + 2);
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,GetCell,The following statement contains a magic number: for (var j = 0; j < this.sheetGrid.ColumnDefinitions.Count; j++)              {                  var aw0 = j - 1 >= 0 ? this.sheetGrid.ColumnDefinitions[j - 1].ActualWidth : 0;                  var aw1 = this.sheetGrid.ColumnDefinitions[j].ActualWidth;                  var aw2 = j + 1 < this.sheetGrid.ColumnDefinitions.Count                                   ? this.sheetGrid.ColumnDefinitions[j + 1].ActualWidth                                   : 0;                  if (isInAutoFillMode)                  {                      if (relativeTo.Column <= j)                      {                          aw0 = 0;                          aw2 *= 0.5;                      }                      else                      {                          aw0 *= 0.5;                          aw2 = 0;                      }                  }                  else                  {                      aw0 = 0;                      aw2 = 0;                  }                    if (position.X > w - aw0 && position.X < w + aw1 + aw2)                  {                      column = j;                      break;                  }                    w += aw1;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,GetCell,The following statement contains a magic number: for (var j = 0; j < this.sheetGrid.ColumnDefinitions.Count; j++)              {                  var aw0 = j - 1 >= 0 ? this.sheetGrid.ColumnDefinitions[j - 1].ActualWidth : 0;                  var aw1 = this.sheetGrid.ColumnDefinitions[j].ActualWidth;                  var aw2 = j + 1 < this.sheetGrid.ColumnDefinitions.Count                                   ? this.sheetGrid.ColumnDefinitions[j + 1].ActualWidth                                   : 0;                  if (isInAutoFillMode)                  {                      if (relativeTo.Column <= j)                      {                          aw0 = 0;                          aw2 *= 0.5;                      }                      else                      {                          aw0 *= 0.5;                          aw2 = 0;                      }                  }                  else                  {                      aw0 = 0;                      aw2 = 0;                  }                    if (position.X > w - aw0 && position.X < w + aw1 + aw2)                  {                      column = j;                      break;                  }                    w += aw1;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnMouseMove,The following statement contains a magic number: if (isInAutoFillMode)              {                  this.AutoFillCell = cellRef;                  if (this.autoFiller.TryExtrapolate(                      cellRef'                      this.CurrentCell'                      this.SelectionCell'                      this.AutoFillCell'                      out var result))                  {                      var formatString = this.GetFormatString(cellRef);                      this.autoFillToolTip.Content = FormatValue(result' formatString);                  }                    this.autoFillToolTip.Placement = PlacementMode.Relative;                  var p = e.GetPosition(this.autoFillSelection);                  this.autoFillToolTip.HorizontalOffset = p.X + 8;                  this.autoFillToolTip.VerticalOffset = p.Y + 8;              }              else              {                  this.SelectionCell = cellRef;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnMouseMove,The following statement contains a magic number: if (isInAutoFillMode)              {                  this.AutoFillCell = cellRef;                  if (this.autoFiller.TryExtrapolate(                      cellRef'                      this.CurrentCell'                      this.SelectionCell'                      this.AutoFillCell'                      out var result))                  {                      var formatString = this.GetFormatString(cellRef);                      this.autoFillToolTip.Content = FormatValue(result' formatString);                  }                    this.autoFillToolTip.Placement = PlacementMode.Relative;                  var p = e.GetPosition(this.autoFillSelection);                  this.autoFillToolTip.HorizontalOffset = p.X + 8;                  this.autoFillToolTip.VerticalOffset = p.Y + 8;              }              else              {                  this.SelectionCell = cellRef;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnPreviewMouseWheel,The following statement contains a magic number: if (control)              {                  double s = 1 + (e.Delta * 0.0004);                  var tg = new TransformGroup();                  if (this.LayoutTransform != null)                  {                      tg.Children.Add(this.LayoutTransform);                  }                    tg.Children.Add(new ScaleTransform(s' s));                  this.LayoutTransform = tg;                  e.Handled = true;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,OnTextInput,The following statement contains a magic number: if (e.Text.Length == 0 || e.Text[0] < 32)              {                  return;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,ColumnSplitterChangeDelta,The following statement contains a magic number: tt.VerticalOffset = gs.ActualHeight + 4;
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,RowSplitterChangeDelta,The following statement contains a magic number: tt.HorizontalOffset = gs.ActualWidth + 4;
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,SheetGridMouseDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  this.ShowTextBoxEditControl();                  e.Handled = true;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateCells,The following statement contains a magic number: for (var i = 1; i <= rows; i++)              {                  var border = new Border                  {                      BorderBrush = this.GridLineBrush'                      BorderThickness = new Thickness(0' 1' 0' 0)                  };                    if (i < rows && this.AlternatingRowsBackground != null && i % 2 == 1)                  {                      border.Background = this.AlternatingRowsBackground;                  }                    Grid.SetColumn(border' 0);                  if (columns > 0)                  {                      Grid.SetColumnSpan(border' columns);                  }                    Grid.SetRow(border' i);                  this.sheetGrid.Children.Add(border);              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateSortDescriptionMarkers,The following statement contains a magic number: foreach (var sd in this.sortDescriptions)              {                  int index = -1;                  for (int i = 0; i < this.PropertyDefinitions.Count; i++)                  {                      if (this.PropertyDefinitions[i].PropertyName == sd.PropertyName)                      {                          index = i;                          break;                      }                  }                    if (index == -1) continue;                    var tb = new TextBlock                  {                      Text = sd.Direction == ListSortDirection.Ascending ? "▼" : "▲"'                      Foreground = Brushes.DarkGray'                      Margin = new Thickness(0' 0' 4' 0)'                      HorizontalAlignment = System.Windows.HorizontalAlignment.Right'                      VerticalAlignment = VerticalAlignment.Center                  };                  Grid.SetColumn(tb' index);                  this.columnGrid.Children.Add(tb);                  this.sortDescriptionMarkers.Add(tb);              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: this.columnGrid.ColumnDefinitions.Add(                  new System.Windows.Controls.ColumnDefinition { Width = new GridLength(40) });
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  var header = this.GetColumnHeader(j);                  var cellref = new CellRef(this.ItemsInRows ? -1 : j' this.ItemsInRows ? j : -1);                  var pd = this.GetPropertyDefinition(cellref);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(0' 1' 1' 1)'                      Margin = new Thickness(0' 0' j < columns - 1 ? -1 : 0' 0)                  };                  Grid.SetColumn(border' j);                  this.columnGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ?? new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = this.ItemsInRows ? pd.HorizontalAlignment : System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (pd?.Tooltip != null)                  {                      ToolTipService.SetToolTip(cell' pd.Tooltip);                  }                    if (this.ColumnHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.ColumnHeadersSource;                      cell.SetBinding(TextBlock.TextProperty' new Binding($"[{j}]") { StringFormat = this.ColumnHeadersFormatString });                  }                    Grid.SetColumn(cell' j);                  this.columnGrid.Children.Add(cell);                  this.columnHeaderMap[j] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  var header = this.GetColumnHeader(j);                  var cellref = new CellRef(this.ItemsInRows ? -1 : j' this.ItemsInRows ? j : -1);                  var pd = this.GetPropertyDefinition(cellref);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(0' 1' 1' 1)'                      Margin = new Thickness(0' 0' j < columns - 1 ? -1 : 0' 0)                  };                  Grid.SetColumn(border' j);                  this.columnGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ?? new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = this.ItemsInRows ? pd.HorizontalAlignment : System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (pd?.Tooltip != null)                  {                      ToolTipService.SetToolTip(cell' pd.Tooltip);                  }                    if (this.ColumnHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.ColumnHeadersSource;                      cell.SetBinding(TextBlock.TextProperty' new Binding($"[{j}]") { StringFormat = this.ColumnHeadersFormatString });                  }                    Grid.SetColumn(cell' j);                  this.columnGrid.Children.Add(cell);                  this.columnHeaderMap[j] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  var header = this.GetColumnHeader(j);                  var cellref = new CellRef(this.ItemsInRows ? -1 : j' this.ItemsInRows ? j : -1);                  var pd = this.GetPropertyDefinition(cellref);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(0' 1' 1' 1)'                      Margin = new Thickness(0' 0' j < columns - 1 ? -1 : 0' 0)                  };                  Grid.SetColumn(border' j);                  this.columnGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ?? new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = this.ItemsInRows ? pd.HorizontalAlignment : System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (pd?.Tooltip != null)                  {                      ToolTipService.SetToolTip(cell' pd.Tooltip);                  }                    if (this.ColumnHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.ColumnHeadersSource;                      cell.SetBinding(TextBlock.TextProperty' new Binding($"[{j}]") { StringFormat = this.ColumnHeadersFormatString });                  }                    Grid.SetColumn(cell' j);                  this.columnGrid.Children.Add(cell);                  this.columnHeaderMap[j] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  var header = this.GetColumnHeader(j);                  var cellref = new CellRef(this.ItemsInRows ? -1 : j' this.ItemsInRows ? j : -1);                  var pd = this.GetPropertyDefinition(cellref);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(0' 1' 1' 1)'                      Margin = new Thickness(0' 0' j < columns - 1 ? -1 : 0' 0)                  };                  Grid.SetColumn(border' j);                  this.columnGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ?? new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = this.ItemsInRows ? pd.HorizontalAlignment : System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (pd?.Tooltip != null)                  {                      ToolTipService.SetToolTip(cell' pd.Tooltip);                  }                    if (this.ColumnHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.ColumnHeadersSource;                      cell.SetBinding(TextBlock.TextProperty' new Binding($"[{j}]") { StringFormat = this.ColumnHeadersFormatString });                  }                    Grid.SetColumn(cell' j);                  this.columnGrid.Children.Add(cell);                  this.columnHeaderMap[j] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  if (this.CanResizeColumns)                  {                      var splitter = new GridSplitter                      {                          ResizeDirection = GridResizeDirection.Columns'                          Background = Brushes.Transparent'                          Width = 5'                          RenderTransform = new TranslateTransform(3' 0)'                          Focusable = false'                          VerticalAlignment = VerticalAlignment.Stretch'                          HorizontalAlignment = System.Windows.HorizontalAlignment.Right                      };                      splitter.MouseDoubleClick += this.ColumnSplitterDoubleClick;                      splitter.DragStarted += this.ColumnSplitterChangeStarted;                      splitter.DragDelta += this.ColumnSplitterChangeDelta;                      splitter.DragCompleted += this.ColumnSplitterChangeCompleted;                      Grid.SetColumn(splitter' j);                      this.columnGrid.Children.Add(splitter);                  }              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateColumns,The following statement contains a magic number: for (var j = 0; j < columns; j++)              {                  if (this.CanResizeColumns)                  {                      var splitter = new GridSplitter                      {                          ResizeDirection = GridResizeDirection.Columns'                          Background = Brushes.Transparent'                          Width = 5'                          RenderTransform = new TranslateTransform(3' 0)'                          Focusable = false'                          VerticalAlignment = VerticalAlignment.Stretch'                          HorizontalAlignment = System.Windows.HorizontalAlignment.Right                      };                      splitter.MouseDoubleClick += this.ColumnSplitterDoubleClick;                      splitter.DragStarted += this.ColumnSplitterChangeStarted;                      splitter.DragDelta += this.ColumnSplitterChangeDelta;                      splitter.DragCompleted += this.ColumnSplitterChangeCompleted;                      Grid.SetColumn(splitter' j);                      this.columnGrid.Children.Add(splitter);                  }              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var i = 0; i < rows; i++)              {                  var header = this.GetRowHeader(i);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' -1)                  };                    Grid.SetRow(border' i);                  this.rowGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ??                             new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (this.ItemHeaderPropertyPath != null && this.ItemsInRows)                  {                      cell.DataContext = this.Operator.GetItem(this' new CellRef(i' -1));                      cell.SetBinding(TextBlock.TextProperty' new Binding(this.ItemHeaderPropertyPath));                  }                    if (this.RowHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.RowHeadersSource;                      cell.SetBinding(                          TextBlock.TextProperty'                          new Binding($"[{i}]") { StringFormat = this.RowHeadersFormatString });                  }                    Grid.SetRow(cell' i);                  this.rowGrid.Children.Add(cell);                  this.rowHeaderMap[i] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var i = 0; i < rows; i++)              {                  var header = this.GetRowHeader(i);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' -1)                  };                    Grid.SetRow(border' i);                  this.rowGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ??                             new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (this.ItemHeaderPropertyPath != null && this.ItemsInRows)                  {                      cell.DataContext = this.Operator.GetItem(this' new CellRef(i' -1));                      cell.SetBinding(TextBlock.TextProperty' new Binding(this.ItemHeaderPropertyPath));                  }                    if (this.RowHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.RowHeadersSource;                      cell.SetBinding(                          TextBlock.TextProperty'                          new Binding($"[{i}]") { StringFormat = this.RowHeadersFormatString });                  }                    Grid.SetRow(cell' i);                  this.rowGrid.Children.Add(cell);                  this.rowHeaderMap[i] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var i = 0; i < rows; i++)              {                  var header = this.GetRowHeader(i);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' -1)                  };                    Grid.SetRow(border' i);                  this.rowGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ??                             new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (this.ItemHeaderPropertyPath != null && this.ItemsInRows)                  {                      cell.DataContext = this.Operator.GetItem(this' new CellRef(i' -1));                      cell.SetBinding(TextBlock.TextProperty' new Binding(this.ItemHeaderPropertyPath));                  }                    if (this.RowHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.RowHeadersSource;                      cell.SetBinding(                          TextBlock.TextProperty'                          new Binding($"[{i}]") { StringFormat = this.RowHeadersFormatString });                  }                    Grid.SetRow(cell' i);                  this.rowGrid.Children.Add(cell);                  this.rowHeaderMap[i] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var i = 0; i < rows; i++)              {                  var header = this.GetRowHeader(i);                    var border = new Border                  {                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' -1)                  };                    Grid.SetRow(border' i);                  this.rowGrid.Children.Add(border);                    var cell = header as FrameworkElement                             ??                             new TextBlock                             {                                 Text = header?.ToString() ?? "-"'                                 VerticalAlignment = VerticalAlignment.Center'                                 HorizontalAlignment = System.Windows.HorizontalAlignment.Center'                                 Padding = new Thickness(4' 2' 4' 2)                             };                    if (this.ItemHeaderPropertyPath != null && this.ItemsInRows)                  {                      cell.DataContext = this.Operator.GetItem(this' new CellRef(i' -1));                      cell.SetBinding(TextBlock.TextProperty' new Binding(this.ItemHeaderPropertyPath));                  }                    if (this.RowHeadersSource != null && this.ItemsInRows)                  {                      cell.DataContext = this.RowHeadersSource;                      cell.SetBinding(                          TextBlock.TextProperty'                          new Binding($"[{i}]") { StringFormat = this.RowHeadersFormatString });                  }                    Grid.SetRow(cell' i);                  this.rowGrid.Children.Add(cell);                  this.rowHeaderMap[i] = cell;              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var j = 0; j < rows; j++)              {                  if (this.CanResizeRows)                  {                      var splitter = new GridSplitter                      {                          ResizeDirection = GridResizeDirection.Rows'                          Background = Brushes.Transparent'                          Height = 5'                          RenderTransform = new TranslateTransform(0' 3)'                          Focusable = false'                          VerticalAlignment = VerticalAlignment.Bottom'                          HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch                      };                      splitter.MouseDoubleClick += this.RowSplitterDoubleClick;                      splitter.DragStarted += this.RowSplitterChangeStarted;                      splitter.DragDelta += this.RowSplitterChangeDelta;                      splitter.DragCompleted += this.RowSplitterChangeCompleted;                      Grid.SetRow(splitter' j);                      this.rowGrid.Children.Add(splitter);                  }              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,UpdateRows,The following statement contains a magic number: for (var j = 0; j < rows; j++)              {                  if (this.CanResizeRows)                  {                      var splitter = new GridSplitter                      {                          ResizeDirection = GridResizeDirection.Rows'                          Background = Brushes.Transparent'                          Height = 5'                          RenderTransform = new TranslateTransform(0' 3)'                          Focusable = false'                          VerticalAlignment = VerticalAlignment.Bottom'                          HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch                      };                      splitter.MouseDoubleClick += this.RowSplitterDoubleClick;                      splitter.DragStarted += this.RowSplitterChangeStarted;                      splitter.DragDelta += this.RowSplitterChangeDelta;                      splitter.DragCompleted += this.RowSplitterChangeCompleted;                      Grid.SetRow(splitter' j);                      this.rowGrid.Children.Add(splitter);                  }              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AddInserterRow,The following statement contains a magic number: if (this.CanInsertRows && this.AddItemHeader != null)              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                    var cell = new TextBlock                  {                      Text = this.AddItemHeader'                      VerticalAlignment = VerticalAlignment.Center'                      HorizontalAlignment = System.Windows.HorizontalAlignment.Center                  };                  var border = new Border                  {                      Background = Brushes.Transparent'                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' 0)                  };                    border.MouseLeftButtonDown += this.AddItemCellMouseLeftButtonDown;                  Grid.SetRow(border' rows);                    cell.Padding = new Thickness(4' 2' 4' 2);                  Grid.SetRow(cell' rows);                  this.rowGrid.Children.Add(cell);                  this.rowGrid.Children.Add(border);              }              else              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AddInserterRow,The following statement contains a magic number: if (this.CanInsertRows && this.AddItemHeader != null)              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                    var cell = new TextBlock                  {                      Text = this.AddItemHeader'                      VerticalAlignment = VerticalAlignment.Center'                      HorizontalAlignment = System.Windows.HorizontalAlignment.Center                  };                  var border = new Border                  {                      Background = Brushes.Transparent'                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' 0)                  };                    border.MouseLeftButtonDown += this.AddItemCellMouseLeftButtonDown;                  Grid.SetRow(border' rows);                    cell.Padding = new Thickness(4' 2' 4' 2);                  Grid.SetRow(cell' rows);                  this.rowGrid.Children.Add(cell);                  this.rowGrid.Children.Add(border);              }              else              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AddInserterRow,The following statement contains a magic number: if (this.CanInsertRows && this.AddItemHeader != null)              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                    var cell = new TextBlock                  {                      Text = this.AddItemHeader'                      VerticalAlignment = VerticalAlignment.Center'                      HorizontalAlignment = System.Windows.HorizontalAlignment.Center                  };                  var border = new Border                  {                      Background = Brushes.Transparent'                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' 0)                  };                    border.MouseLeftButtonDown += this.AddItemCellMouseLeftButtonDown;                  Grid.SetRow(border' rows);                    cell.Padding = new Thickness(4' 2' 4' 2);                  Grid.SetRow(cell' rows);                  this.rowGrid.Children.Add(cell);                  this.rowGrid.Children.Add(border);              }              else              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });              }
Magic Number,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,AddInserterRow,The following statement contains a magic number: if (this.CanInsertRows && this.AddItemHeader != null)              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = this.DefaultRowHeight });                    var cell = new TextBlock                  {                      Text = this.AddItemHeader'                      VerticalAlignment = VerticalAlignment.Center'                      HorizontalAlignment = System.Windows.HorizontalAlignment.Center                  };                  var border = new Border                  {                      Background = Brushes.Transparent'                      BorderBrush = this.HeaderBorderBrush'                      BorderThickness = new Thickness(1' 0' 1' 1)'                      Margin = new Thickness(0' 0' 0' 0)                  };                    border.MouseLeftButtonDown += this.AddItemCellMouseLeftButtonDown;                  Grid.SetRow(border' rows);                    cell.Padding = new Thickness(4' 2' 4' 2);                  Grid.SetRow(cell' rows);                  this.rowGrid.Children.Add(cell);                  this.rowGrid.Children.Add(border);              }              else              {                  this.sheetGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });                  this.rowGrid.RowDefinitions.Add(new System.Windows.Controls.RowDefinition { Height = GridLength.Auto });              }
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateColorPreviewControl,The following statement contains a magic number: var c = new Rectangle              {                  Stroke = Brushes.Black'                  StrokeThickness = 1'                  SnapsToDevicePixels = true'                  Width = 12'                  Height = 12              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateColorPreviewControl,The following statement contains a magic number: var c = new Rectangle              {                  Stroke = Brushes.Black'                  StrokeThickness = 1'                  SnapsToDevicePixels = true'                  Width = 12'                  Height = 12              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateComboBox,The following statement contains a magic number: var c = new ComboBox              {                  IsEditable = d.IsEditable'                  Focusable = false' // keep focus on the data grid until the user opens the dropdown                  Margin = new Thickness(1' 1' 0' 0)'                  HorizontalContentAlignment = d.HorizontalAlignment'                  VerticalContentAlignment = VerticalAlignment.Center'                  Padding = new Thickness(3' 0' 3' 0)'                  BorderThickness = new Thickness(0)              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateComboBox,The following statement contains a magic number: var c = new ComboBox              {                  IsEditable = d.IsEditable'                  Focusable = false' // keep focus on the data grid until the user opens the dropdown                  Margin = new Thickness(1' 1' 0' 0)'                  HorizontalContentAlignment = d.HorizontalAlignment'                  VerticalContentAlignment = VerticalAlignment.Center'                  Padding = new Thickness(3' 0' 3' 0)'                  BorderThickness = new Thickness(0)              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateTextBlockControl,The following statement contains a magic number: var c = new TextBlockEx              {                  HorizontalAlignment = d.HorizontalAlignment'                  VerticalAlignment = VerticalAlignment.Center'                  Padding = new Thickness(4' 0' 4' 0)              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateTextBlockControl,The following statement contains a magic number: var c = new TextBlockEx              {                  HorizontalAlignment = d.HorizontalAlignment'                  VerticalAlignment = VerticalAlignment.Center'                  Padding = new Thickness(4' 0' 4' 0)              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateTextBlockControl,The following statement contains a magic number: var c = new TextBlockEx              {                  HorizontalAlignment = d.HorizontalAlignment'                  VerticalAlignment = VerticalAlignment.Center'                  Padding = new Thickness(4' 0' 4' 0)              };
Magic Number,PropertyTools.Wpf,DataGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\ControlFactories\DataGridControlFactory.cs,CreateTextBlockControl,The following statement contains a magic number: var c = new TextBlockEx              {                  HorizontalAlignment = d.HorizontalAlignment'                  VerticalAlignment = VerticalAlignment.Center'                  Padding = new Thickness(4' 0' 4' 0)              };
Magic Number,PropertyTools.Wpf,AboutDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\AboutDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 32 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.SystemInfoClick);                            #line default              #line hidden              return;              case 3:                            #line 33 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyClick);                            #line default              #line hidden              return;              }
Magic Number,PropertyTools.Wpf,AboutDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\AboutDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 32 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.SystemInfoClick);                            #line default              #line hidden              return;              case 3:                            #line 33 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyClick);                            #line default              #line hidden              return;              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double r = 1 - (c / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double r = 1 - (c / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double r = 1 - (c / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double g = 1 - (m / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double g = 1 - (m / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double g = 1 - (m / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double b = 1 - (y / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double b = 1 - (y / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: double b = 1 - (y / 100) * (1 - (k / 100)) - (k / 100);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: return Color.FromRgb((byte)(255 * r)' (byte)(255 * g)' (byte)(255 * b));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: return Color.FromRgb((byte)(255 * r)' (byte)(255 * g)' (byte)(255 * b));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,CmykToColor,The following statement contains a magic number: return Color.FromRgb((byte)(255 * r)' (byte)(255 * g)' (byte)(255 * b));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double dr = (c1.R - c2.R) / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double dg = (c1.G - c2.G) / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double db = (c1.B - c2.B) / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double da = (c1.A - c2.A) / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToCmyk,The following statement contains a magic number: double computedC = 1 - (r / 255.0);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToCmyk,The following statement contains a magic number: double computedM = 1 - (g / 255.0);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToCmyk,The following statement contains a magic number: double computedY = 1 - (b / 255.0);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: if (s == 0)              {                  h = 0.0;              }              else              {                  if (r == v)                  {                      h = (g - b) / delta;                  }                  else if (g == v)                  {                      h = 2 + (b - r) / delta;                  }                  else if (b == v)                  {                      h = 4 + (r - g) / delta;                  }                    h *= 60;                  if (h < 0.0)                  {                      h = h + 360;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: if (s == 0)              {                  h = 0.0;              }              else              {                  if (r == v)                  {                      h = (g - b) / delta;                  }                  else if (g == v)                  {                      h = 2 + (b - r) / delta;                  }                  else if (b == v)                  {                      h = 4 + (r - g) / delta;                  }                    h *= 60;                  if (h < 0.0)                  {                      h = h + 360;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: if (s == 0)              {                  h = 0.0;              }              else              {                  if (r == v)                  {                      h = (g - b) / delta;                  }                  else if (g == v)                  {                      h = 2 + (b - r) / delta;                  }                  else if (b == v)                  {                      h = 4 + (r - g) / delta;                  }                    h *= 60;                  if (h < 0.0)                  {                      h = h + 360;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: if (s == 0)              {                  h = 0.0;              }              else              {                  if (r == v)                  {                      h = (g - b) / delta;                  }                  else if (g == v)                  {                      h = 2 + (b - r) / delta;                  }                  else if (b == v)                  {                      h = 4 + (r - g) / delta;                  }                    h *= 60;                  if (h < 0.0)                  {                      h = h + 360;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: var hsv = new double[3];
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[0] = h / 360.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[2] = v / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[2] = v / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: var hsv2 = new byte[3];
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[0] = (byte)(hsv1[0] * 255);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[1] = (byte)(hsv1[1] * 255);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: uint u = (uint)c.A << 24;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: u += (uint)c.R << 16;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: u += (uint)c.G << 8;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,Complementary,The following statement contains a magic number: double newHue = hsv[0] - 0.5;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,Complementary,The following statement contains a magic number: return HsvToColor(newHue' hsv[1]' hsv[2]);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HexToColor,The following statement contains a magic number: if (value.Length <= 6)              {                  value = "FF" + value.PadLeft(6' '0');              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HexToColor,The following statement contains a magic number: if (value.Length <= 6)              {                  value = "FF" + value.PadLeft(6' '0');              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double h = hue * 360.0 / 255;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double h = hue * 360.0 / 255;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double s = saturation / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double v = value / 255.0;
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (s == 0)              {                  r = v;                  g = v;                  b = v;              }              else              {                  if (h == 360)                  {                      h = 0;                  }                  else                  {                      h = h / 60;                  }                    var i = (int)Math.Truncate(h);                  double f = h - i;                    double p = v * (1.0 - s);                  double q = v * (1.0 - (s * f));                  double t = v * (1.0 - (s * (1.0 - f)));                    switch (i)                  {                      case 0:                          r = v;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = v;                          b = p;                          break;                        case 2:                          r = p;                          g = v;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = v;                          break;                        case 4:                          r = t;                          g = p;                          b = v;                          break;                        default:                          r = v;                          g = p;                          b = q;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (s == 0)              {                  r = v;                  g = v;                  b = v;              }              else              {                  if (h == 360)                  {                      h = 0;                  }                  else                  {                      h = h / 60;                  }                    var i = (int)Math.Truncate(h);                  double f = h - i;                    double p = v * (1.0 - s);                  double q = v * (1.0 - (s * f));                  double t = v * (1.0 - (s * (1.0 - f)));                    switch (i)                  {                      case 0:                          r = v;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = v;                          b = p;                          break;                        case 2:                          r = p;                          g = v;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = v;                          break;                        case 4:                          r = t;                          g = p;                          b = v;                          break;                        default:                          r = v;                          g = p;                          b = q;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (s == 0)              {                  r = v;                  g = v;                  b = v;              }              else              {                  if (h == 360)                  {                      h = 0;                  }                  else                  {                      h = h / 60;                  }                    var i = (int)Math.Truncate(h);                  double f = h - i;                    double p = v * (1.0 - s);                  double q = v * (1.0 - (s * f));                  double t = v * (1.0 - (s * (1.0 - f)));                    switch (i)                  {                      case 0:                          r = v;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = v;                          b = p;                          break;                        case 2:                          r = p;                          g = v;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = v;                          break;                        case 4:                          r = t;                          g = p;                          b = v;                          break;                        default:                          r = v;                          g = p;                          b = q;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (s == 0)              {                  r = v;                  g = v;                  b = v;              }              else              {                  if (h == 360)                  {                      h = 0;                  }                  else                  {                      h = h / 60;                  }                    var i = (int)Math.Truncate(h);                  double f = h - i;                    double p = v * (1.0 - s);                  double q = v * (1.0 - (s * f));                  double t = v * (1.0 - (s * (1.0 - f)));                    switch (i)                  {                      case 0:                          r = v;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = v;                          b = p;                          break;                        case 2:                          r = p;                          g = v;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = v;                          break;                        case 4:                          r = t;                          g = p;                          b = v;                          break;                        default:                          r = v;                          g = p;                          b = q;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (s == 0)              {                  r = v;                  g = v;                  b = v;              }              else              {                  if (h == 360)                  {                      h = 0;                  }                  else                  {                      h = h / 60;                  }                    var i = (int)Math.Truncate(h);                  double f = h - i;                    double p = v * (1.0 - s);                  double q = v * (1.0 - (s * f));                  double t = v * (1.0 - (s * (1.0 - f)));                    switch (i)                  {                      case 0:                          r = v;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = v;                          b = p;                          break;                        case 2:                          r = p;                          g = v;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = v;                          break;                        case 4:                          r = t;                          g = p;                          b = v;                          break;                        default:                          r = v;                          g = p;                          b = q;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(alpha' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(alpha' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(alpha' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (sat == 0)              {                  // Gray scale                  r = g = b = val;              }              else              {                  if (hue == 1.0)                  {                      hue = 0;                  }                    hue *= 6.0;                  var i = (int)Math.Floor(hue);                  double f = hue - i;                  double aa = val * (1 - sat);                  double bb = val * (1 - (sat * f));                  double cc = val * (1 - (sat * (1 - f)));                  switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (sat == 0)              {                  // Gray scale                  r = g = b = val;              }              else              {                  if (hue == 1.0)                  {                      hue = 0;                  }                    hue *= 6.0;                  var i = (int)Math.Floor(hue);                  double f = hue - i;                  double aa = val * (1 - sat);                  double bb = val * (1 - (sat * f));                  double cc = val * (1 - (sat * (1 - f)));                  switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (sat == 0)              {                  // Gray scale                  r = g = b = val;              }              else              {                  if (hue == 1.0)                  {                      hue = 0;                  }                    hue *= 6.0;                  var i = (int)Math.Floor(hue);                  double f = hue - i;                  double aa = val * (1 - sat);                  double bb = val * (1 - (sat * f));                  double cc = val * (1 - (sat * (1 - f)));                  switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (sat == 0)              {                  // Gray scale                  r = g = b = val;              }              else              {                  if (hue == 1.0)                  {                      hue = 0;                  }                    hue *= 6.0;                  var i = (int)Math.Floor(hue);                  double f = hue - i;                  double aa = val * (1 - sat);                  double bb = val * (1 - (sat * f));                  double cc = val * (1 - (sat * (1 - f)));                  switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: if (sat == 0)              {                  // Gray scale                  r = g = b = val;              }              else              {                  if (hue == 1.0)                  {                      hue = 0;                  }                    hue *= 6.0;                  var i = (int)Math.Floor(hue);                  double f = hue - i;                  double aa = val * (1 - sat);                  double bb = val * (1 - (sat * f));                  double cc = val * (1 - (sat * (1 - f)));                  switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb((byte)(alpha * 255)' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb((byte)(alpha * 255)' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb((byte)(alpha * 255)' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb((byte)(alpha * 255)' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HueDifference,The following statement contains a magic number: if (dh > 0.5)              {                  dh -= 1.0;              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HueDifference,The following statement contains a magic number: if (dh < -0.5)              {                  dh += 1.0;              }
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var a = (byte)(color >> 24);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var r = (byte)(color >> 16);
Magic Number,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var g = (byte)(color >> 8);
Magic Number,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.NextButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.FinishButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.NextButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.FinishButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.NextButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.FinishButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.NextButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.FinishButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanFormatter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanFormatter.cs,EvaluateMatch,The following statement contains a magic number: switch (match.Value)              {                  case "DD":                      return timeSpan.TotalDays.ToString("00");                  case "D":                      return timeSpan.TotalDays.ToString("0");                  case "dd":                      return timeSpan.Days.ToString("00");                  case "d":                      return timeSpan.Days.ToString("0");                  case "HH":                      return ((int)timeSpan.TotalHours).ToString("00");                  case "H":                      return ((int)timeSpan.TotalHours).ToString("0");                  case "hh":                      return timeSpan.Hours.ToString("00");                  case "h":                      return timeSpan.Hours.ToString("0");                  case "MM":                      return ((int)timeSpan.TotalMinutes).ToString("00");                  case "M":                      return ((int)timeSpan.TotalMinutes).ToString("0");                  case "mm":                      return timeSpan.Minutes.ToString("00");                  case "m":                      return timeSpan.Minutes.ToString("0");                  case "SS":                      return ((int)timeSpan.TotalSeconds).ToString("00");                  case "S":                      return ((int)timeSpan.TotalSeconds).ToString("0");                  case "ss":                      return timeSpan.Seconds.ToString("00");                  case "s":                      return timeSpan.Seconds.ToString("0");                  case "fffffff":                      return (timeSpan.Milliseconds * 10000).ToString("0000000");                  case "ffffff":                      return (timeSpan.Milliseconds * 1000).ToString("000000");                  case "fffff":                      return (timeSpan.Milliseconds * 100).ToString("00000");                  case "ffff":                      return (timeSpan.Milliseconds * 10).ToString("0000");                  case "fff":                      return timeSpan.Milliseconds.ToString("000");                  case "ff":                      return (timeSpan.Milliseconds / 10).ToString("00");                  case "f":                      return (timeSpan.Milliseconds / 100).ToString("0");                  default:                      return match.Value;              }
Magic Number,PropertyTools.Wpf,TimeSpanParser,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanParser.cs,Parse,The following statement contains a magic number: foreach (Match m in ParserExpression.Matches(value))              {                  string number = m.Groups[1].Value;                  if (string.IsNullOrWhiteSpace(number))                  {                      continue;                  }                    double d = double.Parse(number.Replace('''' '.')' CultureInfo.InvariantCulture);                  string unit = m.Groups[2].Value;                  switch (unit.ToLower())                  {                      case "":                      case "d":                          total = total.Add(TimeSpan.FromDays(d));                          break;                      case "h":                          total = total.Add(TimeSpan.FromHours(d));                          break;                      case "m":                      case "'":                          total = total.Add(TimeSpan.FromMinutes(d));                          break;                      case "\"":                      case "s":                          total = total.Add(TimeSpan.FromSeconds(d));                          break;                  }              }
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,PropertyDialog,The following statement contains a magic number: this.MaxWidth = SystemParameters.PrimaryScreenWidth * 0.9;
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,PropertyDialog,The following statement contains a magic number: this.MaxHeight = SystemParameters.PrimaryScreenHeight * 0.9;
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Magic Number,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateCommentControl,The following statement contains a magic number: var tb = new TextBlock              {                  VerticalAlignment = VerticalAlignment.Center'                  Margin = new Thickness(4)'                  Focusable = false'                  TextWrapping = TextWrapping.Wrap              };
Magic Number,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateContentControl,The following statement contains a magic number: var b = new ContentControl              {                  HorizontalAlignment = HorizontalAlignment.Stretch'                  VerticalAlignment = VerticalAlignment.Center'                  Margin = new Thickness(4)'                  Focusable = false'                  HorizontalContentAlignment = HorizontalAlignment.Stretch              };
Magic Number,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateCheckableItems,The following statement contains a magic number: lb.Margin = new Thickness(0' 6' 0' 6);
Magic Number,PropertyTools.Wpf,PropertyGridControlFactory,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridControlFactory.cs,CreateCheckableItems,The following statement contains a magic number: lb.Margin = new Thickness(0' 6' 0' 6);
Magic Number,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,SetProperties,The following statement contains a magic number: if (category != null)              {                  var items = category.Split('|');                  if (items.Length == 2)                  {                      tabName = items[0];                      categoryName = items[1];                  }                    if (items.Length == 1)                  {                      categoryName = items[0];                  }              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateControls,The following statement contains a magic number: foreach (var tab in tabs)              {                  bool fillTab = tab.Groups.Count == 1 && tab.Groups[0].Properties.Count == 1                                 && tab.Groups[0].Properties[0].FillTab;                    // Create the panel for the tab content                  var tabPanel = new Grid();                    if (this.LabelWidthSharing == LabelWidthSharing.SharedInTab)                  {                      Grid.SetIsSharedSizeScope(tabPanel' true);                  }                    var tabItem = new TabItem { Header = tab' Padding = new Thickness(4)' Name = tab.Id ?? string.Empty };                    var dataErrorInfoInstance = instance as IDataErrorInfo;                  if (dataErrorInfoInstance != null)                  {                      tab.UpdateHasErrors(dataErrorInfoInstance);                  }                    if (fillTab)                  {                      tabItem.Content = tabPanel;                  }                  else                  {                      tabItem.Content = new ScrollViewer                      {                          VerticalScrollBarVisibility = ScrollBarVisibility.Auto'                          Content = tabPanel'                          Focusable = false                      };                  }                    this.tabControl.Items.Add(tabItem);                    // set no margin if 'fill tab' and no tab page header                  tabPanel.Margin = new Thickness(fillTab && this.TabPageHeaderTemplate == null ? 0 : 4);                    if (this.TabHeaderTemplate != null)                  {                      tabItem.Header = tab;                      tabItem.HeaderTemplate = this.TabHeaderTemplate;                  }                    this.AddTabPageHeader(tab' tabPanel);                    int i = 0;                  foreach (var g in tab.Groups)                  {                      var groupPanel = this.CreatePropertyPanel(g' tabPanel' i++' fillTab);                      foreach (var pi in g.Properties)                      {                          // create and add the property panel (label' tooltip icon and property control)                          this.AddPropertyPanel(groupPanel' pi' instance' tab);                      }                  }              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateControls,The following statement contains a magic number: foreach (var tab in tabs)              {                  bool fillTab = tab.Groups.Count == 1 && tab.Groups[0].Properties.Count == 1                                 && tab.Groups[0].Properties[0].FillTab;                    // Create the panel for the tab content                  var tabPanel = new Grid();                    if (this.LabelWidthSharing == LabelWidthSharing.SharedInTab)                  {                      Grid.SetIsSharedSizeScope(tabPanel' true);                  }                    var tabItem = new TabItem { Header = tab' Padding = new Thickness(4)' Name = tab.Id ?? string.Empty };                    var dataErrorInfoInstance = instance as IDataErrorInfo;                  if (dataErrorInfoInstance != null)                  {                      tab.UpdateHasErrors(dataErrorInfoInstance);                  }                    if (fillTab)                  {                      tabItem.Content = tabPanel;                  }                  else                  {                      tabItem.Content = new ScrollViewer                      {                          VerticalScrollBarVisibility = ScrollBarVisibility.Auto'                          Content = tabPanel'                          Focusable = false                      };                  }                    this.tabControl.Items.Add(tabItem);                    // set no margin if 'fill tab' and no tab page header                  tabPanel.Margin = new Thickness(fillTab && this.TabPageHeaderTemplate == null ? 0 : 4);                    if (this.TabHeaderTemplate != null)                  {                      tabItem.Header = tab;                      tabItem.HeaderTemplate = this.TabHeaderTemplate;                  }                    this.AddTabPageHeader(tab' tabPanel);                    int i = 0;                  foreach (var g in tab.Groups)                  {                      var groupPanel = this.CreatePropertyPanel(g' tabPanel' i++' fillTab);                      foreach (var pi in g.Properties)                      {                          // create and add the property panel (label' tooltip icon and property control)                          this.AddPropertyPanel(groupPanel' pi' instance' tab);                      }                  }              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreatePropertyPanel,The following statement contains a magic number: switch (this.CategoryControlType)              {                  case CategoryControlType.GroupBox:                      groupContentControl = new GroupBox { Margin = new Thickness(0' 4' 0' 4) };                      break;                  case CategoryControlType.Expander:                      groupContentControl = new Expander { IsExpanded = index == 0 };                      break;                  case CategoryControlType.Template:                      groupContentControl = new HeaderedContentControl                      {                          Template = this.CategoryControlTemplate'                          Focusable = false                      };                      break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreatePropertyPanel,The following statement contains a magic number: switch (this.CategoryControlType)              {                  case CategoryControlType.GroupBox:                      groupContentControl = new GroupBox { Margin = new Thickness(0' 4' 0' 4) };                      break;                  case CategoryControlType.Expander:                      groupContentControl = new Expander { IsExpanded = index == 0 };                      break;                  case CategoryControlType.Template:                      groupContentControl = new HeaderedContentControl                      {                          Template = this.CategoryControlTemplate'                          Focusable = false                      };                      break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: if (!pi.FillTab)              {                  propertyPanel.Margin = new Thickness(2);              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: switch (actualHeaderPlacement)              {                  case HeaderPlacement.Hidden:                      break;                    case HeaderPlacement.Collapsed:                      {                          if (propertyControl != null)                          {                              Grid.SetColumn(propertyControl' 0);                              Grid.SetColumnSpan(propertyControl' 2);                          }                            break;                      }                    default:                      {                          // create the label panel                          var labelPanel = new DockPanel();                          if (pi.HeaderPlacement == HeaderPlacement.Left)                          {                              DockPanel.SetDock(labelPanel' Dock.Left);                          }                          else                          {                              // Above                              if (propertyControl != null)                              {                                  propertyPanel.RowDefinitions.Add(new System.Windows.Controls.RowDefinition());                                  Grid.SetColumnSpan(labelPanel' 2);                                  Grid.SetRow(propertyControl' 1);                                  Grid.SetColumn(propertyControl' 0);                                  Grid.SetColumnSpan(propertyControl' 2);                              }                          }                            propertyPanel.Children.Add(labelPanel);                            if (propertyLabel != null)                          {                              DockPanel.SetDock(propertyLabel' Dock.Left);                              labelPanel.Children.Add(propertyLabel);                          }                            if (this.ShowDescriptionIcons && this.DescriptionIcon != null)                          {                              if (!string.IsNullOrWhiteSpace(pi.Description))                              {                                  var descriptionIconImage = new Image                                  {                                      Source = this.DescriptionIcon'                                      Stretch = Stretch.None'                                      Margin = new Thickness(0' 4' 4' 4)'                                      VerticalAlignment = VerticalAlignment.Top'                                      HorizontalAlignment =                                                                         this.DescriptionIconAlignment                                  };                                    // RenderOptions.SetBitmapScalingMode(descriptionIconImage' BitmapScalingMode.NearestNeighbor);                                  labelPanel.Children.Add(descriptionIconImage);                                  if (!string.IsNullOrWhiteSpace(pi.Description))                                  {                                      descriptionIconImage.ToolTip = this.CreateToolTip(pi.Description);                                  }                              }                          }                          else                          {                              labelPanel.ToolTip = this.CreateToolTip(pi.Description);                          }                      }                        break;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,AddPropertyPanel,The following statement contains a magic number: if (this.EnableLabelWidthResizing && pi.HeaderPlacement == HeaderPlacement.Left)              {                  propertyPanel.Children.Add(                      new GridSplitter                      {                          Width = 4'                          Background = Brushes.Transparent'                          HorizontalAlignment = HorizontalAlignment.Right'                          Focusable = false                      });              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The following statement contains a magic number: if (pi.IsOptional)              {                  var cb = new CheckBox                  {                      Content = pi.DisplayName'                      VerticalAlignment = VerticalAlignment.Center'                      Margin = new Thickness(5 + indentation' 0' 4' 0)                  };                    cb.SetBinding(                      ToggleButton.IsCheckedProperty'                      pi.OptionalDescriptor != null ? new Binding(pi.OptionalDescriptor.Name) : new Binding(pi.Descriptor.Name) { Converter = NullToBoolConverter });                    var g = new Grid();                  g.Children.Add(cb);                  propertyLabel = g;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The following statement contains a magic number: if (pi.IsOptional)              {                  var cb = new CheckBox                  {                      Content = pi.DisplayName'                      VerticalAlignment = VerticalAlignment.Center'                      Margin = new Thickness(5 + indentation' 0' 4' 0)                  };                    cb.SetBinding(                      ToggleButton.IsCheckedProperty'                      pi.OptionalDescriptor != null ? new Binding(pi.OptionalDescriptor.Name) : new Binding(pi.Descriptor.Name) { Converter = NullToBoolConverter });                    var g = new Grid();                  g.Children.Add(cb);                  propertyLabel = g;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The following statement contains a magic number: if (pi.IsEnabledByRadioButton)              {                  var rb = new RadioButton                  {                      Content = pi.DisplayName'                      GroupName = pi.RadioDescriptor.Name'                      VerticalAlignment = VerticalAlignment.Center'                      Margin = new Thickness(5 + indentation' 0' 4' 0)                  };                    var converter = new EnumToBooleanConverter { EnumType = pi.RadioDescriptor.PropertyType };                  rb.SetBinding(                      ToggleButton.IsCheckedProperty'                      new Binding(pi.RadioDescriptor.Name) { Converter = converter' ConverterParameter = pi.RadioValue });                    var g = new Grid();                  g.Children.Add(rb);                  propertyLabel = g;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The following statement contains a magic number: if (pi.IsEnabledByRadioButton)              {                  var rb = new RadioButton                  {                      Content = pi.DisplayName'                      GroupName = pi.RadioDescriptor.Name'                      VerticalAlignment = VerticalAlignment.Center'                      Margin = new Thickness(5 + indentation' 0' 4' 0)                  };                    var converter = new EnumToBooleanConverter { EnumType = pi.RadioDescriptor.PropertyType };                  rb.SetBinding(                      ToggleButton.IsCheckedProperty'                      new Binding(pi.RadioDescriptor.Name) { Converter = converter' ConverterParameter = pi.RadioValue });                    var g = new Grid();                  g.Children.Add(rb);                  propertyLabel = g;              }
Magic Number,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreateLabel,The following statement contains a magic number: if (propertyLabel == null)              {                  propertyLabel = new Label                  {                      Content = pi.DisplayName'                      VerticalAlignment = VerticalAlignment.Top'                      Margin = new Thickness(indentation' 0' 4' 0)                  };              }
Magic Number,PropertyTools.Wpf,CellRef,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\CellRef.cs,ToColumnName,The following statement contains a magic number: while (column >= 26)              {                  int i = column / 26;                  result += ((char)('A' + i - 1)).ToString(CultureInfo.InvariantCulture);                  column = column - (i * 26);              }
Magic Number,PropertyTools.Wpf,CellRef,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\CellRef.cs,ToColumnName,The following statement contains a magic number: while (column >= 26)              {                  int i = column / 26;                  result += ((char)('A' + i - 1)).ToString(CultureInfo.InvariantCulture);                  column = column - (i * 26);              }
Magic Number,PropertyTools.Wpf,CellRef,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\CellRef.cs,ToColumnName,The following statement contains a magic number: while (column >= 26)              {                  int i = column / 26;                  result += ((char)('A' + i - 1)).ToString(CultureInfo.InvariantCulture);                  column = column - (i * 26);              }
Magic Number,PropertyTools.Wpf,CellRef,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\CellRef.cs,GetHashCode,The following statement contains a magic number: hash = (hash << 16) + this.row;
Magic Number,PropertyTools.Wpf,ReflectionMath,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ReflectionMath.cs,TryParse,The following statement contains a magic number: try              {                  var t1 = typeof(string);                  var t2 = provider.GetType();                  var mi =                      type.GetMethods().FirstOrDefault(m =>                      {                          var p = m.GetParameters();                          return m.Name == "Parse" && p.Length == 2 && p[0].ParameterType.IsAssignableFrom(t1) && p[1].ParameterType.IsAssignableFrom(t2);                      });                  if (mi == null)                  {                      result = null;                      return false;                  }                    result = mi.Invoke(null' parameters: new object[] { s' provider });                  return true;              }              catch              {                  result = null;                  return false;              }
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: Pen = new Pen { Brush = Brushes.Gray' Thickness = 2 };
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var firstLine = new LineSegment(new Point(0' -5)' false);
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var secondLine = new LineSegment(new Point(0' 5)' false);
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var figure = new PathFigure { StartPoint = new Point(5' 0) };
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (this.isSeparatorHorizontal)              {                  this.DrawTriangle(drawingContext' startPoint' 0);                  this.DrawTriangle(drawingContext' endPoint' 180);              }              else              {                  this.DrawTriangle(drawingContext' startPoint' 90);                  this.DrawTriangle(drawingContext' endPoint' -90);              }
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (this.isSeparatorHorizontal)              {                  this.DrawTriangle(drawingContext' startPoint' 0);                  this.DrawTriangle(drawingContext' endPoint' 180);              }              else              {                  this.DrawTriangle(drawingContext' startPoint' 90);                  this.DrawTriangle(drawingContext' endPoint' -90);              }
Magic Number,PropertyTools.Wpf,InsertionAdorner,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (this.isSeparatorHorizontal)              {                  this.DrawTriangle(drawingContext' startPoint' 0);                  this.DrawTriangle(drawingContext' endPoint' 180);              }              else              {                  this.DrawTriangle(drawingContext' startPoint' 90);                  this.DrawTriangle(drawingContext' endPoint' -90);              }
Magic Number,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The following statement contains a magic number: if (targetItemsControlCount > 0)              {                  this.hasVerticalOrientation = true;                  this.targetItemContainer =                      this.targetItemsControl.ContainerFromElement((DependencyObject)e.OriginalSource) as TreeListBoxItem;                    if (this.targetItemContainer != null)                  {                      Point positionRelativeToItemContainer = e.GetPosition(this.targetItemContainer);                      double relativePosition = GetRelativePosition(                          this.targetItemContainer' positionRelativeToItemContainer' this.hasVerticalOrientation);                      this.isInFirstHalf = relativePosition < 0.5;                        if (relativePosition > 0.3 && relativePosition < 0.7)                      {                          this.dropPosition = DropPosition.Add;                      }                      else                      {                          this.dropPosition = relativePosition < 0.5                                                  ? DropPosition.InsertBefore                                                  : DropPosition.InsertAfter;                      }                  }                  else                  {                      this.targetItemContainer = this.targetItemsControl.ContainerFromIndex(targetItemsControlCount - 1);                      this.isInFirstHalf = false;                      this.dropPosition = DropPosition.InsertAfter;                  }              }              else              {                  this.targetItemContainer = null;                  this.dropPosition = DropPosition.InsertBefore;              }
Magic Number,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The following statement contains a magic number: if (targetItemsControlCount > 0)              {                  this.hasVerticalOrientation = true;                  this.targetItemContainer =                      this.targetItemsControl.ContainerFromElement((DependencyObject)e.OriginalSource) as TreeListBoxItem;                    if (this.targetItemContainer != null)                  {                      Point positionRelativeToItemContainer = e.GetPosition(this.targetItemContainer);                      double relativePosition = GetRelativePosition(                          this.targetItemContainer' positionRelativeToItemContainer' this.hasVerticalOrientation);                      this.isInFirstHalf = relativePosition < 0.5;                        if (relativePosition > 0.3 && relativePosition < 0.7)                      {                          this.dropPosition = DropPosition.Add;                      }                      else                      {                          this.dropPosition = relativePosition < 0.5                                                  ? DropPosition.InsertBefore                                                  : DropPosition.InsertAfter;                      }                  }                  else                  {                      this.targetItemContainer = this.targetItemsControl.ContainerFromIndex(targetItemsControlCount - 1);                      this.isInFirstHalf = false;                      this.dropPosition = DropPosition.InsertAfter;                  }              }              else              {                  this.targetItemContainer = null;                  this.dropPosition = DropPosition.InsertBefore;              }
Magic Number,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The following statement contains a magic number: if (targetItemsControlCount > 0)              {                  this.hasVerticalOrientation = true;                  this.targetItemContainer =                      this.targetItemsControl.ContainerFromElement((DependencyObject)e.OriginalSource) as TreeListBoxItem;                    if (this.targetItemContainer != null)                  {                      Point positionRelativeToItemContainer = e.GetPosition(this.targetItemContainer);                      double relativePosition = GetRelativePosition(                          this.targetItemContainer' positionRelativeToItemContainer' this.hasVerticalOrientation);                      this.isInFirstHalf = relativePosition < 0.5;                        if (relativePosition > 0.3 && relativePosition < 0.7)                      {                          this.dropPosition = DropPosition.Add;                      }                      else                      {                          this.dropPosition = relativePosition < 0.5                                                  ? DropPosition.InsertBefore                                                  : DropPosition.InsertAfter;                      }                  }                  else                  {                      this.targetItemContainer = this.targetItemsControl.ContainerFromIndex(targetItemsControlCount - 1);                      this.isInFirstHalf = false;                      this.dropPosition = DropPosition.InsertAfter;                  }              }              else              {                  this.targetItemContainer = null;                  this.dropPosition = DropPosition.InsertBefore;              }
Magic Number,PropertyTools.Wpf,TreeListBoxDragDropHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBoxDragDropHelper.cs,DecideDropTarget,The following statement contains a magic number: if (targetItemsControlCount > 0)              {                  this.hasVerticalOrientation = true;                  this.targetItemContainer =                      this.targetItemsControl.ContainerFromElement((DependencyObject)e.OriginalSource) as TreeListBoxItem;                    if (this.targetItemContainer != null)                  {                      Point positionRelativeToItemContainer = e.GetPosition(this.targetItemContainer);                      double relativePosition = GetRelativePosition(                          this.targetItemContainer' positionRelativeToItemContainer' this.hasVerticalOrientation);                      this.isInFirstHalf = relativePosition < 0.5;                        if (relativePosition > 0.3 && relativePosition < 0.7)                      {                          this.dropPosition = DropPosition.Add;                      }                      else                      {                          this.dropPosition = relativePosition < 0.5                                                  ? DropPosition.InsertBefore                                                  : DropPosition.InsertAfter;                      }                  }                  else                  {                      this.targetItemContainer = this.targetItemsControl.ContainerFromIndex(targetItemsControlCount - 1);                      this.isInFirstHalf = false;                      this.dropPosition = DropPosition.InsertAfter;                  }              }              else              {                  this.targetItemContainer = null;                  this.dropPosition = DropPosition.InsertBefore;              }
Magic Number,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,BrowseForFolderDialog,The following statement contains a magic number: this.BrowseInfo.pszDisplayName = new string(' '' 260);
Magic Number,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,BrowseEventHandler,The following statement contains a magic number: switch (uMsg)              {                  case MessageFromBrowser.BFFM_INITIALIZED:                      {                          // The dialog box has finished initializing.                          // lParam   Not used' value is NULL.                          if (!string.IsNullOrEmpty(this.InitialExpandedFolder))                          {                              SendMessageW(                                  hwnd' MessageToBrowser.BFFM_SETEXPANDED' new IntPtr(1)' this.InitialExpandedFolder);                          }                          else if (!string.IsNullOrEmpty(this.InitialFolder))                          {                              SendMessageW(hwnd' MessageToBrowser.BFFM_SETSELECTIONW' new IntPtr(1)' this.InitialFolder);                          }                            if (!string.IsNullOrEmpty(this.OKButtonText))                          {                              SendMessageW(hwnd' MessageToBrowser.BFFM_SETOKTEXT' new IntPtr(1)' this.OKButtonText);                          }                            break;                      }                    case MessageFromBrowser.BFFM_SELCHANGED:                      {                          // The selection has changed in the dialog box.                          // lParam   A pointer to an item identifier list (PIDL) identifying the newly selected item.                          var pathsb = new StringBuilder(260);                          if (SHGetPathFromIDList(lParam' pathsb))                          {                              this.SelectedFolder = pathsb.ToString();                          }                            break;                      }                    case MessageFromBrowser.BFFM_VALIDATEFAILEDA:                      {                          // ANSI                          // The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.                          // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid.                          // Return zero to dismiss the dialog or nonzero to keep the dialog displayed                          break;                      }                    case MessageFromBrowser.BFFM_VALIDATEFAILEDW:                      {                          // Unicode                          // The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.                          // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid.                          // Return zero to dismiss the dialog or nonzero to keep the dialog displayed                          break;                      }                    case MessageFromBrowser.BFFM_IUNKNOWN:                      {                          // An IUnknown interface is available to the dialog box.                          // lParam   A pointer to an IUnknown interface.                          break;                      }              }
Magic Number,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,PInvokeSHBrowseForFolder,The following statement contains a magic number: if (IntPtr.Zero != pidl)              {                  var pathsb = new StringBuilder(260);                  if (SHGetPathFromIDList(pidl' pathsb))                  {                      this.SelectedFolder = pathsb.ToString();                      Marshal.FreeCoTaskMem(pidl);                      return true;                  }              }
Missing Default,PropertyTools.Wpf,SpinControl,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\SpinControl\SpinControl.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                      this.ChangeValue(1' false);                      e.Handled = true;                      break;                  case Key.Down:                      this.ChangeValue(-1' false);                      e.Handled = true;                      break;                  case Key.PageUp:                      this.ChangeValue(1' true);                      e.Handled = true;                      break;                  case Key.PageDown:                      this.ChangeValue(-1' true);                      e.Handled = true;                      break;              }
Missing Default,PropertyTools.Wpf,TextBoxEx,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Controls\TextBoxEx.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Enter:                      if (!this.AcceptsReturn)                      {                          if (this.UpdateBindingOnEnter)                          {                              // get the binding to the Text property                              var b = this.GetBindingExpression(TextProperty);                              if (b != null)                              {                                  // update the source (do not update the target)                                  b.UpdateSource();                              }                          }                            if (this.MoveFocusOnEnter)                          {                              // Move focus to next element                              // http://madprops.org/blog/enter-to-tab-in-wpf/                              var uiElement = e.OriginalSource as UIElement;                              if (uiElement != null)                              {                                  bool shift = (Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift;                                  uiElement.MoveFocus(new TraversalRequest(shift ? FocusNavigationDirection.Previous : FocusNavigationDirection.Next));                              }                          }                            e.Handled = true;                      }                        break;                  case Key.Escape:                      this.Undo();                      this.SelectAll();                      e.Handled = true;                      break;              }
Missing Default,PropertyTools.Wpf,ColorToComponentConverter,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Converters\ColorToComponentConverter.cs,Convert,The following switch statement is missing a default case: switch (component)              {                  case "R":                      return c.R;                  case "G":                      return c.G;                  case "B":                      return c.B;                  case "A":                      return c.A;                  case "H":                      return (int)(hsv[0] * 360);                  case "S":                      return (int)(hsv[1] * 100);                  case "V":                      return (int)(hsv[2] * 100);              }
Missing Default,PropertyTools.Wpf,FormattedTimeSpanParser,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\FormattedTimeSpanParser.cs,Parse,The following switch statement is missing a default case: switch (name)                      {                          case "DD":                          case "D":                          case "dd":                          case "d":                              days = v;                              break;                          case "HH":                          case "H":                          case "hh":                          case "h":                              hours = v;                              break;                          case "MM":                          case "M":                          case "mm":                          case "m":                              minutes = v;                              break;                          case "SS":                          case "S":                          case "ss":                          case "s":                              seconds = v;                              break;                          case "fff":                          case "ff":                          case "f":                              milliseconds = v;                              break;                      }
Missing Default,PropertyTools.Wpf,DataGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\DataGrid\DataGrid.cs,TextEditorPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Left:                      if (textEditor.CaretIndex == 0 && !isEverythingSelected)                      {                          this.RemoveEditControl();                          this.OnKeyDown(e);                          e.Handled = true;                      }                        break;                  case Key.Right:                      if (textEditor.CaretIndex == textEditor.Text.Length && !isEverythingSelected)                      {                          this.RemoveEditControl();                          this.OnKeyDown(e);                          e.Handled = true;                      }                        break;                  case Key.Down:                  case Key.Up:                      this.RemoveEditControl();                      this.OnKeyDown(e);                      e.Handled = true;                      break;                  case Key.Enter:                      this.RemoveEditControl();                      this.OnKeyDown(e);                      e.Handled = true;                      break;                  case Key.Escape:                      BindingOperations.ClearBinding(this.currentEditControl' TextBox.TextProperty);                      this.RemoveEditControl();                      e.Handled = true;                      break;              }
Missing Default,PropertyTools.Wpf,AboutDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\AboutDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 32 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.SystemInfoClick);                            #line default              #line hidden              return;              case 3:                            #line 33 "..\..\..\Dialogs\AboutDialog.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyClick);                            #line default              #line hidden              return;              }
Missing Default,PropertyTools.Wpf,ColorHelper,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\ColorHelper.cs,HsvToColor,The following switch statement is missing a default case: switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }
Missing Default,PropertyTools.Wpf,WizardDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\WizardDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.NextButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.FinishButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Missing Default,PropertyTools.Wpf,TimeSpanParser,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Helpers\TimeSpanParser.cs,Parse,The following switch statement is missing a default case: switch (unit.ToLower())                  {                      case "":                      case "d":                          total = total.Add(TimeSpan.FromDays(d));                          break;                      case "h":                          total = total.Add(TimeSpan.FromHours(d));                          break;                      case "m":                      case "'":                          total = total.Add(TimeSpan.FromMinutes(d));                          break;                      case "\"":                      case "s":                          total = total.Add(TimeSpan.FromSeconds(d));                          break;                  }
Missing Default,PropertyTools.Wpf,PropertyDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\PropertyDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.OkButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\Dialogs\PropertyDialog.xaml"              this.OkButton.Click += new System.Windows.RoutedEventHandler(this.OkButtonClick);                            #line default              #line hidden              return;              case 2:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.CancelButtonClick);                            #line default              #line hidden              return;              case 3:              this.ApplyButton = ((System.Windows.Controls.Button)(target));                            #line 19 "..\..\..\Dialogs\PropertyDialog.xaml"              this.ApplyButton.Click += new System.Windows.RoutedEventHandler(this.ApplyButtonClick);                            #line default              #line hidden              return;              case 4:              this.CloseButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\Dialogs\PropertyDialog.xaml"              this.CloseButton.Click += new System.Windows.RoutedEventHandler(this.CloseButtonClick);                            #line default              #line hidden              return;              case 5:              this.HelpButton = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\..\Dialogs\PropertyDialog.xaml"              this.HelpButton.Click += new System.Windows.RoutedEventHandler(this.HelpButtonClick);                            #line default              #line hidden              return;              case 6:              this.PropertyGrid1 = ((PropertyTools.Wpf.PropertyGrid)(target));              return;              }
Missing Default,PropertyTools.Wpf,PropertyGridOperator,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGridOperator.cs,SetAttribute,The following switch statement is missing a default case: switch (da.DataType)                  {                      case DataType.MultilineText:                          pi.AcceptsReturn = true;                          break;                      case DataType.Password:                          pi.IsPassword = true;                          break;                  }
Missing Default,PropertyTools.Wpf,PropertyGrid,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\PropertyGrid\PropertyGrid.cs,CreatePropertyPanel,The following switch statement is missing a default case: switch (this.CategoryControlType)              {                  case CategoryControlType.GroupBox:                      groupContentControl = new GroupBox { Margin = new Thickness(0' 4' 0' 4) };                      break;                  case CategoryControlType.Expander:                      groupContentControl = new Expander { IsExpanded = index == 0 };                      break;                  case CategoryControlType.Template:                      groupContentControl = new HeaderedContentControl                      {                          Template = this.CategoryControlTemplate'                          Focusable = false                      };                      break;              }
Missing Default,PropertyTools.Wpf,TreeListBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBox.cs,ChildCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Remove:                  case NotifyCollectionChangedAction.Move:                  case NotifyCollectionChangedAction.Replace:                      this.RemoveItems(e.OldItems);                      break;                    case NotifyCollectionChangedAction.Reset:                      // lookup the items that has been cleared from the item                      var items = this.itemToParentMap.Where(kvp => kvp.Value == item).Select(kvp => kvp.Key).ToList();                      this.RemoveItems(items);                      this.InsertItems(item' children' 0);                      break;              }
Missing Default,PropertyTools.Wpf,TreeListBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBox.cs,ChildCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Move:                  case NotifyCollectionChangedAction.Add:                  case NotifyCollectionChangedAction.Replace:                      if (this.isExpandedMap[item])                      {                          this.InsertItems(item' e.NewItems' e.NewStartingIndex);                      }                        break;              }
Missing Default,PropertyTools.Wpf,TreeListBox,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\TreeListBox\TreeListBox.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Left:                      if (control)                      {                          // Collapse all items                          foreach (var topLevelItem in this.HierarchySource)                          {                              this.Collapse(topLevelItem);                          }                      }                      else                      {                          // Collapse the selected item                          this.Collapse(item);                      }                        e.Handled = true;                      break;                  case Key.Right:                      if (control)                      {                          // Expand all items                          foreach (var i in this.Items.Cast<object>().ToArray())                          {                              this.Expand(i);                          }                      }                      else                      {                          // Expand the selected item                          this.Expand(item);                      }                        e.Handled = true;                      break;              }
Missing Default,PropertyTools.Wpf.Shell32,BrowseForFolderDialog,C:\repos\objorke_PropertyTools\Source\PropertyTools.Wpf\Dialogs\Shell32\BrowseForFolderDialog.cs,BrowseEventHandler,The following switch statement is missing a default case: switch (uMsg)              {                  case MessageFromBrowser.BFFM_INITIALIZED:                      {                          // The dialog box has finished initializing.                          // lParam   Not used' value is NULL.                          if (!string.IsNullOrEmpty(this.InitialExpandedFolder))                          {                              SendMessageW(                                  hwnd' MessageToBrowser.BFFM_SETEXPANDED' new IntPtr(1)' this.InitialExpandedFolder);                          }                          else if (!string.IsNullOrEmpty(this.InitialFolder))                          {                              SendMessageW(hwnd' MessageToBrowser.BFFM_SETSELECTIONW' new IntPtr(1)' this.InitialFolder);                          }                            if (!string.IsNullOrEmpty(this.OKButtonText))                          {                              SendMessageW(hwnd' MessageToBrowser.BFFM_SETOKTEXT' new IntPtr(1)' this.OKButtonText);                          }                            break;                      }                    case MessageFromBrowser.BFFM_SELCHANGED:                      {                          // The selection has changed in the dialog box.                          // lParam   A pointer to an item identifier list (PIDL) identifying the newly selected item.                          var pathsb = new StringBuilder(260);                          if (SHGetPathFromIDList(lParam' pathsb))                          {                              this.SelectedFolder = pathsb.ToString();                          }                            break;                      }                    case MessageFromBrowser.BFFM_VALIDATEFAILEDA:                      {                          // ANSI                          // The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.                          // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid.                          // Return zero to dismiss the dialog or nonzero to keep the dialog displayed                          break;                      }                    case MessageFromBrowser.BFFM_VALIDATEFAILEDW:                      {                          // Unicode                          // The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.                          // lParam   A pointer to a string containing the invalid name. An application can use this data in an error dialog informing the user that the name was not valid.                          // Return zero to dismiss the dialog or nonzero to keep the dialog displayed                          break;                      }                    case MessageFromBrowser.BFFM_IUNKNOWN:                      {                          // An IUnknown interface is available to the dialog box.                          // lParam   A pointer to an IUnknown interface.                          break;                      }              }
