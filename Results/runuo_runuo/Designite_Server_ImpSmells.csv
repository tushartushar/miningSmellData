Implementation smell,Namespace,Class,File,Method,Description
Long Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The method has 153 lines of code.
Long Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The method has 281 lines of code.
Long Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,ProcessDelta,The method has 175 lines of code.
Long Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The method has 151 lines of code.
Long Method,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The method has 127 lines of code.
Long Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The method has 170 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The method has 220 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Kill,The method has 120 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,The method has 140 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The method has 119 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The method has 274 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The method has 127 lines of code.
Long Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The method has 295 lines of code.
Long Method,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The method has 107 lines of code.
Long Method,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,Update,The method has 117 lines of code.
Long Method,Server,TileData,C:\repos\runuo_runuo\Server\TileData.cs,TileData,The method has 104 lines of code.
Long Method,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The method has 104 lines of code.
Long Method,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,The method has 246 lines of code.
Long Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The method has 106 lines of code.
Long Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The method has 101 lines of code.
Complex Method,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendBoltEffect,Cyclomatic complexity of the method is 9
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetExpandFlags,Cyclomatic complexity of the method is 11
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,MoveToWorld,Cyclomatic complexity of the method is 15
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,Cyclomatic complexity of the method is 42
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,ProcessDelta,Cyclomatic complexity of the method is 27
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,Cyclomatic complexity of the method is 37
Complex Method,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,Cyclomatic complexity of the method is 20
Complex Method,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,VerifyType,Cyclomatic complexity of the method is 9
Complex Method,Server,PooledEnumeration,C:\repos\runuo_runuo\Server\Map.cs,SelectMultiTiles,Cyclomatic complexity of the method is 8
Complex Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetAverageZ,Cyclomatic complexity of the method is 8
Complex Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,Cyclomatic complexity of the method is 13
Complex Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,FixColumn,Cyclomatic complexity of the method is 16
Complex Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetTopSurface,Cyclomatic complexity of the method is 14
Complex Method,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,Cyclomatic complexity of the method is 31
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddNameProperties,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckAggrExpire,Cyclomatic complexity of the method is 9
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AggressiveAction,Cyclomatic complexity of the method is 19
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,Cyclomatic complexity of the method is 43
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Resurrect,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Delete,Cyclomatic complexity of the method is 9
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnAfterDelete,Cyclomatic complexity of the method is 13
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Kill,Cyclomatic complexity of the method is 25
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendDropEffect,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,Cyclomatic complexity of the method is 25
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Damage,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendVisibleDamageRelated,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendVisibleDamageSelective,Cyclomatic complexity of the method is 11
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckStatTimers,Cyclomatic complexity of the method is 11
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MoveToWorld,Cyclomatic complexity of the method is 15
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,Cyclomatic complexity of the method is 15
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendIncomingPacket,Cyclomatic complexity of the method is 9
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,Cyclomatic complexity of the method is 61
Complex Method,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,RemoveXYZH,Cyclomatic complexity of the method is 10
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Remove,Cyclomatic complexity of the method is 10
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Resize,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,Cyclomatic complexity of the method is 10
Complex Method,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,Cyclomatic complexity of the method is 14
Complex Method,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,Display,Cyclomatic complexity of the method is 12
Complex Method,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,Compile,Cyclomatic complexity of the method is 8
Complex Method,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,Cancel,Cyclomatic complexity of the method is 10
Complex Method,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,Update,Cyclomatic complexity of the method is 26
Complex Method,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,HandleAccountGoldTrade,Cyclomatic complexity of the method is 9
Complex Method,Server,TimerThread,C:\repos\runuo_runuo\Server\Timer.cs,TimerMain,Cyclomatic complexity of the method is 9
Complex Method,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,Cyclomatic complexity of the method is 10
Complex Method,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,Server,World,C:\repos\runuo_runuo\Server\World.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,CheckHold,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 14
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 16
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 16
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotal,Cyclomatic complexity of the method is 9
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotal,Cyclomatic complexity of the method is 9
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,Send,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,DisplayGumpResponse,Cyclomatic complexity of the method is 18
Complex Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ContextMenuResponse,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ContextMenuRequest,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUTF8StringSafe,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUTF8StringSafe,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,WorldItem,C:\repos\runuo_runuo\Server\Network\Packets.cs,WorldItem,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,MobileIncoming,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncoming,Cyclomatic complexity of the method is 13
Complex Method,Server.Network,MobileIncomingSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingSA,Cyclomatic complexity of the method is 19
Complex Method,Server.Network,MobileIncomingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingOld,Cyclomatic complexity of the method is 19
Complex Method,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,Cyclomatic complexity of the method is 10
Long Parameter List,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,ClientVersion,The method has 5 parameters. Parameters: maj' min' rev' pat' type
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationEffect,The method has 5 parameters. Parameters: p' map' itemID' duration' speed
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationEffect,The method has 6 parameters. Parameters: p' map' itemID' duration' hue' renderMode
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationEffect,The method has 7 parameters. Parameters: p' map' itemID' duration' speed' hue' renderMode
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationParticles,The method has 5 parameters. Parameters: e' itemID' speed' duration' effect
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationParticles,The method has 6 parameters. Parameters: e' itemID' speed' duration' effect' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationParticles,The method has 8 parameters. Parameters: e' itemID' speed' duration' hue' renderMode' effect' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetEffect,The method has 5 parameters. Parameters: target' itemID' duration' hue' renderMode
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetEffect,The method has 6 parameters. Parameters: target' itemID' speed' duration' hue' renderMode
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetParticles,The method has 6 parameters. Parameters: target' itemID' speed' duration' effect' layer
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetParticles,The method has 7 parameters. Parameters: target' itemID' speed' duration' effect' layer' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetParticles,The method has 9 parameters. Parameters: target' itemID' speed' duration' hue' renderMode' effect' layer' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingEffect,The method has 7 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingEffect,The method has 9 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The method has 10 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The method has 11 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The method has 13 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' unknown
Long Parameter List,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The method has 14 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown
Long Parameter List,Server,CharacterCreatedEventArgs,C:\repos\runuo_runuo\Server\EventSink.cs,CharacterCreatedEventArgs,The method has 18 parameters. Parameters: state' a' name' female' hue' str' dex' intel' city' skills' shirtHue' pantsHue' hairID' hairHue' beardID' beardHue' profession' race
Long Parameter List,Server,SpeechEventArgs,C:\repos\runuo_runuo\Server\EventSink.cs,SpeechEventArgs,The method has 5 parameters. Parameters: mobile' speech' type' hue' keywords
Long Parameter List,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The method has 6 parameters. Parameters: id' name' clientFlags' supportedFeatures' charListFlags' customHousingFlag
Long Parameter List,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The method has 6 parameters. Parameters: id' name' requiredClient' supportedFeatures' charListFlags' customHousingFlag
Long Parameter List,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The method has 5 parameters. Parameters: id' name' supportedFeatures' charListFlags' customHousingFlag
Long Parameter List,Server,Rectangle3D,C:\repos\runuo_runuo\Server\Geometry.cs,Rectangle3D,The method has 6 parameters. Parameters: x' y' z' width' height' depth
Long Parameter List,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelToAffix,The method has 5 parameters. Parameters: to' number' type' affix' args
Long Parameter List,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,SendLocalizedMessageTo,The method has 5 parameters. Parameters: to' number' affixType' affix' args
Long Parameter List,Server,UnsafeNativeMethods,C:\repos\runuo_runuo\Server\Main.cs,ReadFile,The method has 5 parameters. Parameters: hFile' lpBuffer' nNumberOfBytesToRead' lpNumberOfBytesRead' lpOverlapped
Long Parameter List,Server,UnsafeNativeMethods,C:\repos\runuo_runuo\Server\Main.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,Server,PooledEnumeration,C:\repos\runuo_runuo\Server\Map.cs,Bound,The method has 7 parameters. Parameters: map' x1' y1' x2' y2' xSector' ySector
Long Parameter List,Server,PooledEnumeration,C:\repos\runuo_runuo\Server\Map.cs,NextSector,The method has 9 parameters. Parameters: map' x1' y1' x2' y2' index' xSector' ySector' s
Long Parameter List,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetAverageZ,The method has 5 parameters. Parameters: x' y' z' avg' top
Long Parameter List,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The method has 5 parameters. Parameters: x' y' z' height' checksBlocksFit
Long Parameter List,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The method has 6 parameters. Parameters: x' y' z' height' checkBlocksFit' checkMobiles
Long Parameter List,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The method has 7 parameters. Parameters: x' y' z' height' checkBlocksFit' checkMobiles' requireSurface
Long Parameter List,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,Map,The method has 8 parameters. Parameters: mapID' mapIndex' fileIndex' width' height' season' name' rules
Long Parameter List,Server,EquipedSkillMod,C:\repos\runuo_runuo\Server\Mobile.cs,EquipedSkillMod,The method has 5 parameters. Parameters: skill' relative' value' item' mobile
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,BeginTarget,The method has 5 parameters. Parameters: range' allowGround' flags' callback' state
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,BeginTarget,The method has 5 parameters. Parameters: range' allowGround' flags' callback' state
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The method has 6 parameters. Parameters: action' frameCount' repeatCount' forward' repeat' delay
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingEffect,The method has 8 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingEffect,The method has 6 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The method has 13 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The method has 12 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' unknown
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The method has 10 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound' unknown
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The method has 9 parameters. Parameters: to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FixedEffect,The method has 5 parameters. Parameters: itemID' speed' duration' hue' renderMode
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FixedParticles,The method has 8 parameters. Parameters: itemID' speed' duration' effect' hue' renderMode' layer' unknown
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FixedParticles,The method has 7 parameters. Parameters: itemID' speed' duration' effect' hue' renderMode' layer
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FixedParticles,The method has 6 parameters. Parameters: itemID' speed' duration' effect' layer' unknown
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FixedParticles,The method has 5 parameters. Parameters: itemID' speed' duration' effect' layer
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckTrade,The method has 7 parameters. Parameters: to' item' cont' message' checkItems' plusItems' plusWeight
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The method has 5 parameters. Parameters: type' hue' ascii' text' noLineOfSight
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The method has 5 parameters. Parameters: type' hue' number' args' noLineOfSight
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The method has 6 parameters. Parameters: type' hue' number' affixType' affix' args
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The method has 7 parameters. Parameters: type' hue' number' affixType' affix' args' noLineOfSight
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PrivateOverheadMessage,The method has 5 parameters. Parameters: type' hue' ascii' text' state
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PrivateOverheadMessage,The method has 5 parameters. Parameters: type' hue' number' args' state
Long Parameter List,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendLocalizedMessage,The method has 5 parameters. Parameters: number' append' affix' args' hue
Long Parameter List,Server,SimpleStateTarget,C:\repos\runuo_runuo\Server\Mobile.cs,SimpleStateTarget,The method has 5 parameters. Parameters: range' flags' allowGround' callback' state
Long Parameter List,Server,SimpleStateTarget<T>,C:\repos\runuo_runuo\Server\Mobile.cs,SimpleStateTarget,The method has 5 parameters. Parameters: range' flags' allowGround' callback' state
Long Parameter List,Server,MultiTileEntry,C:\repos\runuo_runuo\Server\MultiData.cs,MultiTileEntry,The method has 5 parameters. Parameters: itemID' xOffset' yOffset' zOffset' flags
Long Parameter List,Server,ObjectPropertyList,C:\repos\runuo_runuo\Server\ObjectPropertyList.cs,Add,The method has 5 parameters. Parameters: number' format' arg0' arg1' arg2
Long Parameter List,Server,UnbufferedFileStream,C:\repos\runuo_runuo\Server\Persistence\FileOperations.cs,BeginWrite,The method has 5 parameters. Parameters: array' offset' numBytes' userCallback' stateObject
Long Parameter List,Server,Chunk,C:\repos\runuo_runuo\Server\Persistence\FileQueue.cs,Chunk,The method has 5 parameters. Parameters: owner' slot' buffer' offset' size
Long Parameter List,Server,Race,C:\repos\runuo_runuo\Server\Race.cs,Race,The method has 9 parameters. Parameters: raceID' raceIndex' name' pluralName' maleBody' femaleBody' maleGhostBody' femaleGhostBody' requiredExpansion
Long Parameter List,Server,Region,C:\repos\runuo_runuo\Server\Region.cs,CanMove,The method has 5 parameters. Parameters: m' d' newLocation' oldLocation' map
Long Parameter List,Server,Region,C:\repos\runuo_runuo\Server\Region.cs,ReadRectangle3D,The method has 5 parameters. Parameters: xml' defaultMinZ' defaultMaxZ' value' mandatory
Long Parameter List,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,HandleAccountGoldTrade,The method has 6 parameters. Parameters: left' right' platSend' goldSend' platRecv' goldRecv
Long Parameter List,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The method has 5 parameters. Parameters: owner' info' baseValue' cap' skillLock
Long Parameter List,Server,SkillInfo,C:\repos\runuo_runuo\Server\Skills.cs,SkillInfo,The method has 11 parameters. Parameters: skillID' name' strScale' dexScale' intScale' title' callback' strGain' dexGain' intGain' gainFactor
Long Parameter List,Server,ItemData,C:\repos\runuo_runuo\Server\TileData.cs,ItemData,The method has 7 parameters. Parameters: name' flags' weight' quality' quantity' value' height
Long Parameter List,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The method has 5 parameters. Parameters: owner' fileIndex' mapID' width' height
Long Parameter List,Server,StaticTile,C:\repos\runuo_runuo\Server\TileMatrix.cs,StaticTile,The method has 5 parameters. Parameters: id' x' y' z' hue
Long Parameter List,Server,StaticTile,C:\repos\runuo_runuo\Server\TileMatrix.cs,Set,The method has 5 parameters. Parameters: id' x' y' z' hue
Long Parameter List,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,DelayCall,The method has 5 parameters. Parameters: delay' interval' count' callback' state
Long Parameter List,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,DelayCall,The method has 5 parameters. Parameters: delay' interval' count' callback' state
Long Parameter List,Server,DelayStateCallTimer,C:\repos\runuo_runuo\Server\Timer.cs,DelayStateCallTimer,The method has 5 parameters. Parameters: delay' interval' count' callback' state
Long Parameter List,Server,DelayStateCallTimer<T>,C:\repos\runuo_runuo\Server\Timer.cs,DelayStateCallTimer,The method has 5 parameters. Parameters: delay' interval' count' callback' state
Long Parameter List,Server,ItemEntry,C:\repos\runuo_runuo\Server\World.cs,ItemEntry,The method has 5 parameters. Parameters: item' typeID' typeName' pos' length
Long Parameter List,Server,MobileEntry,C:\repos\runuo_runuo\Server\World.cs,MobileEntry,The method has 5 parameters. Parameters: mobile' typeID' typeName' pos' length
Long Parameter List,Server.Mobiles,BuyItemState,C:\repos\runuo_runuo\Server\BaseVendor.cs,BuyItemState,The method has 7 parameters. Parameters: name' cont' serial' price' amount' itemID' hue
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddBackground,The method has 5 parameters. Parameters: x' y' width' height' gumpID
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddButton,The method has 7 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddCheck,The method has 6 parameters. Parameters: x' y' inactiveID' activeID' initialState' switchID
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddHtml,The method has 7 parameters. Parameters: x' y' width' height' text' background' scrollbar
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 7 parameters. Parameters: x' y' width' height' number' background' scrollbar
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 8 parameters. Parameters: x' y' width' height' number' color' background' scrollbar
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 9 parameters. Parameters: x' y' width' height' number' args' color' background' scrollbar
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddImageTiled,The method has 5 parameters. Parameters: x' y' width' height' gumpID
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddImageTiledButton,The method has 11 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddImageTiledButton,The method has 12 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height' localizedTooltip
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddLabelCropped,The method has 6 parameters. Parameters: x' y' width' height' hue' text
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddRadio,The method has 6 parameters. Parameters: x' y' inactiveID' activeID' initialState' switchID
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddTextEntry,The method has 7 parameters. Parameters: x' y' width' height' hue' entryID' initialText
Long Parameter List,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddTextEntry,The method has 8 parameters. Parameters: x' y' width' height' hue' entryID' initialText' size
Long Parameter List,Server.Gumps,GumpBackground,C:\repos\runuo_runuo\Server\Gumps\GumpBackground.cs,GumpBackground,The method has 5 parameters. Parameters: x' y' width' height' gumpID
Long Parameter List,Server.Gumps,GumpButton,C:\repos\runuo_runuo\Server\Gumps\GumpButton.cs,GumpButton,The method has 7 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param
Long Parameter List,Server.Gumps,GumpCheck,C:\repos\runuo_runuo\Server\Gumps\GumpCheck.cs,GumpCheck,The method has 6 parameters. Parameters: x' y' inactiveID' activeID' initialState' switchID
Long Parameter List,Server.Gumps,GumpHtml,C:\repos\runuo_runuo\Server\Gumps\GumpHtml.cs,GumpHtml,The method has 7 parameters. Parameters: x' y' width' height' text' background' scrollbar
Long Parameter List,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 7 parameters. Parameters: x' y' width' height' number' background' scrollbar
Long Parameter List,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 8 parameters. Parameters: x' y' width' height' number' color' background' scrollbar
Long Parameter List,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 9 parameters. Parameters: x' y' width' height' number' args' color' background' scrollbar
Long Parameter List,Server.Gumps,GumpImageTileButton,C:\repos\runuo_runuo\Server\Gumps\GumpImageTileButton.cs,GumpImageTileButton,The method has 11 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height
Long Parameter List,Server.Gumps,GumpImageTileButton,C:\repos\runuo_runuo\Server\Gumps\GumpImageTileButton.cs,GumpImageTileButton,The method has 12 parameters. Parameters: x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height' localizedTooltip
Long Parameter List,Server.Gumps,GumpImageTiled,C:\repos\runuo_runuo\Server\Gumps\GumpImageTiled.cs,GumpImageTiled,The method has 5 parameters. Parameters: x' y' width' height' gumpID
Long Parameter List,Server.Gumps,GumpLabelCropped,C:\repos\runuo_runuo\Server\Gumps\GumpLabelCropped.cs,GumpLabelCropped,The method has 6 parameters. Parameters: x' y' width' height' hue' text
Long Parameter List,Server.Gumps,GumpRadio,C:\repos\runuo_runuo\Server\Gumps\GumpRadio.cs,GumpRadio,The method has 6 parameters. Parameters: x' y' inactiveID' activeID' initialState' switchID
Long Parameter List,Server.Gumps,GumpTextEntry,C:\repos\runuo_runuo\Server\Gumps\GumpTextEntry.cs,GumpTextEntry,The method has 7 parameters. Parameters: x' y' width' height' hue' entryID' initialText
Long Parameter List,Server.Gumps,GumpTextEntryLimited,C:\repos\runuo_runuo\Server\Gumps\GumpTextEntryLimited.cs,GumpTextEntryLimited,The method has 8 parameters. Parameters: x' y' width' height' hue' entryID' initialText' size
Long Parameter List,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,CheckHold,The method has 6 parameters. Parameters: m' item' message' checkItems' plusItems' plusWeight
Long Parameter List,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters. Parameters: type' amount' recurse' callback' grouper
Long Parameter List,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters. Parameters: types' amounts' recurse' callback' grouper
Long Parameter List,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters. Parameters: types' amounts' recurse' callback' grouper
Long Parameter List,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,RecurseConsumeUpTo,The method has 6 parameters. Parameters: current' type' amount' recurse' consumed' toDelete
Long Parameter List,Server.Items,SecureTradeContainer,C:\repos\runuo_runuo\Server\Items\SecureTradeContainer.cs,CheckHold,The method has 6 parameters. Parameters: m' item' message' checkItems' plusItems' plusWeight
Long Parameter List,Server.Movement,Movement,C:\repos\runuo_runuo\Server\Movement.cs,CheckMovement,The method has 5 parameters. Parameters: m' map' loc' d' newZ
Long Parameter List,Server.Movement,IMovementImpl,C:\repos\runuo_runuo\Server\Movement.cs,CheckMovement,The method has 5 parameters. Parameters: m' map' loc' d' newZ
Long Parameter List,Server.Network,BufferPool,C:\repos\runuo_runuo\Server\Network\BufferPool.cs,GetInfo,The method has 6 parameters. Parameters: name' freeCount' initialCapacity' currentCapacity' bufferSize' misses
Long Parameter List,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: input' offset' count' output' length
Long Parameter List,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Pack,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,ICompressor,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,Compressor32,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,SafeNativeMethods,C:\repos\runuo_runuo\Server\Network\Compression.cs,compress2,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,SafeNativeMethods,C:\repos\runuo_runuo\Server\Network\Compression.cs,compress2,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,SafeNativeMethods,C:\repos\runuo_runuo\Server\Network\Compression.cs,compress2,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,SafeNativeMethods,C:\repos\runuo_runuo\Server\Network\Compression.cs,compress2,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,Compressor64,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,CompressorUnix32,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,CompressorUnix64,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The method has 5 parameters. Parameters: dest' destLength' source' sourceLength' quality
Long Parameter List,Server.Network,DisplayProfile,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayProfile,The method has 5 parameters. Parameters: realSerial' m' header' body' footer
Long Parameter List,Server.Network,ParticleEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,ParticleEffect,The method has 18 parameters. Parameters: type' from' to' itemID' fromPoint' toPoint' speed' duration' fixedDirection' explode' hue' renderMode' effect' explodeEffect' explodeSound' serial' layer' unknown
Long Parameter List,Server.Network,ParticleEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,ParticleEffect,The method has 18 parameters. Parameters: type' from' to' itemID' fromPoint' toPoint' speed' duration' fixedDirection' explode' hue' renderMode' effect' explodeEffect' explodeSound' serial' layer' unknown
Long Parameter List,Server.Network,HuedEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,HuedEffect,The method has 12 parameters. Parameters: type' from' to' itemID' fromPoint' toPoint' speed' duration' fixedDirection' explode' hue' renderMode
Long Parameter List,Server.Network,HuedEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,HuedEffect,The method has 12 parameters. Parameters: type' from' to' itemID' fromPoint' toPoint' speed' duration' fixedDirection' explode' hue' renderMode
Long Parameter List,Server.Network,TargetParticleEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,TargetParticleEffect,The method has 9 parameters. Parameters: e' itemID' speed' duration' hue' renderMode' effect' layer' unknown
Long Parameter List,Server.Network,TargetEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,TargetEffect,The method has 6 parameters. Parameters: e' itemID' speed' duration' hue' renderMode
Long Parameter List,Server.Network,LocationParticleEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,LocationParticleEffect,The method has 8 parameters. Parameters: e' itemID' speed' duration' hue' renderMode' effect' unknown
Long Parameter List,Server.Network,LocationEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,LocationEffect,The method has 6 parameters. Parameters: p' itemID' speed' duration' hue' renderMode
Long Parameter List,Server.Network,MovingParticleEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,MovingParticleEffect,The method has 14 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown
Long Parameter List,Server.Network,MovingEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,MovingEffect,The method has 9 parameters. Parameters: from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode
Long Parameter List,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalized,The method has 8 parameters. Parameters: serial' graphic' type' hue' font' number' name' args
Long Parameter List,Server.Network,DragEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,DragEffect,The method has 5 parameters. Parameters: src' trg' itemID' hue' amount
Long Parameter List,Server.Network,MobileAnimation,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileAnimation,The method has 7 parameters. Parameters: m' action' frameCount' repeatCount' forward' repeat' delay
Long Parameter List,Server.Network,AsciiMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,AsciiMessage,The method has 7 parameters. Parameters: serial' graphic' type' hue' font' name' text
Long Parameter List,Server.Network,UnicodeMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodeMessage,The method has 8 parameters. Parameters: serial' graphic' type' hue' font' lang' name' text
Long Parameter List,Server.Network,CityInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,CityInfo,The method has 7 parameters. Parameters: city' building' description' x' y' z' m
Long Parameter List,Server.Network,CityInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,CityInfo,The method has 6 parameters. Parameters: city' building' x' y' z' m
Long Parameter List,Server.Network,CityInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,CityInfo,The method has 6 parameters. Parameters: city' building' description' x' y' z
Long Parameter List,Server.Network,CityInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,CityInfo,The method has 5 parameters. Parameters: city' building' x' y' z
Long Parameter List,Server.Network,MessageLocalizedAffix,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalizedAffix,The method has 10 parameters. Parameters: serial' graphic' messageType' hue' font' number' name' affixType' affix' args
Long Parameter List,Server.Targeting,MultiTarget,C:\repos\runuo_runuo\Server\Targeting\MultiTarget.cs,MultiTarget,The method has 5 parameters. Parameters: multiID' offset' range' allowGround' flags
Long Identifier,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,,The length of the parameter m_SkillCheckDirectTargetHandler is 31.
Long Identifier,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,,The length of the parameter m_SkillCheckDirectLocationHandler is 33.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendParticlesTo,The length of the statement  "			return ( m_ParticleSupportType == ParticleSupportType.Full || (m_ParticleSupportType == ParticleSupportType.Detect && state.IsUOTDClient) ); " is 140.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationParticles,The length of the statement  "							particles = Packet.Acquire( new LocationParticleEffect( e' itemID' speed' duration' hue' renderMode' effect' unknown ) ); " is 121.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationParticles,The length of the statement  "			//SendPacket( e.Location' e.Map' new LocationParticleEffect( e' itemID' speed' duration' hue' renderMode' effect' unknown ) ); " is 126.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetParticles,The length of the statement  "							particles = Packet.Acquire( new TargetParticleEffect( target' itemID' speed' duration' hue' renderMode' effect' (int)layer' unknown ) ); " is 136.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetParticles,The length of the statement  "			//SendPacket( target.Location' target.Map' new TargetParticleEffect( target' itemID' speed' duration' hue' renderMode' effect' (int)layer' unknown ) ); " is 151.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingEffect,The length of the statement  "			SendPacket( from.Location' from.Map' new MovingEffect( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode ) ); " is 136.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "			SendMovingParticles( from' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' 0 ); " is 129.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "			SendMovingParticles( from' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' unknown ); " is 135.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "			SendMovingParticles( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown ); " is 164.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "							particles = Packet.Acquire( new MovingParticleEffect( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown ) ); " is 188.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "							regular = Packet.Acquire( new MovingEffect( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode ) ); " is 125.
Long Statement,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The length of the statement  "			//SendPacket( from.Location' from.Map' new MovingParticleEffect( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' unknown ) ); " is 192.
Long Statement,Server,Rectangle2D,C:\repos\runuo_runuo\Server\Geometry.cs,Parse,The length of the statement  "			return new Rectangle2D( Convert.ToInt32( param1 )' Convert.ToInt32( param2 )' Convert.ToInt32( param3 )' Convert.ToInt32( param4 ) ); " is 133.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,StackWith,The length of the statement  "			if ( dropped.Stackable && Stackable && dropped.GetType() == GetType() && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable ) " is 250.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The length of the statement  "				if ( x >= short.MinValue && x <= short.MaxValue && y >= short.MinValue && y <= short.MaxValue && z >= sbyte.MinValue && z <= sbyte.MaxValue ) " is 141.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The length of the statement  "			ImplFlag implFlags = ( m_Flags & ( ImplFlag.Visible | ImplFlag.Movable | ImplFlag.Stackable | ImplFlag.Insured | ImplFlag.PayedInsurance | ImplFlag.QuestItem ) ); " is 162.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,HandleInvalidTransfer,The length of the statement  "				from.SendLocalizedMessage( 1049343 ); // You can only drop quest items into the top-most level of your backpack while you still need them for your quest. " is 153.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddItem,The length of the statement  "				Console.WriteLine( "Warning: Adding item to itself: [0x{0:X} {1}].AddItem( [0x{2:X} {3}] )"' this.Serial.Value' this.GetType().Name' item.Serial.Value' item.GetType().Name ); " is 174.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddItem,The length of the statement  "				Console.WriteLine( "Warning: Adding parent item to child: [0x{0:X} {1}].AddItem( [0x{2:X} {3}] )"' this.Serial.Value' this.GetType().Name' item.Serial.Value' item.GetType().Name ); " is 180.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,SendLocalizedMessageTo,The length of the statement  "			to.Send( new MessageLocalizedAffix( Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' affixType' affix' args ) ); " is 122.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnAosSingleClick,The length of the statement  "				from.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' opl.Header' this.Name' opl.HeaderArgs ) ); " is 124.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnSingleClick,The length of the statement  "						ns.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format( " : {0}"' m_Amount )' "" ) ); " is 164.
Long Statement,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnSingleClick,The length of the statement  "					ns.Send( new UnicodeMessage( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' this.Name + ( m_Amount > 1 ? " : " + m_Amount : "" ) ) ); " is 146.
Long Statement,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The length of the statement  "			// Added to help future code support on forums' as a 'check' people can ask for to it see if they recompiled core or not " is 120.
Long Statement,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The length of the statement  "			Console.WriteLine("RunUO - [https://github.com/runuo/] Version {0}.{1}.{2}.{3}"' ver.Major' ver.Minor' ver.Build' ver.Revision); " is 128.
Long Statement,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The length of the statement  "			Console.WriteLine("Core: Running on .NET Framework Version {0}.{1}.{2}"' Environment.Version.Major' Environment.Version.Minor' Environment.Version.Build); " is 154.
Long Statement,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The length of the statement  "				Console.WriteLine( "Core: Optimizing for {0} {2}processor{1}"' m_ProcessorCount' m_ProcessorCount == 1 ? "" : "s"' Is64Bit ? "64-bit " : "" ); " is 142.
Long Statement,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The length of the statement  "				Console.WriteLine("Core: Requested high resolution timing ({0})"' UsingHighResolutionTiming ? "Supported" : "Unsupported"); " is 123.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The length of the statement  "					if ( ( surface || impassable || ( checkBlocksFit && item.BlocksFit ) ) && ( item.Z + id.CalcHeight ) > z && ( z + height ) > item.Z ) " is 133.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "			while( Utility.NumberBetween( x' dest.m_X' org.m_X' 0.5 ) && Utility.NumberBetween( y' dest.m_Y' org.m_Y' 0.5 ) && Utility.NumberBetween( z' dest.m_Z' org.m_Z' 0.5 ) ) " is 167.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "				if( landZ <= pointTop && landTop >= point.m_Z && (point.m_X != end.m_X || point.m_Y != end.m_Y || landZ > endTop || landTop < end.m_Z) && !landTile.Ignored ) " is 157.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "				if ( landTile.Z-1 >= point.Z && landTile.Z+1 <= point.Z && (TileData.LandTable[landTile.ID & TileData.MaxLandValue].Flags & TileFlag.Impassable) != 0 ) " is 151.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "						//Console.WriteLine( "LoS: Blocked by Static \"{0}\" Z:{1} T:{3} P:{2} F:x{4:X}"' TileData.ItemTable[t.ID&TileData.MaxItemValue].Name' t.Z' point' t.Z+height' flags ); " is 167.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "						//Console.WriteLine( "if ( {0} && {1} && {2} && ( {3} || {4} || {5} || ({6} && {7} && {8}) ) )"' t.Z <= point.Z' t.Z+height >= point.Z' (flags&TileFlag.Window)==0' (flags&TileFlag.Impassable)!=0' (flags&TileFlag.Wall)!=0' (flags&TileFlag.Roof)!=0' (flags&TileFlag.Surface)!=0' t.Z != dest.Z' zd != 0 ) ; " is 303.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "				//if ( (flags&TileFlag.Window)==0 && (flags&TileFlag.NoShoot)!=0 && ( (flags&TileFlag.Wall)!=0 || (flags&TileFlag.Roof)!=0 || (((flags&TileFlag.Surface)!=0 && zd != 0)) ) ) " is 172.
Long Statement,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The length of the statement  "					//Console.WriteLine( "LoS: Blocked by ITEM \"{0}\" P:{1} T:{2} F:x{3:X}"' TileData.ItemTable[i.ItemID&TileData.MaxItemValue].Name' i.Location' i.Location.Z+height' flags ); " is 172.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AggressiveAction,The length of the statement  "				m_Aggressors.Add( AggressorInfo.Create( aggressor' this' criminal ) ); // new AggressorInfo( aggressor' this' criminal' true ) ); " is 129.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AggressiveAction,The length of the statement  "				aggressor.m_Aggressed.Add( AggressorInfo.Create( aggressor' this' criminal ) ); // new AggressorInfo( aggressor' this' criminal' false ) ); " is 139.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) ) " is 152.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) ) " is 147.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) ) " is 152.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) ) " is 152.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) ) " is 131.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The length of the statement  "				m_NetState.Send( MovementAck.Instantiate( m_NetState.Sequence' this ) );//new MovementAck( m_NetState.Sequence' this ) ); " is 121.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,LiftItemDupe,The length of the statement  "				Console.WriteLine( "Warning: 0x{0:X}: Item must have a zero paramater constructor to be separated from a stack. '{1}'."' oldItem.Serial.Value' oldItem.GetType().Name ); " is 168.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Heal,The length of the statement  "				m_NetState.Send( new MessageLocalizedAffix( Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString()' "" ) ); " is 170.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeBeneficial,The length of the statement  "			if( m_Deleted || target.m_Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet)) ) " is 125.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeHarmful,The length of the statement  "			if( m_Deleted || (!ignoreOurBlessedness && m_Blessed) || target.m_Deleted || target.m_Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet ) " is 167.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeHarmful,The length of the statement  "			if( /*m_Player &&*/ !Region.AllowHarmful( this' target ) )//(target.m_Player || target.Body.IsHuman) && !Region.AllowHarmful( this' target )  ) " is 143.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanSee,The length of the statement  "				(!m.Hidden || (m_AccessLevel != AccessLevel.Player && (m_AccessLevel >= m.AccessLevel || m_AccessLevel >= AccessLevel.Administrator))) && " is 137.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanSee,The length of the statement  "				((m.Alive || (Core.SE && Skills.SpiritSpeak.Value >= 100.0)) || !Alive || m_AccessLevel > AccessLevel.Player || m.Warmode)); " is 124.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The length of the statement  "						// We are attached to a client' so it's a bit more complex. We need to send new items and people to ourself' and ourself to other clients " is 137.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The length of the statement  "								if( m.m_NetState != null && ( ( isTeleport && ( !m.m_NetState.HighSeas || !m_NoMoveHS ) ) || !inOldRange ) && m.CanSee( this ) ) " is 128.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The length of the statement  "							if( ( ( isTeleport && ( !ns.HighSeas || !m_NoMoveHS ) ) || !Utility.InUpdateRange( oldLocation' ns.Mobile.Location )) && ns.Mobile.CanSee( this ) ) " is 147.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The length of the statement  "			Effects.SendMovingParticles( this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown ); " is 161.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The length of the statement  "			Effects.SendMovingParticles( this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown ); " is 172.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The length of the statement  "			Effects.SendMovingParticles( this' to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound' unknown ); " is 137.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The length of the statement  "			Effects.SendMovingParticles( this' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' 0 ); " is 137.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckEquip,The length of the statement  "				if( m_Items[i].CheckConflictingLayer( this' item' item.Layer ) || item.CheckConflictingLayer( this' m_Items[i]' m_Items[i].Layer ) ) " is 132.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnEquip,The length of the statement  "				SendLocalizedMessage( 1074769 ); // An item must be in your backpack (and not in a container within) to be toggled as a quest item. " is 131.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The length of the statement  "			if( m.m_Map != null && (sendRemove || sendIncoming || sendPublicStats || sendHits || sendMoving || sendOPLUpdate || sendHair || sendFacialHair || sendHealthbarPoison || sendHealthbarYellow) ) " is 191.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The length of the statement  "				Packet p = Packet.Acquire( new MessageLocalizedAffix( m_Serial' Body' type' hue' 3' number' Name' affixType' affix' args ) ); " is 125.
Long Statement,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendLocalizedMessage,The length of the statement  "				ns.Send( new MessageLocalizedAffix( Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' (append ? AffixType.Append : AffixType.Prepend) | AffixType.System' affix' args ) ); " is 188.
Long Statement,Server,CombatTimer,C:\repos\runuo_runuo\Server\Mobile.cs,OnTick,The length of the statement  "					if( combatant == null || combatant.m_Deleted || m_Mobile.m_Deleted || combatant.m_Map != m_Mobile.m_Map || !combatant.Alive || !m_Mobile.Alive || !m_Mobile.CanSee( combatant ) || combatant.IsDeadBondedPet || m_Mobile.IsDeadBondedPet ) " is 234.
Long Statement,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,RemoveXYZH,The length of the statement  "					if ( tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z && TileData.ItemTable[tile.m_ItemID & TileData.MaxItemValue].Height >= minHeight ) " is 174.
Long Statement,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Remove,The length of the statement  "					if ( tile.m_ItemID == itemID && tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z ) " is 120.
Long Statement,Server,DualSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DualSaveStrategy.cs,Save,The length of the statement  "			if (permitBackgroundWrite && UseSequentialWriters)	//If we're permitted to write in the background' but we don't anyways' then notify. " is 134.
Long Statement,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,SaveItems,The length of the statement  "					if (item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)) " is 122.
Long Statement,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,SaveMobiles,The length of the statement  "			_mobileThreadWriters.CompleteAdding();	//We only get here after the Parallel.ForEach completes.  Lets our task tell the consumer that we're done " is 144.
Long Statement,Server,FileOperations,C:\repos\runuo_runuo\Server\Persistence\FileOperations.cs,OpenSequentialStream,The length of the statement  "			SafeFileHandle fileHandle = UnsafeNativeMethods.CreateFile(path' (int)access' share' IntPtr.Zero' mode' (int)options' IntPtr.Zero); " is 131.
Long Statement,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,Save,The length of the statement  "			if (item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)) " is 122.
Long Statement,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The length of the statement  "				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count); " is 126.
Long Statement,Server,SaveStrategy,C:\repos\runuo_runuo\Server\Persistence\SaveStrategy.cs,Acquire,The length of the statement  "					return new DualSaveStrategy(); // return new DynamicSaveStrategy(); (4.0 or return new ParallelSaveStrategy(processorCount); (2.0) " is 130.
Long Statement,Server,StandardSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\StandardSaveStrategy.cs,Save,The length of the statement  "			if (permitBackgroundWrite && UseSequentialWriters)	//If we're permitted to write in the background' but we don't anyways' then notify. " is 134.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The length of the statement  "						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.CS.hash"' FileMode.Open' FileAccess.Read' FileShare.Read ) ) " is 123.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The length of the statement  "						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.CS.hash"' FileMode.Create' FileAccess.Write' FileShare.None ) ) " is 126.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileVBScripts,The length of the statement  "						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.VB.hash"' FileMode.Open' FileAccess.Read' FileShare.Read ) ) " is 123.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileVBScripts,The length of the statement  "						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.VB.hash"' FileMode.Create' FileAccess.Write' FileShare.None ) ) " is 126.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,Display,The length of the statement  "				Dictionary<string' List<CompilerError>> errors = new Dictionary<string' List<CompilerError>>( results.Errors.Count' StringComparer.OrdinalIgnoreCase ); " is 151.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,Display,The length of the statement  "				Dictionary<string' List<CompilerError>> warnings = new Dictionary<string' List<CompilerError>>( results.Errors.Count' StringComparer.OrdinalIgnoreCase ); " is 153.
Long Statement,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,Compile,The length of the statement  "			Console.WriteLine("done ({0} items' {1} mobiles) ({2:F2} seconds)"' Core.ScriptItems' Core.ScriptMobiles' watch.Elapsed.TotalSeconds); " is 134.
Long Statement,Server,TimerThread,C:\repos\runuo_runuo\Server\Timer.cs,DumpInfo,The length of the statement  "						tw.WriteLine( "Type: {0}; Count: {1}; Percent: {2}%"' key' list.Count' (int)(100 * (list.Count / (double)m_Timers[i].Count)) ); " is 127.
Long Statement,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The length of the statement  "			if ( cidrPrefix == null || ip == null || cidrPrefix.AddressFamily == AddressFamily.InterNetworkV6 )	//Ignore IPv6 for now " is 121.
Long Statement,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,CastConvertList,The length of the statement  "			return list.ConvertAll<TOutput>( new Converter<TInput' TOutput>( delegate( TInput value ) { return (TOutput)value; } ) ); " is 121.
Long Statement,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,The length of the statement  "				throw new Exception( String.Format( "Load failed (items={0}' mobiles={1}' guilds={2}' type={3}' serial={4})"' failedItems' failedMobiles' failedGuilds' failedType' failedSerial )' failed ); " is 189.
Long Statement,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,The length of the statement  "			Console.WriteLine( "done ({1} items' {2} mobiles) ({0:F2} seconds)"' watch.Elapsed.TotalSeconds' m_Items.Count' m_Mobiles.Count ); " is 130.
Long Statement,Server,World,C:\repos\runuo_runuo\Server\World.cs,Save,The length of the statement  "				World.NotifyDiskWriteComplete();	//Sets the DiskWriteHandle.  If we allow background writes' we leave this upto the individual save strategies. " is 143.
Long Statement,Server.Diagnostics,BaseProfile,C:\repos\runuo_runuo\Server\Diagnostics\BaseProfile.cs,WriteTo,The length of the statement  "			op.Write( "{0'-100} {1'12:N0} {2'12:F5} {3'-12:F5} {4'12:F5}"' Name' Count' AverageTime.TotalSeconds' PeakTime.TotalSeconds' TotalTime.TotalSeconds ); " is 150.
Long Statement,Server.Gumps,Gump,C:\repos\runuo_runuo\Server\Gumps\Gump.cs,AddImageTiledButton,The length of the statement  "			Add( new GumpImageTileButton( x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height' localizedTooltip ) ); " is 129.
Long Statement,Server.Gumps,GumpButton,C:\repos\runuo_runuo\Server\Gumps\GumpButton.cs,Compile,The length of the statement  "			return String.Format( "{{ button {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID ); " is 125.
Long Statement,Server.Gumps,GumpCheck,C:\repos\runuo_runuo\Server\Gumps\GumpCheck.cs,Compile,The length of the statement  "			return String.Format( "{{ checkbox {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_ID1' m_ID2' m_InitialState ? 1 : 0' m_SwitchID ); " is 125.
Long Statement,Server.Gumps,GumpHtml,C:\repos\runuo_runuo\Server\Gumps\GumpHtml.cs,Compile,The length of the statement  "			return String.Format( "{{ htmlgump {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' Parent.Intern( m_Text )' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0 ); " is 166.
Long Statement,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "					return String.Format( "{{ xmfhtmlgump {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0 ); " is 154.
Long Statement,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "					return String.Format( "{{ xmfhtmlgumpcolor {0} {1} {2} {3} {4} {5} {6} {7} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0' m_Color ); " is 172.
Long Statement,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "					return String.Format( "{{ xmfhtmltok {0} {1} {2} {3} {4} {5} {6} {7} @{8}@ }}"' m_X' m_Y' m_Width' m_Height' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0' m_Color' m_Number' m_Args ); " is 180.
Long Statement,Server.Gumps,GumpImageTileButton,C:\repos\runuo_runuo\Server\Gumps\GumpImageTileButton.cs,Compile,The length of the statement  "				return String.Format( "{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}{{ tooltip {11} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height' m_LocalizedTooltip ); " is 223.
Long Statement,Server.Gumps,GumpImageTileButton,C:\repos\runuo_runuo\Server\Gumps\GumpImageTileButton.cs,Compile,The length of the statement  "				return String.Format( "{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height ); " is 185.
Long Statement,Server.Gumps,GumpLabelCropped,C:\repos\runuo_runuo\Server\Gumps\GumpLabelCropped.cs,Compile,The length of the statement  "			return String.Format( "{{ croppedtext {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' Parent.Intern( m_Text ) ); " is 129.
Long Statement,Server.Gumps,GumpRadio,C:\repos\runuo_runuo\Server\Gumps\GumpRadio.cs,Compile,The length of the statement  "			return String.Format( "{{ radio {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_ID1' m_ID2' m_InitialState ? 1 : 0' m_SwitchID ); " is 122.
Long Statement,Server.Gumps,GumpTextEntry,C:\repos\runuo_runuo\Server\Gumps\GumpTextEntry.cs,Compile,The length of the statement  "			return String.Format( "{{ textentry {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' m_EntryID' Parent.Intern( m_InitialText ) ); " is 149.
Long Statement,Server.Gumps,GumpTextEntryLimited,C:\repos\runuo_runuo\Server\Gumps\GumpTextEntryLimited.cs,Compile,The length of the statement  "			return String.Format( "{{ textentrylimited {0} {1} {2} {3} {4} {5} {6} {7} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' m_EntryID' Parent.Intern( m_InitialText )' m_Size ); " is 168.
Long Statement,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,CheckHold,The length of the statement  "				if ( checkItems && maxItems != 0 && (this.TotalItems + plusItems + item.TotalItems + (item.IsVirtualItem ? 0 : 1)) > maxItems ) " is 127.
Long Statement,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetProperties,The length of the statement  "						list.Add( 1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones " is 133.
Long Statement,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetProperties,The length of the statement  "						list.Add( 1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones " is 163.
Long Statement,Server.Items,BankBox,C:\repos\runuo_runuo\Server\Items\Containers.cs,Open,The length of the statement  "				m_Owner.PrivateOverheadMessage( MessageType.Regular' 0x3B2' true' String.Format( "Bank container has {0} items' {1} stones"' TotalItems' TotalWeight )' m_Owner.NetState ); " is 171.
Long Statement,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The length of the statement  "				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients. " is 128.
Long Statement,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,CheckEncrypted,The length of the statement  "			if (!ns.SentFirstPacket && packetID != 0xF0 && packetID != 0xF1 && packetID != 0xCF && packetID != 0x80 && packetID != 0x91 && packetID != 0xA4 && packetID != 0xEF) { " is 166.
Long Statement,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleReceive,The length of the statement  "								Console.WriteLine( "Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID ); " is 120.
Long Statement,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,ValidateAllTrades,The length of the statement  "				if ( trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange( trade.To.Mobile' 2 ) || trade.From.Mobile.Map != trade.To.Mobile.Map ) { " is 215.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,EncodedCommand,The length of the statement  "					Console.WriteLine( "Client: {0}: Sent ingame packet (0xD7x{1:X2}) before having been attached to a mobile"' state' packetID ); " is 126.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SecureTrade,The length of the statement  "					if ( cont != null && cont.Trade != null && (cont.Trade.From.Mobile == state.Mobile || cont.Trade.To.Mobile == state.Mobile) ) " is 125.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The length of the statement  "				if ( item != null && from.Map == item.Map && Utility.InUpdateRange( item.GetWorldLocation()' from.Location ) && from.CanSee( item ) ) " is 133.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,LookReq,The length of the statement  "				if ( item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() ) ) " is 126.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ExtendedCommand,The length of the statement  "					Console.WriteLine( "Client: {0}: Sent ingame packet (0xBFx{1:X2}) before having been attached to a mobile"' state' packetID ); " is 126.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,BatchQueryProperties,The length of the statement  "					if ( item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() ) ) " is 126.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,QueryProperties,The length of the statement  "				if ( item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() ) ) " is 126.
Long Statement,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PartyMessage_PrivateMessage,The length of the statement  "				PartyCommands.Handler.OnPrivateMessage( state.Mobile' World.FindMobile( pvSrc.ReadInt32() )' pvSrc.ReadUnicodeStringSafe() ); " is 125.
Long Statement,Server.Network,Packet,C:\repos\runuo_runuo\Server\Network\Packets.cs,InternalCompile,The length of the statement  "					Console.WriteLine("Warning: Compression buffer overflowed on packet 0x{0:X2} ('{1}') (length={2})"' m_PacketID' GetType().Name' length); " is 136.
Long Statement,Server.Network,Packet,C:\repos\runuo_runuo\Server\Network\Packets.cs,InternalCompile,The length of the statement  "						op.WriteLine("{0} Warning: Compression buffer overflowed on packet 0x{1:X2} ('{2}') (length={3})"' DateTime.UtcNow' m_PacketID' GetType().Name' length); " is 152.
Long Statement,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniNull,The length of the statement  "			m_Stream.Position += Encoding.BigEndianUnicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position ); " is 122.
Long Statement,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniFixed,The length of the statement  "				m_Stream.Position += Encoding.BigEndianUnicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position ); " is 122.
Long Statement,Server.Network,SendQueue,C:\repos\runuo_runuo\Server\Network\SendQueue.cs,Enqueue,The length of the statement  "				throw new ArgumentOutOfRangeException( "offset"' offset' "Offset must be greater than or equal to zero and less than the size of the buffer." ); " is 144.
Long Statement,Server.Network,SendQueue,C:\repos\runuo_runuo\Server\Network\SendQueue.cs,Enqueue,The length of the statement  "				throw new ArgumentOutOfRangeException( "length"' length' "Length cannot be less than zero or greater than the size of the buffer." ); " is 133.
Complex Conditional,Server,Body,C:\repos\runuo_runuo\Server\Body.cs,Body,The conditional expression  "int.TryParse( split[0]' out bodyID ) && Enum.TryParse( split[1]' true' out type ) && bodyID >= 0 && bodyID < m_Types.Length"  is complex.
Complex Conditional,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,ClientVersion,The conditional expression  "fmt.IndexOf( "third dawn" ) >= 0 || fmt.IndexOf( "uo:td" ) >= 0 || fmt.IndexOf( "uotd" ) >= 0 || fmt.IndexOf( "uo3d" ) >= 0 || fmt.IndexOf( "uo:3d" ) >= 0"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,StackWith,The conditional expression  "dropped.Stackable && Stackable && dropped.GetType() == GetType() && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The conditional expression  "x >= short.MinValue && x <= short.MaxValue && y >= short.MinValue && y <= short.MaxValue && z >= sbyte.MinValue && z <= sbyte.MaxValue"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The conditional expression  "x >= byte.MinValue && x <= byte.MaxValue && y >= byte.MinValue && y <= byte.MaxValue"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToMobile,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnDroppedOnto,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToItem,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The conditional expression  "(id.Surface || id.Impassable) && checkTop > surfaceZ && (z + height) > checkZ"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The conditional expression  "x < 0 || y < 0 || x >= m_Width || y >= m_Height"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The conditional expression  "( surface || impassable ) && ( staticTiles[i].Z + id.CalcHeight ) > z && ( z + height ) > staticTiles[i].Z"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The conditional expression  "( surface || impassable || ( checkBlocksFit && item.BlocksFit ) ) && ( item.Z + id.CalcHeight ) > z && ( z + height ) > item.Z"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The conditional expression  "surface && !impassable && !item.Movable && z == ( item.Z + id.CalcHeight )"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The conditional expression  "m.Location.m_X == x && m.Location.m_Y == y && ( m.AccessLevel == AccessLevel.Player || !m.Hidden )"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetTopSurface,The conditional expression  "!(item is BaseMulti) && item.ItemID <= TileData.MaxItemValue && item.AtWorldPoint( p.X' p.Y ) && !item.Movable"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,InternalGetSector,The conditional expression  "x >= 0 && x < m_SectorsWidth && y >= 0 && y < m_SectorsHeight"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The conditional expression  "org.X > dest.X || (org.X == dest.X && org.Y > dest.Y) || (org.X == dest.X && org.Y == dest.Y && org.Z > dest.Z)"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The conditional expression  "landZ <= pointTop && landTop >= point.m_Z && (point.m_X != end.m_X || point.m_Y != end.m_Y || landZ > endTop || landTop < end.m_Z) && !landTile.Ignored"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The conditional expression  "point.m_X == end.m_X && point.m_Y == end.m_Y && t.Z <= endTop && t.Z + height >= end.m_Z"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The conditional expression  "loc.m_X == point.m_X && loc.m_Y == point.m_Y &&  						loc.m_Z <= pointTop && loc.m_Z + height >= point.m_Z"  is complex.
Complex Conditional,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The conditional expression  "loc.m_X == end.m_X && loc.m_Y == end.m_Y && loc.m_Z <= endTop && loc.m_Z + height >= end.m_Z"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddNameProperties,The conditional expression  "ShowFameTitle && (m_Player || m_Body.IsHuman) && m_Fame >= 10000"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddNameProperties,The conditional expression  "guild != null && (m_DisplayGuildTitle || (m_Player && guild.Type != GuildType.Regular))"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The conditional expression  "m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The conditional expression  "!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Use,The conditional expression  "item == null || item.Deleted || item.QuestItem || this.Deleted"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,The conditional expression  "m_DragEffects && map != null && (root == null || root is Item)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,The conditional expression  "ns.Mobile != from && ns.Mobile.CanSee( from ) && ns.Mobile.InLOS( from ) && ns.Mobile.CanSee( root )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendDropEffect,The conditional expression  "ns.Mobile != this && ns.Mobile.CanSee( this ) && ns.Mobile.InLOS( this ) && ns.Mobile.CanSee( root )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The conditional expression  "heard.CanSee( this ) && (m_NoSpeechLOS || !heard.Player || heard.InLOS( this ))"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FindMostTotalDamageEntry,The conditional expression  "(allowSelf || de.Damager != this) && (mostTotal == null || de.DamageGiven > mostTotal.DamageGiven)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,FindLeastTotalDamageEntry,The conditional expression  "(allowSelf || de.Damager != this) && (mostTotal == null || de.DamageGiven < mostTotal.DamageGiven)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetContextMenuEntries,The conditional expression  "from == this && Backpack != null && CanSee( Backpack ) && CheckAlive( false )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddItem,The conditional expression  "item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 ||  				item.PoisonResistance != 0 || item.EnergyResistance != 0"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,RemoveItem,The conditional expression  "item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 ||  					item.PoisonResistance != 0 || item.EnergyResistance != 0"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeBeneficial,The conditional expression  "m_Deleted || target.m_Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet))"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeHarmful,The conditional expression  "m_Deleted || (!ignoreOurBlessedness && m_Blessed) || target.m_Deleted || target.m_Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanSee,The conditional expression  "box != null && m_AccessLevel <= AccessLevel.Counselor && (box.Owner != this || !box.Opened)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanSee,The conditional expression  "m_Deleted || m.m_Deleted || m_Map == Map.Internal || m.m_Map == Map.Internal"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The conditional expression  "isTeleport && m_NetState != null && ( !m_NetState.HighSeas || !m_NoMoveHS )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The conditional expression  "m.m_NetState != null && ( ( isTeleport && ( !m.m_NetState.HighSeas || !m_NoMoveHS ) ) || !inOldRange ) && m.CanSee( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SetLocation,The conditional expression  "( ( isTeleport && ( !ns.HighSeas || !m_NoMoveHS ) ) || !Utility.InUpdateRange( oldLocation' ns.Mobile.Location )) && ns.Mobile.CanSee( this )"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OpenTrade,The conditional expression  "!from.Player || !Player || !from.Alive || !Alive"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The conditional expression  "m.m_Map != null && (sendRemove || sendIncoming || sendPublicStats || sendHits || sendMoving || sendOPLUpdate || sendHair || sendFacialHair || sendHealthbarPoison || sendHealthbarYellow)"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The conditional expression  "sendMoving || sendNonlocalMoving || sendHealthbarPoison || sendHealthbarYellow"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,The conditional expression  "AccessLevel == AccessLevel.Player && DisableHiddenSelfClick && Hidden && from == this"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,The conditional expression  "guild != null && (m_DisplayGuildTitle || (m_Player && guild.Type != GuildType.Regular))"  is complex.
Complex Conditional,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,The conditional expression  "ShowFameTitle && (m_Player || m_Body.IsHuman) && m_Fame >= 10000"  is complex.
Complex Conditional,Server,CombatTimer,C:\repos\runuo_runuo\Server\Mobile.cs,OnTick,The conditional expression  "combatant == null || combatant.m_Deleted || m_Mobile.m_Deleted || combatant.m_Map != m_Mobile.m_Map || !combatant.Alive || !m_Mobile.Alive || !m_Mobile.CanSee( combatant ) || combatant.IsDeadBondedPet || m_Mobile.IsDeadBondedPet"  is complex.
Complex Conditional,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The conditional expression  "file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0"  is complex.
Complex Conditional,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Add,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,RemoveXYZH,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,RemoveXYZH,The conditional expression  "tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z && TileData.ItemTable[tile.m_ItemID & TileData.MaxItemValue].Height >= minHeight"  is complex.
Complex Conditional,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Remove,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,Remove,The conditional expression  "tile.m_ItemID == itemID && tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z"  is complex.
Complex Conditional,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,SaveItems,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)"  is complex.
Complex Conditional,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,Save,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)"  is complex.
Complex Conditional,Server,StandardSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\StandardSaveStrategy.cs,SaveItems,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && (item.LastMoved + item.DecayTime) <= n"  is complex.
Complex Conditional,Server,SecureTrade,C:\repos\runuo_runuo\Server\SecureTrade.cs,Update,The conditional expression  "!m_From.IsDisposed && m_From.Accepted && !m_To.IsDisposed && m_To.Accepted"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetStaticBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight || m_Statics == null || m_Index == null"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticBlock,The conditional expression  "x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetLandBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight || m_Map == null"  is complex.
Complex Conditional,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandBlock,The conditional expression  "x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight"  is complex.
Complex Conditional,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,CheckContentDisplay,The conditional expression  "root == null || root is Item || root == from || from.AccessLevel > AccessLevel.Player"  is complex.
Complex Conditional,Server.Items,BankBox,C:\repos\runuo_runuo\Server\Items\Containers.cs,GetTotal,The conditional expression  "AccountGold.Enabled && Owner != null && Owner.Account != null && type == TotalType.Gold"  is complex.
Complex Conditional,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,CheckEncrypted,The conditional expression  "!ns.SentFirstPacket && packetID != 0xF0 && packetID != 0xF1 && packetID != 0xCF && packetID != 0x80 && packetID != 0x91 && packetID != 0xA4 && packetID != 0xEF"  is complex.
Complex Conditional,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,ValidateAllTrades,The conditional expression  "trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange( trade.To.Mobile' 2 ) || trade.From.Mobile.Map != trade.To.Mobile.Map"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SecureTrade,The conditional expression  "cont != null && cont.Trade != null && (cont.Trade.From.Mobile == state.Mobile || cont.Trade.To.Mobile == state.Mobile)"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The conditional expression  "item != null && from.Map == item.Map && Utility.InUpdateRange( item.GetWorldLocation()' from.Location ) && from.CanSee( item )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The conditional expression  "m != null && from.Map == m.Map && Utility.InUpdateRange( m.Location' from.Location ) && from.CanSee( m )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,LookReq,The conditional expression  "item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,Animate,The conditional expression  "from != null && ok && from.Alive && from.Body.IsHuman && !from.Mounted"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,BatchQueryProperties,The conditional expression  "item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,QueryProperties,The conditional expression  "item != null && !item.Deleted && from.CanSee( item ) && Utility.InUpdateRange( from.Location' item.GetWorldLocation() )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ContextMenuRequest,The conditional expression  "from != null && target != null && from.Map == target.Map && from.CanSee( target )"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The conditional expression  "info == null || a == null || cityIndex < 0 || cityIndex >= info.Length"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The conditional expression  "info == null || a == null || cityIndex < 0 || cityIndex >= info.Length"  is complex.
Complex Conditional,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayServer,The conditional expression  "info == null || a == null || index < 0 || index >= info.Length"  is complex.
Complex Conditional,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,Invoke,The conditional expression  "!m_AllowNonlocal && root is Mobile && root != from && from.AccessLevel == AccessLevel.Player"  is complex.
Complex Conditional,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,Invoke,The conditional expression  "map == null || map != from.Map || ( m_Range != -1 && !from.InRange( loc' m_Range ) )"  is complex.
Virtual Method Call from Constructor,Server,BaseHairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,BaseHairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,BaseHairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,C:\repos\runuo_runuo\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,SecureTradeInfo,C:\repos\runuo_runuo\Server\SecureTrade.cs,SecureTradeInfo,The constructor "SecureTradeInfo" calls a virtual method "DropItem".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server.ContextMenus,ContextMenu,C:\repos\runuo_runuo\Server\ContextMenus\ContextMenu.cs,ContextMenu,The constructor "ContextMenu" calls a virtual method "GetContextMenuEntries".
Virtual Method Call from Constructor,Server.ContextMenus,ContextMenu,C:\repos\runuo_runuo\Server\ContextMenus\ContextMenu.cs,ContextMenu,The constructor "ContextMenu" calls a virtual method "GetContextMenuEntries".
Virtual Method Call from Constructor,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,Container,The constructor "Container" calls a virtual method "UpdateContainerData".
Virtual Method Call from Constructor,Server.Network,WorldItem,C:\repos\runuo_runuo\Server\Network\Packets.cs,WorldItem,The constructor "WorldItem" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,WorldItemSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,WorldItemSA,The constructor "WorldItemSA" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,WorldItemHS,C:\repos\runuo_runuo\Server\Network\Packets.cs,WorldItemHS,The constructor "WorldItemHS" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,UnkD3,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnkD3,The constructor "UnkD3" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,ContainerContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent,The constructor "ContainerContent" calls a virtual method "CanSee".
Virtual Method Call from Constructor,Server.Network,ContainerContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent6017,The constructor "ContainerContent6017" calls a virtual method "CanSee".
Virtual Method Call from Constructor,Server.Network,MobileMoving,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileMoving,The constructor "MobileMoving" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileMovingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileMovingOld,The constructor "MobileMovingOld" calls a virtual method "GetOldPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The constructor "MobileStatusExtended" calls a virtual method "CanBeRenamedBy".
Virtual Method Call from Constructor,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The constructor "MobileStatus" calls a virtual method "CanBeRenamedBy".
Virtual Method Call from Constructor,Server.Network,MobileUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileUpdate,The constructor "MobileUpdate" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileUpdateOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileUpdateOld,The constructor "MobileUpdateOld" calls a virtual method "GetOldPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncoming,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncoming,The constructor "MobileIncoming" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncoming,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncoming,The constructor "MobileIncoming" calls a virtual method "CanSee".
Virtual Method Call from Constructor,Server.Network,MobileIncomingSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingSA,The constructor "MobileIncomingSA" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncomingSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingSA,The constructor "MobileIncomingSA" calls a virtual method "CanSee".
Virtual Method Call from Constructor,Server.Network,MobileIncomingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingOld,The constructor "MobileIncomingOld" calls a virtual method "GetOldPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncomingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingOld,The constructor "MobileIncomingOld" calls a virtual method "CanSee".
Empty Catch Block,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Delta,The method has an empty catch block.
Empty Catch Block,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,RemDelta,The method has an empty catch block.
Empty Catch Block,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The method has an empty catch block.
Empty Catch Block,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Delta,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileVBScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileVBScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,DeleteFiles,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,DeleteFiles,The method has an empty catch block.
Empty Catch Block,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,PushColor,The method has an empty catch block.
Empty Catch Block,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,PopColor,The method has an empty catch block.
Empty Catch Block,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,The method has an empty catch block.
Empty Catch Block,Server,World,C:\repos\runuo_runuo\Server\World.cs,Load,The method has an empty catch block.
Empty Catch Block,Server,World,C:\repos\runuo_runuo\Server\World.cs,AppendSafetyLog,The method has an empty catch block.
Empty Catch Block,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The method has an empty catch block.
Empty Catch Block,Server.Network,Listener,C:\repos\runuo_runuo\Server\Network\Listener.cs,Listener,The method has an empty catch block.
Empty Catch Block,Server.Network,Listener,C:\repos\runuo_runuo\Server\Network\Listener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,TraceException,The method has an empty catch block.
Empty Catch Block,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,TraceException,The method has an empty catch block.
Empty Catch Block,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,TextCommand,The method has an empty catch block.
Empty Catch Block,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,Trace,The method has an empty catch block.
Empty Catch Block,Server.Network,Packet,C:\repos\runuo_runuo\Server\Network\Packets.cs,Compile,The method has an empty catch block.
Magic Number,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,_ToStringImpl,The following statement contains a magic number: StringBuilder builder = new StringBuilder(16);
Magic Number,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,_ToStringImpl,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)	//Anything before 5.0.7  			{  				if (m_Patch > 0)  					builder.Append((char)('a' + (m_Patch - 1)));  			}  			else  			{  				builder.Append('.');  				builder.Append(m_Patch);  			}
Magic Number,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,_ToStringImpl,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)	//Anything before 5.0.7  			{  				if (m_Patch > 0)  					builder.Append((char)('a' + (m_Patch - 1)));  			}  			else  			{  				builder.Append('.');  				builder.Append(m_Patch);  			}
Magic Number,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try  			{  				fmt = fmt.ToLower();    				int br1 = fmt.IndexOf( '.' );  				int br2 = fmt.IndexOf( '.'' br1 + 1 );    				int br3 = br2 + 1;  				while ( br3 < fmt.Length && Char.IsDigit( fmt' br3 ) )  					br3++;    				m_Major = Utility.ToInt32( fmt.Substring( 0' br1 ) );  				m_Minor = Utility.ToInt32( fmt.Substring( br1 + 1' br2 - br1 - 1 ) );  				m_Revision = Utility.ToInt32( fmt.Substring( br2 + 1' br3 - br2 - 1 ) );    				if( br3 < fmt.Length )  				{  					if( m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6 )	//Anything before 5.0.7  					{  						if( !Char.IsWhiteSpace( fmt' br3 ) )  							m_Patch = (fmt[br3] - 'a') + 1;  					}  					else  					{  						m_Patch = Utility.ToInt32( fmt.Substring( br3+1' fmt.Length - br3 - 1 ) );  					}  				}    				if ( fmt.IndexOf( "god" ) >= 0 || fmt.IndexOf( "gq" ) >= 0 )  					m_Type = ClientType.God;  				else if ( fmt.IndexOf( "third dawn" ) >= 0 || fmt.IndexOf( "uo:td" ) >= 0 || fmt.IndexOf( "uotd" ) >= 0 || fmt.IndexOf( "uo3d" ) >= 0 || fmt.IndexOf( "uo:3d" ) >= 0 )  					m_Type = ClientType.UOTD;  				else  					m_Type = ClientType.Regular;  			}  			catch  			{  				m_Major = 0;  				m_Minor = 0;  				m_Revision = 0;  				m_Patch = 0;  				m_Type = ClientType.Regular;  			}
Magic Number,Server,ClientVersion,C:\repos\runuo_runuo\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try  			{  				fmt = fmt.ToLower();    				int br1 = fmt.IndexOf( '.' );  				int br2 = fmt.IndexOf( '.'' br1 + 1 );    				int br3 = br2 + 1;  				while ( br3 < fmt.Length && Char.IsDigit( fmt' br3 ) )  					br3++;    				m_Major = Utility.ToInt32( fmt.Substring( 0' br1 ) );  				m_Minor = Utility.ToInt32( fmt.Substring( br1 + 1' br2 - br1 - 1 ) );  				m_Revision = Utility.ToInt32( fmt.Substring( br2 + 1' br3 - br2 - 1 ) );    				if( br3 < fmt.Length )  				{  					if( m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6 )	//Anything before 5.0.7  					{  						if( !Char.IsWhiteSpace( fmt' br3 ) )  							m_Patch = (fmt[br3] - 'a') + 1;  					}  					else  					{  						m_Patch = Utility.ToInt32( fmt.Substring( br3+1' fmt.Length - br3 - 1 ) );  					}  				}    				if ( fmt.IndexOf( "god" ) >= 0 || fmt.IndexOf( "gq" ) >= 0 )  					m_Type = ClientType.God;  				else if ( fmt.IndexOf( "third dawn" ) >= 0 || fmt.IndexOf( "uo:td" ) >= 0 || fmt.IndexOf( "uotd" ) >= 0 || fmt.IndexOf( "uo3d" ) >= 0 || fmt.IndexOf( "uo:3d" ) >= 0 )  					m_Type = ClientType.UOTD;  				else  					m_Type = ClientType.Regular;  			}  			catch  			{  				m_Major = 0;  				m_Minor = 0;  				m_Revision = 0;  				m_Patch = 0;  				m_Type = ClientType.Regular;  			}
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach ( NetState state in eable ) {  				if ( state.Mobile.CanSee( e ) ) {  					if ( SendParticlesTo( state ) ) {  						if ( preEffect == null )  							preEffect = Packet.Acquire( new TargetParticleEffect( e' 0' 10' 5' 0' 0' 5031' 3' 0 ) );    						state.Send( preEffect );  					}    					if ( boltEffect == null )  						boltEffect = Packet.Acquire( new BoltEffect( e' hue ) );    					state.Send( boltEffect );    					if ( sound ) {  						if ( playSound == null )  							playSound = Packet.Acquire( new PlaySound( 0x29' e ) );    						state.Send( playSound );  					}  				}  			}
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach ( NetState state in eable ) {  				if ( state.Mobile.CanSee( e ) ) {  					if ( SendParticlesTo( state ) ) {  						if ( preEffect == null )  							preEffect = Packet.Acquire( new TargetParticleEffect( e' 0' 10' 5' 0' 0' 5031' 3' 0 ) );    						state.Send( preEffect );  					}    					if ( boltEffect == null )  						boltEffect = Packet.Acquire( new BoltEffect( e' hue ) );    					state.Send( boltEffect );    					if ( sound ) {  						if ( playSound == null )  							playSound = Packet.Acquire( new PlaySound( 0x29' e ) );    						state.Send( playSound );  					}  				}  			}
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach ( NetState state in eable ) {  				if ( state.Mobile.CanSee( e ) ) {  					if ( SendParticlesTo( state ) ) {  						if ( preEffect == null )  							preEffect = Packet.Acquire( new TargetParticleEffect( e' 0' 10' 5' 0' 0' 5031' 3' 0 ) );    						state.Send( preEffect );  					}    					if ( boltEffect == null )  						boltEffect = Packet.Acquire( new BoltEffect( e' hue ) );    					state.Send( boltEffect );    					if ( sound ) {  						if ( playSound == null )  							playSound = Packet.Acquire( new PlaySound( 0x29' e ) );    						state.Send( playSound );  					}  				}  			}
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach ( NetState state in eable ) {  				if ( state.Mobile.CanSee( e ) ) {  					if ( SendParticlesTo( state ) ) {  						if ( preEffect == null )  							preEffect = Packet.Acquire( new TargetParticleEffect( e' 0' 10' 5' 0' 0' 5031' 3' 0 ) );    						state.Send( preEffect );  					}    					if ( boltEffect == null )  						boltEffect = Packet.Acquire( new BoltEffect( e' hue ) );    					state.Send( boltEffect );    					if ( sound ) {  						if ( playSound == null )  							playSound = Packet.Acquire( new PlaySound( 0x29' e ) );    						state.Send( playSound );  					}  				}  			}
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationEffect,The following statement contains a magic number: SendLocationEffect( p' map' itemID' duration' 10' 0' 0 );
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendLocationEffect,The following statement contains a magic number: SendLocationEffect( p' map' itemID' duration' 10' hue' renderMode );
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendTargetEffect,The following statement contains a magic number: SendTargetEffect( target' itemID' 10' duration' hue' renderMode );
Magic Number,Server,Effects,C:\repos\runuo_runuo\Server\Effects.cs,SendMovingParticles,The following statement contains a magic number: SendMovingParticles( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown );
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,ExpansionInfo,The following statement contains a magic number: Table = new[]  			{  				new ExpansionInfo(  					0'  					"None"'  					ClientFlags.None'  					FeatureFlags.ExpansionNone'  					CharacterListFlags.ExpansionNone'  					HousingFlags.None)'  				new ExpansionInfo(  					1'  					"The Second Age"'  					ClientFlags.Felucca'  					FeatureFlags.ExpansionT2A'  					CharacterListFlags.ExpansionT2A'  					HousingFlags.None)'  				new ExpansionInfo(  					2'  					"Renaissance"'  					ClientFlags.Trammel'  					FeatureFlags.ExpansionUOR'  					CharacterListFlags.ExpansionUOR'  					HousingFlags.None)'  				new ExpansionInfo(  					3'  					"Third Dawn"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionUOTD'  					CharacterListFlags.ExpansionUOTD'  					HousingFlags.None)'  				new ExpansionInfo(  					4'  					"Blackthorn's Revenge"'  					ClientFlags.Ilshenar'  					FeatureFlags.ExpansionLBR'  					CharacterListFlags.ExpansionLBR'  					HousingFlags.None)'  				new ExpansionInfo(  					5'  					"Age of Shadows"'  					ClientFlags.Malas'  					FeatureFlags.ExpansionAOS'  					CharacterListFlags.ExpansionAOS'  					HousingFlags.HousingAOS)'  				new ExpansionInfo(  					6'  					"Samurai Empire"'  					ClientFlags.Tokuno'  					FeatureFlags.ExpansionSE'  					CharacterListFlags.ExpansionSE'  					HousingFlags.HousingSE)'  				new ExpansionInfo(  					7'  					"Mondain's Legacy"'  					new ClientVersion("5.0.0a")'  					FeatureFlags.ExpansionML'  					CharacterListFlags.ExpansionML'  					HousingFlags.HousingML)'  				new ExpansionInfo(  					8'  					"Stygian Abyss"'  					ClientFlags.TerMur'  					FeatureFlags.ExpansionSA'  					CharacterListFlags.ExpansionSA'  					HousingFlags.HousingSA)'  				new ExpansionInfo(  					9'  					"High Seas"'  					new ClientVersion("7.0.9.0")'  					FeatureFlags.ExpansionHS'  					CharacterListFlags.ExpansionHS'  					HousingFlags.HousingHS)'  				new ExpansionInfo(  					10'  					"Time of Legends"'  					new ClientVersion("7.0.45.65")'  					FeatureFlags.ExpansionTOL'  					CharacterListFlags.ExpansionTOL'  					HousingFlags.HousingTOL)  			};
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if ( name == null )  			{  				if ( m_Amount <= 1 )  					list.Add( LabelNumber );  				else  					list.Add( 1050039' "{0}\t#{1}"' m_Amount' LabelNumber ); // ~1_NUMBER~ ~2_ITEMNAME~  			}  			else  			{  				if ( m_Amount <= 1 )  					list.Add( name );  				else  					list.Add( 1050039' "{0}\t{1}"' m_Amount' Name ); // ~1_NUMBER~ ~2_ITEMNAME~  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if ( name == null )  			{  				if ( m_Amount <= 1 )  					list.Add( LabelNumber );  				else  					list.Add( 1050039' "{0}\t#{1}"' m_Amount' LabelNumber ); // ~1_NUMBER~ ~2_ITEMNAME~  			}  			else  			{  				if ( m_Amount <= 1 )  					list.Add( name );  				else  					list.Add( 1050039' "{0}\t{1}"' m_Amount' Name ); // ~1_NUMBER~ ~2_ITEMNAME~  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if ( m_LootType == LootType.Blessed )  				list.Add( 1038021 ); // blessed  			else if ( m_LootType == LootType.Cursed )  				list.Add( 1049643 ); // cursed  			else if ( Insured )  				list.Add( 1061682 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if ( m_LootType == LootType.Blessed )  				list.Add( 1038021 ); // blessed  			else if ( m_LootType == LootType.Cursed )  				list.Add( 1049643 ); // cursed  			else if ( Insured )  				list.Add( 1061682 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if ( m_LootType == LootType.Blessed )  				list.Add( 1038021 ); // blessed  			else if ( m_LootType == LootType.Cursed )  				list.Add( 1049643 ); // cursed  			else if ( Insured )  				list.Add( 1061682 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if ( v != 0 )  				list.Add( 1060448' v.ToString() );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if ( v != 0 )  				list.Add( 1060447' v.ToString() );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if ( v != 0 )  				list.Add( 1060445' v.ToString() );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if ( v != 0 )  				list.Add( 1060449' v.ToString() );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if ( v != 0 )  				list.Add( 1060446' v.ToString() );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: if ( weight == 1 ) {  				list.Add( 1072788' weight.ToString() ); //Weight: ~1_WEIGHT~ stone  			} else {  				list.Add( 1072789' weight.ToString() ); //Weight: ~1_WEIGHT~ stones  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: if ( weight == 1 ) {  				list.Add( 1072788' weight.ToString() ); //Weight: ~1_WEIGHT~ stone  			} else {  				list.Add( 1072789' weight.ToString() ); //Weight: ~1_WEIGHT~ stones  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddQuestItemProperty,The following statement contains a magic number: list.Add( 1072351 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddSecureProperty,The following statement contains a magic number: list.Add( 501644 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddLockedDownProperty,The following statement contains a magic number: list.Add( 501643 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,AddBlessedForProperty,The following statement contains a magic number: list.Add( 1062203' "{0}"' m.Name );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnParentDeath,The following statement contains a magic number: if ( !Movable )  				return DeathMoveResult.RemainEquiped;  			else if ( parent.KeepsItemsOnDeath )  				return DeathMoveResult.MoveToBackpack;  			else if ( CheckBlessed( parent ) )  				return DeathMoveResult.MoveToBackpack;  			else if ( CheckNewbied() && parent.Kills < 5 )  				return DeathMoveResult.MoveToBackpack;  			else if( parent.Player && Nontransferable )  				return DeathMoveResult.MoveToBackpack;  			else  				return DeathMoveResult.MoveToCorpse;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnInventoryDeath,The following statement contains a magic number: if ( !Movable )  				return DeathMoveResult.MoveToBackpack;  			else if ( parent.KeepsItemsOnDeath )  				return DeathMoveResult.MoveToBackpack;  			else if ( CheckBlessed( parent ) )  				return DeathMoveResult.MoveToBackpack;  			else if ( CheckNewbied() && parent.Kills < 5 )  				return DeathMoveResult.MoveToBackpack;  			else if( parent.Player && Nontransferable )  				return DeathMoveResult.MoveToBackpack;  			else  				return DeathMoveResult.MoveToCorpse;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' "" ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' args ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send( new UnicodeMessage( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' text ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelToAffix,The following statement contains a magic number: to.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' type' affix' "" ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelToAffix,The following statement contains a magic number: to.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' type' affix' args ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,LabelLootTypeTo,The following statement contains a magic number: if ( m_LootType == LootType.Blessed )  				LabelTo( to' 1041362 ); // (blessed)  			else if ( m_LootType == LootType.Cursed )  				LabelTo( to' "(cursed)" );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,StackWith,The following statement contains a magic number: if ( dropped.Stackable && Stackable && dropped.GetType() == GetType() && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable )  			{  				if ( m_LootType != dropped.m_LootType )  					m_LootType = LootType.Regular;    				Amount += dropped.Amount;  				dropped.Delete();    				if ( playSound && from != null )  				{  					int soundID = GetDropSound();    					if ( soundID == -1 )  						soundID = 0x42;    					from.SendSound( soundID' GetWorldLocation() );  				}    				return true;  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( itemID >= 0xEEA && itemID <= 0xEF2 ) // Are we coins?  			{  				int coinBase = (itemID - 0xEEA) / 3;  				coinBase *= 3;  				coinBase += 0xEEA;    				doubled = false;    				if ( m_Amount <= 1 )  				{  					// A single coin  					itemID = coinBase;  				}  				else if ( m_Amount <= 5 )  				{  					// A stack of coins  					itemID = coinBase + 1;  				}  				else // m_Amount > 5  				{  					// A pile of coins  					itemID = coinBase + 2;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( itemID >= 0xEEA && itemID <= 0xEF2 ) // Are we coins?  			{  				int coinBase = (itemID - 0xEEA) / 3;  				coinBase *= 3;  				coinBase += 0xEEA;    				doubled = false;    				if ( m_Amount <= 1 )  				{  					// A single coin  					itemID = coinBase;  				}  				else if ( m_Amount <= 5 )  				{  					// A stack of coins  					itemID = coinBase + 1;  				}  				else // m_Amount > 5  				{  					// A pile of coins  					itemID = coinBase + 2;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( itemID >= 0xEEA && itemID <= 0xEF2 ) // Are we coins?  			{  				int coinBase = (itemID - 0xEEA) / 3;  				coinBase *= 3;  				coinBase += 0xEEA;    				doubled = false;    				if ( m_Amount <= 1 )  				{  					// A single coin  					itemID = coinBase;  				}  				else if ( m_Amount <= 5 )  				{  					// A stack of coins  					itemID = coinBase + 1;  				}  				else // m_Amount > 5  				{  					// A pile of coins  					itemID = coinBase + 2;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( itemID >= 0xEEA && itemID <= 0xEF2 ) // Are we coins?  			{  				int coinBase = (itemID - 0xEEA) / 3;  				coinBase *= 3;  				coinBase += 0xEEA;    				doubled = false;    				if ( m_Amount <= 1 )  				{  					// A single coin  					itemID = coinBase;  				}  				else if ( m_Amount <= 5 )  				{  					// A stack of coins  					itemID = coinBase + 1;  				}  				else // m_Amount > 5  				{  					// A pile of coins  					itemID = coinBase + 2;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( doubled )  			{  				bounds.Set( bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5 );  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if ( doubled )  			{  				bounds.Set( bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5 );  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Serialize,The following statement contains a magic number: writer.Write( 9 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetMaxUpdateRange,The following statement contains a magic number: return 18;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,GetUpdateRange,The following statement contains a magic number: return 18;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,HandleInvalidTransfer,The following statement contains a magic number: if( QuestItem )  				from.SendLocalizedMessage( 1049343 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,ProcessDeltaQueue,The following statement contains a magic number: if (m_DeltaQueue.Count >= 512) {  				Parallel.ForEach(m_DeltaQueue' i => i.ProcessDelta());  			} else {  				for (int i = 0; i < m_DeltaQueue.Count; i++) m_DeltaQueue[i].ProcessDelta();  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if ( m_Map != null )  			{  				Packet p = null;  				Point3D worldLoc = GetWorldLocation();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(worldLoc' GetMaxUpdateRange());    				foreach ( NetState state in eable )  				{  					Mobile m = state.Mobile;    					if ( m.CanSee( this ) && m.InRange( worldLoc' GetUpdateRange( m ) ) )  					{  						if ( p == null )  						{  							if ( ascii )  								p = new AsciiMessage( m_Serial' m_ItemID' type' hue' 3' this.Name' text );  							else  								p = new UnicodeMessage( m_Serial' m_ItemID' type' hue' 3' "ENU"' this.Name' text );    							p.Acquire();  						}    						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if ( m_Map != null )  			{  				Packet p = null;  				Point3D worldLoc = GetWorldLocation();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(worldLoc' GetMaxUpdateRange());    				foreach ( NetState state in eable )  				{  					Mobile m = state.Mobile;    					if ( m.CanSee( this ) && m.InRange( worldLoc' GetUpdateRange( m ) ) )  					{  						if ( p == null )  						{  							if ( ascii )  								p = new AsciiMessage( m_Serial' m_ItemID' type' hue' 3' this.Name' text );  							else  								p = new UnicodeMessage( m_Serial' m_ItemID' type' hue' 3' "ENU"' this.Name' text );    							p.Acquire();  						}    						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if ( m_Map != null )  			{  				Packet p = null;  				Point3D worldLoc = GetWorldLocation();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(worldLoc' GetMaxUpdateRange());    				foreach ( NetState state in eable )  				{  					Mobile m = state.Mobile;    					if ( m.CanSee( this ) && m.InRange( worldLoc' GetUpdateRange( m ) ) )  					{  						if ( p == null )  							p = Packet.Acquire( new MessageLocalized( m_Serial' m_ItemID' type' hue' 3' number' this.Name' args ) );    						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToMobile,The following statement contains a magic number: if ( Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null )  				return false;  			else if ( from.AccessLevel < AccessLevel.GameMaster && !from.InRange( target.Location' 2 ) )  				return false;  			else if ( !from.CanSee( target ) || !from.InLOS( target ) )  				return false;  			else if ( !from.OnDroppedItemToMobile( this' target ) )  				return false;  			else if ( !OnDroppedToMobile( from' target ) )  				return false;  			else if ( !target.OnDragDrop( from' this ) )  				return false;  			else  				return true;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnDroppedOnto,The following statement contains a magic number: if ( Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null )  				return false;  			else if ( from.AccessLevel < AccessLevel.GameMaster && !from.InRange( target.GetWorldLocation()' 2 ) )  				return false;  			else if ( !from.CanSee( target ) || !from.InLOS( target ) )  				return false;  			else if ( !target.IsAccessibleTo( from ) )  				return false;  			else if ( !from.OnDroppedItemOnto( this' target ) )  				return false;  			else if( Nontransferable && from.Player && target != from.Backpack )  			{  				HandleInvalidTransfer( from );  				return false;  			}  			else  				return target.OnDragDrop( from' this );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToItem,The following statement contains a magic number: if ( from.AccessLevel < AccessLevel.GameMaster && !from.InRange( target.GetWorldLocation()' 2 ) )  				return false;  			else if ( !from.CanSee( target ) || !from.InLOS( target ) )  				return false;  			else if ( !target.IsAccessibleTo( from ) )  				return false;  			else if ( root is Mobile && !((Mobile)root).CheckNonlocalDrop( from' this' target ) )  				return false;  			else if ( !from.OnDroppedItemToItem( this' target' p ) )  				return false;  			else if ( target is Container && p.m_X != -1 && p.m_Y != -1 )  				return OnDroppedInto( from' (Container)target' p );  			else  				return OnDroppedOnto( from' target );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: if ( Deleted || from.Deleted || from.Map == null )  				return false;  			else if ( !from.InRange( p' 2 ) )  				return false;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: int maxZ = from.Z + 16;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: m_OpenSlots = (1<<20)-1;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < tiles.Length; ++i )  			{  				StaticTile tile = tiles[i];  				ItemData id = TileData.ItemTable[tile.ID & TileData.MaxItemValue];    				int checkZ = tile.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < tiles.Length; ++i )  			{  				StaticTile tile = tiles[i];  				ItemData id = TileData.ItemTable[tile.ID & TileData.MaxItemValue];    				int checkZ = tile.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < tiles.Length; ++i )  			{  				StaticTile tile = tiles[i];  				ItemData id = TileData.ItemTable[tile.ID & TileData.MaxItemValue];    				int checkZ = tile.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < items.Count; ++i )  			{  				Item item = items[i];  				ItemData id = item.ItemData;    				int checkZ = item.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < items.Count; ++i )  			{  				Item item = items[i];  				ItemData id = item.ItemData;    				int checkZ = item.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < items.Count; ++i )  			{  				Item item = items[i];  				ItemData id = item.ItemData;    				int checkZ = item.Z;  				int checkTop = checkZ + id.CalcHeight;    				if ( checkTop == checkZ && !id.Surface )  					++checkTop;    				int zStart = checkZ - z;  				int zEnd = checkTop - z;    				if ( zStart >= 20 || zEnd < 0 )  					continue;    				if ( zStart < 0 )  					zStart = 0;    				if ( zEnd > 19 )  					zEnd = 19;    				int bitCount = zEnd-zStart;    				m_OpenSlots &= ~(((1<<bitCount)-1)<<zStart);  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: if ( height > 30 )  				height = 30;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: if ( height > 30 )  				height = 30;
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < 20; ++i )  			{  				if ( (i+height) > 20 )  					match >>= 1;    				okay = ((m_OpenSlots>>i)&match) == match;    				if ( okay )  				{  					z += i;  					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The following statement contains a magic number: for ( int i = 0; i < 20; ++i )  			{  				if ( (i+height) > 20 )  					match >>= 1;    				okay = ((m_OpenSlots>>i)&match) == match;    				if ( okay )  				{  					z += i;  					break;  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send( new MessageLocalized( Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' "" ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send( new MessageLocalized( Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' args ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send( new MessageLocalizedAffix( Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' affixType' affix' args ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnDoubleClickDead,The following statement contains a magic number: from.LocalOverheadMessage( MessageType.Regular' 0x3B2' 1019048 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnDoubleClickNotAccessible,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnAosSingleClick,The following statement contains a magic number: if ( opl.Header > 0 )  				from.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' opl.Header' this.Name' opl.HeaderArgs ) );
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if ( ns != null )  			{  				if ( this.Name == null )  				{  					if ( m_Amount <= 1 )  						ns.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' "" ) );  					else  						ns.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format( " : {0}"' m_Amount )' "" ) );  				}  				else  				{  					ns.Send( new UnicodeMessage( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' this.Name + ( m_Amount > 1 ? " : " + m_Amount : "" ) ) );  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if ( ns != null )  			{  				if ( this.Name == null )  				{  					if ( m_Amount <= 1 )  						ns.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' "" ) );  					else  						ns.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format( " : {0}"' m_Amount )' "" ) );  				}  				else  				{  					ns.Send( new UnicodeMessage( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' this.Name + ( m_Amount > 1 ? " : " + m_Amount : "" ) ) );  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if ( ns != null )  			{  				if ( this.Name == null )  				{  					if ( m_Amount <= 1 )  						ns.Send( new MessageLocalized( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' "" ) );  					else  						ns.Send( new MessageLocalizedAffix( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format( " : {0}"' m_Amount )' "" ) );  				}  				else  				{  					ns.Send( new UnicodeMessage( m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' this.Name + ( m_Amount > 1 ? " : " + m_Amount : "" ) ) );  				}  			}
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,ScissorHelper,The following statement contains a magic number: if ( amount > (60000 / amountPerOldItem) ) // let's not go over 60000  				amount = (60000 / amountPerOldItem);
Magic Number,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,ScissorHelper,The following statement contains a magic number: if ( amount > (60000 / amountPerOldItem) ) // let's not go over 60000  				amount = (60000 / amountPerOldItem);
Magic Number,Server,ItemBounds,C:\repos\runuo_runuo\Server\ItemBounds.cs,ItemBounds,The following statement contains a magic number: if ( File.Exists( "Data/Binary/Bounds.bin" ) )  			{  				using ( FileStream fs = new FileStream( "Data/Binary/Bounds.bin"' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader bin = new BinaryReader( fs );    					int count = Math.Min( m_Bounds.Length' (int)( fs.Length / 8 ) );    					for ( int i = 0; i < count; ++i )  					{  						int xMin = bin.ReadInt16();  						int yMin = bin.ReadInt16();  						int xMax = bin.ReadInt16();  						int yMax = bin.ReadInt16();    						m_Bounds[i].Set( xMin' yMin' (xMax - xMin) + 1' (yMax - yMin) + 1 );  					}    					bin.Close();  				}  			}  			else  			{  				Console.WriteLine( "Warning: Data/Binary/Bounds.bin does not exist" );  			}
Magic Number,Server,VirtualCheck,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,GetProperties,The following statement contains a magic number: list.Add(1060738' String.Format("{0:#'0} platinum' {1:#'0} gold"' Plat' Gold));
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(0' 0' 400' 160' 3500);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(0' 0' 400' 160' 3500);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(0' 0' 400' 160' 3500);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImageTiled(25' 35' 350' 3' 96);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImageTiled(25' 35' 350' 3' 96);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImageTiled(25' 35' 350' 3' 96);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImageTiled(25' 35' 350' 3' 96);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImageTiled(25' 35' 350' 3' 96);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(10' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(10' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(10' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(360' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(360' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddImage(360' 8' 113);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddHtml(40' 15' 320' 20' title' false' false);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddHtml(40' 15' 320' 20' title' false' false);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddHtml(40' 15' 320' 20' title' false' false);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddHtml(40' 15' 320' 20' title' false' false);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 45' 3826);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 45' 3826);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 45' 3826);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddLabel(60' 50' 0' User.Account.TotalPlat.ToString("#'0"));
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddLabel(60' 50' 0' User.Account.TotalPlat.ToString("#'0"));
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 50' 95' 95' (int)Buttons.AllPlat' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 50' 95' 95' (int)Buttons.AllPlat' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 50' 95' 95' (int)Buttons.AllPlat' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 50' 95' 95' (int)Buttons.AllPlat' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 60' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 45' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 50' 145' 20' 0' 0' _Plat.ToString()' User.Account.TotalPlat.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 50' 145' 20' 0' 0' _Plat.ToString()' User.Account.TotalPlat.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 50' 145' 20' 0' 0' _Plat.ToString()' User.Account.TotalPlat.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 50' 145' 20' 0' 0' _Plat.ToString()' User.Account.TotalPlat.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(15' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(20' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 85' 3823);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 85' 3823);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddItem(20' 85' 3823);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddLabel(60' 90' 0' User.Account.TotalGold.ToString("#'0"));
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddLabel(60' 90' 0' User.Account.TotalGold.ToString("#'0"));
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 90' 95' 95' (int)Buttons.AllGold' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 90' 95' 95' (int)Buttons.AllGold' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 90' 95' 95' (int)Buttons.AllGold' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(195' 90' 95' 95' (int)Buttons.AllGold' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(210' 100' 175' 20' 9300);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddBackground(215' 85' 165' 30' 9350);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 90' 145' 20' 0' 1' _Gold.ToString()' User.Account.TotalGold.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 90' 145' 20' 0' 1' _Gold.ToString()' User.Account.TotalGold.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 90' 145' 20' 0' 1' _Gold.ToString()' User.Account.TotalGold.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddTextEntry(225' 90' 145' 20' 0' 1' _Gold.ToString()' User.Account.TotalGold.ToString().Length);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(20' 128' 12006' 12007' (int)Buttons.Close' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(20' 128' 12006' 12007' (int)Buttons.Close' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(20' 128' 12006' 12007' (int)Buttons.Close' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(20' 128' 12006' 12007' (int)Buttons.Close' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(215' 128' 12003' 12004' (int)Buttons.Clear' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(215' 128' 12003' 12004' (int)Buttons.Clear' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(215' 128' 12003' 12004' (int)Buttons.Clear' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(215' 128' 12003' 12004' (int)Buttons.Clear' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(305' 128' 12000' 12002' (int)Buttons.Accept' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(305' 128' 12000' 12002' (int)Buttons.Accept' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(305' 128' 12000' 12002' (int)Buttons.Accept' GumpButtonType.Reply' 0);
Magic Number,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,CompileLayout,The following statement contains a magic number: AddButton(305' 128' 12000' 12002' (int)Buttons.Accept' GumpButtonType.Reply' 0);
Magic Number,Server,HairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - (parent.Serial * 4));
Magic Number,Server,FacialHairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - 1 - (parent.Serial * 4));
Magic Number,Server,KeywordList,C:\repos\runuo_runuo\Server\KeywordList.cs,KeywordList,The following statement contains a magic number: m_Keywords = new int[8];
Magic Number,Server,KeywordList,C:\repos\runuo_runuo\Server\KeywordList.cs,Add,The following statement contains a magic number: if ( (m_Count + 1) > m_Keywords.Length )  			{  				int[] old = m_Keywords;  				m_Keywords = new int[old.Length * 2];    				for ( int i = 0; i < old.Length; ++i )  					m_Keywords[i] = old[i];  			}
Magic Number,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The following statement contains a magic number: if( platform == 4 || platform == 128 ) { // MS 4' MONO 128  				m_Unix = true;  				Console.WriteLine( "Core: Unix environment detected" );  			}  			else {  				m_ConsoleEventHandler = OnConsoleEvent;  				UnsafeNativeMethods.SetConsoleCtrlHandler( m_ConsoleEventHandler' true );  			}
Magic Number,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The following statement contains a magic number: if( platform == 4 || platform == 128 ) { // MS 4' MONO 128  				m_Unix = true;  				Console.WriteLine( "Core: Unix environment detected" );  			}  			else {  				m_ConsoleEventHandler = OnConsoleEvent;  				UnsafeNativeMethods.SetConsoleCtrlHandler( m_ConsoleEventHandler' true );  			}
Magic Number,Server,Core,C:\repos\runuo_runuo\Server\Main.cs,Main,The following statement contains a magic number: try  			{  				long now' last = TickCount;    				const int sampleInterval = 100;  				const float ticksPerSecond = 1000.0f * sampleInterval;    				long sample = 0;    				while( !m_Closing )  				{  					m_Signal.WaitOne();    					Mobile.ProcessDeltaQueue();  					Item.ProcessDeltaQueue();    					Timer.Slice();  					messagePump.Slice();    					NetState.FlushAll();  					NetState.ProcessDisposedQueue();    					if( Slice != null )  						Slice();    					if (sample++ % sampleInterval != 0)  					{  						continue;  					}    					now = TickCount;  					m_CyclesPerSecond[m_CycleIndex++ % m_CyclesPerSecond.Length] = ticksPerSecond / (now - last);  					last = now;  				}  			}  			catch( Exception e )  			{  				CurrentDomain_UnhandledException( null' new UnhandledExceptionEventArgs( e' true ) );  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,FloorAverage,The following statement contains a magic number: return ( v / 2 );
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetObjectsInRange,The following statement contains a magic number: return GetObjectsInRange(p' 18);
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetObjectsInRange,The following statement contains a magic number: return GetObjectsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetObjectsInRange,The following statement contains a magic number: return GetObjectsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetClientsInRange,The following statement contains a magic number: return GetClientsInRange(p' 18);
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetClientsInRange,The following statement contains a magic number: return GetClientsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetClientsInRange,The following statement contains a magic number: return GetClientsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetItemsInRange,The following statement contains a magic number: return GetItemsInRange(p' 18);
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetItemsInRange,The following statement contains a magic number: return GetItemsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetItemsInRange,The following statement contains a magic number: return GetItemsInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetMobilesInRange,The following statement contains a magic number: return GetMobilesInRange(p' 18);
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetMobilesInRange,The following statement contains a magic number: return GetMobilesInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetMobilesInRange,The following statement contains a magic number: return GetMobilesInBounds(new Rectangle2D(p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1));
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanFit,The following statement contains a magic number: if ( checkMobiles )  			{  				for ( int i = 0; i < mobs.Count; ++i )  				{  					Mobile m = mobs[i];    					if ( m.Location.m_X == x && m.Location.m_Y == y && ( m.AccessLevel == AccessLevel.Player || !m.Hidden ) )  						if ( ( m.Z + 16 ) > z && ( z + height ) > m.Z )  							return false;  				}  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,CanSpawnMobile,The following statement contains a magic number: return CanFit( x' y' z' 16 );
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,FixColumn,The following statement contains a magic number: foreach ( Item item in eable )  			{  				if ( !(item is BaseMulti) && item.ItemID <= TileData.MaxItemValue )  				{  					items.Add( item );    					if ( items.Count > 100 )  						break;  				}  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,FixColumn,The following statement contains a magic number: if ( items.Count > 100 )  				return;
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetPoint,The following statement contains a magic number: if( o is Mobile )  			{  				p = ((Mobile)o).Location;  				p.Z += 14;//eye ? 15 : 10;  			}  			else if( o is Item )  			{  				p = ((Item)o).GetWorldLocation();  				p.Z += (((Item)o).ItemData.Height / 2) + 1;  			}  			else if( o is Point3D )  			{  				p = (Point3D)o;  			}  			else if( o is LandTarget )  			{  				p = ((LandTarget)o).Location;    				int low = 0' avg = 0' top = 0;  				GetAverageZ( p.X' p.Y' ref low' ref avg' ref top );    				p.Z = top + 1;  			}  			else if( o is StaticTarget )  			{  				StaticTarget st = (StaticTarget)o;  				ItemData id = TileData.ItemTable[st.ItemID & TileData.MaxItemValue];    				p = new Point3D( st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1 );  			}  			else if( o is IPoint3D )  			{  				p = new Point3D( (IPoint3D)o );  			}  			else  			{  				Console.WriteLine( "Warning: Invalid object ({0}) in line of sight"' o );  				p = Point3D.Zero;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetPoint,The following statement contains a magic number: if( o is Mobile )  			{  				p = ((Mobile)o).Location;  				p.Z += 14;//eye ? 15 : 10;  			}  			else if( o is Item )  			{  				p = ((Item)o).GetWorldLocation();  				p.Z += (((Item)o).ItemData.Height / 2) + 1;  			}  			else if( o is Point3D )  			{  				p = (Point3D)o;  			}  			else if( o is LandTarget )  			{  				p = ((LandTarget)o).Location;    				int low = 0' avg = 0' top = 0;  				GetAverageZ( p.X' p.Y' ref low' ref avg' ref top );    				p.Z = top + 1;  			}  			else if( o is StaticTarget )  			{  				StaticTarget st = (StaticTarget)o;  				ItemData id = TileData.ItemTable[st.ItemID & TileData.MaxItemValue];    				p = new Point3D( st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1 );  			}  			else if( o is IPoint3D )  			{  				p = new Point3D( (IPoint3D)o );  			}  			else  			{  				Console.WriteLine( "Warning: Invalid object ({0}) in line of sight"' o );  				p = Point3D.Zero;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,GetPoint,The following statement contains a magic number: if( o is Mobile )  			{  				p = ((Mobile)o).Location;  				p.Z += 14;//eye ? 15 : 10;  			}  			else if( o is Item )  			{  				p = ((Item)o).GetWorldLocation();  				p.Z += (((Item)o).ItemData.Height / 2) + 1;  			}  			else if( o is Point3D )  			{  				p = (Point3D)o;  			}  			else if( o is LandTarget )  			{  				p = ((LandTarget)o).Location;    				int low = 0' avg = 0' top = 0;  				GetAverageZ( p.X' p.Y' ref low' ref avg' ref top );    				p.Z = top + 1;  			}  			else if( o is StaticTarget )  			{  				StaticTarget st = (StaticTarget)o;  				ItemData id = TileData.ItemTable[st.ItemID & TileData.MaxItemValue];    				p = new Point3D( st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1 );  			}  			else if( o is IPoint3D )  			{  				p = new Point3D( (IPoint3D)o );  			}  			else  			{  				Console.WriteLine( "Warning: Invalid object ({0}) in line of sight"' o );  				p = Point3D.Zero;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: while( Utility.NumberBetween( x' dest.m_X' org.m_X' 0.5 ) && Utility.NumberBetween( y' dest.m_Y' org.m_Y' 0.5 ) && Utility.NumberBetween( z' dest.m_Z' org.m_Z' 0.5 ) )  			{  				ix = (int)Math.Round( x );  				iy = (int)Math.Round( y );  				iz = (int)Math.Round( z );  				if( path.Count > 0 )  				{  					p = path.Last;    					if( p.m_X != ix || p.m_Y != iy || p.m_Z != iz )  						path.Add( ix' iy' iz );  				}  				else  				{  					path.Add( ix' iy' iz );  				}  				x += run;  				y += rise;  				z += zslp;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: while( Utility.NumberBetween( x' dest.m_X' org.m_X' 0.5 ) && Utility.NumberBetween( y' dest.m_Y' org.m_Y' 0.5 ) && Utility.NumberBetween( z' dest.m_Z' org.m_Z' 0.5 ) )  			{  				ix = (int)Math.Round( x );  				iy = (int)Math.Round( y );  				iz = (int)Math.Round( z );  				if( path.Count > 0 )  				{  					p = path.Last;    					if( p.m_X != ix || p.m_Y != iy || p.m_Z != iz )  						path.Add( ix' iy' iz );  				}  				else  				{  					path.Add( ix' iy' iz );  				}  				x += run;  				y += rise;  				z += zslp;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: while( Utility.NumberBetween( x' dest.m_X' org.m_X' 0.5 ) && Utility.NumberBetween( y' dest.m_Y' org.m_Y' 0.5 ) && Utility.NumberBetween( z' dest.m_Z' org.m_Z' 0.5 ) )  			{  				ix = (int)Math.Round( x );  				iy = (int)Math.Round( y );  				iz = (int)Math.Round( z );  				if( path.Count > 0 )  				{  					p = path.Last;    					if( p.m_X != ix || p.m_Y != iy || p.m_Z != iz )  						path.Add( ix' iy' iz );  				}  				else  				{  					path.Add( ix' iy' iz );  				}  				x += run;  				y += rise;  				z += zslp;  			}
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: eye.Z += 14;
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: eye.Z += 14;
Magic Number,Server,Map,C:\repos\runuo_runuo\Server\Map.cs,LineOfSight,The following statement contains a magic number: target.Z += 14;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,UpdateResistances,The following statement contains a magic number: if( m_Resistances == null )  				m_Resistances = new int[5] { int.MinValue' int.MinValue' int.MinValue' int.MinValue' int.MinValue };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetResistance,The following statement contains a magic number: if( m_Resistances == null )  				m_Resistances = new int[5] { int.MinValue' int.MinValue' int.MinValue' int.MinValue' int.MinValue };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: if( m_Resistances == null )  				m_Resistances = new int[5] { int.MinValue' int.MinValue' int.MinValue' int.MinValue' int.MinValue };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: m_Resistances[2] += this.BaseColdResistance;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: m_Resistances[3] += this.BasePoisonResistance;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: m_Resistances[4] += this.BaseEnergyResistance;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for( int i = 0; i < m_Items.Count; ++i )  			{  				Item item = m_Items[i];    				if( item.CheckPropertyConfliction( this ) )  					continue;    				m_Resistances[0] += item.PhysicalResistance;  				m_Resistances[1] += item.FireResistance;  				m_Resistances[2] += item.ColdResistance;  				m_Resistances[3] += item.PoisonResistance;  				m_Resistances[4] += item.EnergyResistance;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for( int i = 0; i < m_Items.Count; ++i )  			{  				Item item = m_Items[i];    				if( item.CheckPropertyConfliction( this ) )  					continue;    				m_Resistances[0] += item.PhysicalResistance;  				m_Resistances[1] += item.FireResistance;  				m_Resistances[2] += item.ColdResistance;  				m_Resistances[3] += item.PoisonResistance;  				m_Resistances[4] += item.EnergyResistance;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for( int i = 0; i < m_Items.Count; ++i )  			{  				Item item = m_Items[i];    				if( item.CheckPropertyConfliction( this ) )  					continue;    				m_Resistances[0] += item.PhysicalResistance;  				m_Resistances[1] += item.FireResistance;  				m_Resistances[2] += item.ColdResistance;  				m_Resistances[3] += item.PoisonResistance;  				m_Resistances[4] += item.EnergyResistance;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if( opl.Header > 0 )  			{  				int hue;    				if( m_NameHue != -1 )  					hue = m_NameHue;  				else if( m_AccessLevel > AccessLevel.Player )  					hue = 11;  				else  					hue = Notoriety.GetHue( Notoriety.Compute( from' this ) );    				from.Send( new MessageLocalized( m_Serial' Body' MessageType.Label' hue' 3' opl.Header' Name' opl.HeaderArgs ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if( opl.Header > 0 )  			{  				int hue;    				if( m_NameHue != -1 )  					hue = m_NameHue;  				else if( m_AccessLevel > AccessLevel.Player )  					hue = 11;  				else  					hue = Notoriety.GetHue( Notoriety.Compute( from' this ) );    				from.Send( new MessageLocalized( m_Serial' Body' MessageType.Label' hue' 3' opl.Header' Name' opl.HeaderArgs ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddNameProperties,The following statement contains a magic number: if( ShowFameTitle && (m_Player || m_Body.IsHuman) && m_Fame >= 10000 )  				prefix = m_Female ? "Lady" : "Lord";
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,AddNameProperties,The following statement contains a magic number: list.Add( 1050045' "{0} \t{1}\t {2}"' prefix' name' suffix );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendSkillMessage,The following statement contains a magic number: SendLocalizedMessage( 500118 );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendActionMessage,The following statement contains a magic number: SendLocalizedMessage( 500119 );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following statement contains a magic number: if( (m_Direction & Direction.Mask) == (d & Direction.Mask) )  			{  				// We are actually moving (not just a direction change)    				if( m_Spell != null && !m_Spell.OnCasterMoving( d ) )  					return false;    				if( m_Paralyzed || m_Frozen )  				{  					SendLocalizedMessage( 500111 ); // You are frozen and can not move.    					return false;  				}    				int newZ;    				if( CheckMovement( d' out newZ ) )  				{  					int x = oldLocation.m_X' y = oldLocation.m_Y;  					int oldX = x' oldY = y;  					int oldZ = oldLocation.m_Z;    					switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}    					newLocation.m_X = x;  					newLocation.m_Y = y;  					newLocation.m_Z = newZ;    					m_Pushing = false;    					Map map = m_Map;    					if( map != null )  					{  						Sector oldSector = map.GetSector( oldX' oldY );  						Sector newSector = map.GetSector( x' y );    						if( oldSector != newSector )  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Mobiles.Count; ++i )  							{  								Mobile m = newSector.Mobiles[i];    								if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < newSector.Items.Count; ++i )  							{  								Item item = newSector.Items[i];    								if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}  						else  						{  							for( int i = 0; i < oldSector.Mobiles.Count; ++i )  							{  								Mobile m = oldSector.Mobiles[i];    								if( m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff( this ) )  									return false;  								else if( m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver( this ) )  									return false;  							}    							for( int i = 0; i < oldSector.Items.Count; ++i )  							{  								Item item = oldSector.Items[i];    								if( item.AtWorldPoint( oldX' oldY ) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff( this ) )  									return false;  								else if( item.AtWorldPoint( x' y ) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver( this ) )  									return false;  							}  						}    						if( !Region.CanMove( this' d' newLocation' oldLocation' m_Map ) )  							return false;  					}  					else  					{  						return false;  					}    					if( !InternalOnMove( d ) )  						return false;    					if( m_FwdEnabled && m_NetState != null && m_AccessLevel < m_FwdAccessOverride && (!m_FwdUOTDOverride || !m_NetState.IsUOTDClient) )  					{  						if( m_MoveRecords == null )  							m_MoveRecords = new Queue<MovementRecord>( 6 );    						while( m_MoveRecords.Count > 0 )  						{  							MovementRecord r = m_MoveRecords.Peek();    							if( r.Expired() )  								m_MoveRecords.Dequeue();  							else  								break;  						}    						if( m_MoveRecords.Count >= m_FwdMaxSteps )  						{  							FastWalkEventArgs fw = new FastWalkEventArgs( m_NetState );  							EventSink.InvokeFastWalk( fw );    							if( fw.Blocked )  								return false;  						}    						int delay = ComputeMovementSpeed( d );    						long end;    						if( m_MoveRecords.Count > 0 )  							end = m_EndQueue + delay;  						else  							end = Core.TickCount + delay;    						m_MoveRecords.Enqueue( MovementRecord.NewInstance( end ) );    						m_EndQueue = end;  					}    					m_LastMoveTime = Core.TickCount;  				}  				else  				{  					return false;  				}    				DisruptiveAction();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if( (m_Map.Rules & MapRules.FreeMovement) == 0 )  			{  				if( !shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet )  					return true;  				else if( shoved.m_Hidden && shoved.m_AccessLevel > AccessLevel.Player )  					return true;    				if( !m_Pushing )  				{  					m_Pushing = true;    					int number;    					if( this.AccessLevel > AccessLevel.Player )  					{  						number = shoved.m_Hidden ? 1019041 : 1019040;  					}  					else  					{  						if( Stam == StamMax )  						{  							number = shoved.m_Hidden ? 1019043 : 1019042;  							Stam -= 10;    							RevealingAction();  						}  						else  						{  							return false;  						}  					}    					SendLocalizedMessage( number );  				}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if( (m_Map.Rules & MapRules.FreeMovement) == 0 )  			{  				if( !shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet )  					return true;  				else if( shoved.m_Hidden && shoved.m_AccessLevel > AccessLevel.Player )  					return true;    				if( !m_Pushing )  				{  					m_Pushing = true;    					int number;    					if( this.AccessLevel > AccessLevel.Player )  					{  						number = shoved.m_Hidden ? 1019041 : 1019040;  					}  					else  					{  						if( Stam == StamMax )  						{  							number = shoved.m_Hidden ? 1019043 : 1019042;  							Stam -= 10;    							RevealingAction();  						}  						else  						{  							return false;  						}  					}    					SendLocalizedMessage( number );  				}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if( (m_Map.Rules & MapRules.FreeMovement) == 0 )  			{  				if( !shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet )  					return true;  				else if( shoved.m_Hidden && shoved.m_AccessLevel > AccessLevel.Player )  					return true;    				if( !m_Pushing )  				{  					m_Pushing = true;    					int number;    					if( this.AccessLevel > AccessLevel.Player )  					{  						number = shoved.m_Hidden ? 1019041 : 1019040;  					}  					else  					{  						if( Stam == StamMax )  						{  							number = shoved.m_Hidden ? 1019043 : 1019042;  							Stam -= 10;    							RevealingAction();  						}  						else  						{  							return false;  						}  					}    					SendLocalizedMessage( number );  				}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if( (m_Map.Rules & MapRules.FreeMovement) == 0 )  			{  				if( !shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet )  					return true;  				else if( shoved.m_Hidden && shoved.m_AccessLevel > AccessLevel.Player )  					return true;    				if( !m_Pushing )  				{  					m_Pushing = true;    					int number;    					if( this.AccessLevel > AccessLevel.Player )  					{  						number = shoved.m_Hidden ? 1019041 : 1019040;  					}  					else  					{  						if( Stam == StamMax )  						{  							number = shoved.m_Hidden ? 1019043 : 1019042;  							Stam -= 10;    							RevealingAction();  						}  						else  						{  							return false;  						}  					}    					SendLocalizedMessage( number );  				}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if( (m_Map.Rules & MapRules.FreeMovement) == 0 )  			{  				if( !shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet )  					return true;  				else if( shoved.m_Hidden && shoved.m_AccessLevel > AccessLevel.Player )  					return true;    				if( !m_Pushing )  				{  					m_Pushing = true;    					int number;    					if( this.AccessLevel > AccessLevel.Player )  					{  						number = shoved.m_Hidden ? 1019041 : 1019040;  					}  					else  					{  						if( Stam == StamMax )  						{  							number = shoved.m_Hidden ? 1019043 : 1019042;  							Stam -= 10;    							RevealingAction();  						}  						else  						{  							return false;  						}  					}    					SendLocalizedMessage( number );  				}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Resurrect,The following statement contains a magic number: if( !Alive )  			{  				if( !Region.OnResurrect( this ) )  					return;    				if( !CheckResurrect() )  					return;    				OnBeforeResurrect();    				BankBox box = FindBankNoCreate();    				if( box != null && box.Opened )  					box.Close();    				Poison = null;    				Warmode = false;    				Hits = 10;  				Stam = StamMax;  				Mana = 0;    				BodyMod = 0;  				Body = this.Race.AliveBody( this );    				ProcessDeltaQueue();    				for( int i = m_Items.Count - 1; i >= 0; --i )  				{  					if( i >= m_Items.Count )  						continue;    					Item item = m_Items[i];    					if( item.ItemID == 0x204E )  						item.Delete();  				}    				this.SendIncomingPacket();  				this.SendIncomingPacket();    				OnAfterResurrect();    				//Send( new DeathStatus( false ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetAttackSound,The following statement contains a magic number: if( m_BaseSoundID != 0 )  				return m_BaseSoundID + 2;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetHurtSound,The following statement contains a magic number: if( m_BaseSoundID != 0 )  				return m_BaseSoundID + 3;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if( m_BaseSoundID != 0 )  			{  				return m_BaseSoundID + 4;  			}  			else if( m_Body.IsHuman )  			{  				return Utility.Random( m_Female ? 0x314 : 0x423' m_Female ? 4 : 5 );  			}  			else  			{  				return -1;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if( m_BaseSoundID != 0 )  			{  				return m_BaseSoundID + 4;  			}  			else if( m_Body.IsHuman )  			{  				return Utility.Random( m_Female ? 0x314 : 0x423' m_Female ? 4 : 5 );  			}  			else  			{  				return -1;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if( m_BaseSoundID != 0 )  			{  				return m_BaseSoundID + 4;  			}  			else if( m_Body.IsHuman )  			{  				return Utility.Random( m_Female ? 0x314 : 0x423' m_Female ? 4 : 5 );  			}  			else  			{  				return -1;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.AccessLevel >= AccessLevel.GameMaster || Core.TickCount - from.NextActionTime >= 0)  			{  				if( from.CheckAlive() )  				{  					from.DisruptiveAction();    					if( from.Holding != null )  					{  						reject = LRReason.AreHolding;  					}  					else if( from.AccessLevel < AccessLevel.GameMaster && !from.InRange( item.GetWorldLocation()' 2 ) )  					{  						reject = LRReason.OutOfRange;  					}  					else if( !from.CanSee( item ) || !from.InLOS( item ) )  					{  						reject = LRReason.OutOfSight;  					}  					else if( !item.VerifyMove( from ) )  					{  						reject = LRReason.CannotLift;  					}  					else if( !item.IsAccessibleTo( from ) )  					{  						reject = LRReason.CannotLift;  					}  					else if( item.Nontransferable && amount != item.Amount )  					{  						if ( item.QuestItem )  							from.SendLocalizedMessage( 1074868 ); // Stacks of quest items cannot be unstacked.    						reject = LRReason.CannotLift;  					}  					else if( !item.CheckLift( from' item' ref reject ) )  					{  					}  					else  					{  						object root = item.RootParent;    						if( root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift( from' item ) )  						{  							reject = LRReason.TryToSteal;  						}  						else if( !from.OnDragLift( item ) || !item.OnDragLift( from ) )  						{  							reject = LRReason.Inspecific;  						}  						else if( !from.CheckAlive() )  						{  							reject = LRReason.Inspecific;  						}  						else  						{  							item.SetLastMoved();    							if( item.Spawner != null )  							{  								item.Spawner.Remove( item );  								item.Spawner = null;  							}    							if( amount == 0 )  								amount = 1;    							if( amount > item.Amount )  								amount = item.Amount;    							int oldAmount = item.Amount;  							//item.Amount = amount; //Set in LiftItemDupe    							if( amount < oldAmount )  								LiftItemDupe( item' amount );  							//item.Dupe( oldAmount - amount );    							Map map = from.Map;    							if( m_DragEffects && map != null && (root == null || root is Item) )  							{  								IPooledEnumerable<NetState> eable = map.GetClientsInRange(from.Location);  								Packet p = null;    								foreach( NetState ns in eable ) {  									if( ns.Mobile != from && ns.Mobile.CanSee( from ) && ns.Mobile.InLOS( from ) && ns.Mobile.CanSee( root ) ) {  										if (p == null) {  											IEntity src;    											if (root == null)  												src = new Entity(Serial.Zero' item.Location' map);  											else  												src = new Entity(((Item)root).Serial' ((Item)root).Location' map);    											p = Packet.Acquire(new DragEffect(src' from' item.ItemID' item.Hue' amount));  										}    										ns.Send( p );  									}  								}    								Packet.Release( p );    								eable.Free();  							}    							Point3D fixLoc = item.Location;  							Map fixMap = item.Map;  							bool shouldFix = (item.Parent == null);    							item.RecordBounce();  							item.OnItemLifted( from' item );  							item.Internalize();    							from.Holding = item;    							int liftSound = item.GetLiftSound( from );    							if( liftSound != -1 )  								from.Send( new PlaySound( liftSound' from ) );    							from.NextActionTime = Core.TickCount + m_ActionDelay;    							if( fixMap != null && shouldFix )  								fixMap.FixColumn( fixLoc.m_X' fixLoc.m_Y );    							reject = LRReason.Inspecific;  							rejected = false;  						}  					}  				}  				else  				{  					reject = LRReason.Inspecific;  				}  			}  			else  			{  				SendActionMessage();  				reject = LRReason.Inspecific;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.AccessLevel >= AccessLevel.GameMaster || Core.TickCount - from.NextActionTime >= 0)  			{  				if( from.CheckAlive() )  				{  					from.DisruptiveAction();    					if( from.Holding != null )  					{  						reject = LRReason.AreHolding;  					}  					else if( from.AccessLevel < AccessLevel.GameMaster && !from.InRange( item.GetWorldLocation()' 2 ) )  					{  						reject = LRReason.OutOfRange;  					}  					else if( !from.CanSee( item ) || !from.InLOS( item ) )  					{  						reject = LRReason.OutOfSight;  					}  					else if( !item.VerifyMove( from ) )  					{  						reject = LRReason.CannotLift;  					}  					else if( !item.IsAccessibleTo( from ) )  					{  						reject = LRReason.CannotLift;  					}  					else if( item.Nontransferable && amount != item.Amount )  					{  						if ( item.QuestItem )  							from.SendLocalizedMessage( 1074868 ); // Stacks of quest items cannot be unstacked.    						reject = LRReason.CannotLift;  					}  					else if( !item.CheckLift( from' item' ref reject ) )  					{  					}  					else  					{  						object root = item.RootParent;    						if( root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift( from' item ) )  						{  							reject = LRReason.TryToSteal;  						}  						else if( !from.OnDragLift( item ) || !item.OnDragLift( from ) )  						{  							reject = LRReason.Inspecific;  						}  						else if( !from.CheckAlive() )  						{  							reject = LRReason.Inspecific;  						}  						else  						{  							item.SetLastMoved();    							if( item.Spawner != null )  							{  								item.Spawner.Remove( item );  								item.Spawner = null;  							}    							if( amount == 0 )  								amount = 1;    							if( amount > item.Amount )  								amount = item.Amount;    							int oldAmount = item.Amount;  							//item.Amount = amount; //Set in LiftItemDupe    							if( amount < oldAmount )  								LiftItemDupe( item' amount );  							//item.Dupe( oldAmount - amount );    							Map map = from.Map;    							if( m_DragEffects && map != null && (root == null || root is Item) )  							{  								IPooledEnumerable<NetState> eable = map.GetClientsInRange(from.Location);  								Packet p = null;    								foreach( NetState ns in eable ) {  									if( ns.Mobile != from && ns.Mobile.CanSee( from ) && ns.Mobile.InLOS( from ) && ns.Mobile.CanSee( root ) ) {  										if (p == null) {  											IEntity src;    											if (root == null)  												src = new Entity(Serial.Zero' item.Location' map);  											else  												src = new Entity(((Item)root).Serial' ((Item)root).Location' map);    											p = Packet.Acquire(new DragEffect(src' from' item.ItemID' item.Hue' amount));  										}    										ns.Send( p );  									}  								}    								Packet.Release( p );    								eable.Free();  							}    							Point3D fixLoc = item.Location;  							Map fixMap = item.Map;  							bool shouldFix = (item.Parent == null);    							item.RecordBounce();  							item.OnItemLifted( from' item );  							item.Internalize();    							from.Holding = item;    							int liftSound = item.GetLiftSound( from );    							if( liftSound != -1 )  								from.Send( new PlaySound( liftSound' from ) );    							from.NextActionTime = Core.TickCount + m_ActionDelay;    							if( fixMap != null && shouldFix )  								fixMap.FixColumn( fixLoc.m_X' fixLoc.m_Y );    							reject = LRReason.Inspecific;  							rejected = false;  						}  					}  				}  				else  				{  					reject = LRReason.Inspecific;  				}  			}  			else  			{  				SendActionMessage();  				reject = LRReason.Inspecific;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: int range = 15;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: switch( type )  			{  				case MessageType.Regular:  					m_SpeechHue = hue;  					break;  				case MessageType.Emote:  					m_EmoteHue = hue;  					break;  				case MessageType.Whisper:  					m_WhisperHue = hue;  					range = 1;  					break;  				case MessageType.Yell:  					m_YellHue = hue;  					range = 18;  					break;  				default:  					type = MessageType.Regular;  					break;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if( m_Map != null )  			{  				IPooledEnumerable<IEntity> eable = m_Map.GetObjectsInRange( m_Location' range );    				foreach(IEntity o in eable) {  					if( o is Mobile ) {  						Mobile heard = (Mobile)o;    						if( heard.CanSee( this ) && (m_NoSpeechLOS || !heard.Player || heard.InLOS( this )) )  						{  							if( heard.m_NetState != null )  								hears.Add( heard );    							if( heard.HandlesOnSpeech( this ) )  								onSpeech.Add( heard );    							for( int i = 0; i < heard.Items.Count; ++i )  							{  								Item item = heard.Items[i];    								if( item.HandlesOnSpeech )  									onSpeech.Add( item );    								if( item is Container )  									AddSpeechItemsFrom( onSpeech' (Container)item );  							}  						}  					}  					else if( o is Item )  					{  						if( ((Item)o).HandlesOnSpeech )  							onSpeech.Add(o);    						if( o is Container )  							AddSpeechItemsFrom( onSpeech' (Container)o );  					}  				}    				eable.Free();    				object mutateContext = null;  				string mutatedText = text;  				SpeechEventArgs mutatedArgs = null;    				if( MutateSpeech( hears' ref mutatedText' ref mutateContext ) )  					mutatedArgs = new SpeechEventArgs( this' mutatedText' type' hue' new int[0] );    				CheckSpeechManifest();    				ProcessDelta();    				Packet regp = null;  				Packet mutp = null;    				// TODO: Should this be sorted like onSpeech is below?    				for( int i = 0; i < hears.Count; ++i ) {  					Mobile heard = hears[i];    					if( mutatedArgs == null || !CheckHearsMutatedSpeech( heard' mutateContext ) ) {  						heard.OnSpeech( regArgs );    						NetState ns = heard.NetState;    						if( ns != null ) {  							if( regp == null )  								regp = Packet.Acquire( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );    							ns.Send( regp );  						}  					} else {  						heard.OnSpeech( mutatedArgs );    						NetState ns = heard.NetState;    						if( ns != null ) {  							if( mutp == null )  								mutp = Packet.Acquire( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' mutatedText ) );    							ns.Send( mutp );  						}  					}  				}    				Packet.Release( regp );  				Packet.Release( mutp );    				if( onSpeech.Count > 1 )  					onSpeech.Sort( LocationComparer.GetInstance( this ) );    				for( int i = 0; i < onSpeech.Count; ++i ) {  					IEntity obj = onSpeech[i];    					if( obj is Mobile ) {  						Mobile heard = (Mobile)obj;    						if( mutatedArgs == null || !CheckHearsMutatedSpeech( heard' mutateContext ) )  							heard.OnSpeech( regArgs );  						else  							heard.OnSpeech( mutatedArgs );  					} else {  						Item item = (Item)obj;    						item.OnSpeech( regArgs );  					}  				}    				if(m_Hears.Count > 0)  					m_Hears.Clear();    				if(m_OnSpeech.Count > 0)  					m_OnSpeech.Clear();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if( m_Map != null )  			{  				IPooledEnumerable<IEntity> eable = m_Map.GetObjectsInRange( m_Location' range );    				foreach(IEntity o in eable) {  					if( o is Mobile ) {  						Mobile heard = (Mobile)o;    						if( heard.CanSee( this ) && (m_NoSpeechLOS || !heard.Player || heard.InLOS( this )) )  						{  							if( heard.m_NetState != null )  								hears.Add( heard );    							if( heard.HandlesOnSpeech( this ) )  								onSpeech.Add( heard );    							for( int i = 0; i < heard.Items.Count; ++i )  							{  								Item item = heard.Items[i];    								if( item.HandlesOnSpeech )  									onSpeech.Add( item );    								if( item is Container )  									AddSpeechItemsFrom( onSpeech' (Container)item );  							}  						}  					}  					else if( o is Item )  					{  						if( ((Item)o).HandlesOnSpeech )  							onSpeech.Add(o);    						if( o is Container )  							AddSpeechItemsFrom( onSpeech' (Container)o );  					}  				}    				eable.Free();    				object mutateContext = null;  				string mutatedText = text;  				SpeechEventArgs mutatedArgs = null;    				if( MutateSpeech( hears' ref mutatedText' ref mutateContext ) )  					mutatedArgs = new SpeechEventArgs( this' mutatedText' type' hue' new int[0] );    				CheckSpeechManifest();    				ProcessDelta();    				Packet regp = null;  				Packet mutp = null;    				// TODO: Should this be sorted like onSpeech is below?    				for( int i = 0; i < hears.Count; ++i ) {  					Mobile heard = hears[i];    					if( mutatedArgs == null || !CheckHearsMutatedSpeech( heard' mutateContext ) ) {  						heard.OnSpeech( regArgs );    						NetState ns = heard.NetState;    						if( ns != null ) {  							if( regp == null )  								regp = Packet.Acquire( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );    							ns.Send( regp );  						}  					} else {  						heard.OnSpeech( mutatedArgs );    						NetState ns = heard.NetState;    						if( ns != null ) {  							if( mutp == null )  								mutp = Packet.Acquire( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' mutatedText ) );    							ns.Send( mutp );  						}  					}  				}    				Packet.Release( regp );  				Packet.Release( mutp );    				if( onSpeech.Count > 1 )  					onSpeech.Sort( LocationComparer.GetInstance( this ) );    				for( int i = 0; i < onSpeech.Count; ++i ) {  					IEntity obj = onSpeech[i];    					if( obj is Mobile ) {  						Mobile heard = (Mobile)obj;    						if( mutatedArgs == null || !CheckHearsMutatedSpeech( heard' mutateContext ) )  							heard.OnSpeech( regArgs );  						else  							heard.OnSpeech( mutatedArgs );  					} else {  						Item item = (Item)obj;    						item.OnSpeech( regArgs );  					}  				}    				if(m_Hears.Count > 0)  					m_Hears.Clear();    				if(m_OnSpeech.Count > 0)  					m_OnSpeech.Clear();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Heal,The following statement contains a magic number: if( message && amount > 0 && m_NetState != null )  				m_NetState.Send( new MessageLocalizedAffix( Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString()' "" ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Heal,The following statement contains a magic number: if( message && amount > 0 && m_NetState != null )  				m_NetState.Send( new MessageLocalizedAffix( Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString()' "" ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Serialize,The following statement contains a magic number: writer.Write( (int)32 );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Animate,The following statement contains a magic number: if( map != null )  			{  				ProcessDelta();    				Packet p = null;  				//Packet pNew = null;    				IPooledEnumerable<NetState> eable = map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) ) {  						state.Mobile.ProcessDelta();    						//if ( state.StygianAbyss ) {  							//if( pNew == null )  								//pNew = Packet.Acquire( new NewMobileAnimation( this' action' frameCount' delay ) );    							//state.Send( pNew );  						//} else {  						if (p == null)  						{  							#region SA  							if (Body.IsGargoyle)  							{  								frameCount = 10;    								if (Flying)  								{  									if (action >= 9 && action <= 11)  									{  										action = 71;  									}  									else if (action >= 12 && action <= 14)  									{  										action = 72;  									}  									else if (action == 20)  									{  										action = 77;  									}  									else if (action == 31)  									{  										action = 71;  									}  									else if (action == 34)  									{  										action = 78;  									}  									else if (action >= 200 && action <= 259)  									{  										action = 75;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 75;  									}  								}  								else  								{  									if (action >= 200 && action <= 259)  									{  										action = 17;  									}  									else if (action >= 260 && action <= 270)  									{  										action = 16;  									}  								}  							}  							#endregion    							p = Packet.Acquire(new MobileAnimation(this' action' frameCount' repeatCount' forward' repeat' delay));  						}    						state.Send( p );  						//}  					}  				}    				Packet.Release( p );  				//Packet.Release( pNew );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SayTo,The following statement contains a magic number: to.Send( new MessageLocalized( m_Serial' Body' MessageType.Regular' m_SpeechHue' 3' number' Name' "" ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SayTo,The following statement contains a magic number: to.Send( new MessageLocalized( m_Serial' Body' MessageType.Regular' m_SpeechHue' 3' number' Name' args ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSaid,The following statement contains a magic number: if( m_Squelched )  			{  				if( Core.ML )  					this.SendLocalizedMessage( 500168 ); // You can not say anything' you have been muted.  				else  					this.SendMessage( "You can not say anything' you have been squelched." ); //Cliloc ITSELF changed during ML.    				e.Blocked = true;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if( m_Deleted || target.m_Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet)) )  			{  				if( message )  					SendLocalizedMessage( 1001017 ); // You can not perform beneficial acts on your target.    				return false;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if( /*m_Player &&*/ !Region.AllowBeneficial( this' target ) )  			{  				// TODO: Pets  				//if ( !(target.m_Player || target.Body.IsHuman || target.Body.IsAnimal) )  				//{  				if( message )  					SendLocalizedMessage( 1001017 ); // You can not perform beneficial acts on your target.    				return false;  				//}  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if( m_Deleted || (!ignoreOurBlessedness && m_Blessed) || target.m_Deleted || target.m_Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet )  			{  				if( message )  					SendLocalizedMessage( 1001018 ); // You can not perform negative acts on your target.    				return false;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if( /*m_Player &&*/ !Region.AllowHarmful( this' target ) )//(target.m_Player || target.Body.IsHuman) && !Region.AllowHarmful( this' target )  )  			{  				if( message )  					SendLocalizedMessage( 1001018 ); // You can not perform negative acts on your target.    				return false;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CanSee,The following statement contains a magic number: return this == m || (  				m.m_Map == m_Map &&  				(!m.Hidden || (m_AccessLevel != AccessLevel.Player && (m_AccessLevel >= m.AccessLevel || m_AccessLevel >= AccessLevel.Administrator))) &&  				((m.Alive || (Core.SE && Skills.SpiritSpeak.Value >= 100.0)) || !Alive || m_AccessLevel > AccessLevel.Player || m.Warmode));
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnPoisonImmunity,The following statement contains a magic number: this.PublicOverheadMessage( MessageType.Emote' 0x3B2' 1005534 );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if( poison != null )  			{  				this.LocalOverheadMessage( MessageType.Regular' 0x21' 1042857 + (poison.Level * 2) );  				this.NonlocalOverheadMessage( MessageType.Regular' 0x21' 1042858 + (poison.Level * 2)' Name );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if( poison != null )  			{  				this.LocalOverheadMessage( MessageType.Regular' 0x21' 1042857 + (poison.Level * 2) );  				this.NonlocalOverheadMessage( MessageType.Regular' 0x21' 1042858 + (poison.Level * 2)' Name );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if( poison != null )  			{  				this.LocalOverheadMessage( MessageType.Regular' 0x21' 1042857 + (poison.Level * 2) );  				this.NonlocalOverheadMessage( MessageType.Regular' 0x21' 1042858 + (poison.Level * 2)' Name );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if( poison != null )  			{  				this.LocalOverheadMessage( MessageType.Regular' 0x21' 1042857 + (poison.Level * 2) );  				this.NonlocalOverheadMessage( MessageType.Regular' 0x21' 1042858 + (poison.Level * 2)' Name );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,MovingParticles,The following statement contains a magic number: Effects.SendMovingParticles( this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnDragDrop,The following statement contains a magic number: if( from == this )  			{  				Container pack = this.Backpack;    				if( pack != null )  					return dropped.DropToItem( from' pack' new Point3D( -1' -1' 0 ) );    				return false;  			}  			else if( from.InRange( Location' 2 ) )  			{  				return OpenTrade( from' dropped );  			}  			else  			{  				return false;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnEquip,The following statement contains a magic number: if ( item.QuestItem )  			{  				item.QuestItem = false;  				SendLocalizedMessage( 1074769 ); // An item must be in your backpack (and not in a container within) to be toggled as a quest item.  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DefaultMobileInit,The following statement contains a magic number: m_StatCap = 225;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DefaultMobileInit,The following statement contains a magic number: m_FollowersMax = 5;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetDirectionTo,The following statement contains a magic number: int rx = (dx - dy) * 44;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetDirectionTo,The following statement contains a magic number: int ry = (dx + dy) * 44;
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The following statement contains a magic number: Packet[][] cache = new Packet[2][] { new Packet[8]' new Packet[8] };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The following statement contains a magic number: Packet[][] cache = new Packet[2][] { new Packet[8]' new Packet[8] };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDelta,The following statement contains a magic number: Packet[][] cache = new Packet[2][] { new Packet[8]' new Packet[8] };
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,ProcessDeltaQueue,The following statement contains a magic number: if (m_DeltaQueue.Count >= 512) {  				Parallel.ForEach(m_DeltaQueue' m => m.ProcessDelta());  				m_DeltaQueue.Clear();  			} else {  				while (m_DeltaQueue.Count > 0) m_DeltaQueue.Dequeue().ProcessDelta();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,CheckAlive,The following statement contains a magic number: if( !Alive )  			{  				if( message )  					this.LocalOverheadMessage( MessageType.Regular' 0x3B2' 1019048 ); // I am dead and cannot do that.    				return false;  			}  			else  			{  				return true;  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = null;    				if( ascii )  					p = new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text );  				else  					p = new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text );    				p.Acquire();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) && (noLineOfSight || state.Mobile.InLOS( this )) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = null;    				if( ascii )  					p = new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text );  				else  					p = new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text );    				p.Acquire();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) && (noLineOfSight || state.Mobile.InLOS( this )) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = Packet.Acquire( new MessageLocalized( m_Serial' Body' type' hue' 3' number' Name' args ) );    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) && (noLineOfSight || state.Mobile.InLOS( this )) ) {	  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = Packet.Acquire( new MessageLocalizedAffix( m_Serial' Body' type' hue' 3' number' Name' affixType' affix' args ) );    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state.Mobile.CanSee( this ) && (noLineOfSight || state.Mobile.InLOS( this )) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: if( ascii )  				state.Send( new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text ) );  			else  				state.Send( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: if( ascii )  				state.Send( new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text ) );  			else  				state.Send( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: state.Send( new MessageLocalized( m_Serial' Body' type' hue' 3' number' Name' args ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if( ns != null )  			{  				if( ascii )  					ns.Send( new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text ) );  				else  					ns.Send( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if( ns != null )  			{  				if( ascii )  					ns.Send( new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text ) );  				else  					ns.Send( new UnicodeMessage( m_Serial' Body' type' hue' 3' m_Language' Name' text ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if( ns != null )  				ns.Send( new MessageLocalized( m_Serial' Body' type' hue' 3' number' Name' args ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = Packet.Acquire( new MessageLocalized( m_Serial' Body' type' hue' 3' number' Name' args ) );    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state != m_NetState && state.Mobile.CanSee( this ) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = null;    				if( ascii )  					p = new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text );  				else  					p = new UnicodeMessage( m_Serial' Body' type' hue' 3' Language' Name' text );    				p.Acquire();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state != m_NetState && state.Mobile.CanSee( this ) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if( m_Map != null )  			{  				Packet p = null;    				if( ascii )  					p = new AsciiMessage( m_Serial' Body' type' hue' 3' Name' text );  				else  					p = new UnicodeMessage( m_Serial' Body' type' hue' 3' Language' Name' text );    				p.Acquire();    				IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange(m_Location);    				foreach( NetState state in eable ) {  					if( state != m_NetState && state.Mobile.CanSee( this ) ) {  						state.Send( p );  					}  				}    				Packet.Release( p );    				eable.Free();  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: if( hue == 0x3B2 && (args == null || args.Length == 0) )  			{  				NetState ns = m_NetState;    				if( ns != null )  					ns.Send( MessageLocalized.InstantiateGeneric( number ) );  			}  			else  			{  				NetState ns = m_NetState;    				if( ns != null )  					ns.Send( new MessageLocalized( Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' args ) );  			}
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: if( ns != null )  				ns.Send( new MessageLocalizedAffix( Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' (append ? AffixType.Append : AffixType.Prepend) | AffixType.System' affix' args ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendMessage,The following statement contains a magic number: if( ns != null )  				ns.Send( new UnicodeMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,SendAsciiMessage,The following statement contains a magic number: if( ns != null )  				ns.Send( new AsciiMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: if( m_NameHue != -1 )  				hue = m_NameHue;  			else if( AccessLevel > AccessLevel.Player )  				hue = 11;  			else  				hue = Notoriety.GetHue( Notoriety.Compute( from' this ) );
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: if( ShowFameTitle && (m_Player || m_Body.IsHuman) && m_Fame >= 10000 )  				prefix = (m_Female ? "Lady" : "Lord");
Magic Number,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,DisruptiveAction,The following statement contains a magic number: if( Meditating )  			{  				Meditating = false;  				SendLocalizedMessage( 500134 ); // You stop meditating.  			}
Magic Number,Server,CombatTimer,C:\repos\runuo_runuo\Server\Mobile.cs,CombatTimer,The following statement contains a magic number: if( !m_Mobile.m_Player && m_Mobile.m_Dex <= 100 )  					Priority = TimerPriority.FiftyMS;
Magic Number,Server,LocationComparer,C:\repos\runuo_runuo\Server\Mobile.cs,GetDistance,The following statement contains a magic number: x *= 11;
Magic Number,Server,LocationComparer,C:\repos\runuo_runuo\Server\Mobile.cs,GetDistance,The following statement contains a magic number: y *= 11;
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,Load,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( multiID * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  					return MultiComponentList.Empty;    				m_StreamReader.BaseStream.Seek( lookup' SeekOrigin.Begin );    				return new MultiComponentList( m_StreamReader' length / ( MultiComponentList.PostHSFormat ? 16 : 12 ) );  			}  			catch  			{  				return MultiComponentList.Empty;  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,Load,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( multiID * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  					return MultiComponentList.Empty;    				m_StreamReader.BaseStream.Seek( lookup' SeekOrigin.Begin );    				return new MultiComponentList( m_StreamReader' length / ( MultiComponentList.PostHSFormat ? 16 : 12 ) );  			}  			catch  			{  				return MultiComponentList.Empty;  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,Load,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( multiID * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  					return MultiComponentList.Empty;    				m_StreamReader.BaseStream.Seek( lookup' SeekOrigin.Begin );    				return new MultiComponentList( m_StreamReader' length / ( MultiComponentList.PostHSFormat ? 16 : 12 ) );  			}  			catch  			{  				return MultiComponentList.Empty;  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The following statement contains a magic number: if ( File.Exists( idxPath ) && File.Exists( mulPath ) )  			{  				m_Index = new FileStream( idxPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_IndexReader = new BinaryReader( m_Index );    				m_Stream = new FileStream( mulPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_StreamReader = new BinaryReader( m_Stream );    				m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];    				string vdPath = Core.FindDataFile( "verdata.mul" );    				if ( File.Exists( vdPath ) )  				{  					using ( FileStream fs = new FileStream( vdPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader bin = new BinaryReader( fs );    						int count = bin.ReadInt32();    						for ( int i = 0; i < count; ++i )  						{  							int file = bin.ReadInt32();  							int index = bin.ReadInt32();  							int lookup = bin.ReadInt32();  							int length = bin.ReadInt32();  							int extra = bin.ReadInt32();    							if ( file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0 )  							{  								bin.BaseStream.Seek( lookup' SeekOrigin.Begin );    								m_Components[index] = new MultiComponentList( bin' length / 12 );    								bin.BaseStream.Seek( 24 + (i * 20)' SeekOrigin.Begin );  							}  						}    						bin.Close();  					}  				}  			}  			else  			{  				Console.WriteLine( "Warning: Multi data files not found" );    				m_Components = new MultiComponentList[0];  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The following statement contains a magic number: if ( File.Exists( idxPath ) && File.Exists( mulPath ) )  			{  				m_Index = new FileStream( idxPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_IndexReader = new BinaryReader( m_Index );    				m_Stream = new FileStream( mulPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_StreamReader = new BinaryReader( m_Stream );    				m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];    				string vdPath = Core.FindDataFile( "verdata.mul" );    				if ( File.Exists( vdPath ) )  				{  					using ( FileStream fs = new FileStream( vdPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader bin = new BinaryReader( fs );    						int count = bin.ReadInt32();    						for ( int i = 0; i < count; ++i )  						{  							int file = bin.ReadInt32();  							int index = bin.ReadInt32();  							int lookup = bin.ReadInt32();  							int length = bin.ReadInt32();  							int extra = bin.ReadInt32();    							if ( file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0 )  							{  								bin.BaseStream.Seek( lookup' SeekOrigin.Begin );    								m_Components[index] = new MultiComponentList( bin' length / 12 );    								bin.BaseStream.Seek( 24 + (i * 20)' SeekOrigin.Begin );  							}  						}    						bin.Close();  					}  				}  			}  			else  			{  				Console.WriteLine( "Warning: Multi data files not found" );    				m_Components = new MultiComponentList[0];  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The following statement contains a magic number: if ( File.Exists( idxPath ) && File.Exists( mulPath ) )  			{  				m_Index = new FileStream( idxPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_IndexReader = new BinaryReader( m_Index );    				m_Stream = new FileStream( mulPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_StreamReader = new BinaryReader( m_Stream );    				m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];    				string vdPath = Core.FindDataFile( "verdata.mul" );    				if ( File.Exists( vdPath ) )  				{  					using ( FileStream fs = new FileStream( vdPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader bin = new BinaryReader( fs );    						int count = bin.ReadInt32();    						for ( int i = 0; i < count; ++i )  						{  							int file = bin.ReadInt32();  							int index = bin.ReadInt32();  							int lookup = bin.ReadInt32();  							int length = bin.ReadInt32();  							int extra = bin.ReadInt32();    							if ( file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0 )  							{  								bin.BaseStream.Seek( lookup' SeekOrigin.Begin );    								m_Components[index] = new MultiComponentList( bin' length / 12 );    								bin.BaseStream.Seek( 24 + (i * 20)' SeekOrigin.Begin );  							}  						}    						bin.Close();  					}  				}  			}  			else  			{  				Console.WriteLine( "Warning: Multi data files not found" );    				m_Components = new MultiComponentList[0];  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The following statement contains a magic number: if ( File.Exists( idxPath ) && File.Exists( mulPath ) )  			{  				m_Index = new FileStream( idxPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_IndexReader = new BinaryReader( m_Index );    				m_Stream = new FileStream( mulPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_StreamReader = new BinaryReader( m_Stream );    				m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];    				string vdPath = Core.FindDataFile( "verdata.mul" );    				if ( File.Exists( vdPath ) )  				{  					using ( FileStream fs = new FileStream( vdPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader bin = new BinaryReader( fs );    						int count = bin.ReadInt32();    						for ( int i = 0; i < count; ++i )  						{  							int file = bin.ReadInt32();  							int index = bin.ReadInt32();  							int lookup = bin.ReadInt32();  							int length = bin.ReadInt32();  							int extra = bin.ReadInt32();    							if ( file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0 )  							{  								bin.BaseStream.Seek( lookup' SeekOrigin.Begin );    								m_Components[index] = new MultiComponentList( bin' length / 12 );    								bin.BaseStream.Seek( 24 + (i * 20)' SeekOrigin.Begin );  							}  						}    						bin.Close();  					}  				}  			}  			else  			{  				Console.WriteLine( "Warning: Multi data files not found" );    				m_Components = new MultiComponentList[0];  			}
Magic Number,Server,MultiData,C:\repos\runuo_runuo\Server\MultiData.cs,MultiData,The following statement contains a magic number: if ( File.Exists( idxPath ) && File.Exists( mulPath ) )  			{  				m_Index = new FileStream( idxPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_IndexReader = new BinaryReader( m_Index );    				m_Stream = new FileStream( mulPath' FileMode.Open' FileAccess.Read' FileShare.Read );  				m_StreamReader = new BinaryReader( m_Stream );    				m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];    				string vdPath = Core.FindDataFile( "verdata.mul" );    				if ( File.Exists( vdPath ) )  				{  					using ( FileStream fs = new FileStream( vdPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader bin = new BinaryReader( fs );    						int count = bin.ReadInt32();    						for ( int i = 0; i < count; ++i )  						{  							int file = bin.ReadInt32();  							int index = bin.ReadInt32();  							int lookup = bin.ReadInt32();  							int length = bin.ReadInt32();  							int extra = bin.ReadInt32();    							if ( file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0 )  							{  								bin.BaseStream.Seek( lookup' SeekOrigin.Begin );    								m_Components[index] = new MultiComponentList( bin' length / 12 );    								bin.BaseStream.Seek( 24 + (i * 20)' SeekOrigin.Begin );  							}  						}    						bin.Close();  					}  				}  			}  			else  			{  				Console.WriteLine( "Warning: Multi data files not found" );    				m_Components = new MultiComponentList[0];  			}
Magic Number,Server,ObjectPropertyList,C:\repos\runuo_runuo\Server\ObjectPropertyList.cs,ObjectPropertyList,The following statement contains a magic number: EnsureCapacity( 128 );
Magic Number,Server,ObjectPropertyList,C:\repos\runuo_runuo\Server\ObjectPropertyList.cs,Terminate,The following statement contains a magic number: m_Stream.Seek( 11' System.IO.SeekOrigin.Begin );
Magic Number,Server,ObjectPropertyList,C:\repos\runuo_runuo\Server\ObjectPropertyList.cs,AddHash,The following statement contains a magic number: m_Hash ^= (val >> 26) & 0x3F;
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: if ( indexBuffer == null ) {  				indexBuffer = new byte[20];  			}
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[1] = ( byte ) ( typeCode >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[2] = ( byte ) ( typeCode >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[2] = ( byte ) ( typeCode >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[3] = ( byte ) ( typeCode >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[3] = ( byte ) ( typeCode >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[4] = ( byte ) ( serial );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[5] = ( byte ) ( serial >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[5] = ( byte ) ( serial >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[6] = ( byte ) ( serial >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[6] = ( byte ) ( serial >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[7] = ( byte ) ( serial >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[7] = ( byte ) ( serial >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[8] = ( byte ) ( position );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[9] = ( byte ) ( position >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[9] = ( byte ) ( position >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[10] = ( byte ) ( position >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[10] = ( byte ) ( position >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[11] = ( byte ) ( position >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[11] = ( byte ) ( position >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[12] = ( byte ) ( position >> 32 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[12] = ( byte ) ( position >> 32 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[13] = ( byte ) ( position >> 40 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[13] = ( byte ) ( position >> 40 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[14] = ( byte ) ( position >> 48 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[14] = ( byte ) ( position >> 48 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[15] = ( byte ) ( position >> 56 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[15] = ( byte ) ( position >> 56 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[16] = ( byte ) ( length );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[17] = ( byte ) ( length >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[17] = ( byte ) ( length >> 8 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[18] = ( byte ) ( length >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[18] = ( byte ) ( length >> 16 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[19] = ( byte ) ( length >> 24 );
Magic Number,Server,BinaryMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer[19] = ( byte ) ( length >> 24 );
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,Save,The following statement contains a magic number: Task[] saveTasks = new Task[3];
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,Save,The following statement contains a magic number: saveTasks[2] = SaveGuilds();
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[1] = (byte)(count >> 8);
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[2] = (byte)(count >> 16);
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[2] = (byte)(count >> 16);
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[3] = (byte)(count >> 24);
Magic Number,Server,DynamicSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[3] = (byte)(count >> 24);
Magic Number,Server,FileQueue,C:\repos\runuo_runuo\Server\Persistence\FileQueue.cs,FileQueue,The following statement contains a magic number: bufferPool = new BufferPool( "File Buffers"' 64' bufferSize );
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,Save,The following statement contains a magic number: for ( int i = 0; i < consumers.Length; ++i ) {  				consumers[i] = new Consumer( this' 256 );  			}
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[1] = ( byte ) ( count >> 8 );
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[2] = ( byte ) ( count >> 16 );
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[2] = ( byte ) ( count >> 16 );
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[3] = ( byte ) ( count >> 24 );
Magic Number,Server,ParallelSaveStrategy,C:\repos\runuo_runuo\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer[3] = ( byte ) ( count >> 24 );
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,QueuedMemoryWriter,C:\repos\runuo_runuo\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0)  			{  				byte[] memBuffer = _memStream.GetBuffer();    				long actualPosition = dataFile.Position;    				dataFile.Write(memBuffer' 0' memLength);	//The buffer contains the data from many items.    				//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);    				byte[] indexBuffer = new byte[20];    				//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  				//int totalWritten = memLength + indexWritten    				for (int i = 0; i < _orderedIndexInfo.Count; i++)  				{  					IndexInfo info = _orderedIndexInfo[i];    					int typeCode = info.typeCode;  					int serial = info.serial;  					int length = info.size;      					indexBuffer[0] = (byte)(info.typeCode);  					indexBuffer[1] = (byte)(info.typeCode >> 8);  					indexBuffer[2] = (byte)(info.typeCode >> 16);  					indexBuffer[3] = (byte)(info.typeCode >> 24);    					indexBuffer[4] = (byte)(info.serial);  					indexBuffer[5] = (byte)(info.serial >> 8);  					indexBuffer[6] = (byte)(info.serial >> 16);  					indexBuffer[7] = (byte)(info.serial >> 24);    					indexBuffer[8] = (byte)(actualPosition);  					indexBuffer[9] = (byte)(actualPosition >> 8);  					indexBuffer[10] = (byte)(actualPosition >> 16);  					indexBuffer[11] = (byte)(actualPosition >> 24);  					indexBuffer[12] = (byte)(actualPosition >> 32);  					indexBuffer[13] = (byte)(actualPosition >> 40);  					indexBuffer[14] = (byte)(actualPosition >> 48);  					indexBuffer[15] = (byte)(actualPosition >> 56);    					indexBuffer[16] = (byte)(info.size);  					indexBuffer[17] = (byte)(info.size >> 8);  					indexBuffer[18] = (byte)(info.size >> 16);  					indexBuffer[19] = (byte)(info.size >> 24);    					indexFile.Write(indexBuffer' 0' indexBuffer.Length);    					actualPosition += info.size;  				}  			}
Magic Number,Server,SaveStrategy,C:\repos\runuo_runuo\Server\Persistence\SaveStrategy.cs,Acquire,The following statement contains a magic number: if (Core.MultiProcessor)  			{  				int processorCount = Core.ProcessorCount;    				if (processorCount > 2)  				{  					return new DualSaveStrategy(); // return new DynamicSaveStrategy(); (4.0 or return new ParallelSaveStrategy(processorCount); (2.0)  				}  				else  				{  					return new DualSaveStrategy();  				}  			}  			else  			{  				return new StandardSaveStrategy();  			}
Magic Number,Server,Point3DList,C:\repos\runuo_runuo\Server\Point3DList.cs,Point3DList,The following statement contains a magic number: m_List = new Point3D[8];
Magic Number,Server,Point3DList,C:\repos\runuo_runuo\Server\Point3DList.cs,Add,The following statement contains a magic number: if ( (m_Count + 1) > m_List.Length )  			{  				Point3D[] old = m_List;  				m_List = new Point3D[old.Length * 2];    				for ( int i = 0; i < old.Length; ++i )  					m_List[i] = old[i];  			}
Magic Number,Server,Point3DList,C:\repos\runuo_runuo\Server\Point3DList.cs,Add,The following statement contains a magic number: if ( (m_Count + 1) > m_List.Length )  			{  				Point3D[] old = m_List;  				m_List = new Point3D[old.Length * 2];    				for ( int i = 0; i < old.Length; ++i )  					m_List[i] = old[i];  			}
Magic Number,Server,Poison,C:\repos\runuo_runuo\Server\Poison.cs,Deserialize,The following statement contains a magic number: switch ( reader.ReadByte() )              {                  case 1: return GetPoison( reader.ReadByte() );                  case 2:                      //no longer used' safe to remove?                      reader.ReadInt();                      reader.ReadDouble();                      reader.ReadInt();                      reader.ReadTimeSpan();                      break;              }
Magic Number,Server,SimpleRandom,C:\repos\runuo_runuo\Server\Random.cs,NextBool,The following statement contains a magic number: return NextDouble() >= .5;
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed(byte* buf = b)  				r = *(ulong*)(&buf[0]) >> 3;
Magic Number,Server,CSPRandom,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed(byte* buf = b)  				r = *(ulong*)(&buf[0]) >> 3;
Magic Number,Server,RDRand32,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				b[7] = 0;  				_GetBytes(b' 0' 7);  			} else {  				b[0] = 0;  				_GetBytes(b' 1' 7);  			}
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed(byte* buf = b)  				r = *(ulong*)(&buf[0]) >> 3;
Magic Number,Server,RDRand64,C:\repos\runuo_runuo\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;
Magic Number,Server,Region,C:\repos\runuo_runuo\Server\Region.cs,OnCriminalAction,The following statement contains a magic number: if ( m_Parent != null )  				m_Parent.OnCriminalAction( m' message );  			else if ( message )  				m.SendLocalizedMessage( 1005040 );
Magic Number,Server,Region,C:\repos\runuo_runuo\Server\Region.cs,Region,The following statement contains a magic number: if ( !ReadPoint3D( xml["go"]' map' ref m_GoLocation' false ) && m_Area.Length > 0 )  			{  				Point3D start = m_Area[0].Start;  				Point3D end = m_Area[0].End;    				int x = start.X + (end.X - start.X) / 2;  				int y = start.Y + (end.Y - start.Y) / 2;    				m_GoLocation = new Point3D( x' y' m_Map.GetAverageZ( x' y ) );  			}
Magic Number,Server,Region,C:\repos\runuo_runuo\Server\Region.cs,Region,The following statement contains a magic number: if ( !ReadPoint3D( xml["go"]' map' ref m_GoLocation' false ) && m_Area.Length > 0 )  			{  				Point3D start = m_Area[0].Start;  				Point3D end = m_Area[0].End;    				int x = start.X + (end.X - start.X) / 2;  				int y = start.Y + (end.Y - start.Y) / 2;    				m_GoLocation = new Point3D( x' y' m_Map.GetAverageZ( x' y ) );  			}
Magic Number,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileCSScripts,The following statement contains a magic number: using ( CSharpCodeProvider provider = new CSharpCodeProvider() )  			{  				string path = GetUnusedPath( "Scripts.CS" );    				CompilerParameters parms = new CompilerParameters( GetReferenceAssemblies()' path' debug );    				string options = GetCompilerOptions( debug );    				if( options != null )  					parms.CompilerOptions = options;    				if( Core.HaltOnWarning )  					parms.WarningLevel = 4;    #if !MONO  				CompilerResults results = provider.CompileAssemblyFromFile( parms' files );  #else  				parms.CompilerOptions = String.Format( "{0} /nowarn:169'219'414 /recurse:Scripts/*.cs"' parms.CompilerOptions );  				CompilerResults results = provider.CompileAssemblyFromFile( parms' "" );  #endif  				m_AdditionalReferences.Add( path );    				Display( results );    #if !MONO  				if( results.Errors.Count > 0 )  				{  					assembly = null;  					return false;  				}  #else  				if( results.Errors.Count > 0 ) {  					foreach( CompilerError err in results.Errors ) {  						if ( !err.IsWarning ) {  							assembly = null;  							return false;  						}  					}  				}  #endif      				if( cache && Path.GetFileName( path ) == "Scripts.CS.dll" )  				{  					try  					{  						byte[] hashCode = GetHashCode( path' files' debug );    						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.CS.hash"' FileMode.Create' FileAccess.Write' FileShare.None ) )  						{  							using( BinaryWriter bin = new BinaryWriter( fs ) )  							{  								bin.Write( hashCode' 0' hashCode.Length );  							}  						}  					}  					catch  					{  					}  				}    				assembly = results.CompiledAssembly;  				return true;  			}
Magic Number,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,CompileVBScripts,The following statement contains a magic number: using ( VBCodeProvider provider = new VBCodeProvider() )  			{  				string path = GetUnusedPath( "Scripts.VB" );    				CompilerParameters parms = new CompilerParameters( GetReferenceAssemblies()' path' debug );    				string options = GetCompilerOptions( debug );    				if( options != null )  					parms.CompilerOptions = options;    				if( Core.HaltOnWarning )  					parms.WarningLevel = 4;    				CompilerResults results = provider.CompileAssemblyFromFile( parms' files );  				m_AdditionalReferences.Add( path );    				Display( results );    				if( results.Errors.Count > 0 )  				{  					assembly = null;  					return false;  				}    				if( cache && Path.GetFileName( path ) == "Scripts.VB.dll" )  				{  					try  					{  						byte[] hashCode = GetHashCode( path' files' debug );    						using( FileStream fs = new FileStream( "Scripts/Output/Scripts.VB.hash"' FileMode.Create' FileAccess.Write' FileShare.None ) )  						{  							using( BinaryWriter bin = new BinaryWriter( fs ) )  							{  								bin.Write( hashCode' 0' hashCode.Length );  							}  						}  					}  					catch  					{  					}  				}    				assembly = results.CompiledAssembly;  				return true;  			}
Magic Number,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,GetUnusedPath,The following statement contains a magic number: for( int i = 2; File.Exists( path ) && i <= 1000; ++i )  				path = Path.Combine( Core.BaseDirectory' String.Format( "Scripts/Output/{0}.{1}.dll"' name' i ) );
Magic Number,Server,ScriptCompiler,C:\repos\runuo_runuo\Server\ScriptCompiler.cs,GetUnusedPath,The following statement contains a magic number: for( int i = 2; File.Exists( path ) && i <= 1000; ++i )  				path = Path.Combine( Core.BaseDirectory' String.Format( "Scripts/Output/{0}.{1}.dll"' name' i ) );
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: while( v >= 0x80 )  			{  				if( (m_Index + 1) > m_Buffer.Length )  					Flush();    				m_Buffer[m_Index++] = (byte)(v | 0x80);  				v >>= 7;  			}
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 8) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 4] = (byte)(value >> 32);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 4] = (byte)(value >> 32);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 5] = (byte)(value >> 40);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 5] = (byte)(value >> 40);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 6] = (byte)(value >> 48);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 6] = (byte)(value >> 48);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 7] = (byte)(value >> 56);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 7] = (byte)(value >> 56);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 8) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 4] = (byte)(value >> 32);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 4] = (byte)(value >> 32);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 5] = (byte)(value >> 40);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 5] = (byte)(value >> 40);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 6] = (byte)(value >> 48);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 6] = (byte)(value >> 48);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 7] = (byte)(value >> 56);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 7] = (byte)(value >> 56);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 4) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 4) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 2] = (byte)(value >> 16);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 3] = (byte)(value >> 24);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 2) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 2;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 2) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer[m_Index + 1] = (byte)(value >> 8);
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 2;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 8) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 4) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;
Magic Number,Server,BinaryFileWriter,C:\repos\runuo_runuo\Server\Serialization.cs,Write,The following statement contains a magic number: if( (m_Index + 8) > m_Buffer.Length )  				Flush();
Magic Number,Server,BinaryFileReader,C:\repos\runuo_runuo\Server\Serialization.cs,ReadEncodedInt,The following statement contains a magic number: do  			{  				b = m_File.ReadByte();  				v |= (b & 0x7F) << shift;  				shift += 7;  			} while( b >= 0x80 );
Magic Number,Server,AsyncWriter,C:\repos\runuo_runuo\Server\Serialization.cs,AsyncWriter,The following statement contains a magic number: m_Mem = new MemoryStream( BufferSize + 1024 );
Magic Number,Server,AsyncWriter,C:\repos\runuo_runuo\Server\Serialization.cs,OnWrite,The following statement contains a magic number: if( curlen >= BufferSize )  			{  				Enqueue( m_Mem );  				m_Mem = new MemoryStream( BufferSize + 1024 );  				m_Bin = new BinaryWriter( m_Mem' Utility.UTF8WithEncoding );  				m_LastPos = 0;  			}
Magic Number,Server,AsyncWriter,C:\repos\runuo_runuo\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: while( v >= 0x80 )  			{  				m_Bin.Write( (byte)(v | 0x80) );  				v >>= 7;  			}
Magic Number,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The following statement contains a magic number: switch ( version )  			{  				case 0:  				{  					m_Base = reader.ReadUShort();  					m_Cap = reader.ReadUShort();  					m_Lock = (SkillLock)reader.ReadByte();    					break;  				}  				case 0xFF:  				{  					m_Base = 0;  					m_Cap = 1000;  					m_Lock = SkillLock.Up;    					break;  				}  				default:  				{  					if ( (version & 0xC0) == 0x00 )  					{  						if ( (version & 0x1) != 0 )  							m_Base = reader.ReadUShort();    						if ( (version & 0x2) != 0 )  							m_Cap = reader.ReadUShort();  						else  							m_Cap = 1000;    						if ( (version & 0x4) != 0 )  							m_Lock = (SkillLock)reader.ReadByte();  					}    					break;  				}  			}
Magic Number,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Skill,The following statement contains a magic number: switch ( version )  			{  				case 0:  				{  					m_Base = reader.ReadUShort();  					m_Cap = reader.ReadUShort();  					m_Lock = (SkillLock)reader.ReadByte();    					break;  				}  				case 0xFF:  				{  					m_Base = 0;  					m_Cap = 1000;  					m_Lock = SkillLock.Up;    					break;  				}  				default:  				{  					if ( (version & 0xC0) == 0x00 )  					{  						if ( (version & 0x1) != 0 )  							m_Base = reader.ReadUShort();    						if ( (version & 0x2) != 0 )  							m_Cap = reader.ReadUShort();  						else  							m_Cap = 1000;    						if ( (version & 0x4) != 0 )  							m_Lock = (SkillLock)reader.ReadByte();  					}    					break;  				}  			}
Magic Number,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Serialize,The following statement contains a magic number: if ( m_Base == 0 && m_Cap == 1000 && m_Lock == SkillLock.Up )  			{  				writer.Write( (byte) 0xFF ); // default  			}  			else  			{  				int flags = 0x0;    				if ( m_Base != 0 )  					flags |= 0x1;    				if ( m_Cap != 1000 )  					flags |= 0x2;    				if ( m_Lock != SkillLock.Up )  					flags |= 0x4;    				writer.Write( (byte) flags ); // version    				if ( m_Base != 0 )  					writer.Write( (short) m_Base );    				if ( m_Cap != 1000 )  					writer.Write( (short) m_Cap );    				if ( m_Lock != SkillLock.Up )  					writer.Write( (byte) m_Lock );  			}
Magic Number,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Serialize,The following statement contains a magic number: if ( m_Base == 0 && m_Cap == 1000 && m_Lock == SkillLock.Up )  			{  				writer.Write( (byte) 0xFF ); // default  			}  			else  			{  				int flags = 0x0;    				if ( m_Base != 0 )  					flags |= 0x1;    				if ( m_Cap != 1000 )  					flags |= 0x2;    				if ( m_Lock != SkillLock.Up )  					flags |= 0x4;    				writer.Write( (byte) flags ); // version    				if ( m_Base != 0 )  					writer.Write( (short) m_Base );    				if ( m_Cap != 1000 )  					writer.Write( (short) m_Cap );    				if ( m_Lock != SkillLock.Up )  					writer.Write( (byte) m_Lock );  			}
Magic Number,Server,Skill,C:\repos\runuo_runuo\Server\Skills.cs,Serialize,The following statement contains a magic number: if ( m_Base == 0 && m_Cap == 1000 && m_Lock == SkillLock.Up )  			{  				writer.Write( (byte) 0xFF ); // default  			}  			else  			{  				int flags = 0x0;    				if ( m_Base != 0 )  					flags |= 0x1;    				if ( m_Cap != 1000 )  					flags |= 0x2;    				if ( m_Lock != SkillLock.Up )  					flags |= 0x4;    				writer.Write( (byte) flags ); // version    				if ( m_Base != 0 )  					writer.Write( (short) m_Base );    				if ( m_Cap != 1000 )  					writer.Write( (short) m_Cap );    				if ( m_Lock != SkillLock.Up )  					writer.Write( (byte) m_Lock );  			}
Magic Number,Server,SkillInfo,C:\repos\runuo_runuo\Server\Skills.cs,SkillInfo,The following statement contains a magic number: m_StrScale = strScale / 100.0;
Magic Number,Server,SkillInfo,C:\repos\runuo_runuo\Server\Skills.cs,SkillInfo,The following statement contains a magic number: m_DexScale = dexScale / 100.0;
Magic Number,Server,SkillInfo,C:\repos\runuo_runuo\Server\Skills.cs,SkillInfo,The following statement contains a magic number: m_IntScale = intScale / 100.0;
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,UseSkill,The following statement contains a magic number: if ( skillID >= 0 && skillID < SkillInfo.Table.Length )  			{  				SkillInfo info = SkillInfo.Table[skillID];    				if ( info.Callback != null )  				{  					if (Core.TickCount - from.NextSkillTime >= 0 && from.Spell == null)  					{  						from.DisruptiveAction();    						from.NextSkillTime = Core.TickCount + (int)(info.Callback(from)).TotalMilliseconds;    						return true;  					}  					else  					{  						from.SendSkillMessage();  					}  				}  				else  				{  					from.SendLocalizedMessage( 500014 ); // That skill cannot be used directly.  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Serialize,The following statement contains a magic number: writer.Write( (int) 3 );
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: m_Cap = 7000;
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following statement contains a magic number: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Magic Number,Server,TileData,C:\repos\runuo_runuo\Server\TileData.cs,ReadNameString,The following statement contains a magic number: bin.Read( m_StringBuffer' 0' 20 );
Magic Number,Server,TileData,C:\repos\runuo_runuo\Server\TileData.cs,ReadNameString,The following statement contains a magic number: for ( count = 0; count < 20 && m_StringBuffer[count] != 0; ++count );
Magic Number,Server,TileData,C:\repos\runuo_runuo\Server\TileData.cs,TileData,The following statement contains a magic number: if ( File.Exists( filePath ) )  			{  				using ( FileStream fs = new FileStream( filePath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader bin = new BinaryReader( fs );    					if ( fs.Length == 3188736 ) { // 7.0.9.0  						m_LandData = new LandData[0x4000];    						for ( int i = 0; i < 0x4000; ++i )  						{  							if ( i == 1 || ( i > 0 && (i & 0x1F) == 0 ) )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt64();  							bin.ReadInt16(); // skip 2 bytes -- textureID    							m_LandData[i] = new LandData( ReadNameString( bin )' flags );  						}    						m_ItemData = new ItemData[0x10000];    						for ( int i = 0; i < 0x10000; ++i )  						{  							if ( (i & 0x1F) == 0 )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt64();  							int weight = bin.ReadByte();  							int quality = bin.ReadByte();  							bin.ReadInt16();  							bin.ReadByte();  							int quantity = bin.ReadByte();  							bin.ReadInt32();  							bin.ReadByte();  							int value = bin.ReadByte();  							int height = bin.ReadByte();    							m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  						}  					} else {  						m_LandData = new LandData[0x4000];    						for ( int i = 0; i < 0x4000; ++i )  						{  							if ( (i & 0x1F) == 0 )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt32();  							bin.ReadInt16(); // skip 2 bytes -- textureID    							m_LandData[i] = new LandData( ReadNameString( bin )' flags );  						}    						if ( fs.Length == 1644544 ) { // 7.0.0.0  							m_ItemData = new ItemData[0x8000];    							for ( int i = 0; i < 0x8000; ++i )  							{  								if ( (i & 0x1F) == 0 )  								{  									bin.ReadInt32(); // header  								}    								TileFlag flags = (TileFlag)bin.ReadInt32();  								int weight = bin.ReadByte();  								int quality = bin.ReadByte();  								bin.ReadInt16();  								bin.ReadByte();  								int quantity = bin.ReadByte();  								bin.ReadInt32();  								bin.ReadByte();  								int value = bin.ReadByte();  								int height = bin.ReadByte();    								m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  							}  						} else {  							m_ItemData = new ItemData[0x4000];    							for ( int i = 0; i < 0x4000; ++i )  							{  								if ( (i & 0x1F) == 0 )  								{  									bin.ReadInt32(); // header  								}    								TileFlag flags = (TileFlag)bin.ReadInt32();  								int weight = bin.ReadByte();  								int quality = bin.ReadByte();  								bin.ReadInt16();  								bin.ReadByte();  								int quantity = bin.ReadByte();  								bin.ReadInt32();  								bin.ReadByte();  								int value = bin.ReadByte();  								int height = bin.ReadByte();    								m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  							}  						}  					}  				}    				m_MaxLandValue = m_LandData.Length - 1;  				m_MaxItemValue = m_ItemData.Length - 1;  			}  			else  			{  				Console.WriteLine( "tiledata.mul was not found" );  				Console.WriteLine( "Make sure your Scripts/Misc/DataPath.cs is properly configured" );  				Console.WriteLine( "After pressing return an exception will be thrown and the server will terminate" );    				throw new Exception( String.Format( "TileData: {0} not found"' filePath ) );  			}
Magic Number,Server,TileData,C:\repos\runuo_runuo\Server\TileData.cs,TileData,The following statement contains a magic number: if ( File.Exists( filePath ) )  			{  				using ( FileStream fs = new FileStream( filePath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader bin = new BinaryReader( fs );    					if ( fs.Length == 3188736 ) { // 7.0.9.0  						m_LandData = new LandData[0x4000];    						for ( int i = 0; i < 0x4000; ++i )  						{  							if ( i == 1 || ( i > 0 && (i & 0x1F) == 0 ) )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt64();  							bin.ReadInt16(); // skip 2 bytes -- textureID    							m_LandData[i] = new LandData( ReadNameString( bin )' flags );  						}    						m_ItemData = new ItemData[0x10000];    						for ( int i = 0; i < 0x10000; ++i )  						{  							if ( (i & 0x1F) == 0 )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt64();  							int weight = bin.ReadByte();  							int quality = bin.ReadByte();  							bin.ReadInt16();  							bin.ReadByte();  							int quantity = bin.ReadByte();  							bin.ReadInt32();  							bin.ReadByte();  							int value = bin.ReadByte();  							int height = bin.ReadByte();    							m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  						}  					} else {  						m_LandData = new LandData[0x4000];    						for ( int i = 0; i < 0x4000; ++i )  						{  							if ( (i & 0x1F) == 0 )  							{  								bin.ReadInt32(); // header  							}    							TileFlag flags = (TileFlag)bin.ReadInt32();  							bin.ReadInt16(); // skip 2 bytes -- textureID    							m_LandData[i] = new LandData( ReadNameString( bin )' flags );  						}    						if ( fs.Length == 1644544 ) { // 7.0.0.0  							m_ItemData = new ItemData[0x8000];    							for ( int i = 0; i < 0x8000; ++i )  							{  								if ( (i & 0x1F) == 0 )  								{  									bin.ReadInt32(); // header  								}    								TileFlag flags = (TileFlag)bin.ReadInt32();  								int weight = bin.ReadByte();  								int quality = bin.ReadByte();  								bin.ReadInt16();  								bin.ReadByte();  								int quantity = bin.ReadByte();  								bin.ReadInt32();  								bin.ReadByte();  								int value = bin.ReadByte();  								int height = bin.ReadByte();    								m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  							}  						} else {  							m_ItemData = new ItemData[0x4000];    							for ( int i = 0; i < 0x4000; ++i )  							{  								if ( (i & 0x1F) == 0 )  								{  									bin.ReadInt32(); // header  								}    								TileFlag flags = (TileFlag)bin.ReadInt32();  								int weight = bin.ReadByte();  								int quality = bin.ReadByte();  								bin.ReadInt16();  								bin.ReadByte();  								int quantity = bin.ReadByte();  								bin.ReadInt32();  								bin.ReadByte();  								int value = bin.ReadByte();  								int height = bin.ReadByte();    								m_ItemData[i] = new ItemData( ReadNameString( bin )' flags' weight' quality' quantity' value' height );  							}  						}  					}  				}    				m_MaxLandValue = m_LandData.Length - 1;  				m_MaxItemValue = m_ItemData.Length - 1;  			}  			else  			{  				Console.WriteLine( "tiledata.mul was not found" );  				Console.WriteLine( "Make sure your Scripts/Misc/DataPath.cs is properly configured" );  				Console.WriteLine( "After pressing return an exception will be thrown and the server will terminate" );    				throw new Exception( String.Format( "TileData: {0} not found"' filePath ) );  			}
Magic Number,Server,TileList,C:\repos\runuo_runuo\Server\TileList.cs,TileList,The following statement contains a magic number: m_Tiles = new StaticTile[8];
Magic Number,Server,TileList,C:\repos\runuo_runuo\Server\TileList.cs,AddRange,The following statement contains a magic number: if ( (m_Count + tiles.Length) > m_Tiles.Length )  			{  				StaticTile[] old = m_Tiles;  				m_Tiles = new StaticTile[(m_Count + tiles.Length) * 2];    				for ( int i = 0; i < old.Length; ++i )  					m_Tiles[i] = old[i];  			}
Magic Number,Server,TileList,C:\repos\runuo_runuo\Server\TileList.cs,Add,The following statement contains a magic number: if ( (m_Count + 1) > m_Tiles.Length )  			{  				StaticTile[] old = m_Tiles;  				m_Tiles = new StaticTile[old.Length * 2];    				for ( int i = 0; i < old.Length; ++i )  					m_Tiles[i] = old[i];  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_BlockWidth = width >> 3;
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_BlockHeight = height >> 3;
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_EmptyStaticBlock = new StaticTile[8][][];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  			{  				m_EmptyStaticBlock[i] = new StaticTile[8][];    				for ( int j = 0; j < 8; ++j )  					m_EmptyStaticBlock[i][j] = new StaticTile[0];  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  			{  				m_EmptyStaticBlock[i] = new StaticTile[8][];    				for ( int j = 0; j < 8; ++j )  					m_EmptyStaticBlock[i][j] = new StaticTile[0];  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  			{  				m_EmptyStaticBlock[i] = new StaticTile[8][];    				for ( int j = 0; j < 8; ++j )  					m_EmptyStaticBlock[i][j] = new StaticTile[0];  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_InvalidLandBlock = new LandTile[196];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: if ( m_StaticPatches[x] == null )  				m_StaticPatches[x] = new int[(m_BlockHeight + 31) >> 5];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: if ( m_StaticPatches[x] == null )  				m_StaticPatches[x] = new int[(m_BlockHeight + 31) >> 5];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: m_StaticPatches[x][y >> 5] |= 1 << (y & 0x1F);
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: if ( tiles == null )  			{  				lock (m_FileShare) {  					for ( int i = 0; tiles == null && i < m_FileShare.Count; ++i )  					{  						TileMatrix shared = m_FileShare[i];    						lock (shared) {  							if ( x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight )  							{  								StaticTile[][][][] theirTiles = shared.m_StaticTiles[x];    								if ( theirTiles != null )  									tiles = theirTiles[y];    								if ( tiles != null )  								{  									int[] theirBits = shared.m_StaticPatches[x];    									if ( theirBits != null && (theirBits[y >> 5] & (1 << (y & 0x1F))) != 0 )  										tiles = null;  								}  							}  						}  					}  				}    				if ( tiles == null )  					tiles = ReadStaticBlock( x' y );    				m_StaticTiles[x][y] = tiles;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: StaticTile[][][] tiles = GetStaticBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: StaticTile[][][] tiles = GetStaticBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: StaticTile[][][] tiles = GetStaticBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: StaticTile[][][] tiles = GetStaticBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: if ( m_LandPatches[x] == null )  				m_LandPatches[x] = new int[(m_BlockHeight + 31) >> 5];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: if ( m_LandPatches[x] == null )  				m_LandPatches[x] = new int[(m_BlockHeight + 31) >> 5];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: m_LandPatches[x][y >> 5] |= 1 << (y & 0x1F);
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: if ( tiles == null )  			{  				lock (m_FileShare) {  					for ( int i = 0; tiles == null && i < m_FileShare.Count; ++i )  					{  						TileMatrix shared = m_FileShare[i];    						lock (shared) {  							if ( x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight )  							{  								LandTile[][] theirTiles = shared.m_LandTiles[x];    								if ( theirTiles != null )  									tiles = theirTiles[y];    								if ( tiles != null )  								{  									int[] theirBits = shared.m_LandPatches[x];    									if ( theirBits != null && (theirBits[y >> 5] & (1 << (y & 0x1F))) != 0 )  										tiles = null;  								}  							}  						}  					}  				}    				if ( tiles == null )  					tiles = ReadLandBlock( x' y );    				m_LandTiles[x][y] = tiles;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandTile,The following statement contains a magic number: LandTile[] tiles = GetLandBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandTile,The following statement contains a magic number: LandTile[] tiles = GetLandBlock( x >> 3' y >> 3 );
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,GetLandTile,The following statement contains a magic number: return tiles[((y & 0x7) << 3) + (x & 0x7)];
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try  			{  				m_IndexReader.BaseStream.Seek( ((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin );    				int lookup = m_IndexReader.ReadInt32();  				int length = m_IndexReader.ReadInt32();    				if ( lookup < 0 || length <= 0 )  				{  					return m_EmptyStaticBlock;  				}  				else  				{  					int count = length / 7;    					m_Statics.Seek( lookup' SeekOrigin.Begin );    					if ( m_TileBuffer.Length < count )  						m_TileBuffer = new StaticTile[count];    					StaticTile[] staTiles = m_TileBuffer;//new StaticTile[tileCount];    					fixed ( StaticTile *pTiles = staTiles )  					{  #if !MONO  						NativeReader.Read( m_Statics.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  						NativeReader.Read( m_Statics.Handle' pTiles' length );  #endif  						if ( m_Lists == null )  						{  							m_Lists = new TileList[8][];    							for ( int i = 0; i < 8; ++i )  							{  								m_Lists[i] = new TileList[8];    								for ( int j = 0; j < 8; ++j )  									m_Lists[i][j] = new TileList();  							}  						}    						TileList[][] lists = m_Lists;    						StaticTile *pCur = pTiles' pEnd = pTiles + count;    						while ( pCur < pEnd )  						{  							lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID' pCur->m_Z );  							pCur = pCur + 1;  						}    						StaticTile[][][] tiles = new StaticTile[8][][];    						for ( int i = 0; i < 8; ++i )  						{  							tiles[i] = new StaticTile[8][];    							for ( int j = 0; j < 8; ++j )  								tiles[i][j] = lists[i][j].ToArray();  						}    						return tiles;  					}  				}  			}  			catch ( EndOfStreamException )  			{  				if ( DateTime.UtcNow >= m_NextStaticWarning )  				{  					Console.WriteLine( "Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_EmptyStaticBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try  			{  				int offset = ((x * m_BlockHeight) + y) * 196 + 4;    				if ( m_MapIndex != null )  					offset = m_MapIndex.Lookup( offset );    				m_Map.Seek( offset' SeekOrigin.Begin );    				LandTile[] tiles = new LandTile[64];    				fixed ( LandTile *pTiles = tiles )  				{  #if !MONO  					NativeReader.Read( m_Map.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  					NativeReader.Read( m_Map.Handle' pTiles' 192 );  #endif  				}    				return tiles;  			}  			catch  			{  				if ( DateTime.UtcNow >= m_NextLandWarning )  				{  					Console.WriteLine( "Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_InvalidLandBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try  			{  				int offset = ((x * m_BlockHeight) + y) * 196 + 4;    				if ( m_MapIndex != null )  					offset = m_MapIndex.Lookup( offset );    				m_Map.Seek( offset' SeekOrigin.Begin );    				LandTile[] tiles = new LandTile[64];    				fixed ( LandTile *pTiles = tiles )  				{  #if !MONO  					NativeReader.Read( m_Map.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  					NativeReader.Read( m_Map.Handle' pTiles' 192 );  #endif  				}    				return tiles;  			}  			catch  			{  				if ( DateTime.UtcNow >= m_NextLandWarning )  				{  					Console.WriteLine( "Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_InvalidLandBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try  			{  				int offset = ((x * m_BlockHeight) + y) * 196 + 4;    				if ( m_MapIndex != null )  					offset = m_MapIndex.Lookup( offset );    				m_Map.Seek( offset' SeekOrigin.Begin );    				LandTile[] tiles = new LandTile[64];    				fixed ( LandTile *pTiles = tiles )  				{  #if !MONO  					NativeReader.Read( m_Map.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  					NativeReader.Read( m_Map.Handle' pTiles' 192 );  #endif  				}    				return tiles;  			}  			catch  			{  				if ( DateTime.UtcNow >= m_NextLandWarning )  				{  					Console.WriteLine( "Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_InvalidLandBlock;  			}
Magic Number,Server,TileMatrix,C:\repos\runuo_runuo\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try  			{  				int offset = ((x * m_BlockHeight) + y) * 196 + 4;    				if ( m_MapIndex != null )  					offset = m_MapIndex.Lookup( offset );    				m_Map.Seek( offset' SeekOrigin.Begin );    				LandTile[] tiles = new LandTile[64];    				fixed ( LandTile *pTiles = tiles )  				{  #if !MONO  					NativeReader.Read( m_Map.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  					NativeReader.Read( m_Map.Handle' pTiles' 192 );  #endif  				}    				return tiles;  			}  			catch  			{  				if ( DateTime.UtcNow >= m_NextLandWarning )  				{  					Console.WriteLine( "Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y );  					m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );  				}    				return m_InvalidLandBlock;  			}
Magic Number,Server,UOPIndex,C:\repos\runuo_runuo\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do  			{  				stream.Seek( nextTable' SeekOrigin.Begin );  				int count = m_Reader.ReadInt32();  				nextTable = m_Reader.ReadInt32();  				m_Reader.ReadInt32();    				for ( int i = 0; i < count; ++i )  				{  					int offset = m_Reader.ReadInt32();    					if ( offset == 0 )  					{  						stream.Seek( 30' SeekOrigin.Current );  						continue;  					}    					m_Reader.ReadInt64();  					int length = m_Reader.ReadInt32();    					entries.Add( new UOPEntry( offset' length ) );    					stream.Seek( 18' SeekOrigin.Current );  				}  			}  			while ( nextTable != 0 && nextTable < m_Length );
Magic Number,Server,UOPIndex,C:\repos\runuo_runuo\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do  			{  				stream.Seek( nextTable' SeekOrigin.Begin );  				int count = m_Reader.ReadInt32();  				nextTable = m_Reader.ReadInt32();  				m_Reader.ReadInt32();    				for ( int i = 0; i < count; ++i )  				{  					int offset = m_Reader.ReadInt32();    					if ( offset == 0 )  					{  						stream.Seek( 30' SeekOrigin.Current );  						continue;  					}    					m_Reader.ReadInt64();  					int length = m_Reader.ReadInt32();    					entries.Add( new UOPEntry( offset' length ) );    					stream.Seek( 18' SeekOrigin.Current );  				}  			}  			while ( nextTable != 0 && nextTable < m_Length );
Magic Number,Server,UOPIndex,C:\repos\runuo_runuo\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for ( int i = 0; i < entries.Count; ++i )  			{  				stream.Seek( entries[i].m_Offset + 2' SeekOrigin.Begin );    				int dataOffset = m_Reader.ReadInt16();  				entries[i].m_Offset += 4 + dataOffset;    				stream.Seek( dataOffset' SeekOrigin.Current );  				entries[i].m_Order = m_Reader.ReadInt32();  			}
Magic Number,Server,UOPIndex,C:\repos\runuo_runuo\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for ( int i = 0; i < entries.Count; ++i )  			{  				stream.Seek( entries[i].m_Offset + 2' SeekOrigin.Begin );    				int dataOffset = m_Reader.ReadInt16();  				entries[i].m_Offset += 4 + dataOffset;    				stream.Seek( dataOffset' SeekOrigin.Current );  				entries[i].m_Order = m_Reader.ReadInt32();  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader indexReader = new BinaryReader( fsIndex );    					int count = (int)(indexReader.BaseStream.Length / 4);    					for ( int i = 0; i < count; ++i )  					{  						int blockID = indexReader.ReadInt32();  						int x = blockID / matrix.BlockHeight;  						int y = blockID % matrix.BlockHeight;    						fsData.Seek( 4' SeekOrigin.Current );    						LandTile[] tiles = new LandTile[64];    						fixed ( LandTile *pTiles = tiles )  						{  #if !MONO  							NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  							NativeReader.Read( fsData.Handle' pTiles' 192 );  #endif  						}    						matrix.SetLandBlock( x' y' tiles );  					}  					  					indexReader.Close();    					return count;  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader indexReader = new BinaryReader( fsIndex );    					int count = (int)(indexReader.BaseStream.Length / 4);    					for ( int i = 0; i < count; ++i )  					{  						int blockID = indexReader.ReadInt32();  						int x = blockID / matrix.BlockHeight;  						int y = blockID % matrix.BlockHeight;    						fsData.Seek( 4' SeekOrigin.Current );    						LandTile[] tiles = new LandTile[64];    						fixed ( LandTile *pTiles = tiles )  						{  #if !MONO  							NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  							NativeReader.Read( fsData.Handle' pTiles' 192 );  #endif  						}    						matrix.SetLandBlock( x' y' tiles );  					}  					  					indexReader.Close();    					return count;  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader indexReader = new BinaryReader( fsIndex );    					int count = (int)(indexReader.BaseStream.Length / 4);    					for ( int i = 0; i < count; ++i )  					{  						int blockID = indexReader.ReadInt32();  						int x = blockID / matrix.BlockHeight;  						int y = blockID % matrix.BlockHeight;    						fsData.Seek( 4' SeekOrigin.Current );    						LandTile[] tiles = new LandTile[64];    						fixed ( LandTile *pTiles = tiles )  						{  #if !MONO  							NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  							NativeReader.Read( fsData.Handle' pTiles' 192 );  #endif  						}    						matrix.SetLandBlock( x' y' tiles );  					}  					  					indexReader.Close();    					return count;  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					BinaryReader indexReader = new BinaryReader( fsIndex );    					int count = (int)(indexReader.BaseStream.Length / 4);    					for ( int i = 0; i < count; ++i )  					{  						int blockID = indexReader.ReadInt32();  						int x = blockID / matrix.BlockHeight;  						int y = blockID % matrix.BlockHeight;    						fsData.Seek( 4' SeekOrigin.Current );    						LandTile[] tiles = new LandTile[64];    						fixed ( LandTile *pTiles = tiles )  						{  #if !MONO  							NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' 192 );  #else  							NativeReader.Read( fsData.Handle' pTiles' 192 );  #endif  						}    						matrix.SetLandBlock( x' y' tiles );  					}  					  					indexReader.Close();    					return count;  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,TileMatrixPatch,C:\repos\runuo_runuo\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using ( FileStream fsData = new FileStream( dataPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  			{  				using ( FileStream fsIndex = new FileStream( indexPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  				{  					using ( FileStream fsLookup = new FileStream( lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read ) )  					{  						BinaryReader indexReader = new BinaryReader( fsIndex );  						BinaryReader lookupReader = new BinaryReader( fsLookup );    						int count = (int)(indexReader.BaseStream.Length / 4);    						TileList[][] lists = new TileList[8][];    						for ( int x = 0; x < 8; ++x )  						{  							lists[x] = new TileList[8];    							for ( int y = 0; y < 8; ++y )  								lists[x][y] = new TileList();  						}    						for ( int i = 0; i < count; ++i )  						{  							int blockID = indexReader.ReadInt32();  							int blockX = blockID / matrix.BlockHeight;  							int blockY = blockID % matrix.BlockHeight;    							int offset = lookupReader.ReadInt32();  							int length = lookupReader.ReadInt32();  							lookupReader.ReadInt32(); // Extra    							if ( offset < 0 || length <= 0 )  							{  								matrix.SetStaticBlock( blockX' blockY' matrix.EmptyStaticBlock );  								continue;  							}    							fsData.Seek( offset' SeekOrigin.Begin );    							int tileCount = length / 7;    							if ( m_TileBuffer.Length < tileCount )  								m_TileBuffer = new StaticTile[tileCount];    							StaticTile[] staTiles = m_TileBuffer;    							fixed ( StaticTile *pTiles = staTiles )  							{  #if !MONO  								NativeReader.Read( fsData.SafeFileHandle.DangerousGetHandle()' pTiles' length );  #else  								NativeReader.Read( fsData.Handle' pTiles' length );  #endif  								StaticTile *pCur = pTiles' pEnd = pTiles + tileCount;    								while ( pCur < pEnd )  								{  									lists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( (ushort)pCur->m_ID' pCur->m_Z );  									pCur = pCur + 1;  								}    								StaticTile[][][] tiles = new StaticTile[8][][];    								for ( int x = 0; x < 8; ++x )  								{  									tiles[x] = new StaticTile[8][];    									for ( int y = 0; y < 8; ++y )  										tiles[x][y] = lists[x][y].ToArray();  								}    								matrix.SetStaticBlock( blockX' blockY' tiles );  							}  						}    						indexReader.Close();  						lookupReader.Close();    						return count;  					}  				}  			}
Magic Number,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if ( ts >= TimeSpan.FromSeconds( 10.0 ) )  				return TimerPriority.OneSecond;
Magic Number,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if ( ts >= TimeSpan.FromSeconds( 5.0 ) )  				return TimerPriority.TwoFiftyMS;
Magic Number,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if ( ts >= TimeSpan.FromSeconds( 2.5 ) )  				return TimerPriority.FiftyMS;
Magic Number,Server,Timer,C:\repos\runuo_runuo\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if ( ts >= TimeSpan.FromSeconds( 0.5 ) )  				return TimerPriority.TenMS;
Magic Number,Server,TimerThread,C:\repos\runuo_runuo\Server\Timer.cs,DumpInfo,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  				{  					tw.WriteLine( "Priority: {0}"' (TimerPriority)i );  					tw.WriteLine();    					Dictionary<string' List<Timer>> hash = new Dictionary<string' List<Timer>>();    					for ( int j = 0; j < m_Timers[i].Count; ++j )  					{  						Timer t = m_Timers[i][j];    						string key = t.ToString();    						List<Timer> list;  						hash.TryGetValue( key' out list );    						if ( list == null )  							hash[key] = list = new List<Timer>();    						list.Add( t );  					}    					foreach ( KeyValuePair<string' List<Timer>> kv in hash )  					{  						string key = kv.Key;  						List<Timer> list = kv.Value;    						tw.WriteLine( "Type: {0}; Count: {1}; Percent: {2}%"' key' list.Count' (int)(100 * (list.Count / (double)m_Timers[i].Count)) );  					}    					tw.WriteLine();  					tw.WriteLine();  				}
Magic Number,Server,TimerThread,C:\repos\runuo_runuo\Server\Timer.cs,DumpInfo,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  				{  					tw.WriteLine( "Priority: {0}"' (TimerPriority)i );  					tw.WriteLine();    					Dictionary<string' List<Timer>> hash = new Dictionary<string' List<Timer>>();    					for ( int j = 0; j < m_Timers[i].Count; ++j )  					{  						Timer t = m_Timers[i][j];    						string key = t.ToString();    						List<Timer> list;  						hash.TryGetValue( key' out list );    						if ( list == null )  							hash[key] = list = new List<Timer>();    						list.Add( t );  					}    					foreach ( KeyValuePair<string' List<Timer>> kv in hash )  					{  						string key = kv.Key;  						List<Timer> list = kv.Value;    						tw.WriteLine( "Type: {0}; Count: {1}; Percent: {2}%"' key' list.Count' (int)(100 * (list.Count / (double)m_Timers[i].Count)) );  					}    					tw.WriteLine();  					tw.WriteLine();  				}
Magic Number,Server,TimerChangeEntry,C:\repos\runuo_runuo\Server\Timer.cs,Free,The following statement contains a magic number: lock (m_InstancePool) {  						if (m_InstancePool.Count < 200) // Arbitrary  							m_InstancePool.Enqueue( this );  					}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for ( int i = 0; i < 4; i++ )  			{  				int part = 0;    				int partBase = 10;    				string pattern = split[i];    				for ( int j = 0; j < pattern.Length; j++ )  				{  					char c = (char)pattern[j];      					if ( c == 'x' || c == 'X' )  					{  						partBase = 16;  					}  					else if ( c >= '0' && c <= '9' )  					{  						int offset = c - '0';    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'a' && c <= 'f' )  					{  						int offset = 10 + ( c - 'a' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c >= 'A' && c <= 'F' )  					{  						int offset = 10 + ( c - 'A' );    						if ( cidrBits )  						{  							cidrLength *= partBase;  							cidrLength += offset;  						}  						else  						{  							part *= partBase;  							part += offset;  						}  					}  					else if ( c == '/' )  					{  						if ( cidrBits || i != 3 )	//If there's two '/' or the '/' isn't in the last byte  						{  							return false;  						}    						partBase = 10;  						cidrBits = true;  					}  					else  					{  						return false;  					}  				}    				bytes[i] = (byte)part;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if ( cidrLength <= 0 || cidrLength >= 32 )   //if invalid cidr Length' just compare IPs  				return cidrPrefixValue == ipValue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: uint mask = uint.MaxValue << 32-cidrLength;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: if ( bytes.Length != 4 )  				return 0;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)(((( bytes[0] << 0x18 ) | (bytes[1] << 0x10)) | (bytes[2] << 8)) | bytes[3]) & ((uint)0xffffffff);
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)(((( bytes[0] << 0x18 ) | (bytes[1] << 0x10)) | (bytes[2] << 8)) | bytes[3]) & ((uint)0xffffffff);
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)(((( bytes[0] << 0x18 ) | (bytes[1] << 0x10)) | (bytes[2] << 8)) | bytes[3]) & ((uint)0xffffffff);
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,SwapUnsignedInt,The following statement contains a magic number: return (uint)( ( ( ( source & 0x000000FF ) << 0x18 )  			| ( ( source & 0x0000FF00 ) << 8 )  			| ( ( source & 0x00FF0000 ) >> 8 )  			| ( ( source & 0xFF000000 ) >> 0x18 ) ) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,SwapUnsignedInt,The following statement contains a magic number: return (uint)( ( ( ( source & 0x000000FF ) << 0x18 )  			| ( ( source & 0x0000FF00 ) << 8 )  			| ( ( source & 0x00FF0000 ) >> 8 )  			| ( ( source & 0xFF000000 ) >> 0x18 ) ) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if ( addr.Length == 16 )	//sanity 0 - 15 //10 11 //12 13 14 15  			{  				if ( addr[10] != 0xFF || addr[11] != 0xFF )  					return false;    				for ( int i = 0; i < 10; i++ )  				{  					if ( addr[i] != 0 )  						return false;  				}    				byte[] v4Addr = new byte[4];    				for ( int i = 0; i < 4; i++ )  				{  					v4Addr[i] = addr[12 + i];  				}    				address = new IPAddress( v4Addr );  				return true;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,IPMatch,The following statement contains a magic number: for ( int i = 0; i < 4; ++i )  			{  				int lowPart' highPart;    				if ( i >= split.Length )  				{  					lowPart = 0;  					highPart = 255;  				}  				else  				{  					string pattern = split[i];    					if ( pattern == "*" )  					{  						lowPart = 0;  						highPart = 255;  					}  					else  					{  						lowPart = 0;  						highPart = 0;    						bool highOnly = false;  						int lowBase = 10;  						int highBase = 10;    						for ( int j = 0; j < pattern.Length; ++j )  						{  							char c = (char)pattern[j];    							if ( c == '?' )  							{  								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += 0;  								}    								highPart *= highBase;  								highPart += highBase - 1;  							}  							else if ( c == '-' )  							{  								highOnly = true;  								highPart = 0;  							}  							else if ( c == 'x' || c == 'X' )  							{  								lowBase = 16;  								highBase = 16;  							}  							else if ( c >= '0' && c <= '9' )  							{  								int offset = c - '0';    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'a' && c <= 'f' )  							{  								int offset = 10 + (c - 'a');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else if ( c >= 'A' && c <= 'F' )  							{  								int offset = 10 + (c - 'A');    								if ( !highOnly )  								{  									lowPart *= lowBase;  									lowPart += offset;  								}    								highPart *= highBase;  								highPart += offset;  							}  							else  							{  								valid = false;	//high & lowpart would be 0 if it got to here.  							}  						}  					}  				}    				int b = (byte)(Utility.GetAddressValue( ip ) >> (i * 8));    				if ( b < lowPart || b > highPart )  					return false;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ToInt32,The following statement contains a magic number: if( value.StartsWith( "0x" ) )  				int.TryParse( value.Substring( 2 )' NumberStyles.HexNumber' null' out i );  			else  				int.TryParse( value' out i );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.m_X >= (p2.m_X - 18) )  				&& ( p1.m_X <= (p2.m_X + 18) )  				&& ( p1.m_Y >= (p2.m_Y - 18) )  				&& ( p1.m_Y <= (p2.m_Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.X >= (p2.X - 18) )  				&& ( p1.X <= (p2.X + 18) )  				&& ( p1.Y >= (p2.Y - 18) )  				&& ( p1.Y <= (p2.Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.X >= (p2.X - 18) )  				&& ( p1.X <= (p2.X + 18) )  				&& ( p1.Y >= (p2.Y - 18) )  				&& ( p1.Y <= (p2.Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.X >= (p2.X - 18) )  				&& ( p1.X <= (p2.X + 18) )  				&& ( p1.Y >= (p2.Y - 18) )  				&& ( p1.Y <= (p2.Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,InUpdateRange,The following statement contains a magic number: return ( p1.X >= (p2.X - 18) )  				&& ( p1.X <= (p2.X + 18) )  				&& ( p1.Y >= (p2.Y - 18) )  				&& ( p1.Y <= (p2.Y + 18) );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,GetDirection,The following statement contains a magic number: if ( adx >= ady * 3 )  			{  				if ( dx > 0 )  					return Direction.East;  				else  					return Direction.West;  			}  			else if ( ady >= adx * 3 )  			{  				if ( dy > 0 )  					return Direction.South;  				else  					return Direction.North;  			}  			else if ( dx > 0 )  			{  				if ( dy > 0 )  					return Direction.Down;  				else  					return Direction.Right;  			}  			else  			{  				if ( dy > 0 )  					return Direction.Left;  				else  					return Direction.Up;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,GetDirection,The following statement contains a magic number: if ( adx >= ady * 3 )  			{  				if ( dx > 0 )  					return Direction.East;  				else  					return Direction.West;  			}  			else if ( ady >= adx * 3 )  			{  				if ( dy > 0 )  					return Direction.South;  				else  					return Direction.North;  			}  			else if ( dx > 0 )  			{  				if ( dy > 0 )  					return Direction.Down;  				else  					return Direction.Right;  			}  			else  			{  				if ( dy > 0 )  					return Direction.Left;  				else  					return Direction.Up;  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomPinkHue,The following statement contains a magic number: return Random( 1201' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomPinkHue,The following statement contains a magic number: return Random( 1201' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomBlueHue,The following statement contains a magic number: return Random( 1301' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomBlueHue,The following statement contains a magic number: return Random( 1301' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomGreenHue,The following statement contains a magic number: return Random( 1401' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomGreenHue,The following statement contains a magic number: return Random( 1401' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomOrangeHue,The following statement contains a magic number: return Random( 1501' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomOrangeHue,The following statement contains a magic number: return Random( 1501' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomRedHue,The following statement contains a magic number: return Random( 1601' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomRedHue,The following statement contains a magic number: return Random( 1601' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomYellowHue,The following statement contains a magic number: return Random( 1701' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomYellowHue,The following statement contains a magic number: return Random( 1701' 54 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNeutralHue,The following statement contains a magic number: return Random( 1801' 108 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNeutralHue,The following statement contains a magic number: return Random( 1801' 108 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSnakeHue,The following statement contains a magic number: return Random( 2001' 18 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSnakeHue,The following statement contains a magic number: return Random( 2001' 18 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomBirdHue,The following statement contains a magic number: return Random( 2101' 30 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomBirdHue,The following statement contains a magic number: return Random( 2101' 30 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSlimeHue,The following statement contains a magic number: return Random( 2201' 24 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSlimeHue,The following statement contains a magic number: return Random( 2201' 24 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomAnimalHue,The following statement contains a magic number: return Random( 2301' 18 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomAnimalHue,The following statement contains a magic number: return Random( 2301' 18 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomMetalHue,The following statement contains a magic number: return Random( 2401' 30 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomMetalHue,The following statement contains a magic number: return Random( 2401' 30 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if ( hue < 2 )  				return 2;  			else if ( hue > 1001 )  				return 1001;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if ( hue < 2 )  				return 2;  			else if ( hue > 1001 )  				return 1001;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if ( hue < 2 )  				return 2;  			else if ( hue > 1001 )  				return 1001;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if ( hue < 2 )  				return 2;  			else if ( hue > 1001 )  				return 1001;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomDyedHue,The following statement contains a magic number: return Random( 2' 1000 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomDyedHue,The following statement contains a magic number: return Random( 2' 1000 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomBrightHue,The following statement contains a magic number: if ( Utility.RandomDouble() < 0.1  )  				return Utility.RandomList( 0x62' 0x71 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if ( hue < 1002 )  				return 1002;  			else if ( hue > 1058 )  				return 1058;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if ( hue < 1002 )  				return 1002;  			else if ( hue > 1058 )  				return 1058;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if ( hue < 1002 )  				return 1002;  			else if ( hue > 1058 )  				return 1058;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if ( hue < 1002 )  				return 1002;  			else if ( hue > 1058 )  				return 1058;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSkinHue,The following statement contains a magic number: return Random( 1002' 57 ) | 0x8000;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSkinHue,The following statement contains a magic number: return Random( 1002' 57 ) | 0x8000;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if ( hue < 1102 )  				return 1102;  			else if ( hue > 1149 )  				return 1149;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if ( hue < 1102 )  				return 1102;  			else if ( hue > 1149 )  				return 1149;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if ( hue < 1102 )  				return 1102;  			else if ( hue > 1149 )  				return 1149;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if ( hue < 1102 )  				return 1102;  			else if ( hue > 1149 )  				return 1149;  			else  				return hue;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomHairHue,The following statement contains a magic number: return Random( 1102' 48 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomHairHue,The following statement contains a magic number: return Random( 1102' 48 );
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSkill,The following statement contains a magic number: return m_AllSkills[Utility.Random(m_AllSkills.Length - ( Core.ML ? 0 : Core.SE ? 1 : Core.AOS ? 3 : 6 ) )];
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomSkill,The following statement contains a magic number: return m_AllSkills[Utility.Random(m_AllSkills.Length - ( Core.ML ? 0 : Core.SE ? 1 : Core.AOS ? 3 : 6 ) )];
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: int whole = length >> 4;
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for ( int i = 0; i < whole; ++i' byteIndex += 16 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( 16 );    				for ( int j = 0; j < 16; ++j )  				{  					int c = input.ReadByte();    					bytes.Append( c.ToString( "X2" ) );    					if ( j != 7 )  					{  						bytes.Append( ' ' );  					}  					else  					{  						bytes.Append( "  " );  					}    					if ( c >= 0x20 && c < 0x7F )  					{  						chars.Append( (char)c );  					}  					else  					{  						chars.Append( '.' );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for ( int i = 0; i < whole; ++i' byteIndex += 16 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( 16 );    				for ( int j = 0; j < 16; ++j )  				{  					int c = input.ReadByte();    					bytes.Append( c.ToString( "X2" ) );    					if ( j != 7 )  					{  						bytes.Append( ' ' );  					}  					else  					{  						bytes.Append( "  " );  					}    					if ( c >= 0x20 && c < 0x7F )  					{  						chars.Append( (char)c );  					}  					else  					{  						chars.Append( '.' );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for ( int i = 0; i < whole; ++i' byteIndex += 16 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( 16 );    				for ( int j = 0; j < 16; ++j )  				{  					int c = input.ReadByte();    					bytes.Append( c.ToString( "X2" ) );    					if ( j != 7 )  					{  						bytes.Append( ' ' );  					}  					else  					{  						bytes.Append( "  " );  					}    					if ( c >= 0x20 && c < 0x7F )  					{  						chars.Append( (char)c );  					}  					else  					{  						chars.Append( '.' );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for ( int i = 0; i < whole; ++i' byteIndex += 16 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( 16 );    				for ( int j = 0; j < 16; ++j )  				{  					int c = input.ReadByte();    					bytes.Append( c.ToString( "X2" ) );    					if ( j != 7 )  					{  						bytes.Append( ' ' );  					}  					else  					{  						bytes.Append( "  " );  					}    					if ( c >= 0x20 && c < 0x7F )  					{  						chars.Append( (char)c );  					}  					else  					{  						chars.Append( '.' );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for ( int i = 0; i < whole; ++i' byteIndex += 16 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( 16 );    				for ( int j = 0; j < 16; ++j )  				{  					int c = input.ReadByte();    					bytes.Append( c.ToString( "X2" ) );    					if ( j != 7 )  					{  						bytes.Append( ' ' );  					}  					else  					{  						bytes.Append( "  " );  					}    					if ( c >= 0x20 && c < 0x7F )  					{  						chars.Append( (char)c );  					}  					else  					{  						chars.Append( '.' );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if ( rem != 0 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( rem );    				for ( int j = 0; j < 16; ++j )  				{  					if ( j < rem )  					{  						int c = input.ReadByte();    						bytes.Append( c.ToString( "X2" ) );    						if ( j != 7 )  						{  							bytes.Append( ' ' );  						}  						else  						{  							bytes.Append( "  " );  						}    						if ( c >= 0x20 && c < 0x7F )  						{  							chars.Append( (char)c );  						}  						else  						{  							chars.Append( '.' );  						}  					}  					else  					{  						bytes.Append( "   " );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if ( rem != 0 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( rem );    				for ( int j = 0; j < 16; ++j )  				{  					if ( j < rem )  					{  						int c = input.ReadByte();    						bytes.Append( c.ToString( "X2" ) );    						if ( j != 7 )  						{  							bytes.Append( ' ' );  						}  						else  						{  							bytes.Append( "  " );  						}    						if ( c >= 0x20 && c < 0x7F )  						{  							chars.Append( (char)c );  						}  						else  						{  							chars.Append( '.' );  						}  					}  					else  					{  						bytes.Append( "   " );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if ( rem != 0 )  			{  				StringBuilder bytes = new StringBuilder( 49 );  				StringBuilder chars = new StringBuilder( rem );    				for ( int j = 0; j < 16; ++j )  				{  					if ( j < rem )  					{  						int c = input.ReadByte();    						bytes.Append( c.ToString( "X2" ) );    						if ( j != 7 )  						{  							bytes.Append( ' ' );  						}  						else  						{  							bytes.Append( "  " );  						}    						if ( c >= 0x20 && c < 0x7F )  						{  							chars.Append( (char)c );  						}  						else  						{  							chars.Append( '.' );  						}  					}  					else  					{  						bytes.Append( "   " );  					}  				}    				output.Write( byteIndex.ToString( "X4" ) );  				output.Write( "   " );  				output.Write( bytes.ToString() );  				output.Write( "  " );  				output.WriteLine( chars.ToString() );  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,SetValue,The following statement contains a magic number: if ( m_Values == null )  				m_Values = new int[8];
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: switch ( version )  			{  				case 1:	//Changed the values throughout the virtue system  				case 0:  				{  					int mask = reader.ReadByte();    					if ( mask != 0 )  					{  						m_Values = new int[8];    						for ( int i = 0; i < 8; ++i )  							if ( (mask & (1 << i)) != 0 )  								m_Values[i] = reader.ReadInt();  					}    					break;  				}  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: switch ( version )  			{  				case 1:	//Changed the values throughout the virtue system  				case 0:  				{  					int mask = reader.ReadByte();    					if ( mask != 0 )  					{  						m_Values = new int[8];    						for ( int i = 0; i < 8; ++i )  							if ( (mask & (1 << i)) != 0 )  								m_Values[i] = reader.ReadInt();  					}    					break;  				}  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if( version == 0 )  			{  				Compassion *= 200;  				Sacrifice *= 250;	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy    				//No direct conversion factor for Justice' this is just an approximation  				Justice *= 500;    				//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if( version == 0 )  			{  				Compassion *= 200;  				Sacrifice *= 250;	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy    				//No direct conversion factor for Justice' this is just an approximation  				Justice *= 500;    				//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if( version == 0 )  			{  				Compassion *= 200;  				Sacrifice *= 250;	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy    				//No direct conversion factor for Justice' this is just an approximation  				Justice *= 500;    				//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: if ( info.m_Values == null )  			{  				writer.Write( (byte) 0 );  			}  			else  			{  				int mask = 0;    				for ( int i = 0; i < 8; ++i )  					if ( info.m_Values[i] != 0 )  						mask |= 1 << i;    				writer.Write( (byte) mask );    				for ( int i = 0; i < 8; ++i )  					if ( info.m_Values[i] != 0 )  						writer.Write( (int) info.m_Values[i] );  			}
Magic Number,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: if ( info.m_Values == null )  			{  				writer.Write( (byte) 0 );  			}  			else  			{  				int mask = 0;    				for ( int i = 0; i < 8; ++i )  					if ( info.m_Values[i] != 0 )  						mask |= 1 << i;    				writer.Write( (byte) mask );    				for ( int i = 0; i < 8; ++i )  					if ( info.m_Values[i] != 0 )  						writer.Write( (int) info.m_Values[i] );  			}
Magic Number,Server,World,C:\repos\runuo_runuo\Server\World.cs,Broadcast,The following statement contains a magic number: if ( ascii )  				p = new AsciiMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text );  			else  				p = new UnicodeMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text );
Magic Number,Server,World,C:\repos\runuo_runuo\Server\World.cs,Broadcast,The following statement contains a magic number: if ( ascii )  				p = new AsciiMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text );  			else  				p = new UnicodeMessage( Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text );
Magic Number,Server,World,C:\repos\runuo_runuo\Server\World.cs,AppendSafetyLog,The following statement contains a magic number: try {  				using ( StreamWriter op = new StreamWriter( "world-save-errors.log"' true ) ) {  					op.WriteLine( "{0}\t{1}"' DateTime.UtcNow' message );  					op.WriteLine( new StackTrace( 2 ).ToString() );  					op.WriteLine();  				}  			} catch {  			}
Magic Number,Server.Commands,CommandSystem,C:\repos\runuo_runuo\Server\Commands.cs,Split,The following statement contains a magic number: while ( start < array.Length )  			{  				char c = array[start];    				if ( c == '"' )  				{  					++start;  					end = start;    					while ( end < array.Length )  					{  						if ( array[end] != '"' || array[end - 1] == '\\' )  							++end;  						else  							break;  					}    					list.Add( value.Substring( start' end - start ) );    					start = end + 2;  				}  				else if ( c != ' ' )  				{  					end = start;    					while ( end < array.Length )  					{  						if ( array[end] != ' ' )  							++end;  						else  							break;  					}    					list.Add( value.Substring( start' end - start ) );    					start = end + 1;  				}  				else  				{  					++start;  				}  			}
Magic Number,Server.ContextMenus,ContextMenuEntry,C:\repos\runuo_runuo\Server\ContextMenus\ContextMenuEntry.cs,ContextMenuEntry,The following statement contains a magic number: if ( number <= 0x7FFF ) // Legacy code support  				m_Number = 3000000 + number;  			else  				m_Number = number;
Magic Number,Server.Items,BaseMulti,C:\repos\runuo_runuo\Server\Items\BaseMulti.cs,GetMaxUpdateRange,The following statement contains a magic number: return 22;
Magic Number,Server.Items,BaseMulti,C:\repos\runuo_runuo\Server\Items\BaseMulti.cs,GetUpdateRange,The following statement contains a magic number: return 22;
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,CheckItemUse,The following statement contains a magic number: if ( item != this && from.AccessLevel < AccessLevel.GameMaster && IsDecoContainer )  			{  				from.LocalOverheadMessage( MessageType.Regular' 0x3B2' 1019045 ); // I can't reach that.  				return false;  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,SendCantStoreMessage,The following statement contains a magic number: to.SendLocalizedMessage( 500176 );
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,Serialize,The following statement contains a magic number: writer.Write( (int) 2 );
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,Deserialize,The following statement contains a magic number: switch ( version )  			{  				case 2:  				{  					SaveFlag flags = (SaveFlag)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.MaxItems ) )  						m_MaxItems = reader.ReadEncodedInt();  					else  						m_MaxItems = -1;    					if ( GetSaveFlag( flags' SaveFlag.GumpID ) )  						m_GumpID = reader.ReadEncodedInt();  					else  						m_GumpID = -1;    					if ( GetSaveFlag( flags' SaveFlag.DropSound ) )  						m_DropSound = reader.ReadEncodedInt();  					else  						m_DropSound = -1;    					m_LiftOverride = GetSaveFlag( flags' SaveFlag.LiftOverride );    					break;  				}  				case 1:  				{  					m_MaxItems = reader.ReadInt();  					goto case 0;  				}  				case 0:  				{  					if ( version < 1 )  						m_MaxItems = m_GlobalMaxItems;    					m_GumpID = reader.ReadInt();  					m_DropSound = reader.ReadInt();    					if ( m_GumpID == DefaultGumpID )  						m_GumpID = -1;    					if ( m_DropSound == DefaultDropSound )  						m_DropSound = -1;    					if ( m_MaxItems == DefaultMaxItems )  						m_MaxItems = -1;    					//m_Bounds = new Rectangle2D( reader.ReadPoint2D()' reader.ReadPoint2D() );  					reader.ReadPoint2D();  					reader.ReadPoint2D();    					break;  				}  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,DropItem,The following statement contains a magic number: if ( bounds.Width >= ourBounds.Width )  				x = (ourBounds.Width - bounds.Width) / 2;  			else  				x = Utility.Random( ourBounds.Width - bounds.Width );
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,DropItem,The following statement contains a magic number: if ( bounds.Height >= ourBounds.Height )  				y = (ourBounds.Height - bounds.Height) / 2;  			else  				y = Utility.Random( ourBounds.Height - bounds.Height );
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: if ( from.InRange( GetWorldLocation()' 2 ) )  			{  				DisplayTo( from );    				SecureTradeContainer cont = GetSecureTradeCont();    				if ( cont != null )  				{  					SecureTrade trade = cont.Trade;    					if ( trade != null && trade.From.Mobile == from )  						DisplayTo( trade.To.Mobile );  					else if ( trade != null && trade.To.Mobile == from )  						DisplayTo( trade.From.Mobile );  				}  			}  			else  			{  				from.SendLocalizedMessage( 500446 ); // That is too far away.  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: if ( from.InRange( GetWorldLocation()' 2 ) )  			{  				DisplayTo( from );    				SecureTradeContainer cont = GetSecureTradeCont();    				if ( cont != null )  				{  					SecureTrade trade = cont.Trade;    					if ( trade != null && trade.From.Mobile == from )  						DisplayTo( trade.To.Mobile );  					else if ( trade != null && trade.To.Mobile == from )  						DisplayTo( trade.From.Mobile );  				}  			}  			else  			{  				from.SendLocalizedMessage( 500446 ); // That is too far away.  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if( DisplaysContent )//CheckContentDisplay( from ) )  			{  				if( Core.ML )  				{  					if( ParentsContain<BankBox>() )	//Root Parent is the Mobile.  Parent could be another containter.  						list.Add( 1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  					else  						list.Add( 1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones    					//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  				}  				else  				{  					list.Add( 1050044' "{0}\t{1}"' TotalItems' TotalWeight ); // ~1_COUNT~ items' ~2_WEIGHT~ stones  				}  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if( DisplaysContent )//CheckContentDisplay( from ) )  			{  				if( Core.ML )  				{  					if( ParentsContain<BankBox>() )	//Root Parent is the Mobile.  Parent could be another containter.  						list.Add( 1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  					else  						list.Add( 1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones    					//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  				}  				else  				{  					list.Add( 1050044' "{0}\t{1}"' TotalItems' TotalWeight ); // ~1_COUNT~ items' ~2_WEIGHT~ stones  				}  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if( DisplaysContent )//CheckContentDisplay( from ) )  			{  				if( Core.ML )  				{  					if( ParentsContain<BankBox>() )	//Root Parent is the Mobile.  Parent could be another containter.  						list.Add( 1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  					else  						list.Add( 1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight ); // Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones    					//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  				}  				else  				{  					list.Add( 1050044' "{0}\t{1}"' TotalItems' TotalWeight ); // ~1_COUNT~ items' ~2_WEIGHT~ stones  				}  			}
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,OnDoubleClick,The following statement contains a magic number: if ( from.AccessLevel > AccessLevel.Player || from.InRange( this.GetWorldLocation()' 2 ) )  				DisplayTo( from );  			else  				from.SendLocalizedMessage( 500446 );
Magic Number,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,OnDoubleClick,The following statement contains a magic number: if ( from.AccessLevel > AccessLevel.Player || from.InRange( this.GetWorldLocation()' 2 ) )  				DisplayTo( from );  			else  				from.SendLocalizedMessage( 500446 );
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( !File.Exists( path ) )  			{  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );  				return;  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( !File.Exists( path ) )  			{  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );  				return;  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( !File.Exists( path ) )  			{  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );  				return;  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( !File.Exists( path ) )  			{  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );  				return;  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using ( StreamReader reader = new StreamReader( path ) )  			{  				string line;    				while ( (line = reader.ReadLine()) != null )  				{  					line = line.Trim();    					if ( line.Length == 0 || line.StartsWith( "#" ) )  						continue;    					try  					{  						string[] split = line.Split( '\t' );    						if ( split.Length >= 3 )  						{  							int gumpID = Utility.ToInt32( split[0] );    							string[] aRect = split[1].Split( ' ' );  							if ( aRect.Length < 4 )  								continue;    							int x = Utility.ToInt32( aRect[0] );  							int y = Utility.ToInt32( aRect[1] );  							int width = Utility.ToInt32( aRect[2] );  							int height = Utility.ToInt32( aRect[3] );    							Rectangle2D bounds = new Rectangle2D( x' y' width' height );    							int dropSound = Utility.ToInt32( split[2] );    							ContainerData data = new ContainerData( gumpID' bounds' dropSound );    							if ( m_Default == null )  								m_Default = data;    							if ( split.Length >= 4 )  							{  								string[] aIDs = split[3].Split( ''' );    								for ( int i = 0; i < aIDs.Length; i++ )  								{  									int id = Utility.ToInt32( aIDs[i] );    									if ( m_Table.ContainsKey( id ) )  									{  										Console.WriteLine( @"Warning: double ItemID entry in Data\containers.cfg" );  									}  									else  									{  										m_Table[id] = data;  									}  								}  							}  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( m_Default == null )  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( m_Default == null )  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( m_Default == null )  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );
Magic Number,Server.Items,ContainerData,C:\repos\runuo_runuo\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if ( m_Default == null )  				m_Default = new ContainerData( 0x3C' new Rectangle2D( 44' 65' 142' 94 )' 0x48 );
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,ByteQueue,The following statement contains a magic number: m_Buffer = new byte[2048];
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if ( m_Size >= 3 )  				return (m_Buffer[(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer[(m_Head + 2) % m_Buffer.Length];
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if ( m_Size >= 3 )  				return (m_Buffer[(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer[(m_Head + 2) % m_Buffer.Length];
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if ( m_Size >= 3 )  				return (m_Buffer[(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer[(m_Head + 2) % m_Buffer.Length];
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: if ( (m_Size + size) > m_Buffer.Length )  				SetCapacity( (m_Size + size + 2047) & ~2047 );
Magic Number,Server.Network,ByteQueue,C:\repos\runuo_runuo\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: if ( (m_Size + size) > m_Buffer.Length )  				SetCapacity( (m_Size + size + 2047) & ~2047 );
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,Compression,C:\repos\runuo_runuo\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable)  			{  				int* pEntry;    				fixed (byte* pInputBuffer = input)  				{  					byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;    					fixed (byte* pOutputBuffer = output)  					{  						byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;    						while (pInput < pInputEnd)  						{  							pEntry = &pTable[*pInput++ << 1];    							bitCount += pEntry[CountIndex];    							bitValue <<= pEntry[CountIndex];  							bitValue |= pEntry[ValueIndex];    							while (bitCount >= 8)  							{  								bitCount -= 8;    								if (pOutput < pOutputEnd)  								{  									*pOutput++ = (byte)(bitValue >> bitCount);  								}  								else  								{  									length = 0;  									return;  								}  							}  						}    						// terminal code  						pEntry = &pTable[0x200];    						bitCount += pEntry[CountIndex];    						bitValue <<= pEntry[CountIndex];  						bitValue |= pEntry[ValueIndex];    						// align on byte boundary  						if ((bitCount & 7) != 0)  						{  							bitValue <<= (8 - (bitCount & 7));  							bitCount += (8 - (bitCount & 7));  						}    						while (bitCount >= 8)  						{  							bitCount -= 8;    							if (pOutput < pOutputEnd)  							{  								*pOutput++ = (byte)(bitValue >> bitCount);  							}  							else  							{  								length = 0;  								return;  							}  						}    						length = (int)(pOutput - pOutputBuffer);  						return;  					}  				}  			}
Magic Number,Server.Network,EncodedReader,C:\repos\runuo_runuo\Server\Network\EncodedReader.cs,ReadPoint3D,The following statement contains a magic number: if ( m_Reader.ReadByte() != 3 )  				return Point3D.Zero;
Magic Number,Server.Network,EncodedReader,C:\repos\runuo_runuo\Server\Network\EncodedReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: if ( m_Reader.ReadByte() != 2 )  				return "";
Magic Number,Server.Network,EncodedReader,C:\repos\runuo_runuo\Server\Network\EncodedReader.cs,ReadUnicodeString,The following statement contains a magic number: if ( m_Reader.ReadByte() != 2 )  				return "";
Magic Number,Server.Network,Listener,C:\repos\runuo_runuo\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try  			{  				s.LingerState.Enabled = false;  				s.ExclusiveAddressUse = false;    				s.Bind( ipep );  				s.Listen( 8 );    				return s;  			}  			catch ( Exception e )  			{  				if ( e is SocketException ) {  					SocketException se = (SocketException)e;    					if ( se.ErrorCode == 10048 ) { // WSAEADDRINUSE  						Console.WriteLine( "Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port );   					}  					else if ( se.ErrorCode == 10049 ) { // WSAEADDRNOTAVAIL  						Console.WriteLine( "Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port );  					}  					else {  						Console.WriteLine( "Listener Exception:" );  						Console.WriteLine( e );  					}  				}    				return null;  			}
Magic Number,Server.Network,Listener,C:\repos\runuo_runuo\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try  			{  				s.LingerState.Enabled = false;  				s.ExclusiveAddressUse = false;    				s.Bind( ipep );  				s.Listen( 8 );    				return s;  			}  			catch ( Exception e )  			{  				if ( e is SocketException ) {  					SocketException se = (SocketException)e;    					if ( se.ErrorCode == 10048 ) { // WSAEADDRINUSE  						Console.WriteLine( "Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port );   					}  					else if ( se.ErrorCode == 10049 ) { // WSAEADDRNOTAVAIL  						Console.WriteLine( "Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port );  					}  					else {  						Console.WriteLine( "Listener Exception:" );  						Console.WriteLine( e );  					}  				}    				return null;  			}
Magic Number,Server.Network,Listener,C:\repos\runuo_runuo\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try  			{  				s.LingerState.Enabled = false;  				s.ExclusiveAddressUse = false;    				s.Bind( ipep );  				s.Listen( 8 );    				return s;  			}  			catch ( Exception e )  			{  				if ( e is SocketException ) {  					SocketException se = (SocketException)e;    					if ( se.ErrorCode == 10048 ) { // WSAEADDRINUSE  						Console.WriteLine( "Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port );   					}  					else if ( se.ErrorCode == 10049 ) { // WSAEADDRNOTAVAIL  						Console.WriteLine( "Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port );  					}  					else {  						Console.WriteLine( "Listener Exception:" );  						Console.WriteLine( e );  					}  				}    				return null;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,MessagePump,The following statement contains a magic number: do {  				for ( int i = 0; i < ipep.Length; i++ ) {  					Listener l = new Listener( ipep[i] );  					if ( !success && l != null )  						success = true;  					m_Listeners[i] = l;  				}    				if ( !success ) {  					Console.WriteLine( "Retrying..." );  					Thread.Sleep( 10000 );  				}  			} while ( !success );
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID() == 0xEF) {  				// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  				// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  				ns.Seeded = true;  				return true;  			} else if (buffer.Length >= 4) {  				byte[] m_Peek = new byte[4];    				buffer.Dequeue(m_Peek' 0' 4);    				int seed = (m_Peek[0] << 24) | (m_Peek[1] << 16) | (m_Peek[2] << 8) | m_Peek[3];    				if (seed == 0) {  					Console.WriteLine("Login: {0}: Invalid client detected' disconnecting"' ns);  					ns.Dispose();  					return false;  				}    				ns.m_Seed = seed;  				ns.Seeded = true;  				return true;  			} else {  				return false;  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: lock ( buffer )  			{  				if ( !ns.Seeded ) {  					if (!HandleSeed(ns' buffer))  						return;  				}    				int length = buffer.Length;    				while ( length > 0 && ns.Running ) {  					int packetID = buffer.GetPacketID();    					if (CheckEncrypted(ns' packetID))  						break;    					PacketHandler handler = ns.GetHandler( packetID );    					if ( handler == null ) {  						byte[] data = new byte[length];  						length = buffer.Dequeue( data' 0' length );  						new PacketReader( data' length' false ).Trace( ns );  						break;  					}    					int packetLength = handler.Length;    					if ( packetLength <= 0 ) 	{  						if ( length >= 3 ) {  							packetLength = buffer.GetPacketLength();    							if ( packetLength < 3 ) {  								ns.Dispose();  								break;  							}  						} else {  							break;  						}  					}    					if ( length >= packetLength ) {  						if (handler.Ingame) {  							if (ns.Mobile == null ) {  								Console.WriteLine( "Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID );  								ns.Dispose();  								break;  							} else if (ns.Mobile.Deleted) {  								ns.Dispose();  								break;  							}  						}    						ThrottlePacketCallback throttler = handler.ThrottleCallback;    						if ( throttler != null && !throttler( ns ) ) {  							m_Throttled.Enqueue( ns );  							return;  						}    						PacketReceiveProfile prof = null;    						if (Core.Profiling) prof = PacketReceiveProfile.Acquire( packetID );    						if ( prof != null ) {  							prof.Start();  						}    						byte[] packetBuffer;    						if ( BufferSize >= packetLength )  							packetBuffer = m_Buffers.AcquireBuffer();  						else  							packetBuffer = new byte[packetLength];    						packetLength = buffer.Dequeue( packetBuffer' 0' packetLength );    						PacketReader r =  new PacketReader( packetBuffer' packetLength' handler.Length != 0 );    						handler.OnReceive( ns' r );  						length = buffer.Length;    						if ( BufferSize >= packetLength )  							m_Buffers.ReleaseBuffer( packetBuffer );    						if ( prof != null ) {  							prof.Finish( packetLength );  						}  					} else {  						break;  					}  				}  			}
Magic Number,Server.Network,MessagePump,C:\repos\runuo_runuo\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: lock ( buffer )  			{  				if ( !ns.Seeded ) {  					if (!HandleSeed(ns' buffer))  						return;  				}    				int length = buffer.Length;    				while ( length > 0 && ns.Running ) {  					int packetID = buffer.GetPacketID();    					if (CheckEncrypted(ns' packetID))  						break;    					PacketHandler handler = ns.GetHandler( packetID );    					if ( handler == null ) {  						byte[] data = new byte[length];  						length = buffer.Dequeue( data' 0' length );  						new PacketReader( data' length' false ).Trace( ns );  						break;  					}    					int packetLength = handler.Length;    					if ( packetLength <= 0 ) 	{  						if ( length >= 3 ) {  							packetLength = buffer.GetPacketLength();    							if ( packetLength < 3 ) {  								ns.Dispose();  								break;  							}  						} else {  							break;  						}  					}    					if ( length >= packetLength ) {  						if (handler.Ingame) {  							if (ns.Mobile == null ) {  								Console.WriteLine( "Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID );  								ns.Dispose();  								break;  							} else if (ns.Mobile.Deleted) {  								ns.Dispose();  								break;  							}  						}    						ThrottlePacketCallback throttler = handler.ThrottleCallback;    						if ( throttler != null && !throttler( ns ) ) {  							m_Throttled.Enqueue( ns );  							return;  						}    						PacketReceiveProfile prof = null;    						if (Core.Profiling) prof = PacketReceiveProfile.Acquire( packetID );    						if ( prof != null ) {  							prof.Start();  						}    						byte[] packetBuffer;    						if ( BufferSize >= packetLength )  							packetBuffer = m_Buffers.AcquireBuffer();  						else  							packetBuffer = new byte[packetLength];    						packetLength = buffer.Dequeue( packetBuffer' 0' packetLength );    						PacketReader r =  new PacketReader( packetBuffer' packetLength' handler.Length != 0 );    						handler.OnReceive( ns' r );  						length = buffer.Length;    						if ( BufferSize >= packetLength )  							m_Buffers.ReleaseBuffer( packetBuffer );    						if ( prof != null ) {  							prof.Finish( packetLength );  						}  					} else {  						break;  					}  				}  			}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,ValidateAllTrades,The following statement contains a magic number: for ( int i = m_Trades.Count - 1; i >= 0; --i ) {  				if ( i >= m_Trades.Count ) {  					continue;  				}    				SecureTrade trade = m_Trades[i];    				if ( trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange( trade.To.Mobile' 2 ) || trade.From.Mobile.Map != trade.To.Mobile.Map ) {  					trade.Cancel();  				}  			}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,LaunchBrowser,The following statement contains a magic number: Send( new MessageLocalized( Serial.MinusOne' -1' MessageType.Label' 0x35' 3' 501231' ""' "" ) );
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,LaunchBrowser,The following statement contains a magic number: Send( new MessageLocalized( Serial.MinusOne' -1' MessageType.Label' 0x35' 3' 501231' ""' "" ) );
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,NetState,The following statement contains a magic number: m_NextCheckActivity = Core.TickCount + 30000;
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,OnReceive,The following statement contains a magic number: try {  				int byteCount = s.EndReceive( asyncResult );    				if ( byteCount > 0 ) {  					m_NextCheckActivity = Core.TickCount + 90000;    					byte[] buffer = m_RecvBuffer;    					if ( m_Encoder != null )  						m_Encoder.DecodeIncomingPacket( this' ref buffer' ref byteCount );    					lock ( m_Buffer )  						m_Buffer.Enqueue( buffer' 0' byteCount );    					m_MessagePump.OnReceive( this );    					lock ( m_AsyncLock ) {  						m_AsyncState &= ~AsyncState.Pending;    						if ( ( m_AsyncState & AsyncState.Paused ) == 0 ) {  							try {  								InternalBeginReceive();  							} catch ( Exception ex ) {  								TraceException( ex );  								Dispose( false );  							}  						}  					}  				} else {  					Dispose( false );  				}  			} catch {  				Dispose( false );  			}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,OnSend,The following statement contains a magic number: try {  				int bytes = s.EndSend( asyncResult );    				if ( bytes <= 0 ) {  					Dispose( false );  					return;  				}    				m_NextCheckActivity = Core.TickCount + 90000;    				if (m_CoalesceSleep >= 0) {  					Thread.Sleep(m_CoalesceSleep);  				}    				SendQueue.Gram gram;    				lock (m_SendQueue) {  					gram = m_SendQueue.Dequeue();    					if (gram == null && m_SendQueue.IsFlushReady)  						gram = m_SendQueue.CheckFlushReady();  				}    				if (gram != null) {  					try {  						s.BeginSend(gram.Buffer' 0' gram.Length' SocketFlags.None' m_OnSend' s);  					} catch (Exception ex) {  						TraceException(ex);  						Dispose(false);  					}  				} else {  					lock (_sendL)  						_sending = false;  				}  			} catch ( Exception ){  				Dispose( false );  			}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,FlushAll,The following statement contains a magic number: if (m_Instances.Count >= 1024)  				Parallel.ForEach(m_Instances' ns => ns.Flush());  			else  				for ( int i = 0; i < m_Instances.Count; ++i ) {  					m_Instances[i].Flush();  				}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,Initialize,The following statement contains a magic number: Timer.DelayCall( TimeSpan.FromMinutes( 1.0 )' TimeSpan.FromMinutes( 1.5 )' new TimerCallback( CheckAllAlive ) );
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,CheckAllAlive,The following statement contains a magic number: try {  				long curTicks = Core.TickCount;    				if (m_Instances.Count >= 1024)  					Parallel.ForEach(m_Instances' ns => ns.CheckAlive(curTicks));  				else  					for ( int i = 0; i < m_Instances.Count; ++i ) {  						m_Instances[i].CheckAlive(curTicks);  					}  			} catch ( Exception ex ) {  				TraceException( ex );  			}
Magic Number,Server.Network,NetState,C:\repos\runuo_runuo\Server\Network\NetState.cs,ProcessDisposedQueue,The following statement contains a magic number: lock (m_Disposed) {  				int breakout = 0;    				while ( breakout < 200 && m_Disposed.Count > 0 ) {  					++breakout;  					NetState ns = m_Disposed.Dequeue();    					Mobile m = ns.m_Mobile;  					IAccount a = ns.m_Account;    					if ( m != null ) {  						m.NetState = null;  						ns.m_Mobile = null;  					}    					ns.m_Gumps.Clear();  					ns.m_Menus.Clear();  					ns.m_HuePickers.Clear();  					ns.m_Account = null;  					ns.m_ServerInfo = null;  					ns.m_CityInfo = null;    					m_Instances.Remove( ns );    					if ( a != null ) {  						ns.WriteConsole( "Disconnected. [{0} Online] [{1}]"' m_Instances.Count' a );  					} else {  						ns.WriteConsole( "Disconnected. [{0} Online]"' m_Instances.Count );  					}  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x00' 104' false' new OnPacketReceive( CreateCharacter ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x01'   5' false' new OnPacketReceive( Disconnect ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x02'   7'  true' new OnPacketReceive( MovementReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x04'   2'  true' new OnPacketReceive( GodModeRequest ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x05'   5'  true' new OnPacketReceive( AttackReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x06'   5'  true' new OnPacketReceive( UseReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x07'   7'  true' new OnPacketReceive( LiftReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x08'  14'  true' new OnPacketReceive( DropReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x09'   5'  true' new OnPacketReceive( LookReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x0A'  11'  true' new OnPacketReceive( Edit ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x13'  10'  true' new OnPacketReceive( EquipReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x14'   6'  true' new OnPacketReceive( ChangeZ ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x22'   3'  true' new OnPacketReceive( Resynchronize ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x2C'   2'  true' new OnPacketReceive( DeathStatusResponse ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x34'  10'  true' new OnPacketReceive( MobileQuery ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x47'  11'  true' new OnPacketReceive( NewTerrain ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x48'  73'  true' new OnPacketReceive( NewAnimData ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x58' 106'  true' new OnPacketReceive( NewRegion ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x5D'  73' false' new OnPacketReceive( PlayCharacter ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x61'   9'  true' new OnPacketReceive( DeleteStatic ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x6C'  19'  true' new OnPacketReceive( TargetResponse ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x72'   5'  true' new OnPacketReceive( SetWarMode ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x73'   2' false' new OnPacketReceive( PingReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x75'  35'  true' new OnPacketReceive( RenameRequest ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x79'   9'  true' new OnPacketReceive( ResourceQuery ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x7E'   2'  true' new OnPacketReceive( GodviewQuery ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x7D'  13'  true' new OnPacketReceive( MenuResponse ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x80'  62' false' new OnPacketReceive( AccountLogin ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x83'  39' false' new OnPacketReceive( DeleteCharacter ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x91'  65' false' new OnPacketReceive( GameLogin ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x95'   9'  true' new OnPacketReceive( HuePickerResponse ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x9B' 258'  true' new OnPacketReceive( HelpRequest ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0x9D'  51'  true' new OnPacketReceive( GMSingle ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xA0'   3' false' new OnPacketReceive( PlayServer ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xA4' 149' false' new OnPacketReceive( SystemInfo ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xA7'   4'  true' new OnPacketReceive( RequestScrollWindow ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xB5'  64'  true' new OnPacketReceive( ChatRequest ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xB6'   9'  true' new OnPacketReceive( ObjectHelpRequest ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xBB'   9' false' new OnPacketReceive( AccountID ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xC8'   2'  true' new OnPacketReceive( SetUpdateRange ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xC9'   6'  true' new OnPacketReceive( TripTime ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xCA'   6'  true' new OnPacketReceive( UTripTime ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xD1'   2'  true' new OnPacketReceive( LogoutReq ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xEF'  21' false' new OnPacketReceive( LoginServerSeed ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register( 0xF8' 106' false' new OnPacketReceive( CreateCharacter70160 ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register6017( 0x08' 15' true' new OnPacketReceive( DropReq6017 ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SecureTrade,The following statement contains a magic number: switch ( pvSrc.ReadByte() )  			{  				case 1: // Cancel  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null && cont.Trade != null && (cont.Trade.From.Mobile == state.Mobile || cont.Trade.To.Mobile == state.Mobile) )  						cont.Trade.Cancel();    					break;  				}  				case 2: // Check  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null )  					{  						SecureTrade trade = cont.Trade;    						bool value = ( pvSrc.ReadInt32() != 0 );    						if ( trade != null && trade.From.Mobile == state.Mobile )  						{  							trade.From.Accepted = value;  							trade.Update();  						}  						else if ( trade != null && trade.To.Mobile == state.Mobile )  						{  							trade.To.Accepted = value;  							trade.Update();  						}  					}    					break;  				}  				case 3: // Update Gold  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem(serial) as SecureTradeContainer;    					if (cont != null)  					{  						int gold = pvSrc.ReadInt32();  						int plat = pvSrc.ReadInt32();    						SecureTrade trade = cont.Trade;    						if (trade != null)  						{  							if (trade.From.Mobile == state.Mobile)  							{  								trade.From.Gold = gold;  								trade.From.Plat = plat;  								trade.UpdateFromCurrency();  							}  							else if (trade.To.Mobile == state.Mobile)  							{  								trade.To.Gold = gold;  								trade.To.Plat = plat;  								trade.UpdateToCurrency();  							}  						}  					}  				}  				break;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SecureTrade,The following statement contains a magic number: switch ( pvSrc.ReadByte() )  			{  				case 1: // Cancel  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null && cont.Trade != null && (cont.Trade.From.Mobile == state.Mobile || cont.Trade.To.Mobile == state.Mobile) )  						cont.Trade.Cancel();    					break;  				}  				case 2: // Check  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null )  					{  						SecureTrade trade = cont.Trade;    						bool value = ( pvSrc.ReadInt32() != 0 );    						if ( trade != null && trade.From.Mobile == state.Mobile )  						{  							trade.From.Accepted = value;  							trade.Update();  						}  						else if ( trade != null && trade.To.Mobile == state.Mobile )  						{  							trade.To.Accepted = value;  							trade.Update();  						}  					}    					break;  				}  				case 3: // Update Gold  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem(serial) as SecureTradeContainer;    					if (cont != null)  					{  						int gold = pvSrc.ReadInt32();  						int plat = pvSrc.ReadInt32();    						SecureTrade trade = cont.Trade;    						if (trade != null)  						{  							if (trade.From.Mobile == state.Mobile)  							{  								trade.From.Gold = gold;  								trade.From.Plat = plat;  								trade.UpdateFromCurrency();  							}  							else if (trade.To.Mobile == state.Mobile)  							{  								trade.To.Gold = gold;  								trade.To.Plat = plat;  								trade.UpdateToCurrency();  							}  						}  					}  				}  				break;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( vendor == null )  			{  				return;  			}  			else if ( vendor.Deleted || !Utility.RangeCheck( vendor.Location' state.Mobile.Location' 10 ) )  			{  				state.Send( new EndVendorBuy( vendor ) );  				return;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ( flag == 0x02 )  			{  				msgSize -= 1+2+4+1;    				if ( (msgSize / 7) > 100 )  					return;    				List<BuyItemResponse> buyList = new List<BuyItemResponse>( msgSize / 7 );  				for ( ;msgSize>0;msgSize-=7)  				{  					byte layer = pvSrc.ReadByte();  					Serial serial = pvSrc.ReadInt32();  					int amount = pvSrc.ReadInt16();  				  					buyList.Add( new BuyItemResponse( serial' amount ) );  				}    				if ( buyList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnBuyItems( state.Mobile' buyList ) )  						state.Send( new EndVendorBuy( vendor ) );  				}  			}  			else  			{  				state.Send( new EndVendorBuy( vendor ) );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( vendor == null )  			{  				return;  			}  			else if ( vendor.Deleted || !Utility.RangeCheck( vendor.Location' state.Mobile.Location' 10 ) )  			{  				state.Send( new EndVendorSell( vendor ) );  				return;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( count < 100 && pvSrc.Size == (1+2+4+2+(count*6)) )  			{  				List<SellItemResponse> sellList = new List<SellItemResponse>( count );    				for (int i=0;i<count;i++)  				{  					Item item = World.FindItem( pvSrc.ReadInt32() );  					int Amount = pvSrc.ReadInt16();    					if ( item != null && Amount > 0 )  						sellList.Add(  new SellItemResponse( item' Amount ) );  				}    				if ( sellList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnSellItems( state.Mobile' sellList ) )  						state.Send( new EndVendorSell( vendor ) );  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( count < 100 && pvSrc.Size == (1+2+4+2+(count*6)) )  			{  				List<SellItemResponse> sellList = new List<SellItemResponse>( count );    				for (int i=0;i<count;i++)  				{  					Item item = World.FindItem( pvSrc.ReadInt32() );  					int Amount = pvSrc.ReadInt16();    					if ( item != null && Amount > 0 )  						sellList.Add(  new SellItemResponse( item' Amount ) );  				}    				if ( sellList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnSellItems( state.Mobile' sellList ) )  						state.Send( new EndVendorSell( vendor ) );  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( count < 100 && pvSrc.Size == (1+2+4+2+(count*6)) )  			{  				List<SellItemResponse> sellList = new List<SellItemResponse>( count );    				for (int i=0;i<count;i++)  				{  					Item item = World.FindItem( pvSrc.ReadInt32() );  					int Amount = pvSrc.ReadInt16();    					if ( item != null && Amount > 0 )  						sellList.Add(  new SellItemResponse( item' Amount ) );  				}    				if ( sellList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnSellItems( state.Mobile' sellList ) )  						state.Send( new EndVendorSell( vendor ) );  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( count < 100 && pvSrc.Size == (1+2+4+2+(count*6)) )  			{  				List<SellItemResponse> sellList = new List<SellItemResponse>( count );    				for (int i=0;i<count;i++)  				{  					Item item = World.FindItem( pvSrc.ReadInt32() );  					int Amount = pvSrc.ReadInt16();    					if ( item != null && Amount > 0 )  						sellList.Add(  new SellItemResponse( item' Amount ) );  				}    				if ( sellList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnSellItems( state.Mobile' sellList ) )  						state.Send( new EndVendorSell( vendor ) );  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if ( count < 100 && pvSrc.Size == (1+2+4+2+(count*6)) )  			{  				List<SellItemResponse> sellList = new List<SellItemResponse>( count );    				for (int i=0;i<count;i++)  				{  					Item item = World.FindItem( pvSrc.ReadInt32() );  					int Amount = pvSrc.ReadInt16();    					if ( item != null && Amount > 0 )  						sellList.Add(  new SellItemResponse( item' Amount ) );  				}    				if ( sellList.Count > 0 )  				{  					IVendor v = vendor as IVendor;    					if ( v != null && v.OnSellItems( state.Mobile' sellList ) )  						state.Send( new EndVendorSell( vendor ) );  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,DeleteCharacter,The following statement contains a magic number: pvSrc.Seek( 30' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The following statement contains a magic number: string lang = pvSrc.ReadString( 3 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SystemInfo,The following statement contains a magic number: string s1 = pvSrc.ReadString( 32 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SystemInfo,The following statement contains a magic number: string s2 = pvSrc.ReadString( 32 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SystemInfo,The following statement contains a magic number: string s3 = pvSrc.ReadString( 32 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SystemInfo,The following statement contains a magic number: string s4 = pvSrc.ReadString( 32 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,NewRegion,The following statement contains a magic number: if ( VerifyGC( state ) )  			{  				string name = pvSrc.ReadString( 40 );  				int unk = pvSrc.ReadInt32();  				int x = pvSrc.ReadInt16();  				int y = pvSrc.ReadInt16();  				int width = pvSrc.ReadInt16();  				int height = pvSrc.ReadInt16();  				int zStart = pvSrc.ReadInt16();  				int zEnd = pvSrc.ReadInt16();  				string desc = pvSrc.ReadString( 40 );  				int soundFX = pvSrc.ReadInt16();  				int music = pvSrc.ReadInt16();  				int nightFX = pvSrc.ReadInt16();  				int dungeon = pvSrc.ReadByte();  				int light = pvSrc.ReadInt16();    				Console.WriteLine( "God Client: {0}: New Region '{1}' ('{2}')"' state' name' desc );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,NewRegion,The following statement contains a magic number: if ( VerifyGC( state ) )  			{  				string name = pvSrc.ReadString( 40 );  				int unk = pvSrc.ReadInt32();  				int x = pvSrc.ReadInt16();  				int y = pvSrc.ReadInt16();  				int width = pvSrc.ReadInt16();  				int height = pvSrc.ReadInt16();  				int zStart = pvSrc.ReadInt16();  				int zEnd = pvSrc.ReadInt16();  				string desc = pvSrc.ReadString( 40 );  				int soundFX = pvSrc.ReadInt16();  				int music = pvSrc.ReadInt16();  				int nightFX = pvSrc.ReadInt16();  				int dungeon = pvSrc.ReadByte();  				int light = pvSrc.ReadInt16();    				Console.WriteLine( "God Client: {0}: New Region '{1}' ('{2}')"' state' name' desc );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: switch ( type )  			{  				case 0x00: // Go  				{  					if ( VerifyGC( state ) )  					{  						try  						{  							string[] split = command.Split( ' ' );    							int x = Utility.ToInt32( split[0] );  							int y = Utility.ToInt32( split[1] );    							int z;    							if ( split.Length >= 3 )  								z = Utility.ToInt32( split[2] );  							else if ( m.Map != null )  								z = m.Map.GetAverageZ( x' y );  							else  								z = 0;    							m.Location = new Point3D( x' y' z );  						}  						catch  						{  						}  					}    					break;  				}  				case 0xC7: // Animate  				{  					EventSink.InvokeAnimateRequest( new AnimateRequestEventArgs( m' command ) );    					break;  				}  				case 0x24: // Use skill  				{  					int skillIndex;    					if ( !int.TryParse( command.Split( ' ' )[0]' out skillIndex ) )  						break;    					Skills.UseSkill( m' skillIndex );    					break;  				}  				case 0x43: // Open spellbook  				{  					int booktype;    					if ( !int.TryParse( command' out booktype ) )  						booktype = 1;    					EventSink.InvokeOpenSpellbookRequest( new OpenSpellbookRequestEventArgs( m' booktype ) );    					break;  				}  				case 0x27: // Cast spell from book  				{  					string[] split = command.Split( ' ' );    					if ( split.Length > 0 )  					{  						int spellID = Utility.ToInt32( split[0] ) - 1;  						int serial = split.Length > 1 ? Utility.ToInt32( split[1] ) : -1;    						EventSink.InvokeCastSpellRequest( new CastSpellRequestEventArgs( m' spellID' World.FindItem( serial ) ) );  					}    					break;  				}  				case 0x58: // Open door  				{  					EventSink.InvokeOpenDoorMacroUsed( new OpenDoorMacroEventArgs( m ) );    					break;  				}  				case 0x56: // Cast spell from macro  				{  					int spellID = Utility.ToInt32( command ) - 1;    					EventSink.InvokeCastSpellRequest( new CastSpellRequestEventArgs( m' spellID' null ) );    					break;  				}  				case 0xF4: // Invoke virtues from macro  				{  					int virtueID = Utility.ToInt32( command ) - 1;    					EventSink.InvokeVirtueMacroRequest( new VirtueMacroRequestEventArgs( m' virtueID ) );    					break;  				}  				case 0x2F: // Old scroll double click  				{  					/*  					 * This command is still sent for items 0xEF3 - 0xEF9  					 *  					 * Command is one of three' depending on the item ID of the scroll:  					 * - [scroll serial]  					 * - [scroll serial] [target serial]  					 * - [scroll serial] [x] [y] [z]  					 */  					break;  				}  				default:  				{  					Console.WriteLine( "Client: {0}: Unknown text-command type 0x{1:X2}: {2}"' state' type' command );  					break;  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: switch ( type )  			{  				case 0x00: // Go  				{  					if ( VerifyGC( state ) )  					{  						try  						{  							string[] split = command.Split( ' ' );    							int x = Utility.ToInt32( split[0] );  							int y = Utility.ToInt32( split[1] );    							int z;    							if ( split.Length >= 3 )  								z = Utility.ToInt32( split[2] );  							else if ( m.Map != null )  								z = m.Map.GetAverageZ( x' y );  							else  								z = 0;    							m.Location = new Point3D( x' y' z );  						}  						catch  						{  						}  					}    					break;  				}  				case 0xC7: // Animate  				{  					EventSink.InvokeAnimateRequest( new AnimateRequestEventArgs( m' command ) );    					break;  				}  				case 0x24: // Use skill  				{  					int skillIndex;    					if ( !int.TryParse( command.Split( ' ' )[0]' out skillIndex ) )  						break;    					Skills.UseSkill( m' skillIndex );    					break;  				}  				case 0x43: // Open spellbook  				{  					int booktype;    					if ( !int.TryParse( command' out booktype ) )  						booktype = 1;    					EventSink.InvokeOpenSpellbookRequest( new OpenSpellbookRequestEventArgs( m' booktype ) );    					break;  				}  				case 0x27: // Cast spell from book  				{  					string[] split = command.Split( ' ' );    					if ( split.Length > 0 )  					{  						int spellID = Utility.ToInt32( split[0] ) - 1;  						int serial = split.Length > 1 ? Utility.ToInt32( split[1] ) : -1;    						EventSink.InvokeCastSpellRequest( new CastSpellRequestEventArgs( m' spellID' World.FindItem( serial ) ) );  					}    					break;  				}  				case 0x58: // Open door  				{  					EventSink.InvokeOpenDoorMacroUsed( new OpenDoorMacroEventArgs( m ) );    					break;  				}  				case 0x56: // Cast spell from macro  				{  					int spellID = Utility.ToInt32( command ) - 1;    					EventSink.InvokeCastSpellRequest( new CastSpellRequestEventArgs( m' spellID' null ) );    					break;  				}  				case 0xF4: // Invoke virtues from macro  				{  					int virtueID = Utility.ToInt32( command ) - 1;    					EventSink.InvokeVirtueMacroRequest( new VirtueMacroRequestEventArgs( m' virtueID ) );    					break;  				}  				case 0x2F: // Old scroll double click  				{  					/*  					 * This command is still sent for items 0xEF3 - 0xEF9  					 *  					 * Command is one of three' depending on the item ID of the scroll:  					 * - [scroll serial]  					 * - [scroll serial] [target serial]  					 * - [scroll serial] [x] [y] [z]  					 */  					break;  				}  				default:  				{  					Console.WriteLine( "Client: {0}: Unknown text-command type 0x{1:X2}: {2}"' state' type' command );  					break;  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,AsciiPromptResponse,The following statement contains a magic number: if ( text.Length > 128 )  				return;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodePromptResponse,The following statement contains a magic number: string lang = pvSrc.ReadString( 4 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodePromptResponse,The following statement contains a magic number: if ( text.Length > 128 )  				return;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ProfileReq,The following statement contains a magic number: switch ( type )  			{  				case 0x00: // display request  				{  					EventSink.InvokeProfileRequest( new ProfileRequestEventArgs( beholder' beheld ) );    					break;  				}  				case 0x01: // edit request  				{  					pvSrc.ReadInt16(); // Skip  					int length = pvSrc.ReadUInt16();    					if ( length > 511 )  						return;    					string text = pvSrc.ReadUnicodeString( length );    					EventSink.InvokeChangeProfileRequest( new ChangeProfileRequestEventArgs( beholder' beheld' text ) );    					break;  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,EquipReq,The following statement contains a magic number: pvSrc.Seek( 5' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: foreach ( Gump gump in state.Gumps ) {  				if ( gump.Serial == serial && gump.TypeID == typeID ) {  					var buttonExists = buttonID == 0; // 0 is always 'close'    					if (!buttonExists)  					{  						foreach (var e in gump.Entries)  						{  							if (e is GumpButton && ((GumpButton)e).ButtonID == buttonID)  							{  								buttonExists = true;  								break;  							}    							if (e is GumpImageTileButton && ((GumpImageTileButton)e).ButtonID == buttonID)  							{  								buttonExists = true;  								break;  							}  						}  					}    					if (!buttonExists)  					{  						state.WriteConsole("Invalid gump response' disconnecting...");  						state.Dispose();  						return;  					}    					int switchCount = pvSrc.ReadInt32();    					if ( switchCount < 0 || switchCount > gump.m_Switches ) {  						state.WriteConsole( "Invalid gump response' disconnecting..." );  						state.Dispose();  						return;  					}    					int[] switches = new int[switchCount];    					for ( int j = 0; j < switches.Length; ++j )  						switches[j] = pvSrc.ReadInt32();    					int textCount = pvSrc.ReadInt32();    					if ( textCount < 0 || textCount > gump.m_TextEntries ) {  						state.WriteConsole( "Invalid gump response' disconnecting..." );  						state.Dispose();  						return;  					}    					TextRelay[] textEntries = new TextRelay[textCount];    					for ( int j = 0; j < textEntries.Length; ++j ) {  						int entryID = pvSrc.ReadUInt16();  						int textLength = pvSrc.ReadUInt16();    						if ( textLength > 239 ) {  							state.WriteConsole( "Invalid gump response' disconnecting..." );  							state.Dispose();  							return;  						}    						string text = pvSrc.ReadUnicodeStringSafe( textLength );  						textEntries[j] = new TextRelay( entryID' text );  					}    					state.RemoveGump( gump );    					GumpProfile prof = GumpProfile.Acquire( gump.GetType() );    					if ( prof != null ) {  						prof.Start();  					}    					gump.OnResponse( state' new RelayInfo( buttonID' switches' textEntries ) );    					if ( prof != null ) {  						prof.Finish();  					}    					return;  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: if ( typeID == 461 ) { // Virtue gump  				int switchCount = pvSrc.ReadInt32();    				if ( buttonID == 1 && switchCount > 0 ) {  					Mobile beheld = World.FindMobile( pvSrc.ReadInt32() );    					if ( beheld != null ) {  						EventSink.InvokeVirtueGumpRequest( new VirtueGumpRequestEventArgs( state.Mobile' beheld ) );  					}  				} else {  					Mobile beheld = World.FindMobile( serial );    					if ( beheld != null ) {  						EventSink.InvokeVirtueItemRequest( new VirtueItemRequestEventArgs( state.Mobile' beheld' buttonID ) );  					}  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,AsciiSpeech,The following statement contains a magic number: if ( text.Length <= 0 || text.Length > 128 )  				return;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: string lang = pvSrc.ReadString( 4 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ( isEncoded )  			{  				int value = pvSrc.ReadInt16();  				int count = (value & 0xFFF0) >> 4;  				int hold = value & 0xF;    				if ( count < 0 || count > 50 )  					return;    				KeywordList keyList = m_KeywordList;    				for ( int i = 0; i < count; ++i )  				{  					int speechID;    					if ( (i & 1) == 0 )  					{  						hold <<= 8;  						hold |= pvSrc.ReadByte();  						speechID = hold;  						hold = 0;  					}  					else  					{  						value = pvSrc.ReadInt16();  						speechID = (value & 0xFFF0) >> 4;  						hold = value & 0xF;  					}    					if ( !keyList.Contains( speechID ) )  						keyList.Add( speechID );  				}    				text = pvSrc.ReadUTF8StringSafe();    				keywords = keyList.ToArray();  			}  			else  			{  				text = pvSrc.ReadUnicodeStringSafe();    				keywords = m_EmptyInts;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ( isEncoded )  			{  				int value = pvSrc.ReadInt16();  				int count = (value & 0xFFF0) >> 4;  				int hold = value & 0xF;    				if ( count < 0 || count > 50 )  					return;    				KeywordList keyList = m_KeywordList;    				for ( int i = 0; i < count; ++i )  				{  					int speechID;    					if ( (i & 1) == 0 )  					{  						hold <<= 8;  						hold |= pvSrc.ReadByte();  						speechID = hold;  						hold = 0;  					}  					else  					{  						value = pvSrc.ReadInt16();  						speechID = (value & 0xFFF0) >> 4;  						hold = value & 0xF;  					}    					if ( !keyList.Contains( speechID ) )  						keyList.Add( speechID );  				}    				text = pvSrc.ReadUTF8StringSafe();    				keywords = keyList.ToArray();  			}  			else  			{  				text = pvSrc.ReadUnicodeStringSafe();    				keywords = m_EmptyInts;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ( isEncoded )  			{  				int value = pvSrc.ReadInt16();  				int count = (value & 0xFFF0) >> 4;  				int hold = value & 0xF;    				if ( count < 0 || count > 50 )  					return;    				KeywordList keyList = m_KeywordList;    				for ( int i = 0; i < count; ++i )  				{  					int speechID;    					if ( (i & 1) == 0 )  					{  						hold <<= 8;  						hold |= pvSrc.ReadByte();  						speechID = hold;  						hold = 0;  					}  					else  					{  						value = pvSrc.ReadInt16();  						speechID = (value & 0xFFF0) >> 4;  						hold = value & 0xF;  					}    					if ( !keyList.Contains( speechID ) )  						keyList.Add( speechID );  				}    				text = pvSrc.ReadUTF8StringSafe();    				keywords = keyList.ToArray();  			}  			else  			{  				text = pvSrc.ReadUnicodeStringSafe();    				keywords = m_EmptyInts;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ( isEncoded )  			{  				int value = pvSrc.ReadInt16();  				int count = (value & 0xFFF0) >> 4;  				int hold = value & 0xF;    				if ( count < 0 || count > 50 )  					return;    				KeywordList keyList = m_KeywordList;    				for ( int i = 0; i < count; ++i )  				{  					int speechID;    					if ( (i & 1) == 0 )  					{  						hold <<= 8;  						hold |= pvSrc.ReadByte();  						speechID = hold;  						hold = 0;  					}  					else  					{  						value = pvSrc.ReadInt16();  						speechID = (value & 0xFFF0) >> 4;  						hold = value & 0xF;  					}    					if ( !keyList.Contains( speechID ) )  						keyList.Add( speechID );  				}    				text = pvSrc.ReadUTF8StringSafe();    				keywords = keyList.ToArray();  			}  			else  			{  				text = pvSrc.ReadUnicodeStringSafe();    				keywords = m_EmptyInts;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ( text.Length <= 0 || text.Length > 128 )  				return;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SetUpdateRange,The following statement contains a magic number: state.Send( ChangeUpdateRange.Instantiate( 18 ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,MovementReq,The following statement contains a magic number: if ( (state.Sequence == 0 && seq != 0) || !m.Move( dir ) )  			{  				state.Send( new MovementRej( seq' m ) );  				state.Sequence = 0;    				m.ClearFastwalkStack();  			}  			else  			{  				++seq;    				if ( seq == 256 )  					seq = 1;    				state.Sequence = seq;  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,Animate,The following statement contains a magic number: if ( from != null && ok && from.Alive && from.Body.IsHuman && !from.Mounted )  				from.Animate( action' 7' 1' true' false' 0 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,BatchQueryProperties,The following statement contains a magic number: int length = pvSrc.Size-3;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,BatchQueryProperties,The following statement contains a magic number: if ( length < 0 || (length%4) != 0 )  				return;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,BatchQueryProperties,The following statement contains a magic number: int count = length/4;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,StatLockChange,The following statement contains a magic number: if ( lockValue > 2 ) lockValue = 0;
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,StatLockChange,The following statement contains a magic number: if ( m != null )  			{  				switch ( stat )  				{  					case 0: m.StrLock = (StatLockType)lockValue; break;  					case 1: m.DexLock = (StatLockType)lockValue; break;  					case 2: m.IntLock = (StatLockType)lockValue; break;  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if ( from != null )  			{  				ContextMenu menu = from.ContextMenu;    				from.ContextMenu = null;    				if ( menu != null && from != null && from == menu.From )  				{  					IEntity entity = World.FindEntity( pvSrc.ReadInt32() );    					if ( entity != null && entity == menu.Target && from.CanSee( entity ) )  					{  						Point3D p;    						if ( entity is Mobile )  							p = entity.Location;  						else if ( entity is Item )  							p = ((Item)entity).GetWorldLocation();  						else  							return;    						int index = pvSrc.ReadUInt16();    						if ( index >= 0 && index < menu.Entries.Length )  						{  							ContextMenuEntry e = menu.Entries[index];    							int range = e.Range;    							if ( range == -1 )  								range = 18;    							if ( e.Enabled && from.InRange( p' range ) )  								e.OnClick();  						}  					}  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,Language,The following statement contains a magic number: string lang = pvSrc.ReadString( 4 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: string name = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: pvSrc.Seek( 2' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if ( FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null )  			{  				bool authOK = false;    				ulong razorFeatures = (((ulong)pvSrc.ReadUInt32())<<32) | ((ulong)pvSrc.ReadUInt32());    				if ( razorFeatures == (ulong)FeatureProtection.DisabledFeatures )  				{  					bool match = true;  					for ( int i=0; match && i < m_ThirdPartyAuthKey.Length; i++ )  						match = match && pvSrc.ReadByte() == m_ThirdPartyAuthKey[i];  						  					if ( match )  						authOK = true;  				}                  else                  {                      pvSrc.Seek( 16' SeekOrigin.Current );                  }    				ThirdPartyAuthCallback( state' authOK );  			}  			else  			{  				pvSrc.Seek( 24' SeekOrigin.Current );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if ( FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null )  			{  				bool authOK = false;    				ulong razorFeatures = (((ulong)pvSrc.ReadUInt32())<<32) | ((ulong)pvSrc.ReadUInt32());    				if ( razorFeatures == (ulong)FeatureProtection.DisabledFeatures )  				{  					bool match = true;  					for ( int i=0; match && i < m_ThirdPartyAuthKey.Length; i++ )  						match = match && pvSrc.ReadByte() == m_ThirdPartyAuthKey[i];  						  					if ( match )  						authOK = true;  				}                  else                  {                      pvSrc.Seek( 16' SeekOrigin.Current );                  }    				ThirdPartyAuthCallback( state' authOK );  			}  			else  			{  				pvSrc.Seek( 24' SeekOrigin.Current );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if ( FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null )  			{  				bool authOK = false;    				ulong razorFeatures = (((ulong)pvSrc.ReadUInt32())<<32) | ((ulong)pvSrc.ReadUInt32());    				if ( razorFeatures == (ulong)FeatureProtection.DisabledFeatures )  				{  					bool match = true;  					for ( int i=0; match && i < m_ThirdPartyAuthKey.Length; i++ )  						match = match && pvSrc.ReadByte() == m_ThirdPartyAuthKey[i];  						  					if ( match )  						authOK = true;  				}                  else                  {                      pvSrc.Seek( 16' SeekOrigin.Current );                  }    				ThirdPartyAuthCallback( state' authOK );  			}  			else  			{  				pvSrc.Seek( 24' SeekOrigin.Current );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if ( ThirdPartyHackedCallback != null )  			{  				pvSrc.Seek( -2' SeekOrigin.Current );  				if ( pvSrc.ReadUInt16() == 0xDEAD )  					ThirdPartyHackedCallback( state' true );  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: string name = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek( 2' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek( 8' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek( 15' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: bool female = ((genderRace % 2) != 0);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if ( state.StygianAbyss ) {  				byte raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  				race = Race.Races[raceID];  			} else {  				race = Race.Races[(byte)(genderRace / 2)];  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if ( state.StygianAbyss ) {  				byte raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  				race = Race.Races[raceID];  			} else {  				race = Race.Races[(byte)(genderRace / 2)];  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if ( state.StygianAbyss ) {  				byte raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  				race = Race.Races[raceID];  			} else {  				race = Race.Races[(byte)(genderRace / 2)];  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if ( info == null || a == null || cityIndex < 0 || cityIndex >= info.Length )  			{  				state.Dispose();  			}  			else  			{  				// Check if anyone is using this account  				for ( int i = 0; i < a.Length; ++i )  				{  					Mobile check = a[i];    					if ( check != null && check.Map != Map.Internal )  					{  						Console.WriteLine( "Login: {0}: Account in use"' state );  						state.Send( new PopupMessage( PMMessage.CharInWorld ) );  						return;  					}  				}    				state.Flags = (ClientFlags)flags;    				CharacterCreatedEventArgs args = new CharacterCreatedEventArgs(  					state' a'  					name' female' hue'  					str' dex' intl'  					info[cityIndex]'  					new SkillNameValue[3]  					{  						new SkillNameValue( (SkillName)is1' vs1 )'  						new SkillNameValue( (SkillName)is2' vs2 )'  						new SkillNameValue( (SkillName)is3' vs3 )'  					}'  					shirtHue' pantsHue'  					hairVal' hairHue'  					hairValf' hairHuef'  					prof'  					race  					);    				state.Send( new ClientVersionReq() );    				state.BlockAllPackets = true;    				EventSink.InvokeCharacterCreated( args );    				Mobile m = args.Mobile;    				if ( m != null )  				{  					state.Mobile = m;  					m.NetState = state;  					new LoginTimer( state' m ).Start();  				}  				else  				{  					state.BlockAllPackets = false;  					state.Dispose();  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: string name = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek( 2' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek( 8' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek( 15' SeekOrigin.Current );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: bool female = ((genderRace % 2) != 0);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: byte raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: byte raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: if ( info == null || a == null || cityIndex < 0 || cityIndex >= info.Length )  			{  				state.Dispose();  			}  			else  			{  				// Check if anyone is using this account  				for ( int i = 0; i < a.Length; ++i )  				{  					Mobile check = a[i];    					if ( check != null && check.Map != Map.Internal )  					{  						Console.WriteLine( "Login: {0}: Account in use"' state );  						state.Send( new PopupMessage( PMMessage.CharInWorld ) );  						return;  					}  				}    				state.Flags = (ClientFlags)flags;    				CharacterCreatedEventArgs args = new CharacterCreatedEventArgs(  					state' a'  					name' female' hue'  					str' dex' intl'  					info[cityIndex]'  					new SkillNameValue[4]  					{  						new SkillNameValue( (SkillName)is1' vs1 )'  						new SkillNameValue( (SkillName)is2' vs2 )'  						new SkillNameValue( (SkillName)is3' vs3 )'  						new SkillNameValue( (SkillName)is4' vs4 )'  					}'  					shirtHue' pantsHue'  					hairVal' hairHue'  					hairValf' hairHuef'  					prof'  					race  					);    				state.Send( new ClientVersionReq() );    				state.BlockAllPackets = true;    				EventSink.InvokeCharacterCreated( args );    				Mobile m = args.Mobile;    				if ( m != null )  				{  					state.Mobile = m;  					m.NetState = state;  					new LoginTimer( state' m ).Start();  				}  				else  				{  					state.BlockAllPackets = false;  					state.Dispose();  				}  			}
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,GenerateAuthID,The following statement contains a magic number: do {  				authID = Utility.Random( 1' int.MaxValue - 1 );    				if ( Utility.RandomBool() )  					authID |= 1<<31;  			} while ( m_AuthIDWindow.ContainsKey( authID ) );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,GameLogin,The following statement contains a magic number: string username = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,GameLogin,The following statement contains a magic number: string password = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CrashReport,The following statement contains a magic number: string account = pvSrc.ReadString(32);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CrashReport,The following statement contains a magic number: string character = pvSrc.ReadString(32);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CrashReport,The following statement contains a magic number: string ip = pvSrc.ReadString(15);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CrashReport,The following statement contains a magic number: string process = pvSrc.ReadString(100);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,CrashReport,The following statement contains a magic number: string report = pvSrc.ReadString(100);
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,AccountLogin,The following statement contains a magic number: string username = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,AccountLogin,The following statement contains a magic number: string password = pvSrc.ReadString( 30 );
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,PacketReader,The following statement contains a magic number: m_Index = fixedSize ? 1 : 3;
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( (m_Index + 4) > m_Size )  				return 0;
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data[m_Index++] << 24)  				 | (m_Data[m_Index++] << 16)  				 | (m_Data[m_Index++] <<  8)  				 |  m_Data[m_Index++];
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data[m_Index++] << 24)  				 | (m_Data[m_Index++] << 16)  				 | (m_Data[m_Index++] <<  8)  				 |  m_Data[m_Index++];
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data[m_Index++] << 24)  				 | (m_Data[m_Index++] << 16)  				 | (m_Data[m_Index++] <<  8)  				 |  m_Data[m_Index++];
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt16,The following statement contains a magic number: if ( (m_Index + 2) > m_Size )  				return 0;
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadInt16,The following statement contains a magic number: return (short)((m_Data[m_Index++] << 8) | m_Data[m_Index++]);
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( (m_Index + 4) > m_Size )  				return 0;
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data[m_Index++] << 24) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 8) | m_Data[m_Index++]);
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data[m_Index++] << 24) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 8) | m_Data[m_Index++]);
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data[m_Index++] << 24) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 8) | m_Data[m_Index++]);
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt16,The following statement contains a magic number: if ( (m_Index + 2) > m_Size )  				return 0;
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)((m_Data[m_Index++] << 8) | m_Data[m_Index++]);
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeStringLE,The following statement contains a magic number: while ( (m_Index + 1) < m_Size && (c = (m_Data[m_Index++] | (m_Data[m_Index++] << 8))) != 0 )  				sb.Append( (char)c );
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeStringLESafe,The following statement contains a magic number: while ( (m_Index + 1) < bound && (c = (m_Data[m_Index++] | (m_Data[m_Index++] << 8))) != 0 )  			{  				if ( IsSafeChar( c ) )  					sb.Append( (char)c );  			}
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeStringLESafe,The following statement contains a magic number: while ( (m_Index + 1) < m_Size && (c = (m_Data[m_Index++] | (m_Data[m_Index++] << 8))) != 0 )  			{  				if ( IsSafeChar( c ) )  					sb.Append( (char)c );  			}
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: while ( (m_Index + 1) < m_Size && (c = ((m_Data[m_Index++] << 8) | m_Data[m_Index++])) != 0 )  			{  				if ( IsSafeChar( c ) )  					sb.Append( (char)c );  			}
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeString,The following statement contains a magic number: while ( (m_Index + 1) < m_Size && (c = ((m_Data[m_Index++] << 8) | m_Data[m_Index++])) != 0 )  				sb.Append( (char)c );
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: while ( (m_Index + 1) < bound && (c = ((m_Data[m_Index++] << 8) | m_Data[m_Index++])) != 0 )  			{  				if ( IsSafeChar( c ) )  					sb.Append( (char)c );  			}
Magic Number,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,ReadUnicodeString,The following statement contains a magic number: while ( (m_Index + 1) < bound && (c = ((m_Data[m_Index++] << 8) | m_Data[m_Index++])) != 0 )  				sb.Append( (char)c );
Magic Number,Server.Network,DamagePacketOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: EnsureCapacity( 11 );
Magic Number,Server.Network,DamagePacketOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: if ( amount > 255 )  				amount = 255;  			else if ( amount < 0 )  				amount = 0;
Magic Number,Server.Network,DamagePacketOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: if ( amount > 255 )  				amount = 255;  			else if ( amount < 0 )  				amount = 0;
Magic Number,Server.Network,DisplaySecureTrade,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplaySecureTrade,The following statement contains a magic number: EnsureCapacity(18 + name.Length);
Magic Number,Server.Network,DisplaySecureTrade,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplaySecureTrade,The following statement contains a magic number: m_Stream.WriteAsciiFixed(name' 30);
Magic Number,Server.Network,CloseSecureTrade,C:\repos\runuo_runuo\Server\Network\Packets.cs,CloseSecureTrade,The following statement contains a magic number: EnsureCapacity(8);
Magic Number,Server.Network,UpdateSecureTrade,C:\repos\runuo_runuo\Server\Network\Packets.cs,UpdateSecureTrade,The following statement contains a magic number: EnsureCapacity(17);
Magic Number,Server.Network,MapPatches,C:\repos\runuo_runuo\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity( 9 + (3 * 8) );
Magic Number,Server.Network,MapPatches,C:\repos\runuo_runuo\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity( 9 + (3 * 8) );
Magic Number,Server.Network,MapPatches,C:\repos\runuo_runuo\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity( 9 + (3 * 8) );
Magic Number,Server.Network,MapPatches,C:\repos\runuo_runuo\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: m_Stream.Write( (int) 4 );
Magic Number,Server.Network,ObjectHelpResponse,C:\repos\runuo_runuo\Server\Network\Packets.cs,ObjectHelpResponse,The following statement contains a magic number: this.EnsureCapacity( 9 + (text.Length * 2) );
Magic Number,Server.Network,ObjectHelpResponse,C:\repos\runuo_runuo\Server\Network\Packets.cs,ObjectHelpResponse,The following statement contains a magic number: this.EnsureCapacity( 9 + (text.Length * 2) );
Magic Number,Server.Network,VendorBuyContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorBuyContent,The following statement contains a magic number: this.EnsureCapacity( list.Count*19 + 5 );
Magic Number,Server.Network,VendorBuyContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorBuyContent,The following statement contains a magic number: this.EnsureCapacity( list.Count*19 + 5 );
Magic Number,Server.Network,VendorBuyContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorBuyContent6017,The following statement contains a magic number: this.EnsureCapacity( list.Count*20 + 5 );
Magic Number,Server.Network,VendorBuyContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorBuyContent6017,The following statement contains a magic number: this.EnsureCapacity( list.Count*20 + 5 );
Magic Number,Server.Network,VendorBuyList,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorBuyList,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,VendorSellList,C:\repos\runuo_runuo\Server\Network\Packets.cs,VendorSellList,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,EndVendorSell,C:\repos\runuo_runuo\Server\Network\Packets.cs,EndVendorSell,The following statement contains a magic number: m_Stream.Write( (ushort)8 );
Magic Number,Server.Network,EndVendorBuy,C:\repos\runuo_runuo\Server\Network\Packets.cs,EndVendorBuy,The following statement contains a magic number: m_Stream.Write( (ushort)8 );
Magic Number,Server.Network,StatLockInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: this.EnsureCapacity( 12 );
Magic Number,Server.Network,StatLockInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: m_Stream.Write( (byte) 2 );
Magic Number,Server.Network,StatLockInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: lockBits |= (int)m.StrLock << 4;
Magic Number,Server.Network,StatLockInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: lockBits |= (int)m.DexLock << 2;
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: this.EnsureCapacity( 17 + (info.Crafter == null ? 0 : 6 + info.Crafter.Name == null ? 0 : info.Crafter.Name.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6) );
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: this.EnsureCapacity( 17 + (info.Crafter == null ? 0 : 6 + info.Crafter.Name == null ? 0 : info.Crafter.Name.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6) );
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: this.EnsureCapacity( 17 + (info.Crafter == null ? 0 : 6 + info.Crafter.Name == null ? 0 : info.Crafter.Name.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6) );
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: this.EnsureCapacity( 17 + (info.Crafter == null ? 0 : 6 + info.Crafter.Name == null ? 0 : info.Crafter.Name.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6) );
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: if ( info.Crafter != null )  			{  				string name = info.Crafter.Name;    				m_Stream.Write( (int) -3 );    				if ( name == null )   					m_Stream.Write( (ushort) 0 );  				else  				{  					int length = name.Length;  					m_Stream.Write( (ushort) length );  					m_Stream.WriteAsciiFixed( name' length );  				}  			}
Magic Number,Server.Network,DisplayEquipmentInfo,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: if ( info.Unidentified )  			{  				m_Stream.Write( (int) -4 );  			}
Magic Number,Server.Network,UnicodePrompt,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodePrompt,The following statement contains a magic number: this.EnsureCapacity( 21 );
Magic Number,Server.Network,ChangeCharacter,C:\repos\runuo_runuo\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: this.EnsureCapacity( 305 );
Magic Number,Server.Network,ChangeCharacter,C:\repos\runuo_runuo\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for ( int i = 0; i < a.Length; ++i )  			{  				if ( a[i] != null )  				{  					string name = a[i].Name;    					if ( name == null )  						name = "-null-";  					else if ( (name = name.Trim()).Length == 0 )  						name = "-empty-";    					m_Stream.WriteAsciiFixed( name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,ChangeCharacter,C:\repos\runuo_runuo\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for ( int i = 0; i < a.Length; ++i )  			{  				if ( a[i] != null )  				{  					string name = a[i].Name;    					if ( name == null )  						name = "-null-";  					else if ( (name = name.Trim()).Length == 0 )  						name = "-empty-";    					m_Stream.WriteAsciiFixed( name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,ChangeCharacter,C:\repos\runuo_runuo\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for ( int i = 0; i < a.Length; ++i )  			{  				if ( a[i] != null )  				{  					string name = a[i].Name;    					if ( name == null )  						name = "-null-";  					else if ( (name = name.Trim()).Length == 0 )  						name = "-empty-";    					m_Stream.WriteAsciiFixed( name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,DeathStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,DeathStatus,The following statement contains a magic number: m_Stream.Write( (byte) (dead ? 0 : 2) );
Magic Number,Server.Network,SpeedControl,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpeedControl,The following statement contains a magic number: EnsureCapacity( 3 );
Magic Number,Server.Network,BondedStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,BondedStatus,The following statement contains a magic number: this.EnsureCapacity( 11 );
Magic Number,Server.Network,ToggleSpecialAbility,C:\repos\runuo_runuo\Server\Network\Packets.cs,ToggleSpecialAbility,The following statement contains a magic number: EnsureCapacity( 7 );
Magic Number,Server.Network,DisplayItemListMenu,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayItemListMenu,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,DisplayQuestionMenu,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayQuestionMenu,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,DisplayContextMenu,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenu,The following statement contains a magic number: this.EnsureCapacity( 12 + (length * 8) );
Magic Number,Server.Network,DisplayContextMenu,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenu,The following statement contains a magic number: this.EnsureCapacity( 12 + (length * 8) );
Magic Number,Server.Network,DisplayContextMenu,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenu,The following statement contains a magic number: for ( int i = 0; i < length; ++i )  			{  				ContextMenuEntry e = entries[i];    				m_Stream.Write( (int) e.Number );  				m_Stream.Write( (short) i );    				int range = e.Range;    				if ( range == -1 )  					range = 18;    				CMEFlags flags = (e.Enabled && menu.From.InRange( p' range )) ? CMEFlags.None : CMEFlags.Disabled;    				flags |= e.Flags;    				m_Stream.Write( (short) flags );  			}
Magic Number,Server.Network,DisplayContextMenuOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: this.EnsureCapacity( 12 + (length * 8) );
Magic Number,Server.Network,DisplayContextMenuOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: this.EnsureCapacity( 12 + (length * 8) );
Magic Number,Server.Network,DisplayContextMenuOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: for ( int i = 0; i < length; ++i )  			{  				ContextMenuEntry e = entries[i];    				m_Stream.Write( (short) i );  				m_Stream.Write( (ushort) ( e.Number - 3000000 ) );    				int range = e.Range;    				if ( range == -1 )  					range = 18;    				CMEFlags flags = (e.Enabled && menu.From.InRange( p' range )) ? CMEFlags.None : CMEFlags.Disabled;    				int color = e.Color & 0xFFFF;    				if ( color != 0xFFFF )  					flags |= CMEFlags.Colored;    				flags |= e.Flags;    				m_Stream.Write( (short) flags );    				if ( (flags & CMEFlags.Colored) != 0 )  					m_Stream.Write( (short) color );  			}
Magic Number,Server.Network,DisplayContextMenuOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: for ( int i = 0; i < length; ++i )  			{  				ContextMenuEntry e = entries[i];    				m_Stream.Write( (short) i );  				m_Stream.Write( (ushort) ( e.Number - 3000000 ) );    				int range = e.Range;    				if ( range == -1 )  					range = 18;    				CMEFlags flags = (e.Enabled && menu.From.InRange( p' range )) ? CMEFlags.None : CMEFlags.Disabled;    				int color = e.Color & 0xFFFF;    				if ( color != 0xFFFF )  					flags |= CMEFlags.Colored;    				flags |= e.Flags;    				m_Stream.Write( (short) flags );    				if ( (flags & CMEFlags.Colored) != 0 )  					m_Stream.Write( (short) color );  			}
Magic Number,Server.Network,DisplayProfile,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity( 12 + header.Length + (footer.Length * 2) + (body.Length * 2) );
Magic Number,Server.Network,DisplayProfile,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity( 12 + header.Length + (footer.Length * 2) + (body.Length * 2) );
Magic Number,Server.Network,DisplayProfile,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity( 12 + header.Length + (footer.Length * 2) + (body.Length * 2) );
Magic Number,Server.Network,CloseGump,C:\repos\runuo_runuo\Server\Network\Packets.cs,CloseGump,The following statement contains a magic number: this.EnsureCapacity( 13 );
Magic Number,Server.Network,WorldItem,C:\repos\runuo_runuo\Server\Network\Packets.cs,WorldItem,The following statement contains a magic number: this.EnsureCapacity( 20 );
Magic Number,Server.Network,UnkD3,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnkD3,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 2 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 3 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 4 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (short) 6 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 7 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (short) 2 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 8 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 9 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 10 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 11 );
Magic Number,Server.Network,GQRequest,C:\repos\runuo_runuo\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write( (int) 12 );
Magic Number,Server.Network,ClientVersionReq,C:\repos\runuo_runuo\Server\Network\Packets.cs,ClientVersionReq,The following statement contains a magic number: this.EnsureCapacity( 3 );
Magic Number,Server.Network,AssistVersionReq,C:\repos\runuo_runuo\Server\Network\Packets.cs,AssistVersionReq,The following statement contains a magic number: this.EnsureCapacity( 7 );
Magic Number,Server.Network,ScreenEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,ScreenEffect,The following statement contains a magic number: m_Stream.Fill( 8 );
Magic Number,Server.Network,ScreenEffect,C:\repos\runuo_runuo\Server\Network\Packets.cs,ScreenEffect,The following statement contains a magic number: m_Stream.Fill( 16 );
Magic Number,Server.Network,NewSpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: EnsureCapacity( 23 );
Magic Number,Server.Network,NewSpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  				m_Stream.Write( (byte)(content >> (i * 8)) );
Magic Number,Server.Network,NewSpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: for ( int i = 0; i < 8; ++i )  				m_Stream.Write( (byte)(content >> (i * 8)) );
Magic Number,Server.Network,SpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 19) );
Magic Number,Server.Network,SpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 19) );
Magic Number,Server.Network,SpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: for ( int i = 0; i < 64; ++i' mask <<= 1 )  			{  				if ( (content & mask) != 0 )  				{  					m_Stream.Write( (int) (0x7FFFFFFF - i) );  					m_Stream.Write( (ushort) 0 );  					m_Stream.Write( (byte) 0 );  					m_Stream.Write( (ushort) (i + offset) );  					m_Stream.Write( (short) 0 );  					m_Stream.Write( (short) 0 );  					m_Stream.Write( (int) item.Serial );  					m_Stream.Write( (short) 0 );    					++written;  				}  			}
Magic Number,Server.Network,SpellbookContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: m_Stream.Seek( 3' SeekOrigin.Begin );
Magic Number,Server.Network,SpellbookContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 20) );
Magic Number,Server.Network,SpellbookContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 20) );
Magic Number,Server.Network,SpellbookContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: for ( int i = 0; i < 64; ++i' mask <<= 1 )  			{  				if ( (content & mask) != 0 )  				{  					m_Stream.Write( (int) (0x7FFFFFFF - i) );  					m_Stream.Write( (ushort) 0 );  					m_Stream.Write( (byte) 0 );  					m_Stream.Write( (ushort) (i + offset) );  					m_Stream.Write( (short) 0 );  					m_Stream.Write( (short) 0 );  					m_Stream.Write( (byte) 0 ); // Grid Location?  					m_Stream.Write( (int) item.Serial );  					m_Stream.Write( (short) 0 );    					++written;  				}  			}
Magic Number,Server.Network,SpellbookContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: m_Stream.Seek( 3' SeekOrigin.Begin );
Magic Number,Server.Network,ContainerContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 19) );
Magic Number,Server.Network,ContainerContent,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 19) );
Magic Number,Server.Network,ContainerContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent6017,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 20) );
Magic Number,Server.Network,ContainerContent6017,C:\repos\runuo_runuo\Server\Network\Packets.cs,ContainerContent6017,The following statement contains a magic number: this.EnsureCapacity( 5 + (count * 20) );
Magic Number,Server.Network,NullFastwalkStack,C:\repos\runuo_runuo\Server\Network\Packets.cs,NullFastwalkStack,The following statement contains a magic number: EnsureCapacity(256);
Magic Number,Server.Network,SkillUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: this.EnsureCapacity( 6 + (skills.Length * 9) );
Magic Number,Server.Network,SkillUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: this.EnsureCapacity( 6 + (skills.Length * 9) );
Magic Number,Server.Network,SkillUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: for ( int i = 0; i < skills.Length; ++i )  			{  				Skill s = skills[i];    				double v = s.NonRacialValue;  				int uv = (int)(v * 10);    				if ( uv < 0 )  					uv = 0;  				else if ( uv >= 0x10000 )  					uv = 0xFFFF;    				m_Stream.Write( (ushort) (s.Info.SkillID + 1) );  				m_Stream.Write( (ushort) uv );  				m_Stream.Write( (ushort) s.BaseFixedPoint );  				m_Stream.Write( (byte) s.Lock );  				m_Stream.Write( (ushort) s.CapFixedPoint );  			}
Magic Number,Server.Network,SkillChange,C:\repos\runuo_runuo\Server\Network\Packets.cs,SkillChange,The following statement contains a magic number: this.EnsureCapacity( 13 );
Magic Number,Server.Network,SkillChange,C:\repos\runuo_runuo\Server\Network\Packets.cs,SkillChange,The following statement contains a magic number: int uv = (int)(v * 10);
Magic Number,Server.Network,LaunchBrowser,C:\repos\runuo_runuo\Server\Network\Packets.cs,LaunchBrowser,The following statement contains a magic number: this.EnsureCapacity( 4 + url.Length );
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( number >= 3000000 )  			{  				cache = m_Cache_IntLoc;  				index = number - 3000000;  			}  			else if ( number >= 1000000 )  			{  				cache = m_Cache_CliLoc;  				index = number - 1000000;  			}  			else if ( number >= 500000 )  			{  				cache = m_Cache_CliLocCmp;  				index = number - 500000;  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( cache != null && index >= 0 && index < cache.Length )  			{  				p = cache[index];    				if ( p == null )  				{  					cache[index] = p = new MessageLocalized( Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "" );  					p.SetStatic();  				}  			}  			else  			{  				p = new MessageLocalized( Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "" );  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if ( cache != null && index >= 0 && index < cache.Length )  			{  				p = cache[index];    				if ( p == null )  				{  					cache[index] = p = new MessageLocalized( Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "" );  					p.SetStatic();  				}  			}  			else  			{  				p = new MessageLocalized( Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "" );  			}
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: this.EnsureCapacity( 50 + (args.Length * 2) );
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: this.EnsureCapacity( 50 + (args.Length * 2) );
Magic Number,Server.Network,MessageLocalized,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,MultiTargetReqHS,C:\repos\runuo_runuo\Server\Network\Packets.cs,MultiTargetReqHS,The following statement contains a magic number: m_Stream.Seek( 18' SeekOrigin.Begin );
Magic Number,Server.Network,MultiTargetReq,C:\repos\runuo_runuo\Server\Network\Packets.cs,MultiTargetReq,The following statement contains a magic number: m_Stream.Seek( 18' SeekOrigin.Begin );
Magic Number,Server.Network,CancelTarget,C:\repos\runuo_runuo\Server\Network\Packets.cs,CancelTarget,The following statement contains a magic number: m_Stream.Write( (byte) 3 );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayGumpPacked,The following statement contains a magic number: m_Layout = PacketWriter.CreateInstance( 8192 );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayGumpPacked,The following statement contains a magic number: m_Strings = PacketWriter.CreateInstance( 8192 );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,Flush,The following statement contains a magic number: EnsureCapacity( 28 + (int) m_Layout.Length + (int) m_Strings.Length );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: int wantLength = 1 + ( ( buffer.Length * 1024 ) / 1000 );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: int wantLength = 1 + ( ( buffer.Length * 1024 ) / 1000 );
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: wantLength +=  4095;
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: wantLength &= ~4095;
Magic Number,Server.Network,DisplayGumpPacked,C:\repos\runuo_runuo\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: m_Stream.Write( (int) ( 4 + packLength ) );
Magic Number,Server.Network,DisplayGumpFast,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayGumpFast,The following statement contains a magic number: EnsureCapacity( 4096 );
Magic Number,Server.Network,DisplayGumpFast,C:\repos\runuo_runuo\Server\Network\Packets.cs,WriteStrings,The following statement contains a magic number: m_Stream.Seek( 19' SeekOrigin.Begin );
Magic Number,Server.Network,DisplayGump,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayGump,The following statement contains a magic number: this.EnsureCapacity( 256 );
Magic Number,Server.Network,DisplayPaperdoll,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplayPaperdoll,The following statement contains a magic number: m_Stream.WriteAsciiFixed( text' 60 );
Magic Number,Server.Network,ScrollMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,ScrollMessage,The following statement contains a magic number: this.EnsureCapacity( 10 + text.Length );
Magic Number,Server.Network,MapChange,C:\repos\runuo_runuo\Server\Network\Packets.cs,MapChange,The following statement contains a magic number: this.EnsureCapacity( 6 );
Magic Number,Server.Network,SupportedFeatures,C:\repos\runuo_runuo\Server\Network\Packets.cs,SupportedFeatures,The following statement contains a magic number: if ( acct != null && acct.Limit >= 6 )  			{  				flags |= FeatureFlags.LiveAccount;  				flags &= ~FeatureFlags.UOTD;    				if ( acct.Limit > 6 )  					flags |= FeatureFlags.SeventhCharacterSlot;  				else  					flags |= FeatureFlags.SixthCharacterSlot;  			}
Magic Number,Server.Network,SupportedFeatures,C:\repos\runuo_runuo\Server\Network\Packets.cs,SupportedFeatures,The following statement contains a magic number: if ( acct != null && acct.Limit >= 6 )  			{  				flags |= FeatureFlags.LiveAccount;  				flags &= ~FeatureFlags.UOTD;    				if ( acct.Limit > 6 )  					flags |= FeatureFlags.SeventhCharacterSlot;  				else  					flags |= FeatureFlags.SixthCharacterSlot;  			}
Magic Number,Server.Network,MobileName,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileName,The following statement contains a magic number: this.EnsureCapacity( 37 );
Magic Number,Server.Network,MobileName,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileName,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,MobileStatusCompact,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusCompact,The following statement contains a magic number: this.EnsureCapacity( 43 );
Magic Number,Server.Network,MobileStatusCompact,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusCompact,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: m_Stream.Write( (short) (Core.AOS ? m.PhysicalResistance : (int)(m.ArmorRating + 0.5)) );
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( type >= 5 )  			{  				m_Stream.Write( (short)m.MaxWeight );  				m_Stream.Write( (byte)(m.Race.RaceID + 1));	// Would be 0x00 if it's a non-ML enabled account but...  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( type >= 4 )  			{  				m_Stream.Write( (short) m.FireResistance ); // Fire  				m_Stream.Write( (short) m.ColdResistance ); // Cold  				m_Stream.Write( (short) m.PoisonResistance ); // Poison  				m_Stream.Write( (short) m.EnergyResistance ); // Energy  				m_Stream.Write( (short) m.Luck ); // Luck    				IWeapon weapon = m.Weapon;    				int min = 0' max = 0;    				if ( weapon != null )  					weapon.GetStatusDamage( m' out min' out max );    				m_Stream.Write( (short) min ); // Damage min  				m_Stream.Write( (short) max ); // Damage max    				m_Stream.Write( (int) m.TithingPoints );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( type >= 6 )  			{  				for ( int i = 0; i < 15; ++i )  					m_Stream.Write( (short) m.GetAOSStatus( i ) );  			}
Magic Number,Server.Network,MobileStatusExtended,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if ( type >= 6 )  			{  				for ( int i = 0; i < 15; ++i )  					m_Stream.Write( (short) m.GetAOSStatus( i ) );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( beholder != beheld )  			{  				type = 0;  				EnsureCapacity( 43 );  			}  			else if ( Core.HS && ns != null && ns.ExtendedStatus )  			{  				type = 6;  				EnsureCapacity( 121 );  			}  			else if ( Core.ML && ns != null && ns.SupportsExpansion( Expansion.ML ) )  			{  				type = 5;  				EnsureCapacity( 91 );  			}  			else  			{  				type = Core.AOS ? 4 : 3;  				EnsureCapacity( 88 );  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( type > 0 )  			{  				m_Stream.Write( beheld.Female );    				m_Stream.Write( (short) beheld.Str );  				m_Stream.Write( (short) beheld.Dex );  				m_Stream.Write( (short) beheld.Int );    				WriteAttr( beheld.Stam' beheld.StamMax );  				WriteAttr( beheld.Mana' beheld.ManaMax );    				m_Stream.Write( (int) beheld.TotalGold );  				m_Stream.Write( (short) (Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)) );  				m_Stream.Write( (short) (Mobile.BodyWeight + beheld.TotalWeight) );    				if ( type >= 5 )  				{  					m_Stream.Write( (short)beheld.MaxWeight );  					m_Stream.Write( (byte)(beheld.Race.RaceID + 1) );	// Would be 0x00 if it's a non-ML enabled account but...  				}    				m_Stream.Write( (short) beheld.StatCap );    				m_Stream.Write( (byte) beheld.Followers );  				m_Stream.Write( (byte) beheld.FollowersMax );    				if ( type >= 4 )  				{  					m_Stream.Write( (short) beheld.FireResistance ); // Fire  					m_Stream.Write( (short) beheld.ColdResistance ); // Cold  					m_Stream.Write( (short) beheld.PoisonResistance ); // Poison  					m_Stream.Write( (short) beheld.EnergyResistance ); // Energy  					m_Stream.Write( (short) beheld.Luck ); // Luck    					IWeapon weapon = beheld.Weapon;    					int min = 0' max = 0;    					if ( weapon != null )  						weapon.GetStatusDamage( beheld' out min' out max );    					m_Stream.Write( (short) min ); // Damage min  					m_Stream.Write( (short) max ); // Damage max    					m_Stream.Write( (int) beheld.TithingPoints );  				}    				if ( type >= 6 )  				{  					for ( int i = 0; i < 15; ++i )  						m_Stream.Write( (short) beheld.GetAOSStatus( i ) );  				}  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( type > 0 )  			{  				m_Stream.Write( beheld.Female );    				m_Stream.Write( (short) beheld.Str );  				m_Stream.Write( (short) beheld.Dex );  				m_Stream.Write( (short) beheld.Int );    				WriteAttr( beheld.Stam' beheld.StamMax );  				WriteAttr( beheld.Mana' beheld.ManaMax );    				m_Stream.Write( (int) beheld.TotalGold );  				m_Stream.Write( (short) (Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)) );  				m_Stream.Write( (short) (Mobile.BodyWeight + beheld.TotalWeight) );    				if ( type >= 5 )  				{  					m_Stream.Write( (short)beheld.MaxWeight );  					m_Stream.Write( (byte)(beheld.Race.RaceID + 1) );	// Would be 0x00 if it's a non-ML enabled account but...  				}    				m_Stream.Write( (short) beheld.StatCap );    				m_Stream.Write( (byte) beheld.Followers );  				m_Stream.Write( (byte) beheld.FollowersMax );    				if ( type >= 4 )  				{  					m_Stream.Write( (short) beheld.FireResistance ); // Fire  					m_Stream.Write( (short) beheld.ColdResistance ); // Cold  					m_Stream.Write( (short) beheld.PoisonResistance ); // Poison  					m_Stream.Write( (short) beheld.EnergyResistance ); // Energy  					m_Stream.Write( (short) beheld.Luck ); // Luck    					IWeapon weapon = beheld.Weapon;    					int min = 0' max = 0;    					if ( weapon != null )  						weapon.GetStatusDamage( beheld' out min' out max );    					m_Stream.Write( (short) min ); // Damage min  					m_Stream.Write( (short) max ); // Damage max    					m_Stream.Write( (int) beheld.TithingPoints );  				}    				if ( type >= 6 )  				{  					for ( int i = 0; i < 15; ++i )  						m_Stream.Write( (short) beheld.GetAOSStatus( i ) );  				}  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( type > 0 )  			{  				m_Stream.Write( beheld.Female );    				m_Stream.Write( (short) beheld.Str );  				m_Stream.Write( (short) beheld.Dex );  				m_Stream.Write( (short) beheld.Int );    				WriteAttr( beheld.Stam' beheld.StamMax );  				WriteAttr( beheld.Mana' beheld.ManaMax );    				m_Stream.Write( (int) beheld.TotalGold );  				m_Stream.Write( (short) (Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)) );  				m_Stream.Write( (short) (Mobile.BodyWeight + beheld.TotalWeight) );    				if ( type >= 5 )  				{  					m_Stream.Write( (short)beheld.MaxWeight );  					m_Stream.Write( (byte)(beheld.Race.RaceID + 1) );	// Would be 0x00 if it's a non-ML enabled account but...  				}    				m_Stream.Write( (short) beheld.StatCap );    				m_Stream.Write( (byte) beheld.Followers );  				m_Stream.Write( (byte) beheld.FollowersMax );    				if ( type >= 4 )  				{  					m_Stream.Write( (short) beheld.FireResistance ); // Fire  					m_Stream.Write( (short) beheld.ColdResistance ); // Cold  					m_Stream.Write( (short) beheld.PoisonResistance ); // Poison  					m_Stream.Write( (short) beheld.EnergyResistance ); // Energy  					m_Stream.Write( (short) beheld.Luck ); // Luck    					IWeapon weapon = beheld.Weapon;    					int min = 0' max = 0;    					if ( weapon != null )  						weapon.GetStatusDamage( beheld' out min' out max );    					m_Stream.Write( (short) min ); // Damage min  					m_Stream.Write( (short) max ); // Damage max    					m_Stream.Write( (int) beheld.TithingPoints );  				}    				if ( type >= 6 )  				{  					for ( int i = 0; i < 15; ++i )  						m_Stream.Write( (short) beheld.GetAOSStatus( i ) );  				}  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( type > 0 )  			{  				m_Stream.Write( beheld.Female );    				m_Stream.Write( (short) beheld.Str );  				m_Stream.Write( (short) beheld.Dex );  				m_Stream.Write( (short) beheld.Int );    				WriteAttr( beheld.Stam' beheld.StamMax );  				WriteAttr( beheld.Mana' beheld.ManaMax );    				m_Stream.Write( (int) beheld.TotalGold );  				m_Stream.Write( (short) (Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)) );  				m_Stream.Write( (short) (Mobile.BodyWeight + beheld.TotalWeight) );    				if ( type >= 5 )  				{  					m_Stream.Write( (short)beheld.MaxWeight );  					m_Stream.Write( (byte)(beheld.Race.RaceID + 1) );	// Would be 0x00 if it's a non-ML enabled account but...  				}    				m_Stream.Write( (short) beheld.StatCap );    				m_Stream.Write( (byte) beheld.Followers );  				m_Stream.Write( (byte) beheld.FollowersMax );    				if ( type >= 4 )  				{  					m_Stream.Write( (short) beheld.FireResistance ); // Fire  					m_Stream.Write( (short) beheld.ColdResistance ); // Cold  					m_Stream.Write( (short) beheld.PoisonResistance ); // Poison  					m_Stream.Write( (short) beheld.EnergyResistance ); // Energy  					m_Stream.Write( (short) beheld.Luck ); // Luck    					IWeapon weapon = beheld.Weapon;    					int min = 0' max = 0;    					if ( weapon != null )  						weapon.GetStatusDamage( beheld' out min' out max );    					m_Stream.Write( (short) min ); // Damage min  					m_Stream.Write( (short) max ); // Damage max    					m_Stream.Write( (int) beheld.TithingPoints );  				}    				if ( type >= 6 )  				{  					for ( int i = 0; i < 15; ++i )  						m_Stream.Write( (short) beheld.GetAOSStatus( i ) );  				}  			}
Magic Number,Server.Network,MobileStatus,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if ( type > 0 )  			{  				m_Stream.Write( beheld.Female );    				m_Stream.Write( (short) beheld.Str );  				m_Stream.Write( (short) beheld.Dex );  				m_Stream.Write( (short) beheld.Int );    				WriteAttr( beheld.Stam' beheld.StamMax );  				WriteAttr( beheld.Mana' beheld.ManaMax );    				m_Stream.Write( (int) beheld.TotalGold );  				m_Stream.Write( (short) (Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)) );  				m_Stream.Write( (short) (Mobile.BodyWeight + beheld.TotalWeight) );    				if ( type >= 5 )  				{  					m_Stream.Write( (short)beheld.MaxWeight );  					m_Stream.Write( (byte)(beheld.Race.RaceID + 1) );	// Would be 0x00 if it's a non-ML enabled account but...  				}    				m_Stream.Write( (short) beheld.StatCap );    				m_Stream.Write( (byte) beheld.Followers );  				m_Stream.Write( (byte) beheld.FollowersMax );    				if ( type >= 4 )  				{  					m_Stream.Write( (short) beheld.FireResistance ); // Fire  					m_Stream.Write( (short) beheld.ColdResistance ); // Cold  					m_Stream.Write( (short) beheld.PoisonResistance ); // Poison  					m_Stream.Write( (short) beheld.EnergyResistance ); // Energy  					m_Stream.Write( (short) beheld.Luck ); // Luck    					IWeapon weapon = beheld.Weapon;    					int min = 0' max = 0;    					if ( weapon != null )  						weapon.GetStatusDamage( beheld' out min' out max );    					m_Stream.Write( (short) min ); // Damage min  					m_Stream.Write( (short) max ); // Damage max    					m_Stream.Write( (int) beheld.TithingPoints );  				}    				if ( type >= 6 )  				{  					for ( int i = 0; i < 15; ++i )  						m_Stream.Write( (short) beheld.GetAOSStatus( i ) );  				}  			}
Magic Number,Server.Network,HealthbarPoison,C:\repos\runuo_runuo\Server\Network\Packets.cs,HealthbarPoison,The following statement contains a magic number: EnsureCapacity( 12 );
Magic Number,Server.Network,HealthbarYellow,C:\repos\runuo_runuo\Server\Network\Packets.cs,HealthbarYellow,The following statement contains a magic number: EnsureCapacity( 12 );
Magic Number,Server.Network,HealthbarYellow,C:\repos\runuo_runuo\Server\Network\Packets.cs,HealthbarYellow,The following statement contains a magic number: m_Stream.Write( (short) 2 );
Magic Number,Server.Network,MobileIncoming,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncoming,The following statement contains a magic number: this.EnsureCapacity(23 + (count * 9));
Magic Number,Server.Network,MobileIncoming,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncoming,The following statement contains a magic number: this.EnsureCapacity(23 + (count * 9));
Magic Number,Server.Network,MobileIncomingSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingSA,The following statement contains a magic number: this.EnsureCapacity( 23 + (count * 9) );
Magic Number,Server.Network,MobileIncomingSA,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingSA,The following statement contains a magic number: this.EnsureCapacity( 23 + (count * 9) );
Magic Number,Server.Network,MobileIncomingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingOld,The following statement contains a magic number: this.EnsureCapacity( 23 + (count * 9) );
Magic Number,Server.Network,MobileIncomingOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,MobileIncomingOld,The following statement contains a magic number: this.EnsureCapacity( 23 + (count * 9) );
Magic Number,Server.Network,AsciiMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,AsciiMessage,The following statement contains a magic number: this.EnsureCapacity( 45 + text.Length );
Magic Number,Server.Network,AsciiMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,AsciiMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,UnicodeMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: this.EnsureCapacity( 50 + (text.Length * 2) );
Magic Number,Server.Network,UnicodeMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: this.EnsureCapacity( 50 + (text.Length * 2) );
Magic Number,Server.Network,UnicodeMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed( lang' 4 );
Magic Number,Server.Network,UnicodeMessage,C:\repos\runuo_runuo\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,LoginConfirm,C:\repos\runuo_runuo\Server\Network\Packets.cs,LoginConfirm,The following statement contains a magic number: m_Stream.Write( (short) (map==null?6144:map.Width) );
Magic Number,Server.Network,LoginConfirm,C:\repos\runuo_runuo\Server\Network\Packets.cs,LoginConfirm,The following statement contains a magic number: m_Stream.Write( (short) (map==null?4096:map.Height) );
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: this.EnsureCapacity( 4 + (a.Length * 60) );
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: this.EnsureCapacity( 4 + (a.Length * 60) );
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: int count = Math.Max( Math.Max( highSlot + 1' a.Limit )' 5 );
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				Mobile m = a[i];    				if ( m != null )  				{  					m_Stream.WriteAsciiFixed( m.Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				Mobile m = a[i];    				if ( m != null )  				{  					m_Stream.WriteAsciiFixed( m.Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterListUpdate,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				Mobile m = a[i];    				if ( m != null )  				{  					m_Stream.WriteAsciiFixed( m.Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: this.EnsureCapacity( 11 + (a.Length * 60) + (info.Length * 89) );
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: this.EnsureCapacity( 11 + (a.Length * 60) + (info.Length * 89) );
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: this.EnsureCapacity( 11 + (a.Length * 60) + (info.Length * 89) );
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: int count = Math.Max( Math.Max( highSlot + 1' a.Limit )' 5 );
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for ( int i = 0; i < info.Length; ++i )  			{  				CityInfo ci = info[i];    				m_Stream.Write( (byte) i );  				m_Stream.WriteAsciiFixed( ci.City' 32 );  				m_Stream.WriteAsciiFixed( ci.Building' 32 );  				m_Stream.Write( (int) ci.X );  				m_Stream.Write( (int) ci.Y );  				m_Stream.Write( (int) ci.Z );  				m_Stream.Write( (int) ci.Map.MapID );  				m_Stream.Write( (int) ci.Description );  				m_Stream.Write( (int) 0 );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for ( int i = 0; i < info.Length; ++i )  			{  				CityInfo ci = info[i];    				m_Stream.Write( (byte) i );  				m_Stream.WriteAsciiFixed( ci.City' 32 );  				m_Stream.WriteAsciiFixed( ci.Building' 32 );  				m_Stream.Write( (int) ci.X );  				m_Stream.Write( (int) ci.Y );  				m_Stream.Write( (int) ci.Z );  				m_Stream.Write( (int) ci.Map.MapID );  				m_Stream.Write( (int) ci.Description );  				m_Stream.Write( (int) 0 );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( count > 6 )  				flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot); // 7th Character Slot - TODO: Is SixthCharacterSlot Required?  			else if ( count == 6 )  				flags |= CharacterListFlags.SixthCharacterSlot; // 6th Character Slot  			else if ( a.Limit == 1 )  				flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( count > 6 )  				flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot); // 7th Character Slot - TODO: Is SixthCharacterSlot Required?  			else if ( count == 6 )  				flags |= CharacterListFlags.SixthCharacterSlot; // 6th Character Slot  			else if ( a.Limit == 1 )  				flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterList,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: this.EnsureCapacity( 9 + (a.Length * 60) + (info.Length * 63) );
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: this.EnsureCapacity( 9 + (a.Length * 60) + (info.Length * 63) );
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: this.EnsureCapacity( 9 + (a.Length * 60) + (info.Length * 63) );
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: int count = Math.Max( Math.Max( highSlot + 1' a.Limit )' 5 );
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for ( int i = 0; i < count; ++i )  			{  				if ( a[i] != null )  				{  					m_Stream.WriteAsciiFixed( a[i].Name' 30 );  					m_Stream.Fill( 30 ); // password  				}  				else  				{  					m_Stream.Fill( 60 );  				}  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for ( int i = 0; i < info.Length; ++i )  			{  				CityInfo ci = info[i];    				m_Stream.Write( (byte) i );  				m_Stream.WriteAsciiFixed( ci.City' 31 );  				m_Stream.WriteAsciiFixed( ci.Building' 31 );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for ( int i = 0; i < info.Length; ++i )  			{  				CityInfo ci = info[i];    				m_Stream.Write( (byte) i );  				m_Stream.WriteAsciiFixed( ci.City' 31 );  				m_Stream.WriteAsciiFixed( ci.Building' 31 );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( count > 6 )  				flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot); // 7th Character Slot - TODO: Is SixthCharacterSlot Required?  			else if ( count == 6 )  				flags |= CharacterListFlags.SixthCharacterSlot; // 6th Character Slot  			else if ( a.Limit == 1 )  				flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( count > 6 )  				flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot); // 7th Character Slot - TODO: Is SixthCharacterSlot Required?  			else if ( count == 6 )  				flags |= CharacterListFlags.SixthCharacterSlot; // 6th Character Slot  			else if ( a.Limit == 1 )  				flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,CharacterListOld,C:\repos\runuo_runuo\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if ( disabled != 0 )  			{  				if ( m_MD5Provider == null )  					m_MD5Provider = new System.Security.Cryptography.MD5CryptoServiceProvider();    				m_Stream.UnderlyingStream.Flush();    				byte[] hashCode = m_MD5Provider.ComputeHash( m_Stream.UnderlyingStream.GetBuffer()' 0' (int) m_Stream.UnderlyingStream.Length );  				byte[] buffer = new byte[28];    				for ( int i = 0; i < count; ++i )  				{  					Utility.RandomBytes( buffer );    					m_Stream.Seek( 35 + ( i * 60 )' SeekOrigin.Begin );  					m_Stream.Write( buffer' 0' buffer.Length );  				}    				m_Stream.Seek( 35' SeekOrigin.Begin );  				m_Stream.Write( (int) ((long)disabled>>32) );  				m_Stream.Write( (int) disabled );    				m_Stream.Seek( 95' SeekOrigin.Begin );  				m_Stream.Write( hashCode' 0' hashCode.Length );  			}
Magic Number,Server.Network,ClearWeaponAbility,C:\repos\runuo_runuo\Server\Network\Packets.cs,ClearWeaponAbility,The following statement contains a magic number: EnsureCapacity( 5 );
Magic Number,Server.Network,MessageLocalizedAffix,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: this.EnsureCapacity( 52 + affix.Length + (args.Length * 2) );
Magic Number,Server.Network,MessageLocalizedAffix,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: this.EnsureCapacity( 52 + affix.Length + (args.Length * 2) );
Magic Number,Server.Network,MessageLocalizedAffix,C:\repos\runuo_runuo\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: m_Stream.WriteAsciiFixed( name' 30 );
Magic Number,Server.Network,AccountLoginAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: this.EnsureCapacity( 6 + (info.Length * 40) );
Magic Number,Server.Network,AccountLoginAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: this.EnsureCapacity( 6 + (info.Length * 40) );
Magic Number,Server.Network,AccountLoginAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: for ( int i = 0; i < info.Length; ++i )  			{  				ServerInfo si = info[i];    				m_Stream.Write( (ushort) i );  				m_Stream.WriteAsciiFixed( si.Name' 32 );  				m_Stream.Write( (byte) si.FullPercent );  				m_Stream.Write( (sbyte) si.TimeZone );  				m_Stream.Write( (int) Utility.GetAddressValue( si.Address.Address ) );  			}
Magic Number,Server.Network,DisplaySignGump,C:\repos\runuo_runuo\Server\Network\Packets.cs,DisplaySignGump,The following statement contains a magic number: this.EnsureCapacity( 16 + unknown.Length + caption.Length );
Magic Number,Server.Network,PlayServerAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write( (byte)(addr >> 8) );
Magic Number,Server.Network,PlayServerAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write( (byte)(addr >> 16) );
Magic Number,Server.Network,PlayServerAck,C:\repos\runuo_runuo\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write( (byte)(addr >> 24) );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,CreateInstance,The following statement contains a magic number: return CreateInstance( 32 );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[0] = (byte)(value >> 8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write( m_Buffer' 0' 2 );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[0] = (byte)(value >> 8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write( m_Buffer' 0' 2 );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[0] = (byte)(value >> 24);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[1] = (byte)(value >> 16);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[2] = (byte)(value >>  8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[2] = (byte)(value >>  8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[3] = (byte) value;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write( m_Buffer' 0' 4 );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[0] = (byte)(value >> 24);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[1] = (byte)(value >> 16);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[2] = (byte)(value >>  8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[2] = (byte)(value >>  8);
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer[3] = (byte) value;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write( m_Buffer' 0' 4 );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteLittleUniNull,The following statement contains a magic number: m_Stream.SetLength( m_Stream.Length + ( ( length + 1 ) * 2 ) );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteLittleUniNull,The following statement contains a magic number: m_Stream.Position += 2;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteLittleUniFixed,The following statement contains a magic number: size *= 2;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteLittleUniFixed,The following statement contains a magic number: if ( ( length * 2 ) >= size )  				m_Stream.Position += Encoding.Unicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position );  			else  			{  				Encoding.Unicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position );  				m_Stream.Position += size;  			}
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniNull,The following statement contains a magic number: m_Stream.SetLength( m_Stream.Length + ( ( length + 1 ) * 2 ) );
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniNull,The following statement contains a magic number: m_Stream.Position += 2;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniFixed,The following statement contains a magic number: size *= 2;
Magic Number,Server.Network,PacketWriter,C:\repos\runuo_runuo\Server\Network\PacketWriter.cs,WriteBigUniFixed,The following statement contains a magic number: if ( ( length * 2 ) >= size )  				m_Stream.Position += Encoding.BigEndianUnicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position );  			else  			{  				Encoding.BigEndianUnicode.GetBytes( value' 0' length' m_Stream.GetBuffer()' (int)m_Stream.Position );  				m_Stream.Position += size;  			}
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnTargetNotAccessible,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnTargetInSecureTrade,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnNonlocalTarget,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnCantSeeTarget,The following statement contains a magic number: from.SendLocalizedMessage( 500237 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnTargetOutOfLOS,The following statement contains a magic number: from.SendLocalizedMessage( 500237 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnTargetOutOfRange,The following statement contains a magic number: from.SendLocalizedMessage( 500446 );
Magic Number,Server.Targeting,Target,C:\repos\runuo_runuo\Server\Targeting\Target.cs,OnTargetUntargetable,The following statement contains a magic number: from.SendLocalizedMessage( 500447 );
Duplicate Code,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The method contains a code clone-set at the following line numbers (starting from the method definition): ((71' 109)' (191' 229))
Duplicate Code,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,DropToWorld,The method contains a code clone-set at the following line numbers (starting from the method definition): ((89' 110)' (117' 138))
Duplicate Code,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,FormatBuffer,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 38)' (55' 77))
Missing Default,Server,ExpansionInfo,C:\repos\runuo_runuo\Server\ExpansionInfo.cs,GetFeatures,The following switch statement is missing a default case: switch (ex)  			{  				case Expansion.None:  					return FeatureFlags.ExpansionNone;  				case Expansion.T2A:  					return FeatureFlags.ExpansionT2A;  				case Expansion.UOR:  					return FeatureFlags.ExpansionUOR;  				case Expansion.UOTD:  					return FeatureFlags.ExpansionUOTD;  				case Expansion.LBR:  					return FeatureFlags.ExpansionLBR;  				case Expansion.AOS:  					return FeatureFlags.ExpansionAOS;  				case Expansion.SE:  					return FeatureFlags.ExpansionSE;  				case Expansion.ML:  					return FeatureFlags.ExpansionML;  				case Expansion.SA:  					return FeatureFlags.ExpansionSA;  				case Expansion.HS:  					return FeatureFlags.ExpansionHS;  				case Expansion.TOL:  					return FeatureFlags.ExpansionTOL;  			}
Missing Default,Server,Item,C:\repos\runuo_runuo\Server\Item.cs,Deserialize,The following switch statement is missing a default case: switch ( version )  			{  				case 9:  				case 8:  				case 7:  				case 6:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					if ( version < 7 )  					{  						LastMoved = reader.ReadDeltaTime();  					}  					else  					{  						int minutes = reader.ReadEncodedInt();    						try{ LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes( minutes ); }  						catch{ LastMoved = DateTime.UtcNow; }  					}    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					int x = 0' y = 0' z = 0;    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  					{  						x = reader.ReadEncodedInt();  						y = reader.ReadEncodedInt();  						z = reader.ReadEncodedInt();  					}  					else  					{  						if ( GetSaveFlag( flags' SaveFlag.LocationByteXY ) )  						{  							x = reader.ReadByte();  							y = reader.ReadByte();  						}  						else if ( GetSaveFlag( flags' SaveFlag.LocationShortXY ) )  						{  							x = reader.ReadShort();  							y = reader.ReadShort();  						}    						if ( GetSaveFlag( flags' SaveFlag.LocationSByteZ ) )  							z = reader.ReadSByte();  					}    					m_Location = new Point3D( x' y' z );    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadEncodedInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					if ( version < 8 || !GetSaveFlag( flags' SaveFlag.NullWeight ) )  					{  						double weight;    						if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  							weight = reader.ReadEncodedInt();  						else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  							weight = reader.ReadDouble();  						else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  							weight = 0.0;  						else  							weight = 1.0;    						if ( weight != DefaultWeight )  							AcquireCompactInfo().m_Weight = weight;  					}    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( GetSaveFlag( flags' SaveFlag.ImplFlags ) )  						m_Flags = (ImplFlag)reader.ReadEncodedInt();    					if ( GetSaveFlag( flags' SaveFlag.InsuredFor ) )  						/*m_InsuredFor = */reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.BlessedFor ) )  						AcquireCompactInfo().m_BlessedFor = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.HeldBy ) )  						AcquireCompactInfo().m_HeldBy = reader.ReadMobile();    					if ( GetSaveFlag( flags' SaveFlag.SavedFlags ) )  						AcquireCompactInfo().m_SavedFlags = reader.ReadEncodedInt();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 5:  				{  					SaveFlag flags = (SaveFlag)reader.ReadInt();    					LastMoved = reader.ReadDeltaTime();    					if ( GetSaveFlag( flags' SaveFlag.Direction ) )  						m_Direction = (Direction)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Bounce ) )  						AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );    					if ( GetSaveFlag( flags' SaveFlag.LootType ) )  						m_LootType = (LootType)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.LocationFull ) )  						m_Location = reader.ReadPoint3D();    					if ( GetSaveFlag( flags' SaveFlag.ItemID ) )  						m_ItemID = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Hue ) )  						m_Hue = reader.ReadInt();    					if ( GetSaveFlag( flags' SaveFlag.Amount ) )  						m_Amount = reader.ReadInt();  					else  						m_Amount = 1;    					if ( GetSaveFlag( flags' SaveFlag.Layer ) )  						m_Layer = (Layer)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.Name ) )  					{  						string name = reader.ReadString();    						if ( name != this.DefaultName )  							AcquireCompactInfo().m_Name = name;  					}    					if ( GetSaveFlag( flags' SaveFlag.Parent ) )  					{  						Serial parent = reader.ReadInt();    						if ( parent.IsMobile )  							m_Parent = World.FindMobile( parent );  						else if ( parent.IsItem )  							m_Parent = World.FindItem( parent );  						else  							m_Parent = null;    						if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  							Delete();  					}    					if ( GetSaveFlag( flags' SaveFlag.Items ) )  					{  						List<Item> items = reader.ReadStrongItemList();    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight;    					if ( GetSaveFlag( flags' SaveFlag.IntWeight ) )  						weight = reader.ReadEncodedInt();  					else if ( GetSaveFlag( flags' SaveFlag.WeightNot1or0 ) )  						weight = reader.ReadDouble();  					else if ( GetSaveFlag( flags' SaveFlag.WeightIs0 ) )  						weight = 0.0;  					else  						weight = 1.0;    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( GetSaveFlag( flags' SaveFlag.Map ) )  						m_Map = reader.ReadMap();  					else  						m_Map = Map.Internal;    					if ( GetSaveFlag( flags' SaveFlag.Visible ) )  						SetFlag( ImplFlag.Visible' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Visible' true );    					if ( GetSaveFlag( flags' SaveFlag.Movable ) )  						SetFlag( ImplFlag.Movable' reader.ReadBool() );  					else  						SetFlag( ImplFlag.Movable' true );    					if ( GetSaveFlag( flags' SaveFlag.Stackable ) )  						SetFlag( ImplFlag.Stackable' reader.ReadBool() );    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  				case 4: // Just removed variables  				case 3:  				{  					m_Direction = (Direction)reader.ReadInt();    					goto case 2;  				}  				case 2:  				{  					AcquireCompactInfo().m_Bounce = BounceInfo.Deserialize( reader );  					LastMoved = reader.ReadDeltaTime();    					goto case 1;  				}  				case 1:  				{  					m_LootType = (LootType) reader.ReadByte();//m_Newbied = reader.ReadBool();    					goto case 0;  				}  				case 0:  				{  					m_Location = reader.ReadPoint3D();  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					m_Amount = reader.ReadInt();  					m_Layer = (Layer) reader.ReadByte();    					string name = reader.ReadString();    					if ( name != this.DefaultName )  						AcquireCompactInfo().m_Name = name;    					Serial parent = reader.ReadInt();    					if ( parent.IsMobile )  						m_Parent = World.FindMobile( parent );  					else if ( parent.IsItem )  						m_Parent = World.FindItem( parent );  					else  						m_Parent = null;    					if ( m_Parent == null && (parent.IsMobile || parent.IsItem) )  						Delete();    					int count = reader.ReadInt();    					if ( count > 0 )  					{  						List<Item> items = new List<Item>( count );    						for ( int i = 0; i < count; ++i )  						{  							Item item = reader.ReadItem();    							if ( item != null )  								items.Add( item );  						}    						if ( this is Container )  							( this as Container ).m_Items = items;  						else  							AcquireCompactInfo().m_Items = items;  					}    					double weight = reader.ReadDouble();    					if ( weight != DefaultWeight )  						AcquireCompactInfo().m_Weight = weight;    					if ( version <= 3 )  					{  						reader.ReadInt();  						reader.ReadInt();  						reader.ReadInt();  					}    					m_Map = reader.ReadMap();  					SetFlag( ImplFlag.Visible' reader.ReadBool() );  					SetFlag( ImplFlag.Movable' reader.ReadBool() );    					if ( version <= 3 )  						/*m_Deleted =*/ reader.ReadBool();    					Stackable = reader.ReadBool();    					if ( m_Map != null && m_Parent == null )  						m_Map.OnEnter( this );    					break;  				}  			}
Missing Default,Server,EditGump,C:\repos\runuo_runuo\Server\Items\VirtualCheck.cs,OnResponse,The following switch statement is missing a default case: switch ((Buttons)info.ButtonID)  				{  					case Buttons.Close:  						break;  					case Buttons.Clear:  					{  						_Plat = _Gold = 0;  						refresh = true;  					}  						break;  					case Buttons.Accept:  					{  						var platText = info.GetTextEntry(0).Text;  						var goldText = info.GetTextEntry(1).Text;    						if (!Int32.TryParse(platText' out _Plat))  						{  							User.SendMessage("That is not a valid amount of platinum.");  							refresh = true;  						}  						else if (!Int32.TryParse(goldText' out _Gold))  						{  							User.SendMessage("That is not a valid amount of gold.");  							refresh = true;  						}  						else  						{  							var cur = User.Account.TotalCurrency;  							var off = _Plat + (_Gold / Math.Max(1.0' AccountGold.CurrencyThreshold));    							if (off > cur)  							{  								_Plat = User.Account.TotalPlat;  								_Gold = User.Account.TotalGold;  								User.SendMessage("You do not have that much currency.");  								refresh = true;  							}  							else  							{  								Check.Plat = _Plat;  								Check.Gold = _Gold;  								updated = true;  							}  						}  					}  						break;  					case Buttons.AllPlat:  					{  						_Plat = User.Account.TotalPlat;  						refresh = true;  					}  						break;  					case Buttons.AllGold:  					{  						_Gold = User.Account.TotalGold;  						refresh = true;  					}  						break;  				}
Missing Default,Server,BaseHairInfo,C:\repos\runuo_runuo\Server\Items\VirtualHair.cs,BaseHairInfo,The following switch statement is missing a default case: switch( version )  			{  				case 0:  				{  					m_ItemID = reader.ReadInt();  					m_Hue = reader.ReadInt();  					break;  				}  			}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,GetTotal,The following switch statement is missing a default case: switch( type )  			{  				case TotalType.Gold:  					return m_TotalGold;    				case TotalType.Items:  					return m_TotalItems;    				case TotalType.Weight:  					return m_TotalWeight;  			}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,UpdateTotal,The following switch statement is missing a default case: switch( type )  			{  				case TotalType.Gold:  					m_TotalGold += delta;  					Delta( MobileDelta.Gold );  					break;    				case TotalType.Items:  					m_TotalItems += delta;  					break;    				case TotalType.Weight:  					m_TotalWeight += delta;  					Delta( MobileDelta.Weight );  					OnWeightChange( m_TotalWeight - delta );  					break;  			}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Move,The following switch statement is missing a default case: switch( d & Direction.Mask )  					{  						case Direction.North:  							--y;  							break;  						case Direction.Right:  							++x;  							--y;  							break;  						case Direction.East:  							++x;  							break;  						case Direction.Down:  							++x;  							++y;  							break;  						case Direction.South:  							++y;  							break;  						case Direction.Left:  							--x;  							++y;  							break;  						case Direction.West:  							--x;  							break;  						case Direction.Up:  							--x;  							--y;  							break;  					}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Kill,The following switch statement is missing a default case: switch( res )  				{  					case DeathMoveResult.MoveToCorpse:  						{  							content.Add( item );  							equip.Add( item );  							break;  						}  					case DeathMoveResult.MoveToBackpack:  						{  							moveToPack.Add( item );  							break;  						}  				}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Damage,The following switch statement is missing a default case: switch( m_VisibleDamageType )  				{  					case VisibleDamageType.Related:  						{  							SendVisibleDamageRelated(from' amount);  							break;  						}  					case VisibleDamageType.Everyone:  						{  							SendVisibleDamageEveryone(amount);  							break;  						}  					case VisibleDamageType.Selective:  						{  							SendVisibleDamageSelective(from' amount);  							break;  						}  				}
Missing Default,Server,Mobile,C:\repos\runuo_runuo\Server\Mobile.cs,Deserialize,The following switch statement is missing a default case: switch( version )  			{  				case 32:  					{  						// Removed StuckMenu  						goto case 31;  					}  				case 31:  					{  						m_LastStrGain = reader.ReadDeltaTime();  						m_LastIntGain = reader.ReadDeltaTime();  						m_LastDexGain = reader.ReadDeltaTime();    						goto case 30;  					}  				case 30:  					{  						byte hairflag = reader.ReadByte();    						if( (hairflag & 0x01) != 0 )  							m_Hair = new HairInfo( reader );  						if( (hairflag & 0x02) != 0 )  							m_FacialHair = new FacialHairInfo( reader );    						goto case 29;  					}  				case 29:  					{  						m_Race = reader.ReadRace();  						goto case 28;  					}  				case 28:  					{  						if( version <= 30 )  							LastStatGain = reader.ReadDeltaTime();    						goto case 27;  					}  				case 27:  					{  						m_TithingPoints = reader.ReadInt();    						goto case 26;  					}  				case 26:  				case 25:  				case 24:  					{  						m_Corpse = reader.ReadItem() as Container;    						goto case 23;  					}  				case 23:  					{  						m_CreationTime = reader.ReadDateTime();    						goto case 22;  					}  				case 22: // Just removed followers  				case 21:  					{  						m_Stabled = reader.ReadStrongMobileList();    						goto case 20;  					}  				case 20:  					{  						m_CantWalk = reader.ReadBool();    						goto case 19;  					}  				case 19: // Just removed variables  				case 18:  					{  						m_Virtues = new VirtueInfo( reader );    						goto case 17;  					}  				case 17:  					{  						m_Thirst = reader.ReadInt();  						m_BAC = reader.ReadInt();    						goto case 16;  					}  				case 16:  					{  						m_ShortTermMurders = reader.ReadInt();    						if( version <= 24 )  						{  							reader.ReadDateTime();  							reader.ReadDateTime();  						}    						goto case 15;  					}  				case 15:  					{  						if( version < 22 )  							reader.ReadInt(); // followers    						m_FollowersMax = reader.ReadInt();    						goto case 14;  					}  				case 14:  					{  						m_MagicDamageAbsorb = reader.ReadInt();    						goto case 13;  					}  				case 13:  					{  						m_GuildFealty = reader.ReadMobile();    						goto case 12;  					}  				case 12:  					{  						m_Guild = reader.ReadGuild();    						goto case 11;  					}  				case 11:  					{  						m_DisplayGuildTitle = reader.ReadBool();    						goto case 10;  					}  				case 10:  					{  						m_CanSwim = reader.ReadBool();    						goto case 9;  					}  				case 9:  					{  						m_Squelched = reader.ReadBool();    						goto case 8;  					}  				case 8:  					{  						m_Holding = reader.ReadItem();    						goto case 7;  					}  				case 7:  					{  						m_VirtualArmor = reader.ReadInt();    						goto case 6;  					}  				case 6:  					{  						m_BaseSoundID = reader.ReadInt();    						goto case 5;  					}  				case 5:  					{  						m_DisarmReady = reader.ReadBool();  						m_StunReady = reader.ReadBool();    						goto case 4;  					}  				case 4:  					{  						if( version <= 25 )  						{  							Poison.Deserialize( reader );  						}    						goto case 3;  					}  				case 3:  					{  						m_StatCap = reader.ReadInt();    						goto case 2;  					}  				case 2:  					{  						m_NameHue = reader.ReadInt();    						goto case 1;  					}  				case 1:  					{  						m_Hunger = reader.ReadInt();    						goto case 0;  					}  				case 0:  					{  						if( version < 21 )  							m_Stabled = new List<Mobile>();    						if( version < 18 )  							m_Virtues = new VirtueInfo();    						if( version < 11 )  							m_DisplayGuildTitle = true;    						if( version < 3 )  							m_StatCap = 225;    						if( version < 15 )  						{  							m_Followers = 0;  							m_FollowersMax = 5;  						}    						m_Location = reader.ReadPoint3D();  						m_Body = new Body( reader.ReadInt() );  						m_Name = reader.ReadString();  						m_GuildTitle = reader.ReadString();  						m_Criminal = reader.ReadBool();  						m_Kills = reader.ReadInt();  						m_SpeechHue = reader.ReadInt();  						m_EmoteHue = reader.ReadInt();  						m_WhisperHue = reader.ReadInt();  						m_YellHue = reader.ReadInt();  						m_Language = reader.ReadString();  						m_Female = reader.ReadBool();  						m_Warmode = reader.ReadBool();  						m_Hidden = reader.ReadBool();  						m_Direction = (Direction)reader.ReadByte();  						m_Hue = reader.ReadInt();  						m_Str = reader.ReadInt();  						m_Dex = reader.ReadInt();  						m_Int = reader.ReadInt();  						m_Hits = reader.ReadInt();  						m_Stam = reader.ReadInt();  						m_Mana = reader.ReadInt();  						m_Map = reader.ReadMap();  						m_Blessed = reader.ReadBool();  						m_Fame = reader.ReadInt();  						m_Karma = reader.ReadInt();  						m_AccessLevel = (AccessLevel)reader.ReadByte();    						m_Skills = new Skills( this' reader );    						m_Items = reader.ReadStrongItemList();    						m_Player = reader.ReadBool();  						m_Title = reader.ReadString();  						m_Profile = reader.ReadString();  						m_ProfileLocked = reader.ReadBool();    						if( version <= 18 )  						{  							reader.ReadInt();  							reader.ReadInt();  							reader.ReadInt();  						}    						m_AutoPageNotify = reader.ReadBool();    						m_LogoutLocation = reader.ReadPoint3D();  						m_LogoutMap = reader.ReadMap();    						m_StrLock = (StatLockType)reader.ReadByte();  						m_DexLock = (StatLockType)reader.ReadByte();  						m_IntLock = (StatLockType)reader.ReadByte();    						m_StatMods = new List<StatMod>();  						m_SkillMods = new List<SkillMod>();    						if (version < 32)  						{  							if (reader.ReadBool())  							{  								int count = reader.ReadInt();  								for (int i = 0; i < count; ++i)  								{  									reader.ReadDateTime();  								}  							}  						}    						if( m_Player && m_Map != Map.Internal )  						{  							m_LogoutLocation = m_Location;  							m_LogoutMap = m_Map;    							m_Map = Map.Internal;  						}    						if( m_Map != null )  							m_Map.OnEnter( this );    						if( m_Criminal )  						{  							if( m_ExpireCriminal == null )  								m_ExpireCriminal = new ExpireCriminalTimer( this );    							m_ExpireCriminal.Start();  						}    						if( ShouldCheckStatTimers )  							CheckStatTimers();    						if( !m_Player && m_Dex <= 100 && m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.FiftyMS;  						else if( m_CombatTimer != null )  							m_CombatTimer.Priority = TimerPriority.EveryTick;    						UpdateRegion();    						UpdateResistances();    						break;  					}  			}
Missing Default,Server,Poison,C:\repos\runuo_runuo\Server\Poison.cs,Deserialize,The following switch statement is missing a default case: switch ( reader.ReadByte() )              {                  case 1: return GetPoison( reader.ReadByte() );                  case 2:                      //no longer used' safe to remove?                      reader.ReadInt();                      reader.ReadDouble();                      reader.ReadInt();                      reader.ReadTimeSpan();                      break;              }
Missing Default,Server,Skills,C:\repos\runuo_runuo\Server\Skills.cs,Skills,The following switch statement is missing a default case: switch ( version )  			{  				case 3:  				case 2:  				{  					m_Cap = reader.ReadInt();    					goto case 1;  				}  				case 1:  				{  					if ( version < 2 )  						m_Cap = 7000;    					if ( version < 3 )  						/*m_Total =*/ reader.ReadInt();    					SkillInfo[] info = SkillInfo.Table;    					m_Skills = new Skill[info.Length];    					int count = reader.ReadInt();    					for ( int i = 0; i < count; ++i )  					{  						if ( i < info.Length )  						{  							Skill sk = new Skill( this' info[i]' reader );    							if ( sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up )  							{  								m_Skills[i] = sk;  								m_Total += sk.BaseFixedPoint;  							}  						}  						else  						{  							new Skill( this' null' reader );  						}  					}    					//for ( int i = count; i < info.Length; ++i )  					//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );    					break;  				}  				case 0:  				{  					reader.ReadInt();    					goto case 1;  				}  			}
Missing Default,Server,Utility,C:\repos\runuo_runuo\Server\Utility.cs,RandomNondyedHue,The following switch statement is missing a default case: switch ( Random( 6 ) )  			{  				case 0: return RandomPinkHue();  				case 1: return RandomBlueHue();  				case 2: return RandomGreenHue();  				case 3: return RandomOrangeHue();  				case 4: return RandomRedHue();  				case 5: return RandomYellowHue();  			}
Missing Default,Server,VirtueInfo,C:\repos\runuo_runuo\Server\VirtueInfo.cs,VirtueInfo,The following switch statement is missing a default case: switch ( version )  			{  				case 1:	//Changed the values throughout the virtue system  				case 0:  				{  					int mask = reader.ReadByte();    					if ( mask != 0 )  					{  						m_Values = new int[8];    						for ( int i = 0; i < 8; ++i )  							if ( (mask & (1 << i)) != 0 )  								m_Values[i] = reader.ReadInt();  					}    					break;  				}  			}
Missing Default,Server.Gumps,GumpHtmlLocalized,C:\repos\runuo_runuo\Server\Gumps\GumpHtmlLocalized.cs,AppendTo,The following switch statement is missing a default case: switch ( m_Type )  			{  				case GumpHtmlLocalizedType.Plain:  				{  					disp.AppendLayout( m_LayoutNamePlain );    					disp.AppendLayout( m_X );  					disp.AppendLayout( m_Y );  					disp.AppendLayout( m_Width );  					disp.AppendLayout( m_Height );  					disp.AppendLayout( m_Number );  					disp.AppendLayout( m_Background );  					disp.AppendLayout( m_Scrollbar );    					break;  				}    				case GumpHtmlLocalizedType.Color:  				{  					disp.AppendLayout( m_LayoutNameColor );    					disp.AppendLayout( m_X );  					disp.AppendLayout( m_Y );  					disp.AppendLayout( m_Width );  					disp.AppendLayout( m_Height );  					disp.AppendLayout( m_Number );  					disp.AppendLayout( m_Background );  					disp.AppendLayout( m_Scrollbar );  					disp.AppendLayout( m_Color );    					break;  				}    				case GumpHtmlLocalizedType.Args:  				{  					disp.AppendLayout( m_LayoutNameArgs );    					disp.AppendLayout( m_X );  					disp.AppendLayout( m_Y );  					disp.AppendLayout( m_Width );  					disp.AppendLayout( m_Height );  					disp.AppendLayout( m_Background );  					disp.AppendLayout( m_Scrollbar );  					disp.AppendLayout( m_Color );  					disp.AppendLayout( m_Number );  					disp.AppendLayout( m_Args );    					break;  				}  			}
Missing Default,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,Deserialize,The following switch statement is missing a default case: switch ( version )  			{  				case 2:  				{  					SaveFlag flags = (SaveFlag)reader.ReadByte();    					if ( GetSaveFlag( flags' SaveFlag.MaxItems ) )  						m_MaxItems = reader.ReadEncodedInt();  					else  						m_MaxItems = -1;    					if ( GetSaveFlag( flags' SaveFlag.GumpID ) )  						m_GumpID = reader.ReadEncodedInt();  					else  						m_GumpID = -1;    					if ( GetSaveFlag( flags' SaveFlag.DropSound ) )  						m_DropSound = reader.ReadEncodedInt();  					else  						m_DropSound = -1;    					m_LiftOverride = GetSaveFlag( flags' SaveFlag.LiftOverride );    					break;  				}  				case 1:  				{  					m_MaxItems = reader.ReadInt();  					goto case 0;  				}  				case 0:  				{  					if ( version < 1 )  						m_MaxItems = m_GlobalMaxItems;    					m_GumpID = reader.ReadInt();  					m_DropSound = reader.ReadInt();    					if ( m_GumpID == DefaultGumpID )  						m_GumpID = -1;    					if ( m_DropSound == DefaultDropSound )  						m_DropSound = -1;    					if ( m_MaxItems == DefaultMaxItems )  						m_MaxItems = -1;    					//m_Bounds = new Rectangle2D( reader.ReadPoint2D()' reader.ReadPoint2D() );  					reader.ReadPoint2D();  					reader.ReadPoint2D();    					break;  				}  			}
Missing Default,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,GetTotal,The following switch statement is missing a default case: switch ( type )  			{  				case TotalType.Gold:  					return m_TotalGold;    				case TotalType.Items:  					return m_TotalItems;    				case TotalType.Weight:  					return m_TotalWeight;  			}
Missing Default,Server.Items,Container,C:\repos\runuo_runuo\Server\Items\Container.cs,UpdateTotal,The following switch statement is missing a default case: switch ( type )  				{  					case TotalType.Gold:  						m_TotalGold += delta;  						break;    					case TotalType.Items:  						m_TotalItems += delta;  						InvalidateProperties();  						break;    					case TotalType.Weight:  						m_TotalWeight += delta;  						InvalidateProperties();  						break;  				}
Missing Default,Server.Items,BankBox,C:\repos\runuo_runuo\Server\Items\Containers.cs,Deserialize,The following switch statement is missing a default case: switch ( version )  			{  				case 0:  				{  					m_Owner = reader.ReadMobile();  					m_Open = reader.ReadBool();    					if ( m_Owner == null )  						Delete();    					break;  				}  			}
Missing Default,Server.Movement,Movement,C:\repos\runuo_runuo\Server\Movement.cs,Offset,The following switch statement is missing a default case: switch ( d & Direction.Mask )  			{  				case Direction.North: --y; break;  				case Direction.South: ++y; break;  				case Direction.West:  --x; break;  				case Direction.East:  ++x; break;  				case Direction.Right: ++x; --y; break;  				case Direction.Left:  --x; ++y; break;  				case Direction.Down:  ++x; ++y; break;  				case Direction.Up:    --x; --y; break;  			}
Missing Default,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,SecureTrade,The following switch statement is missing a default case: switch ( pvSrc.ReadByte() )  			{  				case 1: // Cancel  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null && cont.Trade != null && (cont.Trade.From.Mobile == state.Mobile || cont.Trade.To.Mobile == state.Mobile) )  						cont.Trade.Cancel();    					break;  				}  				case 2: // Check  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem( serial ) as SecureTradeContainer;    					if ( cont != null )  					{  						SecureTrade trade = cont.Trade;    						bool value = ( pvSrc.ReadInt32() != 0 );    						if ( trade != null && trade.From.Mobile == state.Mobile )  						{  							trade.From.Accepted = value;  							trade.Update();  						}  						else if ( trade != null && trade.To.Mobile == state.Mobile )  						{  							trade.To.Accepted = value;  							trade.Update();  						}  					}    					break;  				}  				case 3: // Update Gold  				{  					Serial serial = pvSrc.ReadInt32();    					SecureTradeContainer cont = World.FindItem(serial) as SecureTradeContainer;    					if (cont != null)  					{  						int gold = pvSrc.ReadInt32();  						int plat = pvSrc.ReadInt32();    						SecureTrade trade = cont.Trade;    						if (trade != null)  						{  							if (trade.From.Mobile == state.Mobile)  							{  								trade.From.Gold = gold;  								trade.From.Plat = plat;  								trade.UpdateFromCurrency();  							}  							else if (trade.To.Mobile == state.Mobile)  							{  								trade.To.Gold = gold;  								trade.To.Plat = plat;  								trade.UpdateToCurrency();  							}  						}  					}  				}  				break;  			}
Missing Default,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,ProfileReq,The following switch statement is missing a default case: switch ( type )  			{  				case 0x00: // display request  				{  					EventSink.InvokeProfileRequest( new ProfileRequestEventArgs( beholder' beheld ) );    					break;  				}  				case 0x01: // edit request  				{  					pvSrc.ReadInt16(); // Skip  					int length = pvSrc.ReadUInt16();    					if ( length > 511 )  						return;    					string text = pvSrc.ReadUnicodeString( length );    					EventSink.InvokeChangeProfileRequest( new ChangeProfileRequestEventArgs( beholder' beheld' text ) );    					break;  				}  			}
Missing Default,Server.Network,PacketHandlers,C:\repos\runuo_runuo\Server\Network\PacketHandlers.cs,StatLockChange,The following switch statement is missing a default case: switch ( stat )  				{  					case 0: m.StrLock = (StatLockType)lockValue; break;  					case 1: m.DexLock = (StatLockType)lockValue; break;  					case 2: m.IntLock = (StatLockType)lockValue; break;  				}
Missing Default,Server.Network,PacketReader,C:\repos\runuo_runuo\Server\Network\PacketReader.cs,Seek,The following switch statement is missing a default case: switch ( origin )  			{  				case SeekOrigin.Begin: m_Index = offset; break;  				case SeekOrigin.Current: m_Index += offset; break;  				case SeekOrigin.End: m_Index = m_Size - offset; break;  			}
