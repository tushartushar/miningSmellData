Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc1_Click,The length of the statement  "	if ((B1.Text.Trim ().Length != 0) && (B2.Text.Trim ().Length != 0) && double.TryParse (B1.Text' out num) && double.TryParse (B2.Text' out num)) " is 143.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc2,The length of the statement  "	if ((C1.Text.Trim ().Length != 0) && (C2.Text.Trim ().Length != 0) && double.TryParse (C1.Text' out num) && double.TryParse (C2.Text' out num)) " is 143.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc3,The length of the statement  "	if ((D1.Text.Trim ().Length != 0) && (D2.Text.Trim ().Length != 0) && double.TryParse (D1.Text' out num) && double.TryParse (D2.Text' out num)) " is 143.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc4,The length of the statement  "	if ((E1.Text.Trim ().Length != 0) && (E2.Text.Trim ().Length != 0) && (E3.Text.Trim ().Length != 0) && double.TryParse (E1.Text' out num) && double.TryParse (E2.Text' out num) && double.TryParse (E3.Text' out num)) { " is 216.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The length of the statement  "	if (F7.Text.Trim ().Length != 0 && F17.Text.Trim ().Length != 0 && double.TryParse (F7.Text' out num) && double.TryParse (F17.Text' out num)) { " is 143.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc8,The length of the statement  "	if (F8.Text.Trim ().Length != 0 && F18.Text.Trim ().Length != 0 && double.TryParse (F8.Text' out num) && double.TryParse (F18.Text' out num)) { " is 143.
Long Statement,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc8,The length of the statement  "		R8.Text = Math.Abs ((double.Parse (F8.Text) * float.Parse (F18.Text) * float.Parse (F18.Text) / (tan * 4))).ToString (); " is 120.
Long Statement,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,calc_Click,The length of the statement  "	if (A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0 && double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) " is 202.
Long Statement,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The length of the statement  "	if (((A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0) || (A.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0) || (B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0)) && (double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num)) || (double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) || (double.TryParse (A.Text' out num) && double.TryParse (C.Text' out num))) { " is 419.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc5,The length of the statement  "	if (A1.Text.Trim ().Length != 0 && A2.Text.Trim ().Length != 0 && A3.Text.Trim ().Length != 0 && double.TryParse (A1.Text' out num) && double.TryParse (A2.Text' out num) && double.TryParse (A3.Text' out num)) " is 208.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc6,The length of the statement  "	if (B1.Text.Trim ().Length != 0 && B3.Text.Trim ().Length != 0 && double.TryParse (B1.Text' out num) && double.TryParse (B3.Text' out num)) " is 139.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc7,The length of the statement  "	if (I2.Text.Trim ().Length != 0 && I1.Text.Trim ().Length != 0 && double.TryParse (I2.Text' out num1) && double.TryParse (I1.Text' out num2)) { " is 143.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcX,The length of the statement  "	if (X1.Text.Trim ().Length != 0 && FX.Text.Trim ().Length != 0 && double.TryParse (X1.Text' out num) && double.TryParse (FX.Text' out num)) " is 139.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcX,The length of the statement  "		RX.Text = Math.Abs ((double)1.0 / (double)3.0 * float.Parse (X1.Text) * float.Parse (FX.Text) * float.Parse (FX.Text) * Math.PI).ToString (); " is 141.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcW,The length of the statement  "		RW.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FW.Text) * float.Parse (FW.Text) * float.Parse (FW.Text) * Math.PI).ToString (); " is 141.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The length of the statement  "	if (FZ.Text.Trim ().Length != 0 && FZ2.Text.Trim ().Length != 0 && FZ1.Text.Trim ().Length != 0 && double.TryParse (FZ.Text' out num) && double.TryParse (FZ1.Text' out num) && double.TryParse (FZ2.Text' out num)) " is 212.
Long Statement,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The length of the statement  "		RZ.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FZ.Text) * float.Parse (FZ1.Text) * float.Parse (FZ2.Text) * Math.PI).ToString (); " is 143.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc1_Click,The conditional expression  "(B1.Text.Trim ().Length != 0) && (B2.Text.Trim ().Length != 0) && double.TryParse (B1.Text' out num) && double.TryParse (B2.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc2,The conditional expression  "(C1.Text.Trim ().Length != 0) && (C2.Text.Trim ().Length != 0) && double.TryParse (C1.Text' out num) && double.TryParse (C2.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc3,The conditional expression  "(D1.Text.Trim ().Length != 0) && (D2.Text.Trim ().Length != 0) && double.TryParse (D1.Text' out num) && double.TryParse (D2.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc4,The conditional expression  "(E1.Text.Trim ().Length != 0) && (E2.Text.Trim ().Length != 0) && (E3.Text.Trim ().Length != 0) && double.TryParse (E1.Text' out num) && double.TryParse (E2.Text' out num) && double.TryParse (E3.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The conditional expression  "F7.Text.Trim ().Length != 0 && F17.Text.Trim ().Length != 0 && double.TryParse (F7.Text' out num) && double.TryParse (F17.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc8,The conditional expression  "F8.Text.Trim ().Length != 0 && F18.Text.Trim ().Length != 0 && double.TryParse (F8.Text' out num) && double.TryParse (F18.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,calc_Click,The conditional expression  "A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0 && double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The conditional expression  "((A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0) || (A.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0) || (B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0)) && (double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num)) || (double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) || (double.TryParse (A.Text' out num) && double.TryParse (C.Text' out num))"  is complex.
Complex Conditional,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc5,The conditional expression  "A1.Text.Trim ().Length != 0 && A2.Text.Trim ().Length != 0 && A3.Text.Trim ().Length != 0 && double.TryParse (A1.Text' out num) && double.TryParse (A2.Text' out num) && double.TryParse (A3.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc6,The conditional expression  "B1.Text.Trim ().Length != 0 && B3.Text.Trim ().Length != 0 && double.TryParse (B1.Text' out num) && double.TryParse (B3.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc7,The conditional expression  "I2.Text.Trim ().Length != 0 && I1.Text.Trim ().Length != 0 && double.TryParse (I2.Text' out num1) && double.TryParse (I1.Text' out num2)"  is complex.
Complex Conditional,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcX,The conditional expression  "X1.Text.Trim ().Length != 0 && FX.Text.Trim ().Length != 0 && double.TryParse (X1.Text' out num) && double.TryParse (FX.Text' out num)"  is complex.
Complex Conditional,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The conditional expression  "FZ.Text.Trim ().Length != 0 && FZ2.Text.Trim ().Length != 0 && FZ1.Text.Trim ().Length != 0 && double.TryParse (FZ.Text' out num) && double.TryParse (FZ1.Text' out num) && double.TryParse (FZ2.Text' out num)"  is complex.
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc1_Click,The following statement contains a magic number: if ((B1.Text.Trim ().Length != 0) && (B2.Text.Trim ().Length != 0) && double.TryParse (B1.Text' out num) && double.TryParse (B2.Text' out num))  	R1.Text = Math.Abs (((float.Parse (B1.Text) * float.Parse (B2.Text)) / 2)).ToString (CultureInfo.InvariantCulture);  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc1_Click,The following statement contains a magic number: R1.Text = Math.Abs (((float.Parse (B1.Text) * float.Parse (B2.Text)) / 2)).ToString (CultureInfo.InvariantCulture);  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc4,The following statement contains a magic number: if ((E1.Text.Trim ().Length != 0) && (E2.Text.Trim ().Length != 0) && (E3.Text.Trim ().Length != 0) && double.TryParse (E1.Text' out num) && double.TryParse (E2.Text' out num) && double.TryParse (E3.Text' out num)) {  	R4.Text = Math.Abs ((((float.Parse (E1.Text) * float.Parse (E2.Text)) / 2.0) * float.Parse (E3.Text))).ToString ();  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc4,The following statement contains a magic number: R4.Text = Math.Abs ((((float.Parse (E1.Text) * float.Parse (E2.Text)) / 2.0) * float.Parse (E3.Text))).ToString ();  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (F1.Text.Trim ().Length != 0 && double.TryParse (F1.Text' out num)) {  	if (Rad.IsChecked == true)  		R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) * float.Parse (F1.Text))).ToString ();  	else if (Dia.IsChecked == true)  		R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  	else {  		MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (F1.Text.Trim ().Length != 0 && double.TryParse (F1.Text' out num)) {  	if (Rad.IsChecked == true)  		R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) * float.Parse (F1.Text))).ToString ();  	else if (Dia.IsChecked == true)  		R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  	else {  		MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (Rad.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) * float.Parse (F1.Text))).ToString ();  else if (Dia.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (Rad.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) * float.Parse (F1.Text))).ToString ();  else if (Dia.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (Dia.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: if (Dia.IsChecked == true)  	R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc5,The following statement contains a magic number: R5.Text = Math.Abs ((Math.PI * float.Parse (F1.Text) / 2 * float.Parse (F1.Text) / 2)).ToString ();  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (F7.Text.Trim ().Length != 0 && F17.Text.Trim ().Length != 0 && double.TryParse (F7.Text' out num) && double.TryParse (F17.Text' out num)) {  	if (Rad1.IsChecked == true) {  		R7.Text = Math.Abs ((Math.PI * float.Parse (F7.Text) * float.Parse (F17.Text))).ToString ();  	}  	else if (Dia1.IsChecked == true)  		R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  	else {  		MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (F7.Text.Trim ().Length != 0 && F17.Text.Trim ().Length != 0 && double.TryParse (F7.Text' out num) && double.TryParse (F17.Text' out num)) {  	if (Rad1.IsChecked == true) {  		R7.Text = Math.Abs ((Math.PI * float.Parse (F7.Text) * float.Parse (F17.Text))).ToString ();  	}  	else if (Dia1.IsChecked == true)  		R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  	else {  		MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (Rad1.IsChecked == true) {  	R7.Text = Math.Abs ((Math.PI * float.Parse (F7.Text) * float.Parse (F17.Text))).ToString ();  }  else if (Dia1.IsChecked == true)  	R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (Rad1.IsChecked == true) {  	R7.Text = Math.Abs ((Math.PI * float.Parse (F7.Text) * float.Parse (F17.Text))).ToString ();  }  else if (Dia1.IsChecked == true)  	R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (Dia1.IsChecked == true)  	R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: if (Dia1.IsChecked == true)  	R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc7,The following statement contains a magic number: R7.Text = (Math.Abs (Math.PI * float.Parse (F7.Text) / 2 * float.Parse (F17.Text) / 2)).ToString ();  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc8,The following statement contains a magic number: if (F8.Text.Trim ().Length != 0 && F18.Text.Trim ().Length != 0 && double.TryParse (F8.Text' out num) && double.TryParse (F18.Text' out num)) {  	var tan = new double ();  	tan = Math.Tan (Math.PI / double.Parse (F8.Text));  	R8.Text = Math.Abs ((double.Parse (F8.Text) * float.Parse (F18.Text) * float.Parse (F18.Text) / (tan * 4))).ToString ();  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Areas,C:\repos\jpdias_TrigMeter\Areas.xaml.cs,Calc8,The following statement contains a magic number: R8.Text = Math.Abs ((double.Parse (F8.Text) * float.Parse (F18.Text) * float.Parse (F18.Text) / (tan * 4))).ToString ();  
Magic Number,TrigMeter,MainPage,C:\repos\jpdias_TrigMeter\MainPage.xaml.cs,MainPage,The following statement contains a magic number: Thread.Sleep (700);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart > 0) {  	x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x1' 5).ToString ();  	R2.Text = Math.Round (x2' 5).ToString ();  	// Console.WriteLine("Two Real Solutions: {0'8:f4} or  {1'8:f4}"' x1' x2);  }  else if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: x1 = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: x2 = (-b - Math.Sqrt (sqrtpart)) / (2 * a);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R1.Text = Math.Round (x1' 5).ToString ();  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R2.Text = Math.Round (x2' 5).ToString ();  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: if (sqrtpart < 0) {  	sqrtpart = -sqrtpart;  	x = -b / (2 * a);  	img = Math.Sqrt (sqrtpart) / (2 * a);  	R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  	R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  	// Console.WriteLine("Two Imaginary Solutions: {0'8:f4} + {1'8:f4} i or {2'8:f4} + {3'8:f4} i"' x' img' x' img);  }  else {  	x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  	R1.Text = Math.Round (x' 10).ToString ();  	R2.Text = "Null";  	//  Console.WriteLine("One Real Solution: {0'8:f4}"' x);  }  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: x = -b / (2 * a);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: img = Math.Sqrt (sqrtpart) / (2 * a);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R1.Text = Math.Round (x' 5) + " + " + Math.Round (img' 4) + " i";  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R2.Text = Math.Round (x' 5) + " - " + Math.Round (img' 4) + " i";  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: x = (-b + Math.Sqrt (sqrtpart)) / (2 * a);  
Magic Number,TrigMeter,Solve,C:\repos\jpdias_TrigMeter\Solve.xaml.cs,SolveQuadratic,The following statement contains a magic number: R1.Text = Math.Round (x' 10).ToString ();  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (((A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0) || (A.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0) || (B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0)) && (double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num)) || (double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) || (double.TryParse (A.Text' out num) && double.TryParse (C.Text' out num))) {  	if (C.Text.Trim ().Length == 0) {  		a = float.Parse (A.Text);  		b = float.Parse (B.Text);  		alfa = a;  		beta = b;  		//c = float.Parse(C.Text);  		c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  		C.Text = c.ToString ();  		angles (a' b' c);  	}  	else if (A.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		b = float.Parse (B.Text);  		alfa = c;  		beta = b;  		if (b > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  		A.Text = a.ToString ();  		angles (a' b' c);  	}  	else if (B.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		a = float.Parse (A.Text);  		alfa = c;  		beta = a;  		if (a > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  		B.Text = b.ToString ();  		angles (a' b' c);  	}  	else {  		clear ();  		MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  		clear ();  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (((A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0) || (A.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0) || (B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0)) && (double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num)) || (double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) || (double.TryParse (A.Text' out num) && double.TryParse (C.Text' out num))) {  	if (C.Text.Trim ().Length == 0) {  		a = float.Parse (A.Text);  		b = float.Parse (B.Text);  		alfa = a;  		beta = b;  		//c = float.Parse(C.Text);  		c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  		C.Text = c.ToString ();  		angles (a' b' c);  	}  	else if (A.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		b = float.Parse (B.Text);  		alfa = c;  		beta = b;  		if (b > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  		A.Text = a.ToString ();  		angles (a' b' c);  	}  	else if (B.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		a = float.Parse (A.Text);  		alfa = c;  		beta = a;  		if (a > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  		B.Text = b.ToString ();  		angles (a' b' c);  	}  	else {  		clear ();  		MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  		clear ();  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (((A.Text.Trim ().Length != 0 && B.Text.Trim ().Length != 0) || (A.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0) || (B.Text.Trim ().Length != 0 && C.Text.Trim ().Length != 0)) && (double.TryParse (A.Text' out num) && double.TryParse (B.Text' out num)) || (double.TryParse (B.Text' out num) && double.TryParse (C.Text' out num)) || (double.TryParse (A.Text' out num) && double.TryParse (C.Text' out num))) {  	if (C.Text.Trim ().Length == 0) {  		a = float.Parse (A.Text);  		b = float.Parse (B.Text);  		alfa = a;  		beta = b;  		//c = float.Parse(C.Text);  		c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  		C.Text = c.ToString ();  		angles (a' b' c);  	}  	else if (A.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		b = float.Parse (B.Text);  		alfa = c;  		beta = b;  		if (b > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  		A.Text = a.ToString ();  		angles (a' b' c);  	}  	else if (B.Text.Trim ().Length == 0) {  		c = float.Parse (C.Text);  		a = float.Parse (A.Text);  		alfa = c;  		beta = a;  		if (a > c) {  			MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  			return;  		}  		//c = float.Parse(C.Text);  		b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  		B.Text = b.ToString ();  		angles (a' b' c);  	}  	else {  		clear ();  		MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  		clear ();  	}  }  else {  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (C.Text.Trim ().Length == 0) {  	a = float.Parse (A.Text);  	b = float.Parse (B.Text);  	alfa = a;  	beta = b;  	//c = float.Parse(C.Text);  	c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  	C.Text = c.ToString ();  	angles (a' b' c);  }  else if (A.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	b = float.Parse (B.Text);  	alfa = c;  	beta = b;  	if (b > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  	A.Text = a.ToString ();  	angles (a' b' c);  }  else if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (C.Text.Trim ().Length == 0) {  	a = float.Parse (A.Text);  	b = float.Parse (B.Text);  	alfa = a;  	beta = b;  	//c = float.Parse(C.Text);  	c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  	C.Text = c.ToString ();  	angles (a' b' c);  }  else if (A.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	b = float.Parse (B.Text);  	alfa = c;  	beta = b;  	if (b > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  	A.Text = a.ToString ();  	angles (a' b' c);  }  else if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (C.Text.Trim ().Length == 0) {  	a = float.Parse (A.Text);  	b = float.Parse (B.Text);  	alfa = a;  	beta = b;  	//c = float.Parse(C.Text);  	c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  	C.Text = c.ToString ();  	angles (a' b' c);  }  else if (A.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	b = float.Parse (B.Text);  	alfa = c;  	beta = b;  	if (b > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  	A.Text = a.ToString ();  	angles (a' b' c);  }  else if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: c = (float)Math.Round (Math.Sqrt (a * a + b * b)' 5);  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (A.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	b = float.Parse (B.Text);  	alfa = c;  	beta = b;  	if (b > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  	A.Text = a.ToString ();  	angles (a' b' c);  }  else if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (A.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	b = float.Parse (B.Text);  	alfa = c;  	beta = b;  	if (b > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  	A.Text = a.ToString ();  	angles (a' b' c);  }  else if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: a = (float)Math.Round (Math.Sqrt (c * c - b * b)' 5);  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: if (B.Text.Trim ().Length == 0) {  	c = float.Parse (C.Text);  	a = float.Parse (A.Text);  	alfa = c;  	beta = a;  	if (a > c) {  		MessageBox.Show ("Cathethus can't be larger than hypotenuse!"' ""' MessageBoxButton.OK);  		return;  	}  	//c = float.Parse(C.Text);  	b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  	B.Text = b.ToString ();  	angles (a' b' c);  }  else {  	clear ();  	MessageBox.Show ("One box must be empty!"' ""' MessageBoxButton.OK);  	clear ();  }  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,Button_Click,The following statement contains a magic number: b = (float)Math.Round ((Math.Sqrt (c * c - a * a))' 5);  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,DTR,The following statement contains a magic number: return (Math.PI * angle) / 180.0;  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,angles,The following statement contains a magic number: c1 = Math.Round (RTD (Math.Acos (((b * b + c * c - a * a) / (2 * b * c))))' 5).ToString ();  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,angles,The following statement contains a magic number: c1 = Math.Round (RTD (Math.Acos (((b * b + c * c - a * a) / (2 * b * c))))' 5).ToString ();  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,angles,The following statement contains a magic number: c2 = Math.Round (RTD (Math.Acos (((-b * b + c * c + a * a) / (2 * a * c))))' 5).ToString ();  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,angles,The following statement contains a magic number: c2 = Math.Round (RTD (Math.Acos (((-b * b + c * c + a * a) / (2 * a * c))))' 5).ToString ();  
Magic Number,TrigMeter,Pyth,C:\repos\jpdias_TrigMeter\Pyth.xaml.cs,RTD,The following statement contains a magic number: return angle * (180.0 / Math.PI);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc7,The following statement contains a magic number: if (I2.Text.Trim ().Length != 0 && I1.Text.Trim ().Length != 0 && double.TryParse (I2.Text' out num1) && double.TryParse (I1.Text' out num2)) {  	R6.Text = ((double)1.0 / (double)3.0 * num1 * num2).ToString ();  }  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,Calc7,The following statement contains a magic number: R6.Text = ((double)1.0 / (double)3.0 * num1 * num2).ToString ();  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcX,The following statement contains a magic number: if (X1.Text.Trim ().Length != 0 && FX.Text.Trim ().Length != 0 && double.TryParse (X1.Text' out num) && double.TryParse (FX.Text' out num))  	RX.Text = Math.Abs ((double)1.0 / (double)3.0 * float.Parse (X1.Text) * float.Parse (FX.Text) * float.Parse (FX.Text) * Math.PI).ToString ();  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcX,The following statement contains a magic number: RX.Text = Math.Abs ((double)1.0 / (double)3.0 * float.Parse (X1.Text) * float.Parse (FX.Text) * float.Parse (FX.Text) * Math.PI).ToString ();  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcW,The following statement contains a magic number: if (FW.Text.Trim ().Length != 0 && double.TryParse (FW.Text' out num))  	RW.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FW.Text) * float.Parse (FW.Text) * float.Parse (FW.Text) * Math.PI).ToString ();  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcW,The following statement contains a magic number: if (FW.Text.Trim ().Length != 0 && double.TryParse (FW.Text' out num))  	RW.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FW.Text) * float.Parse (FW.Text) * float.Parse (FW.Text) * Math.PI).ToString ();  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcW,The following statement contains a magic number: RW.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FW.Text) * float.Parse (FW.Text) * float.Parse (FW.Text) * Math.PI).ToString ();  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcW,The following statement contains a magic number: RW.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FW.Text) * float.Parse (FW.Text) * float.Parse (FW.Text) * Math.PI).ToString ();  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The following statement contains a magic number: if (FZ.Text.Trim ().Length != 0 && FZ2.Text.Trim ().Length != 0 && FZ1.Text.Trim ().Length != 0 && double.TryParse (FZ.Text' out num) && double.TryParse (FZ1.Text' out num) && double.TryParse (FZ2.Text' out num))  	RZ.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FZ.Text) * float.Parse (FZ1.Text) * float.Parse (FZ2.Text) * Math.PI).ToString ();  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The following statement contains a magic number: if (FZ.Text.Trim ().Length != 0 && FZ2.Text.Trim ().Length != 0 && FZ1.Text.Trim ().Length != 0 && double.TryParse (FZ.Text' out num) && double.TryParse (FZ1.Text' out num) && double.TryParse (FZ2.Text' out num))  	RZ.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FZ.Text) * float.Parse (FZ1.Text) * float.Parse (FZ2.Text) * Math.PI).ToString ();  else  	MessageBox.Show ("No data!"' ""' MessageBoxButton.OK);  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The following statement contains a magic number: RZ.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FZ.Text) * float.Parse (FZ1.Text) * float.Parse (FZ2.Text) * Math.PI).ToString ();  
Magic Number,TrigMeter,Volume,C:\repos\jpdias_TrigMeter\Volume.xaml.cs,CalcZ,The following statement contains a magic number: RZ.Text = Math.Abs ((double)4.0 / (double)3.0 * float.Parse (FZ.Text) * float.Parse (FZ1.Text) * float.Parse (FZ2.Text) * Math.PI).ToString ();  
