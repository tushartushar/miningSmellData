Implementation smell,Namespace,Class,File,Method,Description
Long Method,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The method has 182 lines of code.
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Messages can be sent just by calling methods.                  // Returned tasks will be notified when network response will be received                  // from server.                  Console.WriteLine();                  Console.WriteLine("5 + 4 = " + calculator.Add(5' 4).Result);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Messages can be sent just by calling methods.                  // Returned tasks will be notified when network response will be received                  // from server.                  Console.WriteLine();                  Console.WriteLine("5 + 4 = " + calculator.Add(5' 4).Result);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Primitive types are serialized automatically' if custom classes are to be used                  // they should be implemented with ProtoContract and ProtoMember attributes'                  // so that Protobuf-net will know how to serialize them.                  // Complex objects can be used both as parameters and results.                  var rectInfo = calculator.CalculateRectangle(new Rectangle { A = 5' B = 6 }).Result;                    Console.WriteLine();                  Console.WriteLine("Recangle 5 x 6 has field equal = {0} and perimeter = {1}"'                      rectInfo.Field' rectInfo.Perimeter);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Primitive types are serialized automatically' if custom classes are to be used                  // they should be implemented with ProtoContract and ProtoMember attributes'                  // so that Protobuf-net will know how to serialize them.                  // Complex objects can be used both as parameters and results.                  var rectInfo = calculator.CalculateRectangle(new Rectangle { A = 5' B = 6 }).Result;                    Console.WriteLine();                  Console.WriteLine("Recangle 5 x 6 has field equal = {0} and perimeter = {1}"'                      rectInfo.Field' rectInfo.Perimeter);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Because actor called on the server side is always the same instance                  // (until client has been reconnected' which gives no warranty on state of server actor)                  // it can be used to persist state just as local actor can.                    // Note: You don't need to wait for task to finish' messages are invoked on the server                  // in the order they were called by client proxy.                  calculator.PushNumber(12.0);                  calculator.PushNumber(15.0);                    var x = calculator.PopNumber();                  var y = calculator.PopNumber();                    Console.WriteLine();                  Console.WriteLine("15 - 12 = " + calculator.Subtract(x.Result' y.Result).Result);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Because actor called on the server side is always the same instance                  // (until client has been reconnected' which gives no warranty on state of server actor)                  // it can be used to persist state just as local actor can.                    // Note: You don't need to wait for task to finish' messages are invoked on the server                  // in the order they were called by client proxy.                  calculator.PushNumber(12.0);                  calculator.PushNumber(15.0);                    var x = calculator.PopNumber();                  var y = calculator.PopNumber();                    Console.WriteLine();                  Console.WriteLine("15 - 12 = " + calculator.Subtract(x.Result' y.Result).Result);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Arrays and even enumerables can be used as parameters                  var mean = calculator.Mean(new[] { 5.0' 4.0' 3.0' 1.0' 14.0 }).Result;                  var mean2 = calculator.MeanEnum((new List<double> { 5.0' 4.0' 3.0' 1.0' 14.0 }).AsEnumerable()).Result;                    Console.WriteLine();                  Console.WriteLine("Mean of [1' 3' 4' 5' 14] equals " + mean);                  Console.WriteLine("Double check: " + mean2);              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Created actor proxy is' from the user's perspective just an interface'                  // which can also be implemented by local actor' therefore'                  // where the code executes is fully transparent for other methods.                  ICalculatorActor localCalc = ActorSystem.Default.CreateActor<ICalculatorActor' CalculatorActor>();                    Console.WriteLine();                  Console.WriteLine("Remote: 4 + 8 = " + Add(calculator' 4' 8));                  Console.WriteLine("Local: 4 + 8 = " + Add(localCalc' 4' 8));              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Created actor proxy is' from the user's perspective just an interface'                  // which can also be implemented by local actor' therefore'                  // where the code executes is fully transparent for other methods.                  ICalculatorActor localCalc = ActorSystem.Default.CreateActor<ICalculatorActor' CalculatorActor>();                    Console.WriteLine();                  Console.WriteLine("Remote: 4 + 8 = " + Add(calculator' 4' 8));                  Console.WriteLine("Local: 4 + 8 = " + Add(localCalc' 4' 8));              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Created actor proxy is' from the user's perspective just an interface'                  // which can also be implemented by local actor' therefore'                  // where the code executes is fully transparent for other methods.                  ICalculatorActor localCalc = ActorSystem.Default.CreateActor<ICalculatorActor' CalculatorActor>();                    Console.WriteLine();                  Console.WriteLine("Remote: 4 + 8 = " + Add(calculator' 4' 8));                  Console.WriteLine("Local: 4 + 8 = " + Add(localCalc' 4' 8));              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: {                  // Created actor proxy is' from the user's perspective just an interface'                  // which can also be implemented by local actor' therefore'                  // where the code executes is fully transparent for other methods.                  ICalculatorActor localCalc = ActorSystem.Default.CreateActor<ICalculatorActor' CalculatorActor>();                    Console.WriteLine();                  Console.WriteLine("Remote: 4 + 8 = " + Add(calculator' 4' 8));                  Console.WriteLine("Local: 4 + 8 = " + Add(localCalc' 4' 8));              }
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,RemoteActorsSample,Program,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculatorActor,The following statement contains a magic number: Task.Run(async () =>                  {                      while (true)                      {                          ++x;                          await Task.Delay(1000);                          messages.OnNext(new Message                              {                                  X = x'                                  Y = x * 2'                                  Info = new RectangleInfo                                  {                                      Field = x * (x * 2)'                                      Perimeter = x * 6                                  }                              });                      }                  });
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculatorActor,The following statement contains a magic number: Task.Run(async () =>                  {                      while (true)                      {                          ++x;                          await Task.Delay(1000);                          messages.OnNext(new Message                              {                                  X = x'                                  Y = x * 2'                                  Info = new RectangleInfo                                  {                                      Field = x * (x * 2)'                                      Perimeter = x * 6                                  }                              });                      }                  });
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculatorActor,The following statement contains a magic number: Task.Run(async () =>                  {                      while (true)                      {                          ++x;                          await Task.Delay(1000);                          messages.OnNext(new Message                              {                                  X = x'                                  Y = x * 2'                                  Info = new RectangleInfo                                  {                                      Field = x * (x * 2)'                                      Perimeter = x * 6                                  }                              });                      }                  });
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculatorActor,The following statement contains a magic number: Task.Run(async () =>                  {                      while (true)                      {                          ++x;                          await Task.Delay(1000);                          messages.OnNext(new Message                              {                                  X = x'                                  Y = x * 2'                                  Info = new RectangleInfo                                  {                                      Field = x * (x * 2)'                                      Perimeter = x * 6                                  }                              });                      }                  });
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculateRectangle,The following statement contains a magic number: return new RectangleInfo()              {                  Field = rect.A * rect.B'                  Perimeter = rect.A * 2.0 + rect.B * 2.0              };
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,CalculateRectangle,The following statement contains a magic number: return new RectangleInfo()              {                  Field = rect.A * rect.B'                  Perimeter = rect.A * 2.0 + rect.B * 2.0              };
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,Ping,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,RemoteActorsSample,CalculatorActor,C:\repos\Ravadre_Stacks\Examples\RemoteActorsSample\Server.cs,PingAsync,The following statement contains a magic number: return Task.Run(() =>                  {                      Console.WriteLine("Ping async");                      Thread.Sleep(1000);                  });
