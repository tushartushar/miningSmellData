Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,SslClient,The length of the parameter remoteCertificateValidationCallback is 35.
Long Identifier,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,InitializeAsClient,The length of the parameter remoteCertificateValidationCallback is 35.
Empty Catch Block,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SafeCloseSocket,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SafeCloseSocket,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SafeCloseSocket,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SafeCloseSocket,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SafeCloseSocket,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,HandleSslDisconnection,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,CleanupStreams,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,CleanupStreams,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SslClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SslClient.cs,ReadLoop,The method has an empty catch block.
Empty Catch Block,Stacks.Tcp,SocketServer,C:\repos\Ravadre_Stacks\Stacks\Server\Tcp\SocketServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,Stacks,RawByteClientStream,C:\repos\Ravadre_Stacks\Stacks\Client\RawByteClientStream.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Stacks,ActionBlockExecutor,C:\repos\Ravadre_Stacks\Stacks\Executors\ActionBlockExecutor.Mono.cs,OnError,The method has an empty catch block.
Magic Number,Stacks.Tcp,FramedClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\FramedClient.cs,FramedClient,The following statement contains a magic number: recvBuffer = new ResizableCyclicBuffer(4096);
Magic Number,Stacks.Tcp,MessageClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\MessageClient.cs,PacketReceived,The following statement contains a magic number: fixed (byte* b = &buffer.Array[buffer.Offset])              {                  int messageId = *((int*)b);                  using (var ms = new MemoryStream(buffer.Array' buffer.Offset + 4' buffer.Count - 4))                  {                      this.packetSerializationHandler.Deserialize(messageId' ms);                  }              }
Magic Number,Stacks.Tcp,MessageClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\MessageClient.cs,PacketReceived,The following statement contains a magic number: fixed (byte* b = &buffer.Array[buffer.Offset])              {                  int messageId = *((int*)b);                  using (var ms = new MemoryStream(buffer.Array' buffer.Offset + 4' buffer.Count - 4))                  {                      this.packetSerializationHandler.Deserialize(messageId' ms);                  }              }
Magic Number,Stacks.Tcp,MessageClientBase,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\MessageClientBase.cs,Send,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  ms.SetLength(4);                  ms.Position = 4;                  this.packetSerializer.Serialize(obj' ms);                  ms.Position = 0;                    var buffer = ms.GetBuffer();                    fixed (byte* buf = buffer)                  {                      int* iBuf = (int*)buf;                      *iBuf = messageId;                  }                    this.framedClient.SendPacket(new ArraySegment<byte>(buffer' 0' (int)ms.Length));              }
Magic Number,Stacks.Tcp,MessageClientBase,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\MessageClientBase.cs,Send,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  ms.SetLength(4);                  ms.Position = 4;                  this.packetSerializer.Serialize(obj' ms);                  ms.Position = 0;                    var buffer = ms.GetBuffer();                    fixed (byte* buf = buffer)                  {                      int* iBuf = (int*)buf;                      *iBuf = messageId;                  }                    this.framedClient.SendPacket(new ArraySegment<byte>(buffer' 0' (int)ms.Length));              }
Magic Number,Stacks.Tcp,ReactiveMessageClient<T>,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\ReactiveMessageClient.cs,PacketReceived,The following statement contains a magic number: fixed (byte* b = &buffer.Array[buffer.Offset])              {                  int messageId = *((int*)b);                  using (var ms = new MemoryStream(buffer.Array' buffer.Offset + 4' buffer.Count - 4))                  {                      if (deserializeByMessageId.TryGetValue(messageId' out handler))                      {                          handler(ms);                      }                      else                      {                          throw new InvalidOperationException(                              string.Format("No registered message handler for message id {0}"' messageId));                      }                  }              }
Magic Number,Stacks.Tcp,ReactiveMessageClient<T>,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\ReactiveMessageClient.cs,PacketReceived,The following statement contains a magic number: fixed (byte* b = &buffer.Array[buffer.Offset])              {                  int messageId = *((int*)b);                  using (var ms = new MemoryStream(buffer.Array' buffer.Offset + 4' buffer.Count - 4))                  {                      if (deserializeByMessageId.TryGetValue(messageId' out handler))                      {                          handler(ms);                      }                      else                      {                          throw new InvalidOperationException(                              string.Format("No registered message handler for message id {0}"' messageId));                      }                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,Connect,The following statement contains a magic number: executor.Enqueue(() =>              {                  connectArgs = new SocketAsyncEventArgs();                  connectArgs.Completed += ConnectedCapture;                  connectArgs.RemoteEndPoint = remoteEndPoint;                    bool isPending = this.socket.ConnectAsync(connectArgs);                    if (!isPending)                      ConnectedCapture(this' this.connectArgs);                  else                  {                      connectionInProgress = true;                      connectionTimeoutTimer.Change(20000' -1);                  }              });
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SetFastLoopbackOption,The following statement contains a magic number: const int SIO_LOOPBACK_FAST_PATH = -1744830448;
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SetFastLoopbackOption,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT)              {                  // Win8/Server2012+ only                  var osVersion = Environment.OSVersion.Version;                  if (osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2)                  {                      byte[] optionInValue = BitConverter.GetBytes(1);                      socket.IOControl(SIO_LOOPBACK_FAST_PATH' optionInValue' null);                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SetFastLoopbackOption,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT)              {                  // Win8/Server2012+ only                  var osVersion = Environment.OSVersion.Version;                  if (osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2)                  {                      byte[] optionInValue = BitConverter.GetBytes(1);                      socket.IOControl(SIO_LOOPBACK_FAST_PATH' optionInValue' null);                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,SetFastLoopbackOption,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT)              {                  // Win8/Server2012+ only                  var osVersion = Environment.OSVersion.Version;                  if (osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2)                  {                      byte[] optionInValue = BitConverter.GetBytes(1);                      socket.IOControl(SIO_LOOPBACK_FAST_PATH' optionInValue' null);                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,AddBufferToBufferList,The following statement contains a magic number: if (this.toSendBuffers.Count == 0)              {                  this.toSendBuffers.AddLast(new List<ArraySegment<byte>>(1024)                  {                      buffer                  });              }              else              {                  var lastBuffer = this.toSendBuffers.Last.Value;                  if (lastBuffer.Count < 1024)                  {                      lastBuffer.Add(buffer);                  }                  else                  {                      var newBuffer = new List<ArraySegment<byte>>(1024)                      {                          buffer                      };                      this.toSendBuffers.AddLast(newBuffer);                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,AddBufferToBufferList,The following statement contains a magic number: if (this.toSendBuffers.Count == 0)              {                  this.toSendBuffers.AddLast(new List<ArraySegment<byte>>(1024)                  {                      buffer                  });              }              else              {                  var lastBuffer = this.toSendBuffers.Last.Value;                  if (lastBuffer.Count < 1024)                  {                      lastBuffer.Add(buffer);                  }                  else                  {                      var newBuffer = new List<ArraySegment<byte>>(1024)                      {                          buffer                      };                      this.toSendBuffers.AddLast(newBuffer);                  }              }
Magic Number,Stacks.Tcp,SocketClient,C:\repos\Ravadre_Stacks\Stacks\Client\Tcp\SocketClient.cs,AddBufferToBufferList,The following statement contains a magic number: if (this.toSendBuffers.Count == 0)              {                  this.toSendBuffers.AddLast(new List<ArraySegment<byte>>(1024)                  {                      buffer                  });              }              else              {                  var lastBuffer = this.toSendBuffers.Last.Value;                  if (lastBuffer.Count < 1024)                  {                      lastBuffer.Add(buffer);                  }                  else                  {                      var newBuffer = new List<ArraySegment<byte>>(1024)                      {                          buffer                      };                      this.toSendBuffers.AddLast(newBuffer);                  }              }
Magic Number,Stacks.Tcp,SocketServer,C:\repos\Ravadre_Stacks\Stacks\Server\Tcp\SocketServer.cs,IsWinVistaOrHigher,The following statement contains a magic number: return (OS.Platform == PlatformID.Win32NT) && (OS.Version.Major >= 6);
Magic Number,Stacks.Tcp,SocketServer,C:\repos\Ravadre_Stacks\Stacks\Server\Tcp\SocketServer.cs,Start,The following statement contains a magic number: this.socket.Listen(50);
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FramedClientBuffer,The following statement contains a magic number: var intBuffer = new byte[packetLength + 4];
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FramedClientBuffer,The following statement contains a magic number: PrepareHeader(intBuffer' packetLength + 4);
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FramedClientBuffer,The following statement contains a magic number: Packet = new ArraySegment<byte>(intBuffer' 4' packetLength);
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FromPacket,The following statement contains a magic number: var intBuffer = new byte[buffer.Count + 4];
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FromPacket,The following statement contains a magic number: PrepareHeader(intBuffer' buffer.Count + 4);
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FromPacket,The following statement contains a magic number: Buffer.BlockCopy(buffer.Array' buffer.Offset' intBuffer' 4' buffer.Count);
Magic Number,Stacks,FramedClientBuffer,C:\repos\Ravadre_Stacks\Stacks\Client\FramedClientBuffer.cs,FromPacket,The following statement contains a magic number: framedBuffer.Packet = new ArraySegment<byte>(intBuffer' 4' buffer.Count);
Magic Number,Stacks,RawByteClientStream,C:\repos\Ravadre_Stacks\Stacks\Client\RawByteClientStream.cs,RawByteClientStream,The following statement contains a magic number: this.buffer = new ResizableCyclicBuffer(4096);
Magic Number,Stacks,ActionBlockExecutor,C:\repos\Ravadre_Stacks\Stacks\Executors\ActionBlockExecutor.Mono.cs,Run,The following statement contains a magic number: while (true)              {                  if (this.isStopping && (col.Count == 0 || stopImmediately))                      break;                    if (col.TryTake(out a' 50))                  {                      ExecuteAction(a);                  }              }
Magic Number,Stacks,ResizableCyclicBuffer,C:\repos\Ravadre_Stacks\Stacks\ResizableCyclicBuffer.cs,ResizeBuffer,The following statement contains a magic number: byte[] newBuffer = new byte[buffer.Length * 2];
Magic Number,Stacks,ResizableCyclicBuffer,C:\repos\Ravadre_Stacks\Stacks\ResizableCyclicBuffer.cs,GetPackets,The following statement contains a magic number: if (endOffset < 4)                  return EmptyPacketList;
Magic Number,Stacks,ResizableCyclicBuffer,C:\repos\Ravadre_Stacks\Stacks\ResizableCyclicBuffer.cs,GetPackets,The following statement contains a magic number: fixed (byte* b = buffer)              {                  byte* bPtr = b;                    while (true)                  {                      if (beginOffset + 4 > endOffset)                          break;                        int size = *((int*)bPtr);                        if (beginOffset + size > endOffset)                          break;                        packets.Add(new ArraySegment<byte>                          (buffer' beginOffset + 4' size - 4));                        beginOffset += size;                      bPtr += size;                  }              }
Magic Number,Stacks,ResizableCyclicBuffer,C:\repos\Ravadre_Stacks\Stacks\ResizableCyclicBuffer.cs,GetPackets,The following statement contains a magic number: fixed (byte* b = buffer)              {                  byte* bPtr = b;                    while (true)                  {                      if (beginOffset + 4 > endOffset)                          break;                        int size = *((int*)bPtr);                        if (beginOffset + size > endOffset)                          break;                        packets.Add(new ArraySegment<byte>                          (buffer' beginOffset + 4' size - 4));                        beginOffset += size;                      bPtr += size;                  }              }
Magic Number,Stacks,ResizableCyclicBuffer,C:\repos\Ravadre_Stacks\Stacks\ResizableCyclicBuffer.cs,GetPackets,The following statement contains a magic number: fixed (byte* b = buffer)              {                  byte* bPtr = b;                    while (true)                  {                      if (beginOffset + 4 > endOffset)                          break;                        int size = *((int*)bPtr);                        if (beginOffset + size > endOffset)                          break;                        packets.Add(new ArraySegment<byte>                          (buffer' beginOffset + 4' size - 4));                        beginOffset += size;                      bPtr += size;                  }              }
Magic Number,Stacks,StacksSerializationHandler,C:\repos\Ravadre_Stacks\Stacks\Serializers\StacksSerializationHandler.cs,IsValidMessageHandlerMethod,The following statement contains a magic number: if (mi.GetParameters().Length != 2)                  return false;
