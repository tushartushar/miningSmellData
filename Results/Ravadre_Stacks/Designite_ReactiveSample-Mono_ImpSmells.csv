Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ReactiveSample,Client,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Client.cs,Run,The following statement contains a magic number: client.Connect(new IPEndPoint(IPAddress.Loopback' serverPort))                    .Subscribe(async _ =>                    {                        await Task.Delay(2000);                        client.Send(new RegisterSymbolRequest() { Symbol = "EURUSD"' Register = true });                        client.Send(new RegisterSymbolRequest() { Symbol = "GBPLN"' Register = true });                    });
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: prices = new List<Price>              {                  new Price { Symbol = "EURUSD"' Bid = 1.34215' Offer = 1.34241 }'                  new Price { Symbol = "GBPUSD"' Bid = 1.68064' Offer = 1.68073 }'                  new Price { Symbol = "GBPLN"' Bid = 5.04360' Offer = 5.04385 }'              };
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
Magic Number,ReactiveSample,MarketService,C:\repos\Ravadre_Stacks\Examples\ReactiveSample\Server.cs,MarketService,The following statement contains a magic number: PricesChanged = Observable.Interval(TimeSpan.FromSeconds(1.0)' Context)                                  .Do(_ =>                                      {                                          foreach (var p in prices)                                          {                                              p.Bid += (rng.Next(10) - 4) * Math.Pow(10' -5);                                              p.Offer += (rng.Next(10) - 4) * Math.Pow(10' -5);                                          }                                      })                                  .Select(_ => prices.Where(p => registeredSymbols.Contains(p.Symbol))                                                    .ToArray())                                  .Where(p => p.Length > 0);
