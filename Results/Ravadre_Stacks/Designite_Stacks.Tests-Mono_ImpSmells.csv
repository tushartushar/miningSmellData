Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Stacks.Tests.Serialization,SerializationHandlerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\SerializationHandlerTests.cs,Deserialize_should_call_appropriate_handler,The length of the statement  "            h.Setup(m => m.HandleTestData2(It.IsAny<IMessageClient>()' It.IsAny<TestData2>())).Callback((IMessageClient _' TestData2 c) => " is 126.
Magic Number,Stacks.Tests,Base,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,CreateSampleTestData,The following statement contains a magic number: return new TestData { Bar = Math.PI' Zar = (decimal)Math.PI' Foo = 42' Sar = "Foo bar test" };
Magic Number,Stacks.Tests,Base,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,CreateBufferInt,The following statement contains a magic number: var bs = new byte[ints.Length * 4];
Magic Number,Stacks.Tests,Base,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,CreateSampleTestData,The following statement contains a magic number: return new TestData { Bar = Math.PI' Zar = (decimal)Math.PI' Foo = 42' Sar = "Foo bar test" };
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_notified_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_notified_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_notified_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_properly_deserialized,The following statement contains a magic number: client.Packets.TestPackets.Subscribe(p =>                      {                          Assert.Equal(42' p.Foo);                          Assert.Equal(Math.PI' p.Bar);                          Assert.Equal((decimal)Math.PI' p.Zar);                          Assert.Equal("Foo bar test"' p.Sar);                          received = true;                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_properly_deserialized,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(BitConverter.GetBytes((int)packet.Length + 8)));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_properly_deserialized,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(BitConverter.GetBytes(3)));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_more_packets_are_registered_only_valid_observer_should_be_notified,The following statement contains a magic number: serializer.Serialize(new TestData2 { Bar = 6 }' packet);
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_more_packets_are_registered_only_valid_observer_should_be_notified,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(BitConverter.GetBytes((int)packet.Length + 8)));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_should_allow_to_fix_missing_packets,The following statement contains a magic number: var client = new ReactiveMessageClient<IMessageHandlerWithInvalidObservable>(framedClient' serializer.Object'                      mb =>                      {                          mb.Packet(i => i.TestPackets3).HasId(3);                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_should_allow_to_fix_missing_packets,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_should_allow_to_fix_missing_packets,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_should_allow_to_fix_missing_packets,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_it_should_be_possible_to_override_packet_id,The following statement contains a magic number: var c = new ReactiveMessageClient<ITestMessageHandler>(framedClient' serializer.Object'                      mb =>                      {                          mb.Packet(t => t.TestPackets).HasId(2);                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_it_should_be_possible_to_override_packet_id,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 2' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_it_should_be_possible_to_override_packet_id,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 2' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Using_model_builder_it_should_be_possible_to_override_packet_id,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 2' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_full_packet_is_received_it_should_be_processed,The following statement contains a magic number: ReceiveBytesAndAssertPacket(bs =>                      {                          Assert.Equal(4' bs.Count);                          Assert.Equal(1234' ToInt(bs' 0));                      }' CreateBufferInt(8' 1234));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_full_packet_is_received_it_should_be_processed,The following statement contains a magic number: ReceiveBytesAndAssertPacket(bs =>                      {                          Assert.Equal(4' bs.Count);                          Assert.Equal(1234' ToInt(bs' 0));                      }' CreateBufferInt(8' 1234));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_full_packet_is_received_it_should_be_processed,The following statement contains a magic number: ReceiveBytesAndAssertPacket(bs =>                      {                          Assert.Equal(4' bs.Count);                          Assert.Equal(1234' ToInt(bs' 0));                      }' CreateBufferInt(8' 1234));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_full_packet_is_received_it_should_be_processed,The following statement contains a magic number: ReceiveBytesAndAssertPacket(bs =>                      {                          Assert.Equal(4' bs.Count);                          Assert.Equal(1234' ToInt(bs' 0));                      }' CreateBufferInt(8' 1234));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_two_packets_are_received_receive_packet_should_be_called_twice,The following statement contains a magic number: ReceiveBytesAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx + 1' ToInt(bs' 0));                      }' CreateBufferInt(8' 1' 8' 2));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_two_packets_are_received_receive_packet_should_be_called_twice,The following statement contains a magic number: ReceiveBytesAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx + 1' ToInt(bs' 0));                      }' CreateBufferInt(8' 1' 8' 2));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_two_packets_are_received_receive_packet_should_be_called_twice,The following statement contains a magic number: ReceiveBytesAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx + 1' ToInt(bs' 0));                      }' CreateBufferInt(8' 1' 8' 2));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_two_packets_are_received_receive_packet_should_be_called_twice,The following statement contains a magic number: Assert.Equal(2' calls);
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                  {                      ++calls;                      Assert.Equal(idx + 1' ToInt(bs' 0));                  }' Split(CreateBufferInt(8' 1' 8' 2)' 1' 3' 5' 7' 13));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_packet_is_receive_in_fragments_packet_should_be_received_after_it_is_fully_received,The following statement contains a magic number: Assert.Equal(2' calls);
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 2' ToInt(bs' 0));                      }' new[]                       {                          CreateBufferInt(8' 0' 12' 2' 1)'                          CreateBufferInt(16' 4' 3' 2' 8' 6)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,When_many_packets_are_received_callbacks_should_be_called_for_every_packet,The following statement contains a magic number: Assert.Equal(4' calls);
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: ReceiveBytesSegmentsAndAssertPackets((idx' bs) =>                      {                          ++calls;                          Assert.Equal(idx * 5' ToInt(bs' 0));                      }' new[]                      {                          CreateBuffer(8'  0' 0' 0'                                       0'  0' 0' 0'                                       16' 0' 0)'                          CreateBuffer(          0'                                       5'  0' 0' 0'                                        1'  2' 3' 4'                                        5'  6' 7' 8'                                       8)'                          CreateBuffer(    0' 0' 0'                                        10' 0' 0' 0)                      });
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Packets_should_be_received_correctly_when_middle_packet_is_fragmented,The following statement contains a magic number: Assert.Equal(3' calls);
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_deserialized_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_deserialized_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Receive,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\ReactiveMessageClientTests.cs,Receiving_packet_should_be_deserialized_properly,The following statement contains a magic number: rawClientReceived.OnNext(new ArraySegment<byte>(new byte[] { 12' 0' 0' 0' 3' 0' 0' 0' 5' 0' 0' 0 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_byte_array_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new byte[] { 1' 2' 3 });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_byte_array_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new byte[] { 1' 2' 3 });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_byte_array_should_call_raw_client_with_header_appended,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 7' 0' 0' 0' 1' 2' 3 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_byte_array_should_call_raw_client_with_header_appended,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 7' 0' 0' 0' 1' 2' 3 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_byte_array_should_call_raw_client_with_header_appended,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 7' 0' 0' 0' 1' 2' 3 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new ArraySegment<byte>(new byte[] { 0' 0' 5' 0' 0' 0' 54' 1' 2' 3 }' 6' 1));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new ArraySegment<byte>(new byte[] { 0' 0' 5' 0' 0' 0' 54' 1' 2' 3 }' 6' 1));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new ArraySegment<byte>(new byte[] { 0' 0' 5' 0' 0' 0' 54' 1' 2' 3 }' 6' 1));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new ArraySegment<byte>(new byte[] { 0' 0' 5' 0' 0' 0' 54' 1' 2' 3 }' 6' 1));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: c.SendPacket(new ArraySegment<byte>(new byte[] { 0' 0' 5' 0' 0' 0' 54' 1' 2' 3 }' 6' 1));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 5' 0' 0' 0' 54 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_with_array_segment_should_call_raw_client_with_header_appended,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 5' 0' 0' 0' 54 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: var buffer = c.PreparePacketBuffer(7);
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: rawClient.Verify(r => r.Send(new byte[] { 11' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7 }));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: Assert.Equal(11' buffer.Packet.Array.Length);
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_preformatted_packet_should_not_add_additional_header,The following statement contains a magic number: Assert.Equal(7' buffer.Packet.Count);
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_packet_should_send_serialized_data_with_proper_header,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestData>()' It.IsAny<MemoryStream>()))                            .Callback((TestData d' MemoryStream ms) =>                            {                                ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                            });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_when_packet_types_are_preloaded,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: var c = new MessageClient(framedClient' serializer.Object' new Mock<TestDataWithoutMessageIdHandler>().Object'                      r => r.RegisterMessage<TestDataWithoutMessageId>(3));
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestDataWithoutMessageId>()' It.IsAny<MemoryStream>()))                           .Callback((TestDataWithoutMessageId d' MemoryStream ms) =>                           {                               ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                           });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestDataWithoutMessageId>()' It.IsAny<MemoryStream>()))                           .Callback((TestDataWithoutMessageId d' MemoryStream ms) =>                           {                               ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                           });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestDataWithoutMessageId>()' It.IsAny<MemoryStream>()))                           .Callback((TestDataWithoutMessageId d' MemoryStream ms) =>                           {                               ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                           });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: serializer.Setup(s => s.Serialize(It.IsAny<TestDataWithoutMessageId>()' It.IsAny<MemoryStream>()))                           .Callback((TestDataWithoutMessageId d' MemoryStream ms) =>                           {                               ms.Write(new byte[] { 0' 1' 2' 3' 4 }' 0' 5);                           });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_succeed_if_message_was_declared_imperatively,The following statement contains a magic number: rawClient.Setup(rc => rc.Send(It.IsAny<byte[]>())).Callback((byte[] b) =>                  {                      var length = BitConverter.ToInt32(b' 0);                      var messageId = BitConverter.ToInt32(b' 4);                        Assert.Equal(4 + 4 + 5' length);                      Assert.Equal(4 + 4 + 5' b.Length);                      Assert.Equal(3' messageId);                      Assert.Equal(new byte[] { 0' 1' 2' 3' 4 }' new ArraySegment<byte>(b' 8' 5));                  });
Magic Number,Stacks.Tests,Send,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\FramedClientTests.cs,Sending_message_should_fail_if_message_handler_has_more_messages_than_registered_imperatively,The following statement contains a magic number: Assert.Throws(typeof(InvalidOperationException)' () =>                      {                          var c = new MessageClient(framedClient' serializer.Object'                                          new Mock<BrokenTestDataWithoutMessageIdHandler>().Object'                                          r => r.RegisterMessage<TestDataWithoutMessageId>(2));                      });
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Client_should_connect_to_server_and_signal_appropriate_callbacks,The following statement contains a magic number: connected1.AssertWaitFor(5000);
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Client_should_connect_to_server_and_signal_appropriate_callbacks,The following statement contains a magic number: connected2.AssertWaitFor(5000);
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Client_with_ipv6_should_connect_to_server_and_signal_appropriate_callbacks,The following statement contains a magic number: connected1.AssertWaitFor(5000);
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Client_with_ipv6_should_connect_to_server_and_signal_appropriate_callbacks,The following statement contains a magic number: connected2.AssertWaitFor(5000);
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Should_connect_from_dns,The following statement contains a magic number: Assert.True(hasConnected.Wait(1000));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Send_packets_should_be_received,The following statement contains a magic number: var buffer = DataHelpers.CreateRandomBuffer(204800);
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Send_packets_should_be_received,The following statement contains a magic number: var recvBuffer = c2.ReceiveData(204800' 2000' () => c1.Send(buffer));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Send_packets_should_be_received,The following statement contains a magic number: var recvBuffer = c2.ReceiveData(204800' 2000' () => c1.Send(buffer));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Send_packets_should_be_received,The following statement contains a magic number: var recvBuffer2 = c1.ReceiveData(204800' 2000' () => c2.Send(buffer));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,Send_packets_should_be_received,The following statement contains a magic number: var recvBuffer2 = c1.ReceiveData(204800' 2000' () => c2.Send(buffer));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,If_client_cannot_connect_if_should_raise_disconnect_event_with_connection_refused_error,The following statement contains a magic number: client.Connect(new IPEndPoint(IPAddress.Loopback' 45232));
Magic Number,Stacks.Tests,RawBytesClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\RawBytesClientTests.cs,If_server_closes_then_client_should_raise_disconnect_event,The following statement contains a magic number: disconnectedCalled.AssertWaitFor(5000);
Magic Number,Stacks.Tests,Starting_and_stopping,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\SocketServerTests.cs,Starting_should_call_started_callback,The following statement contains a magic number: started.AssertWaitFor(2000);
Magic Number,Stacks.Tests,Starting_and_stopping,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\SocketServerTests.cs,Starting_and_stopping_should_call_both_callbacks,The following statement contains a magic number: started.AssertWaitFor(2000);
Magic Number,Stacks.Tests,Starting_and_stopping,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\SocketServerTests.cs,Starting_and_stopping_should_call_both_callbacks,The following statement contains a magic number: stopped.AssertWaitFor(2000);
Magic Number,Stacks.Tests,Starting_and_stopping,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\SocketServerTests.cs,When_exception_is_thrown_inside_callback_executor_should_signal_error,The following statement contains a magic number: errOccured.AssertWaitFor(2000);
Magic Number,Stacks.Tests,ManualResetEventSlimAssertExtensions,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,AssertWaitFor,The following statement contains a magic number: ev.AssertWaitFor(5000);
Magic Number,Stacks.Tests,ServerHelpers,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,CreateServerAndConnectedClient,The following statement contains a magic number: connected1.AssertWaitFor(3000);
Magic Number,Stacks.Tests,ServerHelpers,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,CreateServerAndConnectedClient,The following statement contains a magic number: connected2.AssertWaitFor(3000);
Magic Number,Stacks.Tests,SslHelpers,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,CreateServerAndConnectedClient,The following statement contains a magic number: connected1.AssertWaitFor(3000);
Magic Number,Stacks.Tests,SslHelpers,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,CreateServerAndConnectedClient,The following statement contains a magic number: connected2.AssertWaitFor(3000);
Magic Number,Stacks.Tests,SocketServerExtensions,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,StopAndAssertStopped,The following statement contains a magic number: stopped.AssertWaitFor(3000);
Magic Number,Stacks.Tests,SocketClientExtensions,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Utils.cs,ReceiveData,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Stacks.Tests.Client,SslClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\SslClientTests.cs,Data_transfered_through_sockets_should_be_transfered_correctly,The following statement contains a magic number: var buffer = PrepareBuffer(20);
Magic Number,Stacks.Tests.Client,SslClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\SslClientTests.cs,Data_transfered_through_sockets_should_be_transfered_correctly,The following statement contains a magic number: var recvBuffer = lClient.ReceiveData(buffer.Length' 2000' () =>                  {                      sClient.Send(buffer);                  });
Magic Number,Stacks.Tests.Client,SslClientTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Client\SslClientTests.cs,Data_transfered_through_sockets_should_be_transfered_correctly,The following statement contains a magic number: var recvBuffer2 = sClient.ReceiveData(buffer.Length' 2000' () =>                  {                      lClient.Send(buffer);                  });
Magic Number,Stacks.Tests.Serialization,MessagePackSerializerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\MessagePackSerializerTests.cs,CreateSampleTestData,The following statement contains a magic number: return new TestData { Bar = Math.PI ' Zar = (decimal)Math.PI' Foo = 42' Sar = "Foo bar test" };
Magic Number,Stacks.Tests.Serialization,ProtoBufSerializerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\ProtoBufSerializerTests.cs,CreateSampleTestData,The following statement contains a magic number: return new TestData { Bar = Math.PI ' Zar = (decimal)Math.PI' Foo = 42' Sar = "Foo bar test" };
Magic Number,Stacks.Tests.Serialization,SerializationHandlerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\SerializationHandlerTests.cs,CreateSampleTestData,The following statement contains a magic number: return new TestData { Bar = Math.PI' Zar = (decimal)Math.PI' Foo = 42' Sar = "Foo bar test" };
Magic Number,Stacks.Tests.Serialization,SerializationHandlerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\SerializationHandlerTests.cs,CreateSampleTestData2,The following statement contains a magic number: return new TestData2 { Foo2 = 42 };
Magic Number,Stacks.Tests.Serialization,SerializationHandlerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\SerializationHandlerTests.cs,Deserialize_should_call_appropriate_handler,The following statement contains a magic number: ser.Deserialize(2' new MemoryStream());
Magic Number,Stacks.Tests.Serialization,SerializationHandlerTests,C:\research\architectureSmells\repos\Ravadre_Stacks\Stacks.Tests\Serialization\SerializationHandlerTests.cs,Deserialize_should_throw_exception_when_trying_to_deserialize_packet_without_handler,The following statement contains a magic number: Assert.Throws(typeof(InvalidOperationException)'                  () =>                  {                      ser.Deserialize(4' new MemoryStream());                  });
