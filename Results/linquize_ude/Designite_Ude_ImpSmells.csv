Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The method has 103 lines of code.
Complex Method,Ude.Core,CharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\CharsetProber.cs,FilterWithoutEnglishLetters,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,CharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\CharsetProber.cs,FilterWithEnglishLetters,Cyclomatic complexity of the method is 9
Complex Method,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,HandleData,Cyclomatic complexity of the method is 9
Complex Method,Ude.Core,SingleByteCharSetProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCharsetProber.cs,HandleData,Cyclomatic complexity of the method is 10
Complex Method,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,GetConfidence,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,Cyclomatic complexity of the method is 46
Complex Method,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,DataEnd,Cyclomatic complexity of the method is 9
Complex Method,Ude.Core,UTF8Prober,C:\repos\linquize_ude\src\Library\Ude.Core\UTF8Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,GB18030Prober,C:\repos\linquize_ude\src\Library\Ude.Core\GB18030Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,Big5Prober,C:\repos\linquize_ude\src\Library\Ude.Core\Big5Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCJPProber,C:\repos\linquize_ude\src\Library\Ude.Core\EUCJPProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCKRProber,C:\repos\linquize_ude\src\Library\Ude.Core\EUCKRProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCTWProber,C:\repos\linquize_ude\src\Library\Ude.Core\EUCTWProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,SJISProber,C:\repos\linquize_ude\src\Library\Ude.Core\SJISProber.cs,HandleData,Cyclomatic complexity of the method is 8
Long Parameter List,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,BitPackage,The method has 5 parameters.
Long Parameter List,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack4bits,The method has 8 parameters.
Long Parameter List,Ude.Core,SequenceModel,C:\repos\linquize_ude\src\Library\Ude.Core\SequenceModel.cs,SequenceModel,The method has 5 parameters.
Long Parameter List,Ude.Core,SMModel,C:\repos\linquize_ude\src\Library\Ude.Core\SMModel.cs,SMModel,The method has 5 parameters.
Long Statement,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,DumpStatus,The length of the statement  "	Console.Error.WriteLine (" SBCS Group found best match [{0}] confidence {1}."' probers [bestGuess].GetCharsetName ()' cf); " is 122.
Complex Conditional,Ude.Core,CharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\CharsetProber.cs,FilterWithoutEnglishLetters,The conditional expression  "b < CAPITAL_A || (b > CAPITAL_Z && b < SMALL_A) || b > SMALL_Z"  is complex.
Complex Conditional,Ude.Core,CharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\CharsetProber.cs,FilterWithEnglishLetters,The conditional expression  "(b & 0x80) == 0 && (b < CAPITAL_A || b > SMALL_Z || (b > CAPITAL_Z && b < SMALL_A))"  is complex.
Complex Conditional,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The conditional expression  "inputState == InputState.PureASCII && (buf [i] == 0x1B || (buf [i] == 0x7B && lastChar == 0x7E))"  is complex.
Complex Conditional,Ude.Core,SJISContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The conditional expression  "buf [offset] >= 0x81 && buf [offset] <= 0x9F || buf [offset] >= 0xe0 && buf [offset] <= 0xFC"  is complex.
Virtual Method Call from Constructor,Ude.Core,CharDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,CharDistributionAnalyser,The constructor "CharDistributionAnalyser" calls a virtual method "Reset".
Magic Number,Ude.Core,CharDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,HandleOneChar,The following statement contains a magic number: if (order >= 0) {  	totalChars++;  	if (order < charToFreqOrder.Length) {  		// order is valid  		if (512 > charToFreqOrder [order])  			freqChars++;  	}  }  
Magic Number,Ude.Core,CharDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,HandleOneChar,The following statement contains a magic number: if (order < charToFreqOrder.Length) {  	// order is valid  	if (512 > charToFreqOrder [order])  		freqChars++;  }  
Magic Number,Ude.Core,CharDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,HandleOneChar,The following statement contains a magic number: if (512 > charToFreqOrder [order])  	freqChars++;  
Magic Number,Ude.Core,GB18030DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xB0 && buf [offset + 1] >= 0xA1)  	return 94 * (buf [offset] - 0xb0) + buf [offset + 1] - 0xA1;  else  	return -1;  
Magic Number,Ude.Core,GB18030DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 94 * (buf [offset] - 0xb0) + buf [offset + 1] - 0xA1;  
Magic Number,Ude.Core,EUCTWDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xC4)  	return 94 * (buf [offset] - 0xC4) + buf [offset + 1] - 0xA1;  else  	return -1;  
Magic Number,Ude.Core,EUCTWDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 94 * (buf [offset] - 0xC4) + buf [offset + 1] - 0xA1;  
Magic Number,Ude.Core,EUCKRDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xB0)  	return 94 * (buf [offset] - 0xB0) + buf [offset + 1] - 0xA1;  else  	return -1;  
Magic Number,Ude.Core,EUCKRDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 94 * (buf [offset] - 0xB0) + buf [offset + 1] - 0xA1;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xA4) {  	if (buf [offset + 1] >= 0xA1)  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  	else  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  }  else {  	return -1;  }  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xA4) {  	if (buf [offset + 1] >= 0xA1)  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  	else  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  }  else {  	return -1;  }  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xA4) {  	if (buf [offset + 1] >= 0xA1)  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  	else  		return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  }  else {  	return -1;  }  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset + 1] >= 0xA1)  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  else  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset + 1] >= 0xA1)  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  else  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset + 1] >= 0xA1)  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  else  	return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0xA1 + 63;  
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 157 * (buf [offset] - 0xA4) + buf [offset + 1] - 0x40;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0x81 && buf [offset] <= 0x9F)  	order = 188 * (buf [offset] - 0x81);  else if (buf [offset] >= 0xE0 && buf [offset] <= 0xEF)  	order = 188 * (buf [offset] - 0xE0 + 31);  else  	return -1;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0x81 && buf [offset] <= 0x9F)  	order = 188 * (buf [offset] - 0x81);  else if (buf [offset] >= 0xE0 && buf [offset] <= 0xEF)  	order = 188 * (buf [offset] - 0xE0 + 31);  else  	return -1;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0x81 && buf [offset] <= 0x9F)  	order = 188 * (buf [offset] - 0x81);  else if (buf [offset] >= 0xE0 && buf [offset] <= 0xEF)  	order = 188 * (buf [offset] - 0xE0 + 31);  else  	return -1;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: order = 188 * (buf [offset] - 0x81);  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xE0 && buf [offset] <= 0xEF)  	order = 188 * (buf [offset] - 0xE0 + 31);  else  	return -1;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xE0 && buf [offset] <= 0xEF)  	order = 188 * (buf [offset] - 0xE0 + 31);  else  	return -1;  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: order = 188 * (buf [offset] - 0xE0 + 31);  
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: order = 188 * (buf [offset] - 0xE0 + 31);  
Magic Number,Ude.Core,EUCJPDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0xA0)  	return 94 * (buf [offset] - 0xA1) + buf [offset + 1] - 0xA1;  else  	return -1;  
Magic Number,Ude.Core,EUCJPDistributionAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: return 94 * (buf [offset] - 0xA1) + buf [offset + 1] - 0xA1;  
Magic Number,Ude.Core,EscCharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\EscCharsetProber.cs,EscCharsetProber,The following statement contains a magic number: codingSM [2] = new CodingStateMachine (new ISO2022JPSMModel ());  
Magic Number,Ude.Core,EscCharsetProber,C:\repos\linquize_ude\src\Library\Ude.Core\EscCharsetProber.cs,EscCharsetProber,The following statement contains a magic number: codingSM [3] = new CodingStateMachine (new ISO2022KRSMModel ());  
Magic Number,Ude.Core,Latin1Prober,C:\repos\linquize_ude\src\Library\Ude.Core\Latin1Prober.cs,GetConfidence,The following statement contains a magic number: if (total <= 0) {  	confidence = 0.0f;  }  else {  	confidence = freqCounter [3] * 1.0f / total;  	confidence -= freqCounter [1] * 20.0f / total;  }  
Magic Number,Ude.Core,Latin1Prober,C:\repos\linquize_ude\src\Library\Ude.Core\Latin1Prober.cs,GetConfidence,The following statement contains a magic number: confidence = freqCounter [3] * 1.0f / total;  
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers [2] = new EUCJPProber ();  
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers [3] = new GB18030Prober ();  
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers [4] = new EUCKRProber ();  
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers [5] = new Big5Prober ();  
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers [6] = new EUCTWProber ();  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack16bits,The following statement contains a magic number: return ((b << 16) | a);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack8bits,The following statement contains a magic number: return Pack16bits ((b << 8) | a' (d << 8) | c);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack8bits,The following statement contains a magic number: return Pack16bits ((b << 8) | a' (d << 8) | c);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits ((b << 4) | a' (d << 4) | c' (f << 4) | e' (h << 4) | g);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits ((b << 4) | a' (d << 4) | c' (f << 4) | e' (h << 4) | g);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits ((b << 4) | a' (d << 4) | c' (f << 4) | e' (h << 4) | g);  
Magic Number,Ude.Core,BitPackage,C:\repos\linquize_ude\src\Library\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits ((b << 4) | a' (d << 4) | c' (f << 4) | e' (h << 4) | g);  
Magic Number,Ude.Core,SingleByteCharSetProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCharsetProber.cs,Reset,The following statement contains a magic number: lastOrder = 255;  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [2] = new SingleByteCharSetProber (new Latin5Model ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [3] = new SingleByteCharSetProber (new MacCyrillicModel ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [4] = new SingleByteCharSetProber (new Ibm866Model ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [5] = new SingleByteCharSetProber (new Ibm855Model ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [6] = new SingleByteCharSetProber (new Latin7Model ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [7] = new SingleByteCharSetProber (new Win1253Model ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [8] = new SingleByteCharSetProber (new Latin5BulgarianModel ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [9] = new SingleByteCharSetProber (new Win1251BulgarianModel ());  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [10] = hebprober;  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [11] = new SingleByteCharSetProber (new Win1255Model ()' false' hebprober);  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers [12] = new SingleByteCharSetProber (new Win1255Model ()' true' hebprober);  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: hebprober.SetModelProbers (probers [11]' probers [12]);  
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\linquize_ude\src\Library\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: hebprober.SetModelProbers (probers [11]' probers [12]);  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {  	start = false;  	if (len > 3) {  		switch (buf [0]) {  		case 0xEF:  			if (0xBB == buf [1] && 0xBF == buf [2])  				detectedCharset = "UTF-8";  			break;  		case 0xFE:  			if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  				detectedCharset = "X-ISO-10646-UCS-4-3412";  			else if (0xFF == buf [1])  				detectedCharset = "UTF-16BE";  			break;  		case 0x00:  			if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  				detectedCharset = "UTF-32BE";  			else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  				// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  				detectedCharset = "X-ISO-10646-UCS-4-2143";  			break;  		case 0xFF:  			if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  				detectedCharset = "UTF-32LE";  			else if (0xFE == buf [1])  				detectedCharset = "UTF-16LE";  			break;  		}  		// switch  	}  	if (detectedCharset != null) {  		done = true;  		return;  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (len > 3) {  	switch (buf [0]) {  	case 0xEF:  		if (0xBB == buf [1] && 0xBF == buf [2])  			detectedCharset = "UTF-8";  		break;  	case 0xFE:  		if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  			detectedCharset = "X-ISO-10646-UCS-4-3412";  		else if (0xFF == buf [1])  			detectedCharset = "UTF-16BE";  		break;  	case 0x00:  		if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  			detectedCharset = "UTF-32BE";  		else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  			// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  			detectedCharset = "X-ISO-10646-UCS-4-2143";  		break;  	case 0xFF:  		if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  			detectedCharset = "UTF-32LE";  		else if (0xFE == buf [1])  			detectedCharset = "UTF-16LE";  		break;  	}  	// switch  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0xBB == buf [1] && 0xBF == buf [2])  	detectedCharset = "UTF-8";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  	// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  	detectedCharset = "X-ISO-10646-UCS-4-3412";  else if (0xFF == buf [1])  	detectedCharset = "UTF-16BE";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  	// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  	detectedCharset = "X-ISO-10646-UCS-4-3412";  else if (0xFF == buf [1])  	detectedCharset = "UTF-16BE";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  	detectedCharset = "UTF-32BE";  else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  	detectedCharset = "UTF-32BE";  else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  	detectedCharset = "UTF-32BE";  else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  	detectedCharset = "UTF-32BE";  else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  	// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  	detectedCharset = "X-ISO-10646-UCS-4-2143";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  	detectedCharset = "UTF-32LE";  else if (0xFE == buf [1])  	detectedCharset = "UTF-16LE";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  	detectedCharset = "UTF-32LE";  else if (0xFE == buf [1])  	detectedCharset = "UTF-16LE";  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	// other than 0xa0' if every other character is ascii' the page is ascii  	if ((buf [i] & 0x80) != 0 && buf [i] != 0xA0) {  		// we got a non-ascii byte (high-byte)  		if (inputState != InputState.Highbyte) {  			inputState = InputState.Highbyte;  			// kill EscCharsetProber if it is active  			if (escCharsetProber != null) {  				escCharsetProber = null;  			}  			// start multibyte and singlebyte charset prober  			if (charsetProbers [0] == null)  				charsetProbers [0] = new MBCSGroupProber ();  			if (charsetProbers [1] == null)  				charsetProbers [1] = new SBCSGroupProber ();  			if (charsetProbers [2] == null)  				charsetProbers [2] = new Latin1Prober ();  		}  	}  	else {  		if (inputState == InputState.PureASCII && (buf [i] == 0x1B || (buf [i] == 0x7B && lastChar == 0x7E))) {  			// found escape character or HZ "~{"  			inputState = InputState.EscASCII;  		}  		lastChar = buf [i];  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	// other than 0xa0' if every other character is ascii' the page is ascii  	if ((buf [i] & 0x80) != 0 && buf [i] != 0xA0) {  		// we got a non-ascii byte (high-byte)  		if (inputState != InputState.Highbyte) {  			inputState = InputState.Highbyte;  			// kill EscCharsetProber if it is active  			if (escCharsetProber != null) {  				escCharsetProber = null;  			}  			// start multibyte and singlebyte charset prober  			if (charsetProbers [0] == null)  				charsetProbers [0] = new MBCSGroupProber ();  			if (charsetProbers [1] == null)  				charsetProbers [1] = new SBCSGroupProber ();  			if (charsetProbers [2] == null)  				charsetProbers [2] = new Latin1Prober ();  		}  	}  	else {  		if (inputState == InputState.PureASCII && (buf [i] == 0x1B || (buf [i] == 0x7B && lastChar == 0x7E))) {  			// found escape character or HZ "~{"  			inputState = InputState.EscASCII;  		}  		lastChar = buf [i];  	}  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if ((buf [i] & 0x80) != 0 && buf [i] != 0xA0) {  	// we got a non-ascii byte (high-byte)  	if (inputState != InputState.Highbyte) {  		inputState = InputState.Highbyte;  		// kill EscCharsetProber if it is active  		if (escCharsetProber != null) {  			escCharsetProber = null;  		}  		// start multibyte and singlebyte charset prober  		if (charsetProbers [0] == null)  			charsetProbers [0] = new MBCSGroupProber ();  		if (charsetProbers [1] == null)  			charsetProbers [1] = new SBCSGroupProber ();  		if (charsetProbers [2] == null)  			charsetProbers [2] = new Latin1Prober ();  	}  }  else {  	if (inputState == InputState.PureASCII && (buf [i] == 0x1B || (buf [i] == 0x7B && lastChar == 0x7E))) {  		// found escape character or HZ "~{"  		inputState = InputState.EscASCII;  	}  	lastChar = buf [i];  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if ((buf [i] & 0x80) != 0 && buf [i] != 0xA0) {  	// we got a non-ascii byte (high-byte)  	if (inputState != InputState.Highbyte) {  		inputState = InputState.Highbyte;  		// kill EscCharsetProber if it is active  		if (escCharsetProber != null) {  			escCharsetProber = null;  		}  		// start multibyte and singlebyte charset prober  		if (charsetProbers [0] == null)  			charsetProbers [0] = new MBCSGroupProber ();  		if (charsetProbers [1] == null)  			charsetProbers [1] = new SBCSGroupProber ();  		if (charsetProbers [2] == null)  			charsetProbers [2] = new Latin1Prober ();  	}  }  else {  	if (inputState == InputState.PureASCII && (buf [i] == 0x1B || (buf [i] == 0x7B && lastChar == 0x7E))) {  		// found escape character or HZ "~{"  		inputState = InputState.EscASCII;  	}  	lastChar = buf [i];  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (inputState != InputState.Highbyte) {  	inputState = InputState.Highbyte;  	// kill EscCharsetProber if it is active  	if (escCharsetProber != null) {  		escCharsetProber = null;  	}  	// start multibyte and singlebyte charset prober  	if (charsetProbers [0] == null)  		charsetProbers [0] = new MBCSGroupProber ();  	if (charsetProbers [1] == null)  		charsetProbers [1] = new SBCSGroupProber ();  	if (charsetProbers [2] == null)  		charsetProbers [2] = new Latin1Prober ();  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (inputState != InputState.Highbyte) {  	inputState = InputState.Highbyte;  	// kill EscCharsetProber if it is active  	if (escCharsetProber != null) {  		escCharsetProber = null;  	}  	// start multibyte and singlebyte charset prober  	if (charsetProbers [0] == null)  		charsetProbers [0] = new MBCSGroupProber ();  	if (charsetProbers [1] == null)  		charsetProbers [1] = new SBCSGroupProber ();  	if (charsetProbers [2] == null)  		charsetProbers [2] = new Latin1Prober ();  }  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (charsetProbers [2] == null)  	charsetProbers [2] = new Latin1Prober ();  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (charsetProbers [2] == null)  	charsetProbers [2] = new Latin1Prober ();  
Magic Number,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: charsetProbers [2] = new Latin1Prober ();  
Magic Number,Ude.Core,UTF8Prober,C:\repos\linquize_ude\src\Library\Ude.Core\UTF8Prober.cs,HandleData,The following statement contains a magic number: for (int i = offset; i < max; i++) {  	codingState = codingSM.NextState (buf [i]);  	if (codingState == SMModel.ERROR) {  		state = ProbingState.NotMe;  		break;  	}  	if (codingState == SMModel.ITSME) {  		state = ProbingState.FoundIt;  		break;  	}  	if (codingState == SMModel.START) {  		if (codingSM.CurrentCharLen >= 2)  			numOfMBChar++;  	}  }  
Magic Number,Ude.Core,UTF8Prober,C:\repos\linquize_ude\src\Library\Ude.Core\UTF8Prober.cs,HandleData,The following statement contains a magic number: if (codingState == SMModel.START) {  	if (codingSM.CurrentCharLen >= 2)  		numOfMBChar++;  }  
Magic Number,Ude.Core,UTF8Prober,C:\repos\linquize_ude\src\Library\Ude.Core\UTF8Prober.cs,HandleData,The following statement contains a magic number: if (codingSM.CurrentCharLen >= 2)  	numOfMBChar++;  
Magic Number,Ude.Core,UTF8Prober,C:\repos\linquize_ude\src\Library\Ude.Core\UTF8Prober.cs,GetConfidence,The following statement contains a magic number: if (numOfMBChar < 6) {  	for (int i = 0; i < numOfMBChar; i++)  		unlike *= ONE_CHAR_PROB;  	confidence = 1.0f - unlike;  }  else {  	confidence = 0.99f;  }  
Magic Number,Ude.Core,GB18030Prober,C:\repos\linquize_ude\src\Library\Ude.Core\GB18030Prober.cs,GB18030Prober,The following statement contains a magic number: lastChar = new byte[2];  
Magic Number,Ude.Core,SJISContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf [offset] >= 0x81 && buf [offset] <= 0x9F || buf [offset] >= 0xe0 && buf [offset] <= 0xFC)  	charLen = 2;  else  	charLen = 1;  
Magic Number,Ude.Core,SJISContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: charLen = 2;  
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (high == 0x8E || high >= 0xA1 && high <= 0xFE)  	charLen = 2;  else if (high == 0xBF)  	charLen = 3;  else  	charLen = 1;  
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (high == 0x8E || high >= 0xA1 && high <= 0xFE)  	charLen = 2;  else if (high == 0xBF)  	charLen = 3;  else  	charLen = 1;  
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: charLen = 2;  
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (high == 0xBF)  	charLen = 3;  else  	charLen = 1;  
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\linquize_ude\src\Library\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: charLen = 3;  
Magic Number,Ude.Core,SJISProber,C:\repos\linquize_ude\src\Library\Ude.Core\SJISProber.cs,HandleData,The following statement contains a magic number: for (int i = offset; i < max; i++) {  	codingState = codingSM.NextState (buf [i]);  	if (codingState == SMModel.ERROR) {  		state = ProbingState.NotMe;  		break;  	}  	if (codingState == SMModel.ITSME) {  		state = ProbingState.FoundIt;  		break;  	}  	if (codingState == SMModel.START) {  		int charLen = codingSM.CurrentCharLen;  		if (i == offset) {  			lastChar [1] = buf [offset];  			contextAnalyser.HandleOneChar (lastChar' 2 - charLen' charLen);  			distributionAnalyser.HandleOneChar (lastChar' 0' charLen);  		}  		else {  			contextAnalyser.HandleOneChar (buf' i + 1 - charLen' charLen);  			distributionAnalyser.HandleOneChar (buf' i - 1' charLen);  		}  	}  }  
Magic Number,Ude.Core,SJISProber,C:\repos\linquize_ude\src\Library\Ude.Core\SJISProber.cs,HandleData,The following statement contains a magic number: if (codingState == SMModel.START) {  	int charLen = codingSM.CurrentCharLen;  	if (i == offset) {  		lastChar [1] = buf [offset];  		contextAnalyser.HandleOneChar (lastChar' 2 - charLen' charLen);  		distributionAnalyser.HandleOneChar (lastChar' 0' charLen);  	}  	else {  		contextAnalyser.HandleOneChar (buf' i + 1 - charLen' charLen);  		distributionAnalyser.HandleOneChar (buf' i - 1' charLen);  	}  }  
Magic Number,Ude.Core,SJISProber,C:\repos\linquize_ude\src\Library\Ude.Core\SJISProber.cs,HandleData,The following statement contains a magic number: if (i == offset) {  	lastChar [1] = buf [offset];  	contextAnalyser.HandleOneChar (lastChar' 2 - charLen' charLen);  	distributionAnalyser.HandleOneChar (lastChar' 0' charLen);  }  else {  	contextAnalyser.HandleOneChar (buf' i + 1 - charLen' charLen);  	distributionAnalyser.HandleOneChar (buf' i - 1' charLen);  }  
Magic Number,Ude.Core,SJISProber,C:\repos\linquize_ude\src\Library\Ude.Core\SJISProber.cs,HandleData,The following statement contains a magic number: contextAnalyser.HandleOneChar (lastChar' 2 - charLen' charLen);  
Missing Default,Ude.Core,UniversalDetector,C:\repos\linquize_ude\src\Library\Ude.Core\UniversalDetector.cs,Feed,The following switch statement is missing a default case: switch (buf [0]) {  case 0xEF:  	if (0xBB == buf [1] && 0xBF == buf [2])  		detectedCharset = "UTF-8";  	break;  case 0xFE:  	if (0xFF == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		// FE FF 00 00  UCS-4' unusual octet order BOM (3412)  		detectedCharset = "X-ISO-10646-UCS-4-3412";  	else if (0xFF == buf [1])  		detectedCharset = "UTF-16BE";  	break;  case 0x00:  	if (0x00 == buf [1] && 0xFE == buf [2] && 0xFF == buf [3])  		detectedCharset = "UTF-32BE";  	else if (0x00 == buf [1] && 0xFF == buf [2] && 0xFE == buf [3])  		// 00 00 FF FE  UCS-4' unusual octet order BOM (2143)  		detectedCharset = "X-ISO-10646-UCS-4-2143";  	break;  case 0xFF:  	if (0xFE == buf [1] && 0x00 == buf [2] && 0x00 == buf [3])  		detectedCharset = "UTF-32LE";  	else if (0xFE == buf [1])  		detectedCharset = "UTF-16LE";  	break;  }  
