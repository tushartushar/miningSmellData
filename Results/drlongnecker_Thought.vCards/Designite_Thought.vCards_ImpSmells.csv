Implementation smell,Namespace,Class,File,Method,Description
Long Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeQuotedPrintable,The method has 147 lines of code.
Long Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadProperty,The method has 167 lines of code.
Complex Method,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_ADR,Cyclomatic complexity of the method is 9
Complex Method,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_EMAIL,Cyclomatic complexity of the method is 15
Complex Method,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_LABEL,Cyclomatic complexity of the method is 9
Complex Method,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_TEL,Cyclomatic complexity of the method is 15
Complex Method,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeProperty,Cyclomatic complexity of the method is 12
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeEmailAddressType,Cyclomatic complexity of the method is 14
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeQuotedPrintable,Cyclomatic complexity of the method is 16
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ParsePhoneType,Cyclomatic complexity of the method is 15
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ParseDeliveryAddressType,Cyclomatic complexity of the method is 8
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto,Cyclomatic complexity of the method is 30
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,Cyclomatic complexity of the method is 9
Complex Method,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_EMAIL,Cyclomatic complexity of the method is 8
Complex Conditional,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_ADR,The conditional expression  "(!string.IsNullOrEmpty(address.City)) ||                      (!string.IsNullOrEmpty(address.Country)) ||                      (!string.IsNullOrEmpty(address.PostalCode)) ||                      (!string.IsNullOrEmpty(address.Region)) ||                      (!string.IsNullOrEmpty(address.Street))"  is complex.
Complex Conditional,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The conditional expression  "(v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))"  is complex.
Complex Conditional,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The conditional expression  "(string.IsNullOrEmpty(deliveryAddress.City)) &&                  (string.IsNullOrEmpty(deliveryAddress.Country)) &&                  (string.IsNullOrEmpty(deliveryAddress.PostalCode)) &&                  (string.IsNullOrEmpty(deliveryAddress.Region)) &&                  (string.IsNullOrEmpty(deliveryAddress.Street))"  is complex.
Virtual Method Call from Constructor,Thought.vCards,vCard,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCard.cs,vCard,The constructor "vCard" calls a virtual method "ReadInto".
Virtual Method Call from Constructor,Thought.vCards,vCard,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCard.cs,vCard,The constructor "vCard" calls a virtual method "ReadInto".
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: buffer[1] = (byte)(value >> 8);
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: buffer[2] = (byte)(value >> 16);
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: buffer[2] = (byte)(value >> 16);
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: buffer[3] = (byte)(value >> 24);
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeBase64,The following statement contains a magic number: buffer[3] = (byte)(value >> 24);
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The following statement contains a magic number: (v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The following statement contains a magic number: (v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The following statement contains a magic number: (v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The following statement contains a magic number: (v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))
Magic Number,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,EncodeQuotedPrintable,The following statement contains a magic number: (v == 9) ||                      ((v >= 32) && (v <= 60)) ||                      ((v >= 62) && (v <= 126))
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeQuotedPrintable,The following statement contains a magic number: switch (state)                  {                        case QuotedPrintableState.None:                            // The parser is not expacting any particular                          // type of character.  If the character is an                          // equal sign (=)' then this point in the string                          // is the start of a character encoded in hexadecimal                          // format.  There are two hexadecimal characters                          // expected.                            if (c == '=')                          {                              state = QuotedPrintableState.ExpectingHexChar1;                          }                          else                          {                              charList.Add(c);                          }                          break;                        case QuotedPrintableState.ExpectingHexChar1:                            // The parser previously encountered an equal sign.                          // This has two purposes: it marks the beginning of                          // a hexadecimal escape sequence' or it marks a                          // so-called software end-of-line.                            if (IsHexDigit(c))                          {                                // The next character is a hexadecimal character.                              // Therefore the equal sign marks the beginning                              // of an escape sequence.                                firstHexChar = c;                              state = QuotedPrintableState.ExpectingHexChar2;                          }                            else if (c == '\r')                          {                                // The prior equal sign was located immediately                              // before carriage-return.  This indicates a soft                              // line break that is ignored.  The next character                              // is expected to be a line feed.                                state = QuotedPrintableState.ExpectingLineFeed;                            }                            else if (c == '=')                          {                                // Another equal sign was encountered.  This is                              // bad data.  The parser will output this bad                              // character and assume this equal sign marks                              // the beginning of a sequence.                                charList.Add('=');                              state = QuotedPrintableState.ExpectingHexChar1;                            }                            else                          {                                // The character after the equal sign was                              // not a hex digit' a carriage return' or an                              // equal sign.  It is bad data.                                charList.Add('=');                              charList.Add(c);                                state = QuotedPrintableState.None;                          }                          break;                        case QuotedPrintableState.ExpectingHexChar2:                            // The parser previously encountered an equal                          // sign and the first of two hexadecimal                          // characters.  This character is expected to                          // be the second (final) hexadecimal character.                            if (IsHexDigit(c))                          {                                // Each hexadecimal character represents                              // four bits of the encoded ASCII value.                              // The first character was the upper 4 bits.                                int charValue =                                  (DecodeHexadecimal(firstHexChar) << 4) +                                  DecodeHexadecimal(c);                                charList.Add((char)charValue);                                state = QuotedPrintableState.None;                            }                          else                          {                                // The parser was expecting the second                              // hexadecimal character after the equal sign.                              // Since this is not a hexadecimal character'                              // the partial sequence is dumped to the output                              // and skipped.                                charList.Add('=');                              charList.Add(firstHexChar);                              charList.Add(c);                              state = QuotedPrintableState.None;                            }                          break;                        case QuotedPrintableState.ExpectingLineFeed:                            // Previously the parser encountered an equal sign                          // followed by a carriage-return.  This is an indicator                          // to the decoder that the encoded value contains a                           // soft line break.  The line break is ignored.                          // Per mime standards' the character following the                          // carriage-return should be a line feed.                            if (c == '\n')                          {                              state = QuotedPrintableState.None;                          }                          else if (c == '=')                          {                              // A line feed was expected but another equal                              // sign was encountered.  Assume the encoder                              // failed to write a line feed.                                state = QuotedPrintableState.ExpectingHexChar1;                          }                          else                          {                              charList.Add(c);                              state = QuotedPrintableState.None;                          }                            break;                  }
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: deliveryAddress.Country = addressParts[6].Trim();
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: addressParts.Length >= 7
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: deliveryAddress.PostalCode = addressParts[5].Trim();
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: addressParts.Length >= 6
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: deliveryAddress.Region = addressParts[4].Trim();
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: addressParts.Length >= 5
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: deliveryAddress.City = addressParts[3].Trim();
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: addressParts.Length >= 4
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: deliveryAddress.Street = addressParts[2].Trim();
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_ADR,The following statement contains a magic number: addressParts.Length >= 3
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_GEO,The following statement contains a magic number: coordinates.Length == 2
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: names.Length == 2
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: card.AdditionalNames = names[2];
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: names.Length == 3
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: card.NamePrefix = names[3];
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: names.Length == 4
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_N,The following statement contains a magic number: card.NameSuffix = names[4];
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_X_WAB_GENDER,The following statement contains a magic number: switch (genderId)                  {                      case 1:                          card.Gender = vCardGender.Female;                          break;                        case 2:                          card.Gender = vCardGender.Male;                          break;                  }
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadProperty,The following statement contains a magic number: string[] subNameValue =                          nameParts[index].Split(new char[] { '=' }' 2);
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadProperty,The following statement contains a magic number: (peekChar == 32) || (peekChar == 9)
Magic Number,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadProperty,The following statement contains a magic number: (peekChar == 32) || (peekChar == 9)
Missing Default,Thought.vCards,vCardStandardWriter,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardWriter.cs,BuildProperties_X_WAB_GENDER,The following switch statement is missing a default case: switch (card.Gender)              {                  case vCardGender.Female:                      properties.Add(new vCardProperty("X-WAB-GENDER"' "1"));                      break;                    case vCardGender.Male:                      properties.Add(new vCardProperty("X-WAB-GENDER"' "2"));                      break;                }
Missing Default,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeQuotedPrintable,The following switch statement is missing a default case: switch (state)                  {                        case QuotedPrintableState.None:                            // The parser is not expacting any particular                          // type of character.  If the character is an                          // equal sign (=)' then this point in the string                          // is the start of a character encoded in hexadecimal                          // format.  There are two hexadecimal characters                          // expected.                            if (c == '=')                          {                              state = QuotedPrintableState.ExpectingHexChar1;                          }                          else                          {                              charList.Add(c);                          }                          break;                        case QuotedPrintableState.ExpectingHexChar1:                            // The parser previously encountered an equal sign.                          // This has two purposes: it marks the beginning of                          // a hexadecimal escape sequence' or it marks a                          // so-called software end-of-line.                            if (IsHexDigit(c))                          {                                // The next character is a hexadecimal character.                              // Therefore the equal sign marks the beginning                              // of an escape sequence.                                firstHexChar = c;                              state = QuotedPrintableState.ExpectingHexChar2;                          }                            else if (c == '\r')                          {                                // The prior equal sign was located immediately                              // before carriage-return.  This indicates a soft                              // line break that is ignored.  The next character                              // is expected to be a line feed.                                state = QuotedPrintableState.ExpectingLineFeed;                            }                            else if (c == '=')                          {                                // Another equal sign was encountered.  This is                              // bad data.  The parser will output this bad                              // character and assume this equal sign marks                              // the beginning of a sequence.                                charList.Add('=');                              state = QuotedPrintableState.ExpectingHexChar1;                            }                            else                          {                                // The character after the equal sign was                              // not a hex digit' a carriage return' or an                              // equal sign.  It is bad data.                                charList.Add('=');                              charList.Add(c);                                state = QuotedPrintableState.None;                          }                          break;                        case QuotedPrintableState.ExpectingHexChar2:                            // The parser previously encountered an equal                          // sign and the first of two hexadecimal                          // characters.  This character is expected to                          // be the second (final) hexadecimal character.                            if (IsHexDigit(c))                          {                                // Each hexadecimal character represents                              // four bits of the encoded ASCII value.                              // The first character was the upper 4 bits.                                int charValue =                                  (DecodeHexadecimal(firstHexChar) << 4) +                                  DecodeHexadecimal(c);                                charList.Add((char)charValue);                                state = QuotedPrintableState.None;                            }                          else                          {                                // The parser was expecting the second                              // hexadecimal character after the equal sign.                              // Since this is not a hexadecimal character'                              // the partial sequence is dumped to the output                              // and skipped.                                charList.Add('=');                              charList.Add(firstHexChar);                              charList.Add(c);                              state = QuotedPrintableState.None;                            }                          break;                        case QuotedPrintableState.ExpectingLineFeed:                            // Previously the parser encountered an equal sign                          // followed by a carriage-return.  This is an indicator                          // to the decoder that the encoded value contains a                           // soft line break.  The line break is ignored.                          // Per mime standards' the character following the                          // carriage-return should be a line feed.                            if (c == '\n')                          {                              state = QuotedPrintableState.None;                          }                          else if (c == '=')                          {                              // A line feed was expected but another equal                              // sign was encountered.  Assume the encoder                              // failed to write a line feed.                                state = QuotedPrintableState.ExpectingHexChar1;                          }                          else                          {                              charList.Add(c);                              state = QuotedPrintableState.None;                          }                            break;                  }
Missing Default,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,DecodeQuotedPrintable,The following switch statement is missing a default case: switch (state)              {                  case QuotedPrintableState.ExpectingHexChar1:                      charList.Add('=');                      break;                    case QuotedPrintableState.ExpectingHexChar2:                      charList.Add('=');                      charList.Add(firstHexChar);                      break;                    case QuotedPrintableState.ExpectingLineFeed:                      charList.Add('=');                      charList.Add('\r');                      break;              }
Missing Default,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_CLASS,The following switch statement is missing a default case: switch (property.ToString().ToUpperInvariant())              {                  case "PUBLIC":                      card.AccessClassification = vCardAccessClassification.Public;                      break;                    case "PRIVATE":                      card.AccessClassification = vCardAccessClassification.Private;                      break;                    case "CONFIDENTIAL":                      card.AccessClassification = vCardAccessClassification.Confidential;                      break;              }
Missing Default,Thought.vCards,vCardStandardReader,D:\research\architectureSmells\repos\drlongnecker_Thought.vCards\Solution\Thought.vCards\vCardStandardReader.cs,ReadInto_X_WAB_GENDER,The following switch statement is missing a default case: switch (genderId)                  {                      case 1:                          card.Gender = vCardGender.Female;                          break;                        case 2:                          card.Gender = vCardGender.Male;                          break;                  }
