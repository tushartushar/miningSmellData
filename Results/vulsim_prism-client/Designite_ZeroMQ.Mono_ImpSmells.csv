Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ZeroMQ,ZmqContext,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqContext.cs,CreateSocket,Cyclomatic complexity of the method is 11
Long Parameter List,ZeroMQ,ZmqContext,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqContext.cs,CreateSocket,The method has 6 parameters.
Long Parameter List,ZeroMQ,ExecuteExtensions,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ExecuteExtensions.cs,WithTimeout,The method has 5 parameters.
Long Parameter List,ZeroMQ,ExecuteExtensions,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ExecuteExtensions.cs,WithTimeout,The method has 6 parameters.
Long Parameter List,ZeroMQ,ExecuteExtensions,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ExecuteExtensions.cs,WithTimeout,The method has 6 parameters.
Long Parameter List,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The method has 29 parameters.
Long Parameter List,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,zmq_msg_init_data_v3,The method has 5 parameters.
Long Parameter List,ZeroMQ.Interop,Retry,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\Retry.cs,IfInterrupted,The method has 5 parameters.
Long Parameter List,ZeroMQ.Monitoring,ZmqMonitor,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Monitoring\ZmqMonitor.cs,ZmqMonitor,The method has 12 parameters.
Long Statement,ZeroMQ,SendReceiveExtensions,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\SendReceiveExtensions.cs,SendMessage,The length of the statement  "		throw new ArgumentException ("Unable to send an incomplete message. Ensure HasMore on the last Frame is set to 'false'."' "message"); " is 133.
Long Statement,ZeroMQ,ZmqException,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqException.cs,GetErrorName,The length of the statement  "	return ZeroMQ.ErrorCode.ErrorNames.ContainsKey (errorCode) ? ZeroMQ.ErrorCode.ErrorNames [errorCode] : "Error " + errorCode; " is 124.
Long Statement,ZeroMQ,ZmqSocket,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqSocket.cs,Receive,The length of the statement  "	return timeout == TimeSpan.MaxValue ? Receive (buffer) : this.WithTimeout (Receive' buffer' SocketFlags.DontWait' timeout); " is 123.
Long Statement,ZeroMQ,ZmqSocket,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqSocket.cs,Send,The length of the statement  "		throw new ArgumentOutOfRangeException ("size"' "Expected a non-negative value less than or equal to the buffer length."); " is 121.
Long Statement,ZeroMQ,ZmqSocket,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqSocket.cs,Send,The length of the statement  "	return timeout == TimeSpan.MaxValue ? Send (buffer' size' flags & ~SocketFlags.DontWait) : this.WithTimeout (Send' buffer' size' flags | SocketFlags.DontWait' timeout); " is 168.
Long Statement,ZeroMQ,ZmqSocket,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqSocket.cs,GetLegacySocketOption,The length of the statement  "	return ZmqVersion.Current.IsAtLeast (LatestVersion) ? GetSocketOptionInt32 (option) : Convert.ToInt32 (legacyGetter (option)); " is 126.
Long Statement,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,Forward,The length of the statement  "		if ((bytesSent = LibZmq.zmq_msg_send (_msg' destinationHandle' receiveMore == 1 ? (int)SocketFlags.SendMore : 0)) == -1) { " is 122.
Magic Number,ZeroMQ.Devices,Device,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Devices\Device.cs,Close,The following statement contains a magic number: if (IsRunning) {  	Stop ();  	Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  }  
Magic Number,ZeroMQ.Devices,Device,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Devices\Device.cs,Close,The following statement contains a magic number: Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  
Magic Number,ZeroMQ.Devices,Device,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Devices\Device.cs,Dispose,The following statement contains a magic number: if (IsRunning) {  	Stop ();  	Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  }  
Magic Number,ZeroMQ.Devices,Device,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Devices\Device.cs,Dispose,The following statement contains a magic number: Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  
Magic Number,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,Receive,The following statement contains a magic number: if (bytesReceived == 0 && LibZmq.MajorVersion < 3) {  	// 0MQ 2.x does not return number of bytes received  	bytesReceived = _msg.Size ();  }  
Magic Number,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,Receive,The following statement contains a magic number: if (bytesReceived >= 0) {  	if (bytesReceived == 0 && LibZmq.MajorVersion < 3) {  		// 0MQ 2.x does not return number of bytes received  		bytesReceived = _msg.Size ();  	}  	size = bytesReceived;  	if (buffer == null || size > buffer.Length) {  		buffer = new byte[size];  	}  	Marshal.Copy (_msg.Data ()' buffer' 0' size);  }  
Magic Number,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,Receive,The following statement contains a magic number: if (bytesReceived == 0 && LibZmq.MajorVersion < 3) {  	// 0MQ 2.x does not return number of bytes received  	bytesReceived = _msg.Size ();  }  
Magic Number,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,Send,The following statement contains a magic number: if (bytesSent == 0 && LibZmq.MajorVersion < 3) {  	// 0MQ 2.x does not report number of bytes sent' so this may be inaccurate/misleading  	bytesSent = size;  }  
Magic Number,ZeroMQ.Interop,SocketProxy,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\SocketProxy.cs,GetReceiveMore,The following statement contains a magic number: if (LibZmq.MajorVersion >= 3) {  	return GetSocketOption ((int)SocketOption.RCVMORE' out receiveMore);  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion >= 3) {  	zmq_msg_recv = zmq_msg_recv_v3;  	zmq_msg_send = zmq_msg_send_v3;  	zmq_buffer_recv = zmq_recvbuf_v3;  	zmq_buffer_send = zmq_sendbuf_v3;  	zmq_msg_get = zmq_msg_get_v3;  	zmq_msg_init_data = zmq_msg_init_data_v3;  	zmq_msg_move = zmq_msg_move_v3;  	zmq_ctx_get = zmq_ctx_get_v3;  	zmq_ctx_set = zmq_ctx_set_v3;  	zmq_socket_monitor = zmq_socket_monitor_v3;  	zmq_unbind = zmq_unbind_v3;  	zmq_disconnect = zmq_disconnect_v3;  	PollTimeoutRatio = 1;  	ZmqMsgTSize = Zmq3MsgTSize;  	zmq_ctx_new = zmq_ctx_new_v3;  	zmq_ctx_destroy = zmq_ctx_destroy_v3;  }  else if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: if (MajorVersion == 2) {  	zmq_msg_recv = (msg' sck' flags) => zmq_recvmsg (sck' msg' flags);  	zmq_msg_send = (msg' sck' flags) => zmq_sendmsg (sck' msg' flags);  	zmq_buffer_recv = null;  	zmq_buffer_send = null;  	zmq_msg_get = (message' option' optval' optvallen) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_msg_move = (destmsg' srcmsg) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  	};  	zmq_ctx_get = (ctx' opt) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_ctx_set = (ctx' opt' val) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_socket_monitor = (sck' addr' e) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_unbind = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	zmq_disconnect = (sck' addr) =>  {  		throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  	};  	PollTimeoutRatio = 1000;  	ZmqMsgTSize = Zmq2MsgTSize;  	zmq_ctx_new = () => zmq_init (1);  	zmq_ctx_destroy = zmq_term;  }  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_msg_get = (message' option' optval' optvallen) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_msg_init_data = (msg' data' size' ffn' hint) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_msg_move = (destmsg' srcmsg) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 1);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_ctx_get = (ctx' opt) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_ctx_get = (ctx' opt) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_ctx_set = (ctx' opt' val) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_ctx_set = (ctx' opt' val) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_socket_monitor = (sck' addr' e) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_socket_monitor = (sck' addr' e) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_unbind = (sck' addr) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_unbind = (sck' addr) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_disconnect = (sck' addr) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: zmq_disconnect = (sck' addr) =>  {  	throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  };  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: throw new ZmqVersionException (MajorVersion' MinorVersion' 3' 2);  
Magic Number,ZeroMQ.Interop,LibZmq,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\Interop\LibZmq.Mono.cs,LibZmq,The following statement contains a magic number: PollTimeoutRatio = 1000;  
Missing Default,ZeroMQ,ZmqContext,C:\repos\vulsim_prism-client\External\Clrzmq\src\ZeroMQ\ZmqContext.cs,CreateSocket,The following switch statement is missing a default case: switch (socketType) {  case SocketType.REQ:  case SocketType.REP:  case SocketType.DEALER:  case SocketType.ROUTER:  case SocketType.XPUB:  case SocketType.PAIR:  	return CreateSocket (sp => new DuplexSocket (sp' socketType)' socketType);  case SocketType.PUSH:  case SocketType.PUB:  	return CreateSocket (sp => new SendSocket (sp' socketType)' socketType);  case SocketType.PULL:  	return CreateSocket (sp => new ReceiveSocket (sp' socketType)' socketType);  case SocketType.SUB:  	return CreateSocket (sp => new SubscribeSocket (sp' socketType)' socketType);  case SocketType.XSUB:  	return CreateSocket (sp => new SubscribeExtSocket (sp' socketType)' socketType);  }  
