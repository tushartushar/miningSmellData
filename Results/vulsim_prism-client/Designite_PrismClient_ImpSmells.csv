Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,Cyclomatic complexity of the method is 16
Complex Method,Prism.Classes,PresentationControlCategoryConverter,C:\repos\vulsim_prism-client\pu\Classes\PresentationControlCategoryConverter.cs,Convert,Cyclomatic complexity of the method is 16
Complex Method,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,Cyclomatic complexity of the method is 11
Complex Method,Prism,MainWindow,C:\repos\vulsim_prism-client\pu\Windows\MainWindow.xaml.cs,SetGeneralState,Cyclomatic complexity of the method is 12
Long Parameter List,Prism.Classes,NotificationAlarm,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,NotificationAlarm,The method has 5 parameters.
Long Parameter List,Prism.Classes,Core,C:\repos\vulsim_prism-client\pu\Classes\Core.cs,Startup,The method has 11 parameters.
Long Parameter List,Prism.Classes,Unit,C:\repos\vulsim_prism-client\pu\Classes\Unit.cs,Unit,The method has 10 parameters.
Long Parameter List,Prism,MainWindow,C:\repos\vulsim_prism-client\pu\Windows\MainWindow.xaml.cs,ModernWindow_Loaded,The method has 5 parameters.
Long Statement,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The length of the statement  "			alarmMessages.Add (String.Format ("Внимание. {0}' {1}"' notificationAlarm.Unit.FullName' notificationAlarm.Description)); " is 121.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Informarion,The length of the statement  "		EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}]: {2}"' unit.FullName' code.ToString ()' message)' EventLogEntryType.Information' code' Convert.ToInt16 (unit.SymbolicName)); " is 195.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Warning,The length of the statement  "		EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}]: {2}"' unit.FullName' code.ToString ()' message)' EventLogEntryType.Warning' code' Convert.ToInt16 (unit.SymbolicName)); " is 191.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Error,The length of the statement  "		EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}]: {2}"' unit.FullName' code.ToString ()' message)' EventLogEntryType.Error' code' Convert.ToInt16 (unit.SymbolicName)); " is 189.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The length of the statement  "			EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}' {2}]: {3}"' unit.FullName' alarm.Code' ParamStateConverter.ToString (alarm.State)' alarm.Description)' EventLogEntryType.Information' code' Convert.ToInt16 (unit.SymbolicName)); " is 248.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The length of the statement  "			EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}' {2}]: {3}"' unit.FullName' alarm.Code' ParamStateConverter.ToString (alarm.State)' alarm.Description)' EventLogEntryType.Warning' code' Convert.ToInt16 (unit.SymbolicName)); " is 244.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The length of the statement  "			EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}' {2}]: {3}"' unit.FullName' alarm.Code' ParamStateConverter.ToString (alarm.State)' alarm.Description)' EventLogEntryType.Error' code' Convert.ToInt16 (unit.SymbolicName)); " is 242.
Long Statement,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The length of the statement  "			EventLog.WriteEntry (Journal.EventLogSource' String.Format ("{0} [{1}' {2}]: {3}"' unit.FullName' alarm.Code' ParamStateConverter.ToString (alarm.State)' alarm.Description)' EventLogEntryType.Information' code' Convert.ToInt16 (unit.SymbolicName)); " is 248.
Long Statement,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateProgressChanged,The length of the statement  "		UpdateManagerProgressEvent (this' String.Format ("Получение {0}... ({1:D}K из {2:D}K загружено)"' GetProgressString (e.State)' e.BytesCompleted / 1024' e.BytesTotal / 1024)); " is 174.
Long Statement,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateCompleted,The length of the statement  "				if (MessageBox.Show ("Обнаружено' что установленная версия программы является устаревшей. Выполнить обновление?"' "Требуется обновление"' MessageBoxButton.OKCancel' MessageBoxImage.Information' MessageBoxResult.Cancel) == MessageBoxResult.OK) { " is 244.
Long Statement,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateCompleted,The length of the statement  "				MessageBox.Show ("Доступно обязательное обновоение для вашего приложения. Обновление будет выполнено автоматически' после чего приложение необходимо будет перезагрузить."' "Требуется обновление"' MessageBoxButton.OK' MessageBoxImage.Exclamation' MessageBoxResult.OK); " is 267.
Long Statement,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,UpdateCompleted,The length of the statement  "		if (MessageBox.Show ("Приложение было обновлено' необходимо перезагрузить приложение для вступления изменений в силу. Выполнить перезагрузку сейчас?"' "Перезагрука приложения"' MessageBoxButton.OKCancel' MessageBoxImage.Information' MessageBoxResult.Cancel) == MessageBoxResult.OK) { " is 283.
Long Statement,Prism.Views,AlarmsView,C:\repos\vulsim_prism-client\pu\Views\AlarmsView.xaml.cs,alarmsListBox_MouseDoubleClick,The length of the statement  "			if (MessageBox.Show (String.Format ("{0} [{1}' {2}]: {3}\n\nВы уверены' что хотите квитировать это сообщение?"' selectedItem.Unit.FullName' selectedItem.Code' ParamStateConverter.ToString (selectedItem.State)' selectedItem.Description)' "Предупреждение"' MessageBoxButton.YesNo' MessageBoxImage.Warning) == MessageBoxResult.Yes) { " is 330.
Long Statement,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The length of the statement  "				result.Add (new JournalEntry (0' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message)); " is 129.
Long Statement,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The length of the statement  "				result.Add (new JournalEntry (1' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message)); " is 129.
Long Statement,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The length of the statement  "				result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message)); " is 129.
Empty Catch Block,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The method has an empty catch block.
Empty Catch Block,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Informarion,The method has an empty catch block.
Empty Catch Block,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Warning,The method has an empty catch block.
Empty Catch Block,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Error,The method has an empty catch block.
Empty Catch Block,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The method has an empty catch block.
Empty Catch Block,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The method has an empty catch block.
Magic Number,Prism.Classes,NotificationAlarm,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,NotificationAlarm,The following statement contains a magic number: if (codeComp.Length > 1) {  	this.Prefix = codeComp [0].Substring (0' 2).ToUpper ();  }  
Magic Number,Prism.Classes,NotificationAlarm,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,NotificationAlarm,The following statement contains a magic number: this.Prefix = codeComp [0].Substring (0' 2).ToUpper ();  
Magic Number,Prism.Classes,NotificationAlarm,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,NotificationAlarm,The following statement contains a magic number: if (codeComp.Length > 1) {  	this.Prefix = codeComp [0].Substring (0' 2).ToUpper ();  }  
Magic Number,Prism.Classes,NotificationAlarm,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,NotificationAlarm,The following statement contains a magic number: this.Prefix = codeComp [0].Substring (0' 2).ToUpper ();  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,AlarmNotificationCenter,The following statement contains a magic number: ShortNotificationTimer = new System.Timers.Timer (3000);  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,AlarmNotificationCenter,The following statement contains a magic number: LongNotificationTimer = new System.Timers.Timer (30000);  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: lock (Alarms) {  	List<NotificationAlarm> alarms = new List<NotificationAlarm> (Alarms);  	foreach (var notificationAlarm in alarms) {  		if (notificationAlarm.Unit.Uri.Equals (unit.Uri) && notificationAlarm.Code.Equals (alarm.Code)) {  			if (notificationAlarm.State != alarm.State) {  				if (alarm.State == ParamState.Idle) {  					Alarms.Remove (notificationAlarm);  					if (GeneralAlarmsStateChangedEvent != null) {  						GeneralAlarmsStateChangedEvent (this);  					}  					CanPlayShortNotification = true;  					return;  				}  				notificationAlarm.State = alarm.State;  				notificationAlarm.Ack = false;  				if (GeneralAlarmsStateChangedEvent != null) {  					GeneralAlarmsStateChangedEvent (this);  				}  				CanPlayShortNotification = true;  				if (notificationAlarm.State == ParamState.C) {  					LongNotificationTimer.Stop ();  					LongNotificationTimer.Interval = 3000;  					LongNotificationTimer.Start ();  				}  			}  			return;  		}  	}  	if (alarm.State > ParamState.Idle) {  		NotificationAlarm notificationAlarm = new NotificationAlarm (unit' alarm' false);  		Alarms.Add (notificationAlarm);  		if (GeneralAlarmsStateChangedEvent != null) {  			GeneralAlarmsStateChangedEvent (this);  		}  		CanPlayShortNotification = true;  		if (notificationAlarm.State == ParamState.C) {  			LongNotificationTimer.Stop ();  			LongNotificationTimer.Interval = 3000;  			LongNotificationTimer.Start ();  		}  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: lock (Alarms) {  	List<NotificationAlarm> alarms = new List<NotificationAlarm> (Alarms);  	foreach (var notificationAlarm in alarms) {  		if (notificationAlarm.Unit.Uri.Equals (unit.Uri) && notificationAlarm.Code.Equals (alarm.Code)) {  			if (notificationAlarm.State != alarm.State) {  				if (alarm.State == ParamState.Idle) {  					Alarms.Remove (notificationAlarm);  					if (GeneralAlarmsStateChangedEvent != null) {  						GeneralAlarmsStateChangedEvent (this);  					}  					CanPlayShortNotification = true;  					return;  				}  				notificationAlarm.State = alarm.State;  				notificationAlarm.Ack = false;  				if (GeneralAlarmsStateChangedEvent != null) {  					GeneralAlarmsStateChangedEvent (this);  				}  				CanPlayShortNotification = true;  				if (notificationAlarm.State == ParamState.C) {  					LongNotificationTimer.Stop ();  					LongNotificationTimer.Interval = 3000;  					LongNotificationTimer.Start ();  				}  			}  			return;  		}  	}  	if (alarm.State > ParamState.Idle) {  		NotificationAlarm notificationAlarm = new NotificationAlarm (unit' alarm' false);  		Alarms.Add (notificationAlarm);  		if (GeneralAlarmsStateChangedEvent != null) {  			GeneralAlarmsStateChangedEvent (this);  		}  		CanPlayShortNotification = true;  		if (notificationAlarm.State == ParamState.C) {  			LongNotificationTimer.Stop ();  			LongNotificationTimer.Interval = 3000;  			LongNotificationTimer.Start ();  		}  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: foreach (var notificationAlarm in alarms) {  	if (notificationAlarm.Unit.Uri.Equals (unit.Uri) && notificationAlarm.Code.Equals (alarm.Code)) {  		if (notificationAlarm.State != alarm.State) {  			if (alarm.State == ParamState.Idle) {  				Alarms.Remove (notificationAlarm);  				if (GeneralAlarmsStateChangedEvent != null) {  					GeneralAlarmsStateChangedEvent (this);  				}  				CanPlayShortNotification = true;  				return;  			}  			notificationAlarm.State = alarm.State;  			notificationAlarm.Ack = false;  			if (GeneralAlarmsStateChangedEvent != null) {  				GeneralAlarmsStateChangedEvent (this);  			}  			CanPlayShortNotification = true;  			if (notificationAlarm.State == ParamState.C) {  				LongNotificationTimer.Stop ();  				LongNotificationTimer.Interval = 3000;  				LongNotificationTimer.Start ();  			}  		}  		return;  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: if (notificationAlarm.Unit.Uri.Equals (unit.Uri) && notificationAlarm.Code.Equals (alarm.Code)) {  	if (notificationAlarm.State != alarm.State) {  		if (alarm.State == ParamState.Idle) {  			Alarms.Remove (notificationAlarm);  			if (GeneralAlarmsStateChangedEvent != null) {  				GeneralAlarmsStateChangedEvent (this);  			}  			CanPlayShortNotification = true;  			return;  		}  		notificationAlarm.State = alarm.State;  		notificationAlarm.Ack = false;  		if (GeneralAlarmsStateChangedEvent != null) {  			GeneralAlarmsStateChangedEvent (this);  		}  		CanPlayShortNotification = true;  		if (notificationAlarm.State == ParamState.C) {  			LongNotificationTimer.Stop ();  			LongNotificationTimer.Interval = 3000;  			LongNotificationTimer.Start ();  		}  	}  	return;  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: if (notificationAlarm.State != alarm.State) {  	if (alarm.State == ParamState.Idle) {  		Alarms.Remove (notificationAlarm);  		if (GeneralAlarmsStateChangedEvent != null) {  			GeneralAlarmsStateChangedEvent (this);  		}  		CanPlayShortNotification = true;  		return;  	}  	notificationAlarm.State = alarm.State;  	notificationAlarm.Ack = false;  	if (GeneralAlarmsStateChangedEvent != null) {  		GeneralAlarmsStateChangedEvent (this);  	}  	CanPlayShortNotification = true;  	if (notificationAlarm.State == ParamState.C) {  		LongNotificationTimer.Stop ();  		LongNotificationTimer.Interval = 3000;  		LongNotificationTimer.Start ();  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: if (notificationAlarm.State == ParamState.C) {  	LongNotificationTimer.Stop ();  	LongNotificationTimer.Interval = 3000;  	LongNotificationTimer.Start ();  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: LongNotificationTimer.Interval = 3000;  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: if (alarm.State > ParamState.Idle) {  	NotificationAlarm notificationAlarm = new NotificationAlarm (unit' alarm' false);  	Alarms.Add (notificationAlarm);  	if (GeneralAlarmsStateChangedEvent != null) {  		GeneralAlarmsStateChangedEvent (this);  	}  	CanPlayShortNotification = true;  	if (notificationAlarm.State == ParamState.C) {  		LongNotificationTimer.Stop ();  		LongNotificationTimer.Interval = 3000;  		LongNotificationTimer.Start ();  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: if (notificationAlarm.State == ParamState.C) {  	LongNotificationTimer.Stop ();  	LongNotificationTimer.Interval = 3000;  	LongNotificationTimer.Start ();  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,UpdateAlarm,The following statement contains a magic number: LongNotificationTimer.Interval = 3000;  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: LongNotificationTimer.Interval = 30000;  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: if (alarmMessages.Count > 0) {  	PlayBuzzer ();  	Thread.Sleep (1000);  	try {  		SpeechSynthesizer Synthesizer = new SpeechSynthesizer ();  		foreach (var message in alarmMessages) {  			Synthesizer.Speak (message);  			Thread.Sleep (1000);  		}  	}  	catch (Exception exception) {  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: if (alarmMessages.Count > 0) {  	PlayBuzzer ();  	Thread.Sleep (1000);  	try {  		SpeechSynthesizer Synthesizer = new SpeechSynthesizer ();  		foreach (var message in alarmMessages) {  			Synthesizer.Speak (message);  			Thread.Sleep (1000);  		}  	}  	catch (Exception exception) {  	}  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: try {  	SpeechSynthesizer Synthesizer = new SpeechSynthesizer ();  	foreach (var message in alarmMessages) {  		Synthesizer.Speak (message);  		Thread.Sleep (1000);  	}  }  catch (Exception exception) {  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: foreach (var message in alarmMessages) {  	Synthesizer.Speak (message);  	Thread.Sleep (1000);  }  
Magic Number,Prism.Classes,AlarmNotificationCenter,C:\repos\vulsim_prism-client\pu\Classes\AlarmNotificationCenter.cs,LongNotificationTimerEvent,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Prism.Classes,Journal,C:\repos\vulsim_prism-client\pu\Classes\Journal.cs,Log,The following statement contains a magic number: if (codeComp.Length == 2) {  	code += Convert.ToInt32 (codeComp [1]);  }  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: PollThread = new Thread (delegate () {  	try {  		while (PollThread.IsAlive) {  			if (PollQueue.Count == 0 || SilentTimers.Count > 0) {  				if (lastBusyState == true && PollManagerChangeStateEvent != null) {  					PollManagerChangeStateEvent (false);  				}  				lastBusyState = false;  				ResumePollEvent.Reset ();  				ResumePollEvent.WaitOne ();  			}  			else {  				if (lastBusyState == false && PollManagerChangeStateEvent != null) {  					PollManagerChangeStateEvent (true);  				}  				lastBusyState = true;  				CurrentPollItem = PollQueue.Dequeue ();  				if (CurrentPollItem != null) {  					DonePollEvent = new ManualResetEvent (false);  					DonePollTimer = new System.Timers.Timer (90000);  					DonePollTimer.Elapsed += delegate (object s' ElapsedEventArgs ev) {  						DonePollTimer.Stop ();  						DonePollEvent.Set ();  						CurrentPollItem.Terminate ();  					};  					DonePollTimer.Start ();  					CurrentPollItem.Action (delegate () {  						if (DonePollTimer != null) {  							DonePollTimer.Stop ();  						}  						if (DonePollEvent != null) {  							DonePollEvent.Set ();  						}  					});  					DonePollEvent.WaitOne ();  					if (PollThread.ThreadState != ThreadState.AbortRequested && PollThread.ThreadState != ThreadState.Aborted && PollManagerUpdateUnitStateEvent != null) {  						PollManagerUpdateUnitStateEvent (CurrentPollItem.Unit);  					}  				}  			}  		}  	}  	catch (ThreadAbortException e) {  	}  });  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: try {  	while (PollThread.IsAlive) {  		if (PollQueue.Count == 0 || SilentTimers.Count > 0) {  			if (lastBusyState == true && PollManagerChangeStateEvent != null) {  				PollManagerChangeStateEvent (false);  			}  			lastBusyState = false;  			ResumePollEvent.Reset ();  			ResumePollEvent.WaitOne ();  		}  		else {  			if (lastBusyState == false && PollManagerChangeStateEvent != null) {  				PollManagerChangeStateEvent (true);  			}  			lastBusyState = true;  			CurrentPollItem = PollQueue.Dequeue ();  			if (CurrentPollItem != null) {  				DonePollEvent = new ManualResetEvent (false);  				DonePollTimer = new System.Timers.Timer (90000);  				DonePollTimer.Elapsed += delegate (object s' ElapsedEventArgs ev) {  					DonePollTimer.Stop ();  					DonePollEvent.Set ();  					CurrentPollItem.Terminate ();  				};  				DonePollTimer.Start ();  				CurrentPollItem.Action (delegate () {  					if (DonePollTimer != null) {  						DonePollTimer.Stop ();  					}  					if (DonePollEvent != null) {  						DonePollEvent.Set ();  					}  				});  				DonePollEvent.WaitOne ();  				if (PollThread.ThreadState != ThreadState.AbortRequested && PollThread.ThreadState != ThreadState.Aborted && PollManagerUpdateUnitStateEvent != null) {  					PollManagerUpdateUnitStateEvent (CurrentPollItem.Unit);  				}  			}  		}  	}  }  catch (ThreadAbortException e) {  }  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: while (PollThread.IsAlive) {  	if (PollQueue.Count == 0 || SilentTimers.Count > 0) {  		if (lastBusyState == true && PollManagerChangeStateEvent != null) {  			PollManagerChangeStateEvent (false);  		}  		lastBusyState = false;  		ResumePollEvent.Reset ();  		ResumePollEvent.WaitOne ();  	}  	else {  		if (lastBusyState == false && PollManagerChangeStateEvent != null) {  			PollManagerChangeStateEvent (true);  		}  		lastBusyState = true;  		CurrentPollItem = PollQueue.Dequeue ();  		if (CurrentPollItem != null) {  			DonePollEvent = new ManualResetEvent (false);  			DonePollTimer = new System.Timers.Timer (90000);  			DonePollTimer.Elapsed += delegate (object s' ElapsedEventArgs ev) {  				DonePollTimer.Stop ();  				DonePollEvent.Set ();  				CurrentPollItem.Terminate ();  			};  			DonePollTimer.Start ();  			CurrentPollItem.Action (delegate () {  				if (DonePollTimer != null) {  					DonePollTimer.Stop ();  				}  				if (DonePollEvent != null) {  					DonePollEvent.Set ();  				}  			});  			DonePollEvent.WaitOne ();  			if (PollThread.ThreadState != ThreadState.AbortRequested && PollThread.ThreadState != ThreadState.Aborted && PollManagerUpdateUnitStateEvent != null) {  				PollManagerUpdateUnitStateEvent (CurrentPollItem.Unit);  			}  		}  	}  }  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: if (PollQueue.Count == 0 || SilentTimers.Count > 0) {  	if (lastBusyState == true && PollManagerChangeStateEvent != null) {  		PollManagerChangeStateEvent (false);  	}  	lastBusyState = false;  	ResumePollEvent.Reset ();  	ResumePollEvent.WaitOne ();  }  else {  	if (lastBusyState == false && PollManagerChangeStateEvent != null) {  		PollManagerChangeStateEvent (true);  	}  	lastBusyState = true;  	CurrentPollItem = PollQueue.Dequeue ();  	if (CurrentPollItem != null) {  		DonePollEvent = new ManualResetEvent (false);  		DonePollTimer = new System.Timers.Timer (90000);  		DonePollTimer.Elapsed += delegate (object s' ElapsedEventArgs ev) {  			DonePollTimer.Stop ();  			DonePollEvent.Set ();  			CurrentPollItem.Terminate ();  		};  		DonePollTimer.Start ();  		CurrentPollItem.Action (delegate () {  			if (DonePollTimer != null) {  				DonePollTimer.Stop ();  			}  			if (DonePollEvent != null) {  				DonePollEvent.Set ();  			}  		});  		DonePollEvent.WaitOne ();  		if (PollThread.ThreadState != ThreadState.AbortRequested && PollThread.ThreadState != ThreadState.Aborted && PollManagerUpdateUnitStateEvent != null) {  			PollManagerUpdateUnitStateEvent (CurrentPollItem.Unit);  		}  	}  }  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: if (CurrentPollItem != null) {  	DonePollEvent = new ManualResetEvent (false);  	DonePollTimer = new System.Timers.Timer (90000);  	DonePollTimer.Elapsed += delegate (object s' ElapsedEventArgs ev) {  		DonePollTimer.Stop ();  		DonePollEvent.Set ();  		CurrentPollItem.Terminate ();  	};  	DonePollTimer.Start ();  	CurrentPollItem.Action (delegate () {  		if (DonePollTimer != null) {  			DonePollTimer.Stop ();  		}  		if (DonePollEvent != null) {  			DonePollEvent.Set ();  		}  	});  	DonePollEvent.WaitOne ();  	if (PollThread.ThreadState != ThreadState.AbortRequested && PollThread.ThreadState != ThreadState.Aborted && PollManagerUpdateUnitStateEvent != null) {  		PollManagerUpdateUnitStateEvent (CurrentPollItem.Unit);  	}  }  
Magic Number,Prism.Classes,PollManager,C:\repos\vulsim_prism-client\pu\Classes\PollManager.cs,PollManager,The following statement contains a magic number: DonePollTimer = new System.Timers.Timer (90000);  
Magic Number,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,UpdateManager,The following statement contains a magic number: UpdateTimer = new System.Timers.Timer (new TimeSpan (2' 0' 0).TotalMilliseconds);  
Magic Number,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateProgressChanged,The following statement contains a magic number: if (UpdateManagerProgressEvent != null) {  	UpdateManagerProgressEvent (this' String.Format ("Получение {0}... ({1:D}K из {2:D}K загружено)"' GetProgressString (e.State)' e.BytesCompleted / 1024' e.BytesTotal / 1024));  }  
Magic Number,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateProgressChanged,The following statement contains a magic number: if (UpdateManagerProgressEvent != null) {  	UpdateManagerProgressEvent (this' String.Format ("Получение {0}... ({1:D}K из {2:D}K загружено)"' GetProgressString (e.State)' e.BytesCompleted / 1024' e.BytesTotal / 1024));  }  
Magic Number,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateProgressChanged,The following statement contains a magic number: UpdateManagerProgressEvent (this' String.Format ("Получение {0}... ({1:D}K из {2:D}K загружено)"' GetProgressString (e.State)' e.BytesCompleted / 1024' e.BytesTotal / 1024));  
Magic Number,Prism.Classes,UpdateManager,C:\repos\vulsim_prism-client\pu\Classes\UpdateManager.cs,CheckForUpdateProgressChanged,The following statement contains a magic number: UpdateManagerProgressEvent (this' String.Format ("Получение {0}... ({1:D}K из {2:D}K загружено)"' GetProgressString (e.State)' e.BytesCompleted / 1024' e.BytesTotal / 1024));  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The following statement contains a magic number: for (int i = 0; i < eventLogEntryCollection.Count; i++) {  	EventLogEntry eventLogEntry = eventLogEntryCollection [i];  	if (eventLogEntry.TimeGenerated > date && eventLogEntry.Source.Equals (Journal.EventLogSource)) {  		switch (eventLogEntry.EntryType) {  		case EventLogEntryType.Information:  			result.Add (new JournalEntry (0' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  			break;  		case EventLogEntryType.Warning:  			result.Add (new JournalEntry (1' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  			break;  		case EventLogEntryType.Error:  			result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  			break;  		}  	}  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The following statement contains a magic number: if (eventLogEntry.TimeGenerated > date && eventLogEntry.Source.Equals (Journal.EventLogSource)) {  	switch (eventLogEntry.EntryType) {  	case EventLogEntryType.Information:  		result.Add (new JournalEntry (0' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  		break;  	case EventLogEntryType.Warning:  		result.Add (new JournalEntry (1' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  		break;  	case EventLogEntryType.Error:  		result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  		break;  	}  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The following statement contains a magic number: switch (eventLogEntry.EntryType) {  case EventLogEntryType.Information:  	result.Add (new JournalEntry (0' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  case EventLogEntryType.Warning:  	result.Add (new JournalEntry (1' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  case EventLogEntryType.Error:  	result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The following statement contains a magic number: result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following statement contains a magic number: switch (comboBox.SelectedIndex) {  case 1:  	date = DateTime.Now.AddDays (-7);  	break;  case 2:  	date = DateTime.Now.AddDays (-30);  	break;  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following statement contains a magic number: switch (comboBox.SelectedIndex) {  case 1:  	date = DateTime.Now.AddDays (-7);  	break;  case 2:  	date = DateTime.Now.AddDays (-30);  	break;  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following statement contains a magic number: switch (comboBox.SelectedIndex) {  case 1:  	date = DateTime.Now.AddDays (-7);  	break;  case 2:  	date = DateTime.Now.AddDays (-30);  	break;  }  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following statement contains a magic number: date = DateTime.Now.AddDays (-7);  
Magic Number,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following statement contains a magic number: date = DateTime.Now.AddDays (-30);  
Missing Default,Prism.Classes,PresentationControlCategoryConverter,C:\repos\vulsim_prism-client\pu\Classes\PresentationControlCategoryConverter.cs,Convert,The following switch statement is missing a default case: switch ((PresentationControlCategory)value) {  case PresentationControlCategory.Category0:  	result = Resources.ENUM_PRESENTATIONCONTROLCATEGORY_0;  	break;  case PresentationControlCategory.Category1:  	result = Resources.ENUM_PRESENTATIONCONTROLCATEGORY_1;  	break;  case PresentationControlCategory.Category2:  	result = Resources.ENUM_PRESENTATIONCONTROLCATEGORY_2;  	break;  case PresentationControlCategory.Category3:  	result = Resources.ENUM_PRESENTATIONCONTROLCATEGORY_3;  	break;  }  
Missing Default,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,GetJournalFromDate,The following switch statement is missing a default case: switch (eventLogEntry.EntryType) {  case EventLogEntryType.Information:  	result.Add (new JournalEntry (0' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  case EventLogEntryType.Warning:  	result.Add (new JournalEntry (1' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  case EventLogEntryType.Error:  	result.Add (new JournalEntry (2' this.GetUnitName (eventLogEntry.Category)' eventLogEntry.TimeGenerated' eventLogEntry.Message));  	break;  }  
Missing Default,Prism.Views,JournalView,C:\repos\vulsim_prism-client\pu\Views\JournalView.xaml.cs,comboBox_SelectionChanged,The following switch statement is missing a default case: switch (comboBox.SelectedIndex) {  case 1:  	date = DateTime.Now.AddDays (-7);  	break;  case 2:  	date = DateTime.Now.AddDays (-30);  	break;  }  
