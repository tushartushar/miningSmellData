Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Marvin.JsonPatch.Internal,DictionaryAdapter<TKey;TValue>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\DictionaryAdapterOfTU.cs,TryAdd,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,DictionaryAdapter<TKey;TValue>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\DictionaryAdapterOfTU.cs,TryGet,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,DictionaryAdapter<TKey;TValue>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\DictionaryAdapterOfTU.cs,TryReplace,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,DictionaryAdapter<TKey;TValue>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\DictionaryAdapterOfTU.cs,TryTraverse,The method has 5 parameters. Parameters: target' segment' contractResolver' nextTarget' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,IAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\IAdapter.cs,TryTraverse,The method has 5 parameters. Parameters: target' segment' contractResolver' nextTarget' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,IAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\IAdapter.cs,TryAdd,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,IAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\IAdapter.cs,TryGet,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,IAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\IAdapter.cs,TryReplace,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryAdd,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryGet,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryReplace,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryTraverse,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryConvertValue,The method has 5 parameters. Parameters: originalValue' listTypeArgument' segment' convertedValue' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,ListAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ListAdapter.cs,TryGetPositionInfo,The method has 5 parameters. Parameters: list' segment' operationType' positionInfo' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,PocoAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\PocoAdapter.cs,TryAdd,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,PocoAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\PocoAdapter.cs,TryGet,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,PocoAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\PocoAdapter.cs,TryReplace,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Parameter List,Marvin.JsonPatch.Internal,PocoAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\PocoAdapter.cs,TryTraverse,The method has 5 parameters. Parameters: target' segment' contractResolver' value' errorMessage
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Copy,The length of the statement  "                    var error = CreateOperationFailedError(objectToApplyTo' operation.path' operation' Resources.FormatCannotCopyProperty(operation.from)); " is 135.
Long Statement,Marvin.JsonPatch.Converters,JsonPatchDocumentConverter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Converters\JsonPatchDocumentConverter.cs,ReadJson,The length of the statement  "                throw new ArgumentException(Resources.FormatParameterMustMatchType("objectType"' "JsonPatchDocumentNew")' "objectType"); " is 120.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,FindProperty,The length of the statement  "                return matches.FirstOrDefault(p => p.DeclaringType == targetObject.GetType()) ?? matches.FirstOrDefault(); //If multiple properties exist with same name' preferentially returns PropertyInfo of derived type  " is 205.
Long Statement,Marvin.JsonPatch,JsonPatchDocument<TModel>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,GetPathSegments,The length of the statement  "                    listOfSegments.Add(ExpressionHelpers.CaseTransform(EvaluateExpression(methodCallExpression.Arguments[0])' CaseTransformType)); " is 126.
Long Statement,Marvin.JsonPatch,JsonPatchDocument<TModel>,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,GetPathSegments,The length of the statement  "                    listOfSegments.Add(ExpressionHelpers.CaseTransform(GetPropertyNameFromMemberExpression(memberExpression)' CaseTransformType)); " is 126.
Long Statement,Marvin.JsonPatch.Internal,ObjectVisitor,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\ObjectVisitor.cs,SelectAdapater,The length of the statement  "                var type = typeof(DictionaryAdapter<'>).MakeGenericType(jsonDictionaryContract.DictionaryKeyType' jsonDictionaryContract.DictionaryValueType); " is 142.
Complex Conditional,Marvin.JsonPatch.Internal,PathHelpers,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Internal\PathHelpers.cs,NormalizePath,The conditional expression  "path.Contains(".") || path.Contains("//") || path.Contains(" ") || path.Contains("\\")"  is complex.
Magic Number,Marvin.JsonPatch.Converters,TypedJsonPatchDocumentConverter,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Converters\TypedJsonPatchDocumentConverter.cs,ReadJson,The following statement contains a magic number: try              {                  if (reader.TokenType == JsonToken.Null)                      return null;                    Type genericType = objectType.GetGenericArguments()[0];                    // load jObject                  JArray jObject = JArray.Load(reader);                    // Create target object for Json => list of operations' typed to genericType                  var genericOperation = typeof(Operation<>);                  var concreteOperationType = genericOperation.MakeGenericType(genericType);                    var genericList = typeof(List<>);                  var concreteList = genericList.MakeGenericType(concreteOperationType);                    var targetOperations = Activator.CreateInstance(concreteList);                    //Create a new reader for this jObject' and set all properties to match the original reader.                  JsonReader jObjectReader = jObject.CreateReader();                  jObjectReader.Culture = reader.Culture;                  jObjectReader.DateParseHandling = reader.DateParseHandling;                  jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;                  jObjectReader.FloatParseHandling = reader.FloatParseHandling;                    // Populate the object properties                  serializer.Populate(jObjectReader' targetOperations);                    // container target: the typed JsonPatchDocument.                   var container = Activator.CreateInstance(objectType' targetOperations' new DefaultContractResolver());                    return container;              }              catch (Exception ex)              {                  throw new JsonPatchException(                      new JsonPatchError(null' null' "The JsonPatchDocument was malformed and could not be parsed.")' ex' 400);              }
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (propertyPath.EndsWith("/-"))              {                  return new ActualPropertyPathResult(-1' propertyPath.Substring(0' propertyPath.Length - 2)' true);              }              else              {                                  var possibleIndex = propertyPath.Substring(propertyPath.LastIndexOf("/") + 1);                  int castedIndex = -1;                  if (int.TryParse(possibleIndex' out castedIndex))                  {                      // has numeric end.                        if (castedIndex > -1)                      {                          var pathToProperty = propertyPath.Substring(                             0'                             propertyPath.LastIndexOf('/' + castedIndex.ToString()));                            return new ActualPropertyPathResult(castedIndex' pathToProperty' false);                      }                      else                      {                          string message = forPath ?                               string.Format("Patch failed: provided path is invalid' position too small: {0}"' propertyPath)                               : string.Format("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);                            // negative position - invalid path                          throw new JsonPatchException(                               new JsonPatchError(objectToApplyTo'                                   operationToReport'                                message)' 422);                      }                  }                  return new ActualPropertyPathResult(-1' propertyPath' false);              }
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,C:\repos\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (propertyPath.EndsWith("/-"))              {                  return new ActualPropertyPathResult(-1' propertyPath.Substring(0' propertyPath.Length - 2)' true);              }              else              {                                  var possibleIndex = propertyPath.Substring(propertyPath.LastIndexOf("/") + 1);                  int castedIndex = -1;                  if (int.TryParse(possibleIndex' out castedIndex))                  {                      // has numeric end.                        if (castedIndex > -1)                      {                          var pathToProperty = propertyPath.Substring(                             0'                             propertyPath.LastIndexOf('/' + castedIndex.ToString()));                            return new ActualPropertyPathResult(castedIndex' pathToProperty' false);                      }                      else                      {                          string message = forPath ?                               string.Format("Patch failed: provided path is invalid' position too small: {0}"' propertyPath)                               : string.Format("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);                            // negative position - invalid path                          throw new JsonPatchException(                               new JsonPatchError(objectToApplyTo'                                   operationToReport'                                message)' 422);                      }                  }                  return new ActualPropertyPathResult(-1' propertyPath' false);              }
