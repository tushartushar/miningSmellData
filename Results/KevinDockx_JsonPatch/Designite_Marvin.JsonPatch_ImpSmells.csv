Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,Cyclomatic complexity of the method is 11
Complex Method,Marvin.JsonPatch.Helpers,ExpressionHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\ExpressionHelpers.cs,GetPath,Cyclomatic complexity of the method is 17
Complex Method,Marvin.JsonPatch.Helpers,ObjectTreeAnalysisResult,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\ObjectTreeAnalysisResult.cs,ObjectTreeAnalysisResult,Cyclomatic complexity of the method is 8
Complex Method,Marvin.JsonPatch.Operations,Operation,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Operations\OperationBase.cs,Apply,Cyclomatic complexity of the method is 19
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422); " is 166.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422); " is 203.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "						throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422); " is 235.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422); " is 235.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422); " is 218.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422); " is 345.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422); " is 196.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422); " is 166.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "						throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422); " is 235.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "						throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422); " is 235.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422); " is 235.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422); " is 219.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422); " is 345.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "		if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) { " is 141.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The length of the statement  "			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType)); " is 133.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The length of the statement  "		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: could not determine type of property at location {0}"' operation.path))' 422); " is 186.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The length of the statement  "		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: property value cannot be converted to type of path location {0}"' operation.path))' 422); " is 197.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The length of the statement  "					throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422); " is 186.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The length of the statement  "				throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422); " is 252.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422); " is 232.
Long Statement,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The length of the statement  "			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422); " is 252.
Long Statement,Marvin.JsonPatch.Converters,TypedJsonPatchDocumentConverter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Converters\TypedJsonPatchDocumentConverter.cs,ReadJson,The length of the statement  "		throw new JsonPatchException (new JsonPatchError (null' null' "The JsonPatchDocument was malformed and could not be parsed.")' ex' 400); " is 136.
Long Statement,Marvin.JsonPatch.Helpers,ExpressionHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\ExpressionHelpers.cs,ContinueWithSubPath,The length of the statement  "		return (expressionType == ExpressionType.ArrayIndex || expressionType == ExpressionType.Call || expressionType == ExpressionType.Convert || expressionType == ExpressionType.MemberAccess || expressionType == ExpressionType.Parameter); " is 233.
Long Statement,Marvin.JsonPatch.Helpers,ExpressionHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\ExpressionHelpers.cs,ContinueWithSubPath,The length of the statement  "		return (expressionType == ExpressionType.ArrayIndex || expressionType == ExpressionType.Call || expressionType == ExpressionType.Convert || expressionType == ExpressionType.MemberAccess); " is 187.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetValue,The length of the statement  "			var propertyInfoToGet = GetPropertyInfo (targetObject' splitPath [i]' BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance); " is 141.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,SetValue,The length of the statement  "			var propertyInfoToGet = GetPropertyInfo (targetObject' splitPath [i]' BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance); " is 141.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,FindProperty,The length of the statement  "				var propertyInfoToGet = GetPropertyInfo (targetObject' splitPath [i]' BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance); " is 141.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,FindProperty,The length of the statement  "		var matches = targetObject.GetType ().GetProperties (BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance).Where (p => p.Name.ToLower ().Equals (splitPath.Last ().ToLower ())).ToArray (); " is 204.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The length of the statement  "				string message = forPath ? string.Format ("Patch failed: provided path is invalid' position too small: {0}"' propertyPath) : string.Format ("Patch failed: provided from is invalid' position too small: {0}"' propertyPath); " is 221.
Long Statement,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,ImplementsGeneric,The length of the statement  "	return propertyType.GetInterfaces ().Where (i => i.IsGenericType).Select (i => i.GetGenericTypeDefinition ()).Contains (genericInterfaceDefinition); " is 148.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Add,The length of the statement  "	Operations.Add (new Operation<T> ("add"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + position' null' value)); " is 143.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Add,The length of the statement  "	Operations.Add (new Operation<T> ("add"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' null' value)); " is 133.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Remove,The length of the statement  "	Operations.Add (new Operation<T> ("remove"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + position' null)); " is 139.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Remove,The length of the statement  "	Operations.Add (new Operation<T> ("remove"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' null)); " is 129.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Replace,The length of the statement  "	Operations.Add (new Operation<T> ("replace"' ExpressionHelpers.GetPath<T' TProp> (path).ToLowerInvariant ()' null' value)); " is 123.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Replace,The length of the statement  "	Operations.Add (new Operation<T> ("replace"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + position' null' value)); " is 147.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Replace,The length of the statement  "	Operations.Add (new Operation<T> ("replace"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' null' value)); " is 137.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' TProp> (path).ToLowerInvariant ()' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 171.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' TProp> (path).ToLowerInvariant ()' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 199.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + positionTo' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 197.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + positionTo' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 225.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 213.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Move,The length of the statement  "	Operations.Add (new Operation<T> ("move"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 185.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' TProp> (path).ToLowerInvariant ()' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 171.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' TProp> (path).ToLowerInvariant ()' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 199.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + positionTo' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 197.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/" + positionTo' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 225.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' ExpressionHelpers.GetPath<T' IList<TProp>> (from).ToLowerInvariant () + "/" + positionFrom)); " is 213.
Long Statement,Marvin.JsonPatch,JsonPatchDocument,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\JsonPatchDocumentOfT.cs,Copy,The length of the statement  "	Operations.Add (new Operation<T> ("copy"' ExpressionHelpers.GetPath<T' IList<TProp>> (path).ToLowerInvariant () + "/-"' ExpressionHelpers.GetPath<T' TProp> (from).ToLowerInvariant ())); " is 185.
Long Statement,Marvin.JsonPatch.Operations,Operation,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Operations\OperationBase.cs,ShouldSerializevalue,The length of the statement  "	return (OperationType == Operations.OperationType.Add || OperationType == OperationType.Replace || OperationType == OperationType.Test); " is 136.
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (!result.IsValidPathForAdd) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  		if (!conversionResult.CanBeConverted) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  		}  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (appendList) {  				array.Add (conversionResult.ConvertedInstance);  			} else {  				// specified index must not be greater than the amount of items in the  				// array  				if (positionAsInteger <= array.Count) {  					array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  				} else {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  			}  		} else {  			// cannot read the property  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  	}  } else {  	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (conversionResultTuple.CanBeConverted) {  		if (patchProperty.Property.Writable) {  			patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  	if (!conversionResult.CanBeConverted) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  	}  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (appendList) {  			array.Add (conversionResult.ConvertedInstance);  		} else {  			// specified index must not be greater than the amount of items in the  			// array  			if (positionAsInteger <= array.Count) {  				array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  			} else {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  		}  	} else {  		// cannot read the property  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  	if (!conversionResult.CanBeConverted) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  	}  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (appendList) {  			array.Add (conversionResult.ConvertedInstance);  		} else {  			// specified index must not be greater than the amount of items in the  			// array  			if (positionAsInteger <= array.Count) {  				array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  			} else {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  		}  	} else {  		// cannot read the property  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  	if (!conversionResult.CanBeConverted) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  	}  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (appendList) {  			array.Add (conversionResult.ConvertedInstance);  		} else {  			// specified index must not be greater than the amount of items in the  			// array  			if (positionAsInteger <= array.Count) {  				array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  			} else {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  		}  	} else {  		// cannot read the property  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	var conversionResult = PropertyHelpers.ConvertToActualType (genericTypeOfArray' value);  	if (!conversionResult.CanBeConverted) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  	}  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (appendList) {  			array.Add (conversionResult.ConvertedInstance);  		} else {  			// specified index must not be greater than the amount of items in the  			// array  			if (positionAsInteger <= array.Count) {  				array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  			} else {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  		}  	} else {  		// cannot read the property  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (!conversionResult.CanBeConverted) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided value is invalid for array property type at location path: {0}"' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (appendList) {  		array.Add (conversionResult.ConvertedInstance);  	} else {  		// specified index must not be greater than the amount of items in the  		// array  		if (positionAsInteger <= array.Count) {  			array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  	}  } else {  	// cannot read the property  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (appendList) {  		array.Add (conversionResult.ConvertedInstance);  	} else {  		// specified index must not be greater than the amount of items in the  		// array  		if (positionAsInteger <= array.Count) {  			array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  	}  } else {  	// cannot read the property  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (appendList) {  	array.Add (conversionResult.ConvertedInstance);  } else {  	// specified index must not be greater than the amount of items in the  	// array  	if (positionAsInteger <= array.Count) {  		array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (positionAsInteger <= array.Count) {  	array.Insert (positionAsInteger' conversionResult.ConvertedInstance);  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array"' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (conversionResultTuple.CanBeConverted) {  	if (patchProperty.Property.Writable) {  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (conversionResultTuple.CanBeConverted) {  	if (patchProperty.Property.Writable) {  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: if (patchProperty.Property.Writable) {  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Add,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property value cannot be converted to type of path location {0}."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (!result.IsValidPathForRemove) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: the provided path is invalid: {0}."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (removeFromList) {  				if (array.Count == 0) {  					// if the array is empty' we should throw an error  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (array.Count - 1);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			} else {  				if (positionAsInteger >= array.Count) {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (positionAsInteger);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			}  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  	}  } else {  	if (!patchProperty.Property.Writable) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  	// set value to null' or for non-nullable value types' to its default value.  	object value = null;  	if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) {  		value = Activator.CreateInstance (patchProperty.Property.PropertyType);  	}  	// check if it can be converted.    	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (!conversionResultTuple.CanBeConverted) {  		// conversion failed' so use reflection (somewhat slower) to   		// create a new default instance of the property type to set as value  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType));  		return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  	}  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (removeFromList) {  				if (array.Count == 0) {  					// if the array is empty' we should throw an error  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (array.Count - 1);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			} else {  				if (positionAsInteger >= array.Count) {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (positionAsInteger);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			}  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  	}  } else {  	if (!patchProperty.Property.Writable) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  	// set value to null' or for non-nullable value types' to its default value.  	object value = null;  	if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) {  		value = Activator.CreateInstance (patchProperty.Property.PropertyType);  	}  	// check if it can be converted.    	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (!conversionResultTuple.CanBeConverted) {  		// conversion failed' so use reflection (somewhat slower) to   		// create a new default instance of the property type to set as value  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType));  		return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  	}  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (removeFromList) {  				if (array.Count == 0) {  					// if the array is empty' we should throw an error  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (array.Count - 1);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			} else {  				if (positionAsInteger >= array.Count) {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (positionAsInteger);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			}  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  	}  } else {  	if (!patchProperty.Property.Writable) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  	// set value to null' or for non-nullable value types' to its default value.  	object value = null;  	if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) {  		value = Activator.CreateInstance (patchProperty.Property.PropertyType);  	}  	// check if it can be converted.    	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (!conversionResultTuple.CanBeConverted) {  		// conversion failed' so use reflection (somewhat slower) to   		// create a new default instance of the property type to set as value  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType));  		return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  	}  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (removeFromList) {  				if (array.Count == 0) {  					// if the array is empty' we should throw an error  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (array.Count - 1);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			} else {  				if (positionAsInteger >= array.Count) {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (positionAsInteger);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			}  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  	}  } else {  	if (!patchProperty.Property.Writable) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  	// set value to null' or for non-nullable value types' to its default value.  	object value = null;  	if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) {  		value = Activator.CreateInstance (patchProperty.Property.PropertyType);  	}  	// check if it can be converted.    	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (!conversionResultTuple.CanBeConverted) {  		// conversion failed' so use reflection (somewhat slower) to   		// create a new default instance of the property type to set as value  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType));  		return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  	}  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList || positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (removeFromList) {  				if (array.Count == 0) {  					// if the array is empty' we should throw an error  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (array.Count - 1);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			} else {  				if (positionAsInteger >= array.Count) {  					throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  				}  				array.RemoveAt (positionAsInteger);  				// return the type of the value that has been removed  				return new RemovedPropertyTypeResult (genericTypeOfArray' false);  			}  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  	}  } else {  	if (!patchProperty.Property.Writable) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  	}  	// set value to null' or for non-nullable value types' to its default value.  	object value = null;  	if (patchProperty.Property.PropertyType.GetType ().IsValueType && Nullable.GetUnderlyingType (patchProperty.Property.PropertyType) == null) {  		value = Activator.CreateInstance (patchProperty.Property.PropertyType);  	}  	// check if it can be converted.    	var conversionResultTuple = PropertyHelpers.ConvertToActualType (patchProperty.Property.PropertyType' value);  	if (!conversionResultTuple.CanBeConverted) {  		// conversion failed' so use reflection (somewhat slower) to   		// create a new default instance of the property type to set as value  		patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' Activator.CreateInstance (patchProperty.Property.PropertyType));  		return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  	}  	patchProperty.Property.ValueProvider.SetValue (patchProperty.Parent' conversionResultTuple.ConvertedInstance);  	return new RemovedPropertyTypeResult (patchProperty.Property.PropertyType' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (removeFromList) {  			if (array.Count == 0) {  				// if the array is empty' we should throw an error  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (array.Count - 1);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		} else {  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (positionAsInteger);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (removeFromList) {  			if (array.Count == 0) {  				// if the array is empty' we should throw an error  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (array.Count - 1);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		} else {  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (positionAsInteger);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (removeFromList) {  			if (array.Count == 0) {  				// if the array is empty' we should throw an error  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (array.Count - 1);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		} else {  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (positionAsInteger);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	var genericTypeOfArray = PropertyHelpers.GetEnumerableType (patchProperty.Property.PropertyType);  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (removeFromList) {  			if (array.Count == 0) {  				// if the array is empty' we should throw an error  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (array.Count - 1);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		} else {  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  			}  			array.RemoveAt (positionAsInteger);  			// return the type of the value that has been removed  			return new RemovedPropertyTypeResult (genericTypeOfArray' false);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (removeFromList) {  		if (array.Count == 0) {  			// if the array is empty' we should throw an error  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (array.Count - 1);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	} else {  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (positionAsInteger);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (removeFromList) {  		if (array.Count == 0) {  			// if the array is empty' we should throw an error  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (array.Count - 1);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	} else {  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (positionAsInteger);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (removeFromList) {  		if (array.Count == 0) {  			// if the array is empty' we should throw an error  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (array.Count - 1);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	} else {  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  		}  		array.RemoveAt (positionAsInteger);  		// return the type of the value that has been removed  		return new RemovedPropertyTypeResult (genericTypeOfArray' false);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList) {  	if (array.Count == 0) {  		// if the array is empty' we should throw an error  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  	}  	array.RemoveAt (array.Count - 1);  	// return the type of the value that has been removed  	return new RemovedPropertyTypeResult (genericTypeOfArray' false);  } else {  	if (positionAsInteger >= array.Count) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  	}  	array.RemoveAt (positionAsInteger);  	// return the type of the value that has been removed  	return new RemovedPropertyTypeResult (genericTypeOfArray' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (removeFromList) {  	if (array.Count == 0) {  		// if the array is empty' we should throw an error  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  	}  	array.RemoveAt (array.Count - 1);  	// return the type of the value that has been removed  	return new RemovedPropertyTypeResult (genericTypeOfArray' false);  } else {  	if (positionAsInteger >= array.Count) {  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  	}  	array.RemoveAt (positionAsInteger);  	// return the type of the value that has been removed  	return new RemovedPropertyTypeResult (genericTypeOfArray' false);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (array.Count == 0) {  	// if the array is empty' we should throw an error  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (positionAsInteger >= array.Count) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: position larger than array size"' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: cannot get property value at path {0}.  Possible cause: the property doesn't have an accessible getter."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: provided path is invalid for array property type at location path: {0}: expected array."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: if (!patchProperty.Property.Writable) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Remove,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' string.Format ("Patch failed: property at path location cannot be set: {0}.  Possible causes: the property may not have an accessible setter' or the property may be part of an anonymous object (and thus cannot be changed after initialization)."' path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The following statement contains a magic number: if (!removeResult.HasError && removeResult.ActualType == null) {  	// the remove operation completed succesfully' but we could not determine the type.    	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: could not determine type of property at location {0}"' operation.path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: could not determine type of property at location {0}"' operation.path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The following statement contains a magic number: if (!conversionResult.CanBeConverted) {  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: property value cannot be converted to type of path location {0}"' operation.path))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,Replace,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operation' string.Format ("Patch failed: property value cannot be converted to type of path location {0}"' operation.path))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  			}  			valueAtLocation = array [positionAsInteger];  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  	}  } else {  	if (!patchProperty.Property.Readable) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  	valueAtLocation = patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  			}  			valueAtLocation = array [positionAsInteger];  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  	}  } else {  	if (!patchProperty.Property.Readable) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  	valueAtLocation = patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  			}  			valueAtLocation = array [positionAsInteger];  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  	}  } else {  	if (!patchProperty.Property.Readable) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  	valueAtLocation = patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (positionAsInteger > -1) {  	if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  		// now' get the generic type of the enumerable  		if (patchProperty.Property.Readable) {  			var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  			if (positionAsInteger >= array.Count) {  				throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  			}  			valueAtLocation = array [positionAsInteger];  		} else {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  		}  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  	}  } else {  	if (!patchProperty.Property.Readable) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  	valueAtLocation = patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  		}  		valueAtLocation = array [positionAsInteger];  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  		}  		valueAtLocation = array [positionAsInteger];  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (PropertyHelpers.IsNonStringList (patchProperty.Property.PropertyType)) {  	// now' get the generic type of the enumerable  	if (patchProperty.Property.Readable) {  		var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  		if (positionAsInteger >= array.Count) {  			throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  		}  		valueAtLocation = array [positionAsInteger];  	} else {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  	}  } else {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (positionAsInteger >= array.Count) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  	}  	valueAtLocation = array [positionAsInteger];  } else {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (patchProperty.Property.Readable) {  	var array = (IList)patchProperty.Property.ValueProvider.GetValue (patchProperty.Parent);  	if (positionAsInteger >= array.Count) {  		throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  	}  	valueAtLocation = array [positionAsInteger];  } else {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (positionAsInteger >= array.Count) {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: property at location from: {0} does not exist"' location))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: provided from path is invalid for array property type at location from: {0}: expected array"' location))' 422);  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: if (!patchProperty.Property.Readable) {  	throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  }  
Magic Number,Marvin.JsonPatch.Adapters,ObjectAdapter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Adapters\ObjectAdapter.cs,GetValueAtLocation,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToGetValueFrom' operationToReport' string.Format ("Patch failed: cannot get property at location from from: {0}. Possible cause: the property doesn't have an accessible getter."' location))' 422);  
Magic Number,Marvin.JsonPatch.Converters,TypedJsonPatchDocumentConverter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Converters\TypedJsonPatchDocumentConverter.cs,ReadJson,The following statement contains a magic number: try {  	if (reader.TokenType == JsonToken.Null)  		return null;  	Type genericType = objectType.GetGenericArguments () [0];  	// load jObject  	JArray jObject = JArray.Load (reader);  	// Create target object for Json => list of operations' typed to genericType  	var genericOperation = typeof(Operation<>);  	var concreteOperationType = genericOperation.MakeGenericType (genericType);  	var genericList = typeof(List<>);  	var concreteList = genericList.MakeGenericType (concreteOperationType);  	var targetOperations = Activator.CreateInstance (concreteList);  	//Create a new reader for this jObject' and set all properties to match the original reader.  	JsonReader jObjectReader = jObject.CreateReader ();  	jObjectReader.Culture = reader.Culture;  	jObjectReader.DateParseHandling = reader.DateParseHandling;  	jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;  	jObjectReader.FloatParseHandling = reader.FloatParseHandling;  	// Populate the object properties  	serializer.Populate (jObjectReader' targetOperations);  	// container target: the typed JsonPatchDocument.   	var container = Activator.CreateInstance (objectType' targetOperations);  	return container;  } catch (Exception ex) {  	throw new JsonPatchException (new JsonPatchError (null' null' "The JsonPatchDocument was malformed and could not be parsed.")' ex' 400);  }  
Magic Number,Marvin.JsonPatch.Converters,TypedJsonPatchDocumentConverter,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Converters\TypedJsonPatchDocumentConverter.cs,ReadJson,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (null' null' "The JsonPatchDocument was malformed and could not be parsed.")' ex' 400);  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (propertyPath.EndsWith ("/-")) {  	return new ActualPropertyPathResult (-1' propertyPath.Substring (0' propertyPath.Length - 2)' true);  } else {  	var possibleIndex = propertyPath.Substring (propertyPath.LastIndexOf ("/") + 1);  	int castedIndex = -1;  	if (int.TryParse (possibleIndex' out castedIndex)) {  		// has numeric end.    		if (castedIndex > -1) {  			var pathToProperty = propertyPath.Substring (0' propertyPath.LastIndexOf ('/' + castedIndex.ToString ()));  			return new ActualPropertyPathResult (castedIndex' pathToProperty' false);  		} else {  			string message = forPath ? string.Format ("Patch failed: provided path is invalid' position too small: {0}"' propertyPath) : string.Format ("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);  			// negative position - invalid path  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' message)' 422);  		}  	}  	return new ActualPropertyPathResult (-1' propertyPath' false);  }  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (propertyPath.EndsWith ("/-")) {  	return new ActualPropertyPathResult (-1' propertyPath.Substring (0' propertyPath.Length - 2)' true);  } else {  	var possibleIndex = propertyPath.Substring (propertyPath.LastIndexOf ("/") + 1);  	int castedIndex = -1;  	if (int.TryParse (possibleIndex' out castedIndex)) {  		// has numeric end.    		if (castedIndex > -1) {  			var pathToProperty = propertyPath.Substring (0' propertyPath.LastIndexOf ('/' + castedIndex.ToString ()));  			return new ActualPropertyPathResult (castedIndex' pathToProperty' false);  		} else {  			string message = forPath ? string.Format ("Patch failed: provided path is invalid' position too small: {0}"' propertyPath) : string.Format ("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);  			// negative position - invalid path  			throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' message)' 422);  		}  	}  	return new ActualPropertyPathResult (-1' propertyPath' false);  }  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: return new ActualPropertyPathResult (-1' propertyPath.Substring (0' propertyPath.Length - 2)' true);  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (int.TryParse (possibleIndex' out castedIndex)) {  	// has numeric end.    	if (castedIndex > -1) {  		var pathToProperty = propertyPath.Substring (0' propertyPath.LastIndexOf ('/' + castedIndex.ToString ()));  		return new ActualPropertyPathResult (castedIndex' pathToProperty' false);  	} else {  		string message = forPath ? string.Format ("Patch failed: provided path is invalid' position too small: {0}"' propertyPath) : string.Format ("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);  		// negative position - invalid path  		throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' message)' 422);  	}  }  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: if (castedIndex > -1) {  	var pathToProperty = propertyPath.Substring (0' propertyPath.LastIndexOf ('/' + castedIndex.ToString ()));  	return new ActualPropertyPathResult (castedIndex' pathToProperty' false);  } else {  	string message = forPath ? string.Format ("Patch failed: provided path is invalid' position too small: {0}"' propertyPath) : string.Format ("Patch failed: provided from is invalid' position too small: {0}"' propertyPath);  	// negative position - invalid path  	throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' message)' 422);  }  
Magic Number,Marvin.JsonPatch.Helpers,PropertyHelpers,F:\newReposMay17\KevinDockx_JsonPatch\src\Marvin.JsonPatch\Helpers\PropertyHelpers.cs,GetActualPropertyPath,The following statement contains a magic number: throw new JsonPatchException (new JsonPatchError (objectToApplyTo' operationToReport' message)' 422);  
