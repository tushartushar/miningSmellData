Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TestEasy.Core.Test,Build,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\BuildHelperFacts.cs,WhenBuild_IfNoPhysicalDirectoryExist_ShouldThrow,The length of the statement  "                Assert.Equal(string.Format("Application directory '{0}' does not exist."' mock.MockApplicationPhysicalPath)' exception.Message); " is 128.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockApplicationProjectFileDoesNotExist,The length of the statement  "            FileSystem.Setup(f => f.FileExists(Path.Combine(MockApplicationPhysicalPath' MockApplicationName + ".csproj"))).Returns(false); " is 127.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockApplicationProjectFile,The length of the statement  "            FileSystem.Setup(f => f.FileExists(Path.Combine(MockApplicationPhysicalPath' MockApplicationName + ".csproj"))).Returns(true); " is 126.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildPathProgramFilesMsbuild,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%ProgramFiles%\MSBuild\12.0\bin\msbuild.exe")).Returns(MockProgramFilesMsbuilPath); " is 143.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildPathProgramFilesMsbuild,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%SystemDrive%\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe")).Returns(MockDotNetMsbuilPath); " is 162.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildDotNetMsbuild,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%ProgramFiles%\MSBuild\12.0\bin\msbuild.exe")).Returns(MockProgramFilesMsbuilPath); " is 143.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildDotNetMsbuild,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%SystemDrive%\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe")).Returns(MockDotNetMsbuilPath); " is 162.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildPathNotFound,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%ProgramFiles%\MSBuild\12.0\bin\msbuild.exe")).Returns(MockProgramFilesMsbuilPath); " is 143.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockGetMsBuildPathNotFound,The length of the statement  "            EnvironmentSystem.Setup(f => f.ExpandEnvironmentVariables(@"%SystemDrive%\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe")).Returns(MockDotNetMsbuilPath); " is 162.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartFalse,The length of the statement  "            ProcessRunner.Setup(f => f.Start(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(false); " is 157.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartNormally,The length of the statement  "            ProcessRunner.Setup(f => f.Start(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(true); " is 156.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartNormally,The length of the statement  "            ProcessRunner.Setup(f => f.GetProcessOutput(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(MockBuildOutput); " is 178.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartNormally,The length of the statement  "            ProcessRunner.Setup(f => f.GetProcessExitCode(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(0); " is 166.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartNormally,The length of the statement  "            ProcessRunner.Setup(f => f.WaitForExit(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase))' 10000)).Returns(true); " is 169.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessExitCodeNotZero,The length of the statement  "            ProcessRunner.Setup(f => f.Start(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(true); " is 156.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessExitCodeNotZero,The length of the statement  "            ProcessRunner.Setup(f => f.GetProcessOutput(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(MockBuildOutput); " is 178.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessExitCodeNotZero,The length of the statement  "            ProcessRunner.Setup(f => f.GetProcessExitCode(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase)))).Returns(1); " is 166.
Long Statement,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessExitCodeNotZero,The length of the statement  "            ProcessRunner.Setup(f => f.WaitForExit(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase))' 10000)).Returns(true); " is 169.
Long Statement,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddProgramToFirewallFact,The length of the statement  "                                    p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""mytool.exe"" TestEasyTool enable"))) " is 137.
Long Statement,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddProgramToFirewallFact,The length of the statement  "                                    p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""mytool.exe"" TestEasyTool enable")' 60000)) " is 144.
Long Statement,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddPortToFirewallFact,The length of the statement  "                                    p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add portopening tcp 444 TestEasyTool"))) " is 120.
Long Statement,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddPortToFirewallFact,The length of the statement  "                                    p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add portopening tcp 444 TestEasyTool")' 60000)) " is 127.
Long Statement,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfToolIsInTheConfig_ShouldTakePathFromConfig,The length of the statement  "                mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\sourcepathfromconfig\mytoolqq.exe")).Returns(new DateTime(2000' 1' 1)); " is 125.
Long Statement,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfToolIsInTheConfig_ShouldTakePathFromConfig,The length of the statement  "                TestEasyConfig.Instance.Tools.Tools.Add(new ToolElement { Name = "mytool.exe"' Path = @"x:\sourcepathfromconfig\mytoolqq.exe" }); " is 129.
Long Statement,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourceNotExists_ShouldThrow,The length of the statement  "                Assert.Equal(@"Tool 'mytool.exe' was not found and can not be copied to current folder. Please make sure path 'x:\sourcepath' exists or use another Browser to work around."'  " is 173.
Long Statement,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfFirewallTrue_ShouldAddToolToFirewall,The length of the statement  "                                        p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""x:\localpathexpanded\mytool.exe"" TestEasyTool enable"))) " is 158.
Long Statement,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfFirewallTrue_ShouldAddToolToFirewall,The length of the statement  "                                        p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""x:\localpathexpanded\mytool.exe"" TestEasyTool enable")' 60000)) " is 165.
Magic Number,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessStartNormally,The following statement contains a magic number: ProcessRunner.Setup(f => f.WaitForExit(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase))' 10000)).Returns(true);
Magic Number,TestEasy.Core.Test,CoreMockGenerator,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\CoreMockGenerator.cs,MockBuildProcessExitCodeNotZero,The following statement contains a magic number: ProcessRunner.Setup(f => f.WaitForExit(It.Is<Process>(p => p.StartInfo.FileName.Equals(processName' StringComparison.InvariantCultureIgnoreCase))' 10000)).Returns(true);
Magic Number,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddProgramToFirewallFact,The following statement contains a magic number: mockProcessRunner.Setup(m => m.WaitForExit(It.Is<Process>(                                      p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""mytool.exe"" TestEasyTool enable")' 60000))                                  .Returns(true);
Magic Number,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddPortToFirewallFact,The following statement contains a magic number: mockProcessRunner.Setup(m => m.WaitForExit(It.Is<Process>(                                      p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add portopening tcp 444 TestEasyTool")' 60000))                                  .Returns(true);
Magic Number,TestEasy.Core.Test,FirewallHelperFacts,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\FirewallHelperFacts.cs,AddPortToFirewallFact,The following statement contains a magic number: helper.AddPortToFirewall(444' "TestEasyTool");
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathEmptyAndTaergetPathEmpty_ShouldTakePathsFromConfig,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\sourcepath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathEmptyAndTaergetPathEmpty_ShouldTakePathsFromConfig,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\localpath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathProvidedAndToolExists_ShouldTakeSourcePath,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\sourcepath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathProvidedAndToolExists_ShouldTakeSourcePath,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\localpath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathProvidedAndTargetPathProvided_ShouldUseThem,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\sourcepath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfSourcePathProvidedAndTargetPathProvided_ShouldUseThem,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\localpath\mytool.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfToolIsInTheConfig_ShouldTakePathFromConfig,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\sourcepathfromconfig\mytoolqq.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfToolIsInTheConfig_ShouldTakePathFromConfig,The following statement contains a magic number: mockFileSystem.Setup(m => m.FileGetLastWriteTime(@"x:\localpath\mytoolqq.exe")).Returns(new DateTime(2000' 1' 1));
Magic Number,TestEasy.Core.Test,DownloadTool,D:\research\architectureSmells\repos\Microsoft_TestEasy\test\TestEasy.Core.Test\ToolsHelperFacts.cs,WhenDownloadTool_IfFirewallTrue_ShouldAddToolToFirewall,The following statement contains a magic number: mockProcessRunner.Setup(m => m.WaitForExit(It.Is<Process>(                                          p => p.StartInfo.FileName == "netsh.exe" && p.StartInfo.Arguments == @"firewall add allowedprogram ""x:\localpathexpanded\mytool.exe"" TestEasyTool enable")' 60000))                                   .Returns(true);
