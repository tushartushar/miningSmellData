Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LiNGS.Server,Router,C:\repos\valterc_lings\LiNGSServer\Router.cs,RouteMessage,Cyclomatic complexity of the method is 32
Complex Method,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,Cyclomatic complexity of the method is 8
Complex Method,LiNGS.Server.State,Dispatcher,C:\repos\valterc_lings\LiNGSServer\State\Dispatcher.cs,DispatchInformationToClients,Cyclomatic complexity of the method is 8
Complex Method,LiNGS.Server.State,StateManager,C:\repos\valterc_lings\LiNGSServer\State\StateManager.cs,UpdateStates,Cyclomatic complexity of the method is 14
Long Parameter List,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,Update,The method has 7 parameters.
Long Parameter List,LiNGS.Server.GameLogic,NetworkedObject,C:\repos\valterc_lings\LiNGSServer\GameLogic\NetworkedObject.cs,NetworkedObject,The method has 5 parameters.
Long Parameter List,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The method has 5 parameters.
Long Parameter List,LiNGS.Server.State.Persistent,PersistentStateManager,C:\repos\valterc_lings\LiNGSServer\State\Persistent\PersistentStateManager.cs,SaveState,The method has 6 parameters.
Long Identifier,LiNGS.Server.State,StateManager,C:\repos\valterc_lings\LiNGSServer\State\StateManager.cs,UpdateStates,The length of the parameter ClientNetworkedObjectKeyCollection is 34.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,SendMessageTo,The length of the statement  "	if (message.Type != NetworkMessage.MessageType.Error && message.Type != NetworkMessage.MessageType.Event && message.Type != NetworkMessage.MessageType.Game) { " is 158.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,GetConnectedClients,The length of the statement  "	//this copy is created to avoid that risk and to also avoid the user messing with the original list (Add/Remove clients) " is 120.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,Update,The length of the statement  "			List<ClientNetworkedObject> objectsOfClient = ClientNetworkedObjects.Where (kv => kv.Value.Client == client).Select (kv => kv.Value).ToList (); " is 143.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedClientNetworkedObjectData> destroyObjects = networkObjectQueue.Where (q => q.MessageData.Object.StartsWith (LiNGSMarkers.DestroyObject)); " is 155.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedClientNetworkedObjectData> createObjects = networkObjectQueue.Where (q => q.MessageData.Object.StartsWith (LiNGSMarkers.CreateObject)); " is 153.
Long Statement,LiNGS.Server.GameLogic,GameLogicProcessor,C:\repos\valterc_lings\LiNGSServer\GameLogic\GameLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedClientNetworkedObjectData> fieldsData = networkObjectQueue.Where (q => !q.MessageData.Object.StartsWith (LiNGSMarkers.CreateObject) && !q.MessageData.Object.StartsWith (LiNGSMarkers.DestroyObject)); " is 216.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The length of the statement  "			if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) { " is 157.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The length of the statement  "					messages = this.importantMessages.Where (im => im.Client == client.NetworkClient && im.Message.MessageId == messageId).ToList (); " is 129.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The length of the statement  "			server.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.Ack' new MessageData () { " is 121.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The length of the statement  "	dataToSend.AddRange (message.Data.Where (md => md.Object.StartsWith (LiNGSMarkers.Namespace) && (md.Property ?? LiNGSMarkers.Namespace).StartsWith (LiNGSMarkers.Namespace))); " is 174.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The length of the statement  "	dataToSend.AddRange (message.Data.Where (md => !md.Object.StartsWith (LiNGSMarkers.Namespace) || !(md.Property ?? String.Empty).StartsWith (LiNGSMarkers.Namespace))); " is 166.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,HandleConnectingClient,The length of the statement  "				server.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.ErrorConnect' new MessageData { " is 127.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,HandleConnectingClient,The length of the statement  "				server.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.ErrorConnect' new MessageData { " is 127.
Long Statement,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,HandleConnectingClient,The length of the statement  "			server.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.ErrorConnect' new MessageData { " is 127.
Long Statement,LiNGS.Server.Network,NetworkManager,C:\repos\valterc_lings\LiNGSServer\Network\NetworkManager.cs,OnReceive,The length of the statement  "	serverSocket.BeginReceiveFrom (receivedData' 0' receivedData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender); " is 142.
Long Statement,LiNGS.Server.Network,NetworkManager,C:\repos\valterc_lings\LiNGSServer\Network\NetworkManager.cs,SendMessage,The length of the statement  "	serverSocket.BeginSendTo (messageData' 0' messageData.Length' SocketFlags.None' destination' new AsyncCallback (OnSend)' destination); " is 134.
Long Statement,LiNGS.Server.State,StateManager,C:\repos\valterc_lings\LiNGSServer\State\StateManager.cs,UpdateStates,The length of the statement  "				String fieldValue = field.GetValue (obj.OriginalObject) != null ? field.GetValue (obj.OriginalObject).ToString () : null; " is 121.
Long Statement,LiNGS.Server.State.Persistent,PersistentStateManager,C:\repos\valterc_lings\LiNGSServer\State\Persistent\PersistentStateManager.cs,SaveState,The length of the statement  "	foreach (var item in server.StateManager.ClientStates.FirstOrDefault (cs => cs.Client == client).State.Objects.Values) { " is 120.
Empty Catch Block,LiNGS.Server.Network,NetworkManager,C:\repos\valterc_lings\LiNGSServer\Network\NetworkManager.cs,OnReceive,The method has an empty catch block.
Empty Catch Block,LiNGS.Server.State.Persistent,StorageEngine,C:\repos\valterc_lings\LiNGSServer\State\Persistent\StorageEngine.cs,SaveState,The method has an empty catch block.
Empty Catch Block,LiNGS.Server.State.Persistent,StorageEngine,C:\repos\valterc_lings\LiNGSServer\State\Persistent\StorageEngine.cs,RestoreState,The method has an empty catch block.
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: ListenPort = 7146;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: MaxMessageSize = 512;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: MaxClients = 4;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: ImportantMessageTimeout = 1000;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: MaxImportantMessageRetries = 5;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: MaxClientBlackoutTime = 10000;  
Magic Number,LiNGS.Server,ServerProperties,C:\repos\valterc_lings\LiNGSServer\ServerProperties.cs,ServerProperties,The following statement contains a magic number: MaxMessageWaitTime = 50;  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following statement contains a magic number: if (client != null) {  	InternalNetworkClient internalNetworkClient = client.NetworkClient as InternalNetworkClient;  	internalNetworkClient.LastReceivedConnectionTime = DateTime.Now;  	switch (message.Type) {  	case NetworkMessage.MessageType.Ack:  		if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  			int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  			IEnumerable<ImportantMessageWrapper> messages;  			lock (this.importantMessages) {  				messages = this.importantMessages.Where (im => im.Client == client.NetworkClient && im.Message.MessageId == messageId).ToList ();  			}  			foreach (var item in messages) {  				item.ConfirmationReceived = true;  				item.Message.ConfirmReception ();  				//Calculate Latency based on message travel time  				internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  				//Reset heartbeat sent flag  				if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  					internalNetworkClient.HeartbeatSent = false;  				}  				lock (this.importantMessages) {  					this.importantMessages.Remove (item);  				}  			}  		}  		break;  	}  	if (message.NeedsAck) {  		server.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.Ack' new MessageData () {  			Object = LiNGSMarkers.Id'  			Value = message.MessageId.ToString ()  		}));  	}  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following statement contains a magic number: switch (message.Type) {  case NetworkMessage.MessageType.Ack:  	if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  		int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  		IEnumerable<ImportantMessageWrapper> messages;  		lock (this.importantMessages) {  			messages = this.importantMessages.Where (im => im.Client == client.NetworkClient && im.Message.MessageId == messageId).ToList ();  		}  		foreach (var item in messages) {  			item.ConfirmationReceived = true;  			item.Message.ConfirmReception ();  			//Calculate Latency based on message travel time  			internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  			//Reset heartbeat sent flag  			if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  				internalNetworkClient.HeartbeatSent = false;  			}  			lock (this.importantMessages) {  				this.importantMessages.Remove (item);  			}  		}  	}  	break;  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following statement contains a magic number: if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  	int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  	IEnumerable<ImportantMessageWrapper> messages;  	lock (this.importantMessages) {  		messages = this.importantMessages.Where (im => im.Client == client.NetworkClient && im.Message.MessageId == messageId).ToList ();  	}  	foreach (var item in messages) {  		item.ConfirmationReceived = true;  		item.Message.ConfirmReception ();  		//Calculate Latency based on message travel time  		internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  		//Reset heartbeat sent flag  		if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  			internalNetworkClient.HeartbeatSent = false;  		}  		lock (this.importantMessages) {  			this.importantMessages.Remove (item);  		}  	}  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following statement contains a magic number: foreach (var item in messages) {  	item.ConfirmationReceived = true;  	item.Message.ConfirmReception ();  	//Calculate Latency based on message travel time  	internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  	//Reset heartbeat sent flag  	if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  		internalNetworkClient.HeartbeatSent = false;  	}  	lock (this.importantMessages) {  		this.importantMessages.Remove (item);  	}  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following statement contains a magic number: internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: do {  	if (nt.Length + dataToSend [0].Length + 4 < server.ServerProperties.MaxMessageSize) {  		nt.Data.Add (dataToSend [0]);  		dataToSend.RemoveAt (0);  	}  	else if (dataToSend [0].Length + 4 > server.ServerProperties.MaxMessageDataSize) {  		//Well' this piece of data is too big to send  		dataToSend.RemoveAt (0);  	}  	else {  		SendMessage (client' nt);  		nt = new NetworkMessage ();  		nt.NeedsAck = message.NeedsAck;  		nt.Type = message.Type;  		nt.OnReceived = message.OnReceived;  		nt.MessageId = 0;  	}  }  while (dataToSend.Count != 0);  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: do {  	if (nt.Length + dataToSend [0].Length + 4 < server.ServerProperties.MaxMessageSize) {  		nt.Data.Add (dataToSend [0]);  		dataToSend.RemoveAt (0);  	}  	else if (dataToSend [0].Length + 4 > server.ServerProperties.MaxMessageDataSize) {  		//Well' this piece of data is too big to send  		dataToSend.RemoveAt (0);  	}  	else {  		SendMessage (client' nt);  		nt = new NetworkMessage ();  		nt.NeedsAck = message.NeedsAck;  		nt.Type = message.Type;  		nt.OnReceived = message.OnReceived;  		nt.MessageId = 0;  	}  }  while (dataToSend.Count != 0);  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (nt.Length + dataToSend [0].Length + 4 < server.ServerProperties.MaxMessageSize) {  	nt.Data.Add (dataToSend [0]);  	dataToSend.RemoveAt (0);  }  else if (dataToSend [0].Length + 4 > server.ServerProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (client' nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (nt.Length + dataToSend [0].Length + 4 < server.ServerProperties.MaxMessageSize) {  	nt.Data.Add (dataToSend [0]);  	dataToSend.RemoveAt (0);  }  else if (dataToSend [0].Length + 4 > server.ServerProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (client' nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Magic Number,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (dataToSend [0].Length + 4 > server.ServerProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (client' nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Missing Default,LiNGS.Server,Router,C:\repos\valterc_lings\LiNGSServer\Router.cs,RouteMessage,The following switch statement is missing a default case: switch (message.Type) {  case NetworkMessage.MessageType.Connect:  	server.Manager.ClientConnecting (message);  	break;  case NetworkMessage.MessageType.Disconnect:  	server.Manager.ClientDisconnecting (message);  	break;  case NetworkMessage.MessageType.Ack:  	server.Manager.ClientConnection (message);  	break;  case NetworkMessage.MessageType.Data:  	server.Manager.ClientConnection (message);  	server.GameLogicProcessor.ReceiveDataMessage (message);  	break;  case NetworkMessage.MessageType.Game:  	server.Manager.ClientConnection (message);  	server.GameLogicProcessor.ReceiveGameMessage (message);  	break;  case NetworkMessage.MessageType.Event:  	server.Manager.ClientConnection (message);  	server.GameLogicProcessor.ReceiveEventMessage (message);  	break;  case NetworkMessage.MessageType.ErrorConnect:  	server.Manager.ClientConnection (message);  	break;  case NetworkMessage.MessageType.Error:  	server.Manager.ClientConnection (message);  	server.GameLogicProcessor.ReceiveErrorMessage (message);  	break;  case NetworkMessage.MessageType.Heartbeat:  	server.Manager.ClientConnection (message);  	break;  }  
Missing Default,LiNGS.Server.Management,Manager,C:\repos\valterc_lings\LiNGSServer\Management\Manager.cs,ClientConnection,The following switch statement is missing a default case: switch (message.Type) {  case NetworkMessage.MessageType.Ack:  	if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  		int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  		IEnumerable<ImportantMessageWrapper> messages;  		lock (this.importantMessages) {  			messages = this.importantMessages.Where (im => im.Client == client.NetworkClient && im.Message.MessageId == messageId).ToList ();  		}  		foreach (var item in messages) {  			item.ConfirmationReceived = true;  			item.Message.ConfirmReception ();  			//Calculate Latency based on message travel time  			internalNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  			//Reset heartbeat sent flag  			if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  				internalNetworkClient.HeartbeatSent = false;  			}  			lock (this.importantMessages) {  				this.importantMessages.Remove (item);  			}  		}  	}  	break;  }  
