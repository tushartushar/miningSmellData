Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LiNGS.Client,Router,C:\repos\valterc_lings\LiNGSClient\Router.cs,RouteMessage,Cyclomatic complexity of the method is 32
Complex Method,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,Cyclomatic complexity of the method is 8
Long Parameter List,LiNGS.Client.GameLogic,NetworkedObject,C:\repos\valterc_lings\LiNGSClient\GameLogic\NetworkedObject.cs,NetworkedObject,The method has 6 parameters.
Long Parameter List,LiNGS.Client.GameLogic,NetworkedObject,C:\repos\valterc_lings\LiNGSClient\GameLogic\NetworkedObject.cs,NetworkedObject,The method has 5 parameters.
Long Parameter List,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ConnectionAccepted,The method has 5 parameters.
Long Parameter List,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The method has 5 parameters.
Long Statement,LiNGS.Client.GameLogic,ClientLogicProcessor,C:\repos\valterc_lings\LiNGSClient\GameLogic\ClientLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedNetworkedObjectData> createObjects = networkObjectQueue.Where (q => q.MessageData.Object.StartsWith (LiNGSMarkers.CreateObject)); " is 147.
Long Statement,LiNGS.Client.GameLogic,ClientLogicProcessor,C:\repos\valterc_lings\LiNGSClient\GameLogic\ClientLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedNetworkedObjectData> destroyObjects = networkObjectQueue.Where (q => q.MessageData.Object.StartsWith (LiNGSMarkers.DestroyObject)); " is 149.
Long Statement,LiNGS.Client.GameLogic,ClientLogicProcessor,C:\repos\valterc_lings\LiNGSClient\GameLogic\ClientLogicProcessor.cs,Update,The length of the statement  "		IEnumerable<QueuedNetworkedObjectData> fieldsData = networkObjectQueue.Where (q => !q.MessageData.Object.StartsWith (LiNGSMarkers.CreateObject) && !q.MessageData.Object.StartsWith (LiNGSMarkers.DestroyObject)); " is 210.
Long Statement,LiNGS.Client.Management,ConnectionEstablisherHelper,C:\repos\valterc_lings\LiNGSClient\Management\ConnectionEstablisherHelper.cs,Update,The length of the statement  "		if (DateTime.Now - this.ConnectionBeginDate > TimeSpan.FromMilliseconds (client.ClientProperties.ConnectionEstablishingTimeout)) { " is 130.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ConnectionAccepted,The length of the statement  "	if (message.Data.Any (d => d.Object == LiNGSMarkers.Ok) && message.Data.Any (d => d.Object == LiNGSMarkers.SessionUserId)) { " is 124.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ConnectionAccepted,The length of the statement  "		client.NetworkManager.SendMessage (new NetworkMessage (LiNGS.Common.Network.NetworkMessage.MessageType.Ack' new MessageData () { " is 128.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The length of the statement  "		if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) { " is 157.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The length of the statement  "		client.NetworkManager.SendMessage (message.From' new NetworkMessage (NetworkMessage.MessageType.Ack' new MessageData () { " is 121.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The length of the statement  "	dataToSend.AddRange (message.Data.Where (md => md.Object.StartsWith (LiNGSMarkers.Namespace) && (md.Property ?? LiNGSMarkers.Namespace).StartsWith (LiNGSMarkers.Namespace))); " is 174.
Long Statement,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The length of the statement  "	dataToSend.AddRange (message.Data.Where (md => !md.Object.StartsWith (LiNGSMarkers.Namespace) || !(md.Property ?? String.Empty).StartsWith (LiNGSMarkers.Namespace))); " is 166.
Long Statement,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,OnReceive,The length of the statement  "	clientSocket.BeginReceiveFrom (receivedData' 0' receivedData.Length' SocketFlags.None' ref epServer' new AsyncCallback (OnReceive)' epServer); " is 142.
Long Statement,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,SendMessage,The length of the statement  "	clientSocket.BeginSendTo (messageData' 0' messageData.Length' SocketFlags.None' destination' new AsyncCallback (OnSend)' destination); " is 134.
Long Statement,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,Connect,The length of the statement  "	clientSocket.BeginSendTo (messageData' 0' messageData.Length' SocketFlags.None' epServer' new AsyncCallback (OnSend)' null); " is 124.
Long Statement,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,Connect,The length of the statement  "	clientSocket.BeginReceiveFrom (receivedData' 0' receivedData.Length' SocketFlags.None' ref epServer' new AsyncCallback (OnReceive)' epServer); " is 142.
Long Statement,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,Disconnect,The length of the statement  "	clientSocket.BeginSendTo (messageData' 0' messageData.Length' SocketFlags.None' epServer' new AsyncCallback (OnSend)' null); " is 124.
Long Statement,LiNGS.Client.Simulation,Simulator,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulator.cs,NewFieldValue,The length of the statement  "	SimulatedObjectField simulatedObjectField = simulatedFields.FirstOrDefault (sf => sf.NetworkedObject == networkedObject && sf.FieldName == fieldName); " is 150.
Long Statement,LiNGS.Client.Simulation.Simulators,DeadReckoningSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\DeadReckoningSimulatorLogic.cs,SetFieldValue,The length of the statement  "	objectField.Field.SetValue (objectField.NetworkedObject.OriginalObject' Convert.ChangeType (value' objectField.Field.FieldType' CultureInfo.InvariantCulture)); " is 159.
Long Statement,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The length of the statement  "			newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f); " is 151.
Long Statement,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The length of the statement  "			newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]); " is 419.
Long Statement,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The length of the statement  "	objectField.Field.SetValue (objectField.NetworkedObject.OriginalObject' Convert.ChangeType (newValue' objectField.Field.FieldType' CultureInfo.InvariantCulture)); " is 162.
Long Statement,LiNGS.Client.Synchronization,Synchronizer,C:\repos\valterc_lings\LiNGSClient\Synchronization\Synchronizer.cs,RemoveObject,The length of the statement  "	List<String> objectKeys = SynchronizedObjects.Where (kv => kv.Value.Object.OriginalObject == networkedObject).Select (kv => kv.Key).ToList (); " is 142.
Long Statement,LiNGS.Client.Synchronization,Synchronizer,C:\repos\valterc_lings\LiNGSClient\Synchronization\Synchronizer.cs,Update,The length of the statement  "				string fieldValue = field.GetValue (client.ClientLogicProcessor.NetworkedLocalObjects [item].OriginalObject) != null ? field.GetValue (client.ClientLogicProcessor.NetworkedLocalObjects [item].OriginalObject).ToString () : null; " is 227.
Long Statement,LiNGS.Client.Synchronization,Synchronizer,C:\repos\valterc_lings\LiNGSClient\Synchronization\Synchronizer.cs,Update,The length of the statement  "			SynchronizedObjects.Add (item' new SynchronizedObject (item' client.ClientLogicProcessor.NetworkedLocalObjects [item])); " is 120.
Empty Catch Block,LiNGS.Client.Network,NetworkManager,C:\repos\valterc_lings\LiNGSClient\Network\NetworkManager.cs,OnReceive,The method has an empty catch block.
Magic Number,LiNGS.Client,ClientProperties,C:\repos\valterc_lings\LiNGSClient\ClientProperties.cs,ClientProperties,The following statement contains a magic number: MaxMessageSize = 512;  
Magic Number,LiNGS.Client,ClientProperties,C:\repos\valterc_lings\LiNGSClient\ClientProperties.cs,ClientProperties,The following statement contains a magic number: ImportantMessageTimeout = 250;  
Magic Number,LiNGS.Client,ClientProperties,C:\repos\valterc_lings\LiNGSClient\ClientProperties.cs,ClientProperties,The following statement contains a magic number: ConnectionEstablishingTimeout = 10000;  
Magic Number,LiNGS.Client,ClientProperties,C:\repos\valterc_lings\LiNGSClient\ClientProperties.cs,ClientProperties,The following statement contains a magic number: MaxServerBlackoutTime = 5000;  
Magic Number,LiNGS.Client,ClientProperties,C:\repos\valterc_lings\LiNGSClient\ClientProperties.cs,ClientProperties,The following statement contains a magic number: MaxImportantMessageRetries = 10;  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The following statement contains a magic number: switch (message.Type) {  case NetworkMessage.MessageType.Ack:  	if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  		int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  		IEnumerable<ImportantMessageWrapper> messages;  		lock (this.importantMessages) {  			messages = this.importantMessages.Where (im => im.Message.MessageId == messageId).ToList ();  		}  		foreach (var item in messages) {  			item.ConfirmationReceived = true;  			item.Message.ConfirmReception ();  			//Calculate Latency based on message travel time  			serverNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  			//Reset heartbeat sent flag  			if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  				serverNetworkClient.HeartbeatSent = false;  			}  			lock (this.importantMessages) {  				this.importantMessages.Remove (item);  			}  		}  	}  	break;  }  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The following statement contains a magic number: if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  	int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  	IEnumerable<ImportantMessageWrapper> messages;  	lock (this.importantMessages) {  		messages = this.importantMessages.Where (im => im.Message.MessageId == messageId).ToList ();  	}  	foreach (var item in messages) {  		item.ConfirmationReceived = true;  		item.Message.ConfirmReception ();  		//Calculate Latency based on message travel time  		serverNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  		//Reset heartbeat sent flag  		if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  			serverNetworkClient.HeartbeatSent = false;  		}  		lock (this.importantMessages) {  			this.importantMessages.Remove (item);  		}  	}  }  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The following statement contains a magic number: foreach (var item in messages) {  	item.ConfirmationReceived = true;  	item.Message.ConfirmReception ();  	//Calculate Latency based on message travel time  	serverNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  	//Reset heartbeat sent flag  	if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  		serverNetworkClient.HeartbeatSent = false;  	}  	lock (this.importantMessages) {  		this.importantMessages.Remove (item);  	}  }  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The following statement contains a magic number: serverNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: do {  	if (nt.Length + dataToSend [0].Length + 4 < client.ClientProperties.MaxMessageSize) {  		nt.Data.Add (dataToSend [0]);  		dataToSend.RemoveAt (0);  	}  	else if (dataToSend [0].Length + 4 > client.ClientProperties.MaxMessageDataSize) {  		//Well' this piece of data is too big to send  		dataToSend.RemoveAt (0);  	}  	else {  		SendMessage (nt);  		nt = new NetworkMessage ();  		nt.NeedsAck = message.NeedsAck;  		nt.Type = message.Type;  		nt.OnReceived = message.OnReceived;  		nt.MessageId = 0;  	}  }  while (dataToSend.Count != 0);  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: do {  	if (nt.Length + dataToSend [0].Length + 4 < client.ClientProperties.MaxMessageSize) {  		nt.Data.Add (dataToSend [0]);  		dataToSend.RemoveAt (0);  	}  	else if (dataToSend [0].Length + 4 > client.ClientProperties.MaxMessageDataSize) {  		//Well' this piece of data is too big to send  		dataToSend.RemoveAt (0);  	}  	else {  		SendMessage (nt);  		nt = new NetworkMessage ();  		nt.NeedsAck = message.NeedsAck;  		nt.Type = message.Type;  		nt.OnReceived = message.OnReceived;  		nt.MessageId = 0;  	}  }  while (dataToSend.Count != 0);  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (nt.Length + dataToSend [0].Length + 4 < client.ClientProperties.MaxMessageSize) {  	nt.Data.Add (dataToSend [0]);  	dataToSend.RemoveAt (0);  }  else if (dataToSend [0].Length + 4 > client.ClientProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (nt.Length + dataToSend [0].Length + 4 < client.ClientProperties.MaxMessageSize) {  	nt.Data.Add (dataToSend [0]);  	dataToSend.RemoveAt (0);  }  else if (dataToSend [0].Length + 4 > client.ClientProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Magic Number,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,SplitAndSendMessage,The following statement contains a magic number: if (dataToSend [0].Length + 4 > client.ClientProperties.MaxMessageDataSize) {  	//Well' this piece of data is too big to send  	dataToSend.RemoveAt (0);  }  else {  	SendMessage (nt);  	nt = new NetworkMessage ();  	nt.NeedsAck = message.NeedsAck;  	nt.Type = message.Type;  	nt.OnReceived = message.OnReceived;  	nt.MessageId = 0;  }  
Magic Number,LiNGS.Client.Simulation,SimulatedObjectField,C:\repos\valterc_lings\LiNGSClient\Simulation\SimulatedObjectField.cs,ReceivedValue,The following statement contains a magic number: if (LastReceivedFieldValues.Count > 10) {  	LastReceivedFieldValues.RemoveAt (0);  }  
Magic Number,LiNGS.Client.Simulation.Simulators,DeadReckoningSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\DeadReckoningSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (values.Length < 2) {  	if (values.Length > 0) {  		double value = values [0];  		SetFieldValue (lastValues' value);  	}  	return;  }  
Magic Number,LiNGS.Client.Simulation.Simulators,DeadReckoningSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\DeadReckoningSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (lastValues.LastSimulatedValue != lastValues.LastReceivedFieldValues [values.Length - 1].Value) {  	newValue = values [values.Length - 1] + acc * (DateTime.Now - time).TotalSeconds;  }  else {  	double elapsedTimeSinceLastConnect = (DateTime.Now - time).TotalMilliseconds;  	double maxAllowedTime = 250;  	double currentTime = maxAllowedTime - elapsedTimeSinceLastConnect;  	if (currentTime < 0) {  		acc = 0;  	}  	else {  		double accP = currentTime / maxAllowedTime;  		acc *= accP;  	}  	newValue = currentValue + acc * (DateTime.Now - time).TotalSeconds;  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (intValues.Length > 1) {  	if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  		newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  		objectField.LastSimulatedValue = newValue.ToString ();  		objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  	}  	else {  		newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  		objectField.LastSimulatedValue = newValue.ToString ();  	}  }  else {  	newValue = intValues [intValues.Length - 1];  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: if (DateTime.Now - objectField.LastReceivedFieldValues [intValues.Length - 1].Time > TimeSpan.FromMilliseconds (200)) {  	newValue = Lerp (double.Parse (objectField.LastSimulatedValue)' double.Parse (objectField.LastReceivedFieldValues [intValues.Length - 1].Value)' .15f);  	objectField.LastSimulatedValue = newValue.ToString ();  	objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  }  else {  	newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  	objectField.LastSimulatedValue = newValue.ToString ();  }  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: objectField.LastReceivedFieldValues [intValues.Length - 1].Time = DateTime.Now - TimeSpan.FromMilliseconds (200);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Magic Number,LiNGS.Client.Simulation.Simulators,LinearExtrapolationSimulatorLogic,C:\repos\valterc_lings\LiNGSClient\Simulation\Simulators\LinearExtrapolationSimulatorLogic.cs,RunSimulation,The following statement contains a magic number: newValue = intValues [intValues.Length - 2] + (DateTime.Now - TimeSpan.FromMilliseconds (200) - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds / Math.Max (0.1' (objectField.LastReceivedFieldValues [intValues.Length - 1].Time - objectField.LastReceivedFieldValues [intValues.Length - 2].Time).TotalMilliseconds) * (intValues [intValues.Length - 1] - intValues [intValues.Length - 2]);  
Missing Default,LiNGS.Client,Router,C:\repos\valterc_lings\LiNGSClient\Router.cs,RouteMessage,The following switch statement is missing a default case: switch (message.Type) {  case NetworkMessage.MessageType.Connect:  	client.Manager.ConnectionAccepted (message);  	break;  case NetworkMessage.MessageType.Disconnect:  	client.Manager.Disconnect (message);  	break;  case NetworkMessage.MessageType.Ack:  	client.Manager.ServerConnection (message);  	break;  case NetworkMessage.MessageType.Data:  	if (ValidateConnection (message)) {  		client.Manager.ServerConnection (message);  		client.ClientLogicProcessor.ReceiveDataMessage (message);  	}  	break;  case NetworkMessage.MessageType.Game:  	if (ValidateConnection (message)) {  		client.Manager.ServerConnection (message);  		client.ClientLogicProcessor.ReceiveGameMessage (message);  	}  	break;  case NetworkMessage.MessageType.Event:  	if (ValidateConnection (message)) {  		client.Manager.ServerConnection (message);  		client.ClientLogicProcessor.ReceiveEventMessage (message);  	}  	break;  case NetworkMessage.MessageType.ErrorConnect:  	client.Manager.ConnectionRefused (message);  	break;  case NetworkMessage.MessageType.Error:  	if (ValidateConnection (message)) {  		client.Manager.ServerConnection (message);  		client.ClientLogicProcessor.ReceiveErrorMessage (message);  	}  	break;  case NetworkMessage.MessageType.Heartbeat:  	client.Manager.ServerConnection (message);  	break;  }  
Missing Default,LiNGS.Client.Management,Manager,C:\repos\valterc_lings\LiNGSClient\Management\Manager.cs,ServerConnection,The following switch statement is missing a default case: switch (message.Type) {  case NetworkMessage.MessageType.Ack:  	if (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id) != null && message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value != null) {  		int messageId = int.Parse (message.Data.FirstOrDefault (d => d.Object == LiNGSMarkers.Id).Value);  		IEnumerable<ImportantMessageWrapper> messages;  		lock (this.importantMessages) {  			messages = this.importantMessages.Where (im => im.Message.MessageId == messageId).ToList ();  		}  		foreach (var item in messages) {  			item.ConfirmationReceived = true;  			item.Message.ConfirmReception ();  			//Calculate Latency based on message travel time  			serverNetworkClient.Latency = TimeSpan.FromTicks ((DateTime.Now - item.SentDate).Ticks / 2);  			//Reset heartbeat sent flag  			if (item.Message.Type == NetworkMessage.MessageType.Heartbeat) {  				serverNetworkClient.HeartbeatSent = false;  			}  			lock (this.importantMessages) {  				this.importantMessages.Remove (item);  			}  		}  	}  	break;  }  
