Implementation smell,Namespace,Class,File,Method,Description
Long Method,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The method has 186 lines of code.
Complex Method,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,Cyclomatic complexity of the method is 10
Long Statement,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The length of the statement  "                    Messenger.BulkWalk(version' receiver' new OctetString(community)' test' result' timeout' maxRepetitions' mode' null' null); " is 123.
Long Statement,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The length of the statement  "                    Messenger.BulkWalk(version' receiver' new OctetString(user)' test' result' timeout' maxRepetitions' mode' priv' report); " is 120.
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: int timeout = 1000;
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: int maxRepetitions = 10;
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v|version:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  })                  .Add("m|mode:"' "WALK mode (subtree' all are supported)"' delegate (string v)                  {                      if (v == "subtree")                      {                          mode = WalkMode.WithinSubtree;                      }                      else if (v == "all")                      {                          mode = WalkMode.Default;                      }                      else                      {                          throw new ArgumentException("unknown argument: " + v);                      }                  })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); });
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v|version:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  })                  .Add("m|mode:"' "WALK mode (subtree' all are supported)"' delegate (string v)                  {                      if (v == "subtree")                      {                          mode = WalkMode.WithinSubtree;                      }                      else if (v == "all")                      {                          mode = WalkMode.Default;                      }                      else                      {                          throw new ArgumentException("unknown argument: " + v);                      }                  })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); });
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v|version:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  })                  .Add("m|mode:"' "WALK mode (subtree' all are supported)"' delegate (string v)                  {                      if (v == "subtree")                      {                          mode = WalkMode.WithinSubtree;                      }                      else if (v == "all")                      {                          mode = WalkMode.Default;                      }                      else                      {                          throw new ArgumentException("unknown argument: " + v);                      }                  })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); });
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: if (extra.Count < 1 || extra.Count > 2)              {                  Console.WriteLine("invalid variable number: " + extra.Count);                  return;              }
Magic Number,SnmpWalk,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpwalk\Program.cs,Main,The following statement contains a magic number: try              {                  ObjectIdentifier test = extra.Count == 1 ? new ObjectIdentifier("1.3.6.1.2.1") : new ObjectIdentifier(extra[1]);                  IList<Variable> result = new List<Variable>();                  IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version == VersionCode.V1)                  {                      Messenger.Walk(version' receiver' new OctetString(community)' test' result' timeout' mode);                  }                  else if (version == VersionCode.V2)                  {                      Messenger.BulkWalk(version' receiver' new OctetString(community)' test' result' timeout' maxRepetitions' mode' null' null);                  }                  else                  {                      if (string.IsNullOrEmpty(user))                      {                          Console.WriteLine("User name need to be specified for v3.");                          return;                      }                        IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                          ? GetAuthenticationProviderByName(authentication' authPhrase)                          : DefaultAuthenticationProvider.Instance;                      IPrivacyProvider priv;                      if ((level & Levels.Privacy) == Levels.Privacy)                      {                          if (DESPrivacyProvider.IsSupported)                          {                              priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                          }                          else                          {                              Console.WriteLine("DES (ECB) is not supported by .NET Core.");                              return;                          }                      }                      else                      {                          priv = new DefaultPrivacyProvider(auth);                      }                        Discovery discovery = Messenger.GetNextDiscovery(SnmpType.GetBulkRequestPdu);                      ReportMessage report = discovery.GetResponse(timeout' receiver);                      Messenger.BulkWalk(version' receiver' new OctetString(user)' test' result' timeout' maxRepetitions' mode' priv' report);                  }                    foreach (Variable variable in result)                  {                      Console.WriteLine(variable);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
