Implementation smell,Namespace,Class,File,Method,Description
Long Method,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The method has 243 lines of code.
Complex Method,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,Cyclomatic complexity of the method is 21
Long Statement,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The length of the statement  "                SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report); " is 186.
Long Statement,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The length of the statement  "                    request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply); " is 167.
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: int timeout = 1000;
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (1' 2' and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 1:                              version = VersionCode.V1;                              break;                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: if ((extra.Count - 1) % 3 != 0)              {                  Console.WriteLine("invalid variable number: " + extra.Count);                  return;              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
Magic Number,SnmpSet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpset\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i = i + 3)                  {                      string type = extra[i + 1];                      if (type.Length != 1)                      {                          Console.WriteLine("invalid type string: " + type);                          return;                      }                        ISnmpData data;                        switch (type[0])                      {                          case 'i':                              data = new Integer32(int.Parse(extra[i + 2]));                              break;                          case 'u':                              data = new Gauge32(uint.Parse(extra[i + 2]));                              break;                          case 't':                              data = new TimeTicks(uint.Parse(extra[i + 2]));                              break;                          case 'a':                              data = new IP(IPAddress.Parse(extra[i + 2]).GetAddressBytes());                              break;                          case 'o':                              data = new ObjectIdentifier(extra[i + 2]);                              break;                          case 'x':                              data = new OctetString(ByteTool.Convert(extra[i + 2]));                              break;                          case 's':                              data = new OctetString(extra[i + 2]);                              break;                          case 'd':                              data = new OctetString(ByteTool.ConvertDecimal(extra[i + 2]));                              break;                          case 'n':                              data = new Null();                              break;                          default:                              Console.WriteLine("unknown type string: " + type[0]);                              return;                      }                        Variable test = new Variable(new ObjectIdentifier(extra[i])' data);                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      foreach (Variable variable in                          Messenger.Set(version' receiver' new OctetString(community)' vList' timeout))                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.SetRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    SetRequestMessage request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new SetRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
