Implementation smell,Namespace,Class,File,Method,Description
Long Method,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The method has 217 lines of code.
Complex Method,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,Cyclomatic complexity of the method is 20
Long Statement,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The length of the statement  "                GetBulkRequestMessage request = new GetBulkRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' nonRepeaters' maxRepetitions' vList' priv' Messenger.MaxMessageSize' report); " is 224.
Long Statement,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The length of the statement  "                    request = new GetBulkRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' nonRepeaters' maxRepetitions' vList' priv' Messenger.MaxMessageSize' reply); " is 201.
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: int timeout = 1000;
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: int maxRepetitions = 10;
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("Cn:"' "Non-repeaters (default is 0)"' delegate (string v) { nonRepeaters = int.Parse(v); })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (2 and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("Cn:"' "Non-repeaters (default is 0)"' delegate (string v) { nonRepeaters = int.Parse(v); })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (2 and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: OptionSet p = new OptionSet()                  .Add("c:"' "Community name' (default is public)"' delegate (string v) { if (v != null) community = v; })                  .Add("l:"' "Security level' (default is noAuthNoPriv)"' delegate (string v)                  {                      if (v.ToUpperInvariant() == "NOAUTHNOPRIV")                      {                          level = Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHNOPRIV")                      {                          level = Levels.Authentication | Levels.Reportable;                      }                      else if (v.ToUpperInvariant() == "AUTHPRIV")                      {                          level = Levels.Authentication | Levels.Privacy | Levels.Reportable;                      }                      else                      {                          throw new ArgumentException("no such security mode: " + v);                      }                  })                  .Add("Cn:"' "Non-repeaters (default is 0)"' delegate (string v) { nonRepeaters = int.Parse(v); })                  .Add("Cr:"' "Max-repetitions (default is 10)"' delegate (string v) { maxRepetitions = int.Parse(v); })                  .Add("a:"' "Authentication method (MD5 or SHA)"' delegate (string v) { authentication = v; })                  .Add("A:"' "Authentication passphrase"' delegate (string v) { authPhrase = v; })                  .Add("x:"' "Privacy method"' delegate (string v) { privacy = v; })                  .Add("X:"' "Privacy passphrase"' delegate (string v) { privPhrase = v; })                  .Add("u:"' "Security name"' delegate (string v) { user = v; })                  .Add("h|?|help"' "Print this help information."' delegate (string v) { showHelp = v != null; })                  .Add("V"' "Display version number of this application."' delegate (string v) { showVersion = v != null; })                  .Add("d"' "Display message dump"' delegate (string v) { dump = true; })                  .Add("t:"' "Timeout value (unit is second)."' delegate (string v) { timeout = int.Parse(v) * 1000; })                  .Add("r:"' "Retry count (default is 0)"' delegate (string v) { retry = int.Parse(v); })                  .Add("v:"' "SNMP version (2 and 3 are currently supported)"' delegate (string v)                  {                      switch (int.Parse(v))                      {                          case 2:                              version = VersionCode.V2;                              break;                          case 3:                              version = VersionCode.V3;                              break;                          default:                              throw new ArgumentException("no such version: " + v);                      }                  });
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: if (extra.Count < 2)              {                  Console.WriteLine("invalid variable number: " + extra.Count);                  return;              }
Magic Number,SnmpBulkGet,Program,C:\repos\lextm_sharpsnmplib\Samples\CSharpCore\snmpbulkget\Program.cs,Main,The following statement contains a magic number: try              {                  List<Variable> vList = new List<Variable>();                  for (int i = 1; i < extra.Count; i++)                  {                      Variable test = new Variable(new ObjectIdentifier(extra[i]));                      vList.Add(test);                  }                    IPEndPoint receiver = new IPEndPoint(ip' 161);                  if (version != VersionCode.V3)                  {                      GetBulkRequestMessage message = new GetBulkRequestMessage(0'                                                                                version'                                                                                new OctetString(community)'                                                                                nonRepeaters'                                                                                maxRepetitions'                                                                                vList);                      ISnmpMessage response = message.GetResponse(timeout' receiver);                      if (response.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                      {                          throw ErrorException.Create(                              "error in response"'                              receiver.Address'                              response);                      }                        foreach (Variable variable in response.Pdu().Variables)                      {                          Console.WriteLine(variable);                      }                        return;                  }                    if (string.IsNullOrEmpty(user))                  {                      Console.WriteLine("User name need to be specified for v3.");                      return;                  }                    IAuthenticationProvider auth = (level & Levels.Authentication) == Levels.Authentication                                                     ? GetAuthenticationProviderByName(authentication' authPhrase)                                                     : DefaultAuthenticationProvider.Instance;                    IPrivacyProvider priv;                  if ((level & Levels.Privacy) == Levels.Privacy)                  {                      if (DESPrivacyProvider.IsSupported)                      {                          priv = new DESPrivacyProvider(new OctetString(privPhrase)' auth);                      }                      else                      {                          Console.WriteLine("DES (ECB) is not supported by .NET Core.");                          return;                      }                  }                  else                  {                      priv = new DefaultPrivacyProvider(auth);                  }                    Discovery discovery = Messenger.GetNextDiscovery(SnmpType.GetBulkRequestPdu);                  ReportMessage report = discovery.GetResponse(timeout' receiver);                    GetBulkRequestMessage request = new GetBulkRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' nonRepeaters' maxRepetitions' vList' priv' Messenger.MaxMessageSize' report);                  ISnmpMessage reply = request.GetResponse(timeout' receiver);                  if (dump)                  {                      Console.WriteLine("Request message bytes:");                      Console.WriteLine(ByteTool.Convert(request.ToBytes()));                      Console.WriteLine("Response message bytes:");                      Console.WriteLine(ByteTool.Convert(reply.ToBytes()));                  }                    if (reply is ReportMessage)                  {                      if (reply.Pdu().Variables.Count == 0)                      {                          Console.WriteLine("wrong report message received");                          return;                      }                        var id = reply.Pdu().Variables[0].Id;                      if (id != Messenger.NotInTimeWindow)                      {                          var error = id.GetErrorMessage();                          Console.WriteLine(error);                          return;                      }                        // according to RFC 3414' send a second request to sync time.                      request = new GetBulkRequestMessage(VersionCode.V3' Messenger.NextMessageId' Messenger.NextRequestId' new OctetString(user)' nonRepeaters' maxRepetitions' vList' priv' Messenger.MaxMessageSize' reply);                      reply = request.GetResponse(timeout' receiver);                  }                  else if (reply.Pdu().ErrorStatus.ToInt32() != 0) // != ErrorCode.NoError                  {                      throw ErrorException.Create(                          "error in response"'                          receiver.Address'                          reply);                  }                    foreach (Variable v in reply.Pdu().Variables)                  {                      Console.WriteLine(v);                  }              }              catch (SnmpException ex)              {                  Console.WriteLine(ex);              }              catch (SocketException ex)              {                  Console.WriteLine(ex);              }
