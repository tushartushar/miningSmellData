Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The method has 242 lines of code.
Long Method,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The method has 326 lines of code.
Long Method,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The method has 172 lines of code.
Long Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The method has 612 lines of code.
Long Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,The method has 227 lines of code.
Long Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,SaveMapping,The method has 183 lines of code.
Long Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,getNode,The method has 112 lines of code.
Long Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,The method has 222 lines of code.
Long Method,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,DoMapAction,The method has 135 lines of code.
Long Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The method has 519 lines of code.
Long Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,LoadMapping,The method has 199 lines of code.
Long Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,SaveMapping,The method has 139 lines of code.
Long Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,getNode,The method has 112 lines of code.
Long Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,The method has 165 lines of code.
Long Method,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The method has 128 lines of code.
Long Method,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The method has 175 lines of code.
Long Method,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The method has 146 lines of code.
Long Method,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,LoadMapping,The method has 130 lines of code.
Long Method,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,The method has 122 lines of code.
Long Method,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,GetAction,The method has 108 lines of code.
Long Method,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The method has 167 lines of code.
Complex Method,MediaPortal.ControlDevices,ControlDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\ControlDevices.cs,BuildControlStructure,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.ControlDevices,ControlDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\ControlDevices.cs,PluginInstances,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,Cyclomatic complexity of the method is 27
Complex Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,SaveMapping,Cyclomatic complexity of the method is 19
Complex Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,getNode,Cyclomatic complexity of the method is 29
Complex Method,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.InputDevices,HidButtonAttributes,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,GetText,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,DoMapAction,Cyclomatic complexity of the method is 23
Complex Method,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,GetMapping,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,LoadMapping,Cyclomatic complexity of the method is 27
Complex Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,SaveMapping,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,getNode,Cyclomatic complexity of the method is 29
Complex Method,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,Cyclomatic complexity of the method is 31
Complex Method,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,WndProc,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,LoadMapping,Cyclomatic complexity of the method is 18
Complex Method,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,GetAction,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,ChangeTunerChannel,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.InputDevices,X10Remote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\X10Remote\X10Remote.cs,Init,Cyclomatic complexity of the method is 12
Long Parameter List,MediaPortal.InputDevices,HidButtonAttributes,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,HidButtonAttributes,The method has 8 parameters. Parameters: aName' aCode' aBackground' aRepeat' aShift' aControl' aAlt' aWindows
Long Parameter List,MediaPortal.InputDevices,Mapping,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,Mapping,The method has 9 parameters. Parameters: newLayer' newCondition' newConProperty' newCommand' newCmdProperty' newCmdKeyChar' newCmdKeyCode' newSound' newFocus
Long Parameter List,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,GetAction,The method has 7 parameters. Parameters: aButtonCode' aIsBackground' aIsRepeat' aShift' aCtrl' aAlt' aWin
Long Parameter List,MediaPortal.InputDevices,ConditionalAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ConditionalAction,The method has 9 parameters. Parameters: newLayer' newCondition' newConProperty' newCommand' newCmdProperty' newCmdKeyChar' newCmdKeyCode' newSound' newFocus
Long Parameter List,MediaPortal.InputDevices,Button,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,Button,The method has 9 parameters. Parameters: aCode' aName' aBackground' aRepeat' aShift' aCtrl' aAlt' aWin' aActions
Long Parameter List,MediaPortal.InputDevices,X10Remote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\X10Remote\X10Remote.cs,X10Command,The method has 7 parameters. Parameters: bszCommand' eCommand' lAddress' EKeyState' lSequence' eCommandType' varTimestamp
Long Parameter List,MediaPortal.ControlDevices.USBUIRT,LearningEventArgs,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Devices\USBUIRT\USBUIRTPlugin.cs,LearningEventArgs,The method has 6 parameters. Parameters: button' ircode' succeeded' capturingToggledIrCode' totalCodeCount' curCodeCount
Long Parameter List,MediaPortal.ControlDevices.USBUIRT,USBUIRTAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Devices\USBUIRT\USBUIRTAPI.cs,UUIRTTransmitIR,The method has 8 parameters. Parameters: hHandle' IRCode' codeFormat' repeatCount' inactivityWaitTime' hEvent' res1' res2
Long Parameter List,MediaPortal.ControlDevices.USBUIRT,USBUIRTAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Devices\USBUIRT\USBUIRTAPI.cs,UUIRTLearnIR,The method has 9 parameters. Parameters: hHandle' codeFormat' ircode' progressProc' userData' pAbort' param1' o' oo
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpGroupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 147.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpButton5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpCheckBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpCodeList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpGroupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpGroupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The length of the statement  "      this.mpGroupBox4.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ControlDeviceForm)); " is 137.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.mpGroupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.mpLabel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 143.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.mpCheckBox3.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.mpCheckBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.tabControlSettings.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 154.
Long Statement,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The length of the statement  "      this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.grpStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 144.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.grpSettings.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 144.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlVerbose.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlOutput.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.grpDevice.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlDevicePanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlStatus.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlDefaults.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlAdvanced.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The length of the statement  "      this.ctrlMapping.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.treeMapping.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.labelExpand.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonDefault.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonRemove.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 148.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.beveledLine1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.headerLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.headerLabel.Font = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.headerLabel.TextFont = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.groupBoxAction.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.comboBoxCmdProperty.SelectionChangeCommitted += new System.EventHandler(this.comboBoxCmdProperty_SelectionChangeCommitted); " is 128.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.groupBoxCondition.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.comboBoxCondProperty.SelectionChangeCommitted += new System.EventHandler(this.comboBoxCondProperty_SelectionChangeCommitted); " is 130.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.groupBoxLayer.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.buttonNew.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The length of the statement  "      this.groupBoxButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,The length of the statement  "            HidButtonAttributes hbAttributes = new HidButtonAttributes(buttonName' nodeButton.Attributes["code"].Value' background' repeat' shift' ctrl' alt' win); " is 151.
Long Statement,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,buttonNew_Click,The length of the statement  "      HidButtonAttributes newButtonAttributes = new HidButtonAttributes(Keys.A.ToString()' Keys.A.ToString()' false.ToString()' false.ToString()' false.ToString()' false.ToString()' false.ToString()' false.ToString()); " is 212.
Long Statement,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,buttonRemove_Click,The length of the statement  "      DialogResult result = MessageBox.Show(this' "Are you sure you want to remove this " + data.Type.ToLowerInvariant() + "?"' " is 121.
Long Statement,MediaPortal.InputDevices,AppCommandListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\AppCommand\AppCommandListener.cs,OnKeyDown,The length of the statement  "                    Win32API.SendMessage(GUIGraphicsContext.form.Handle' Win32.Const.WM_APPCOMMAND' (uint)GUIGraphicsContext.form.Handle' (uint)lParam);" is 132.
Long Statement,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The length of the statement  "        if (msg.Msg == WM_KEYDOWN || msg.Msg == WM_SYSKEYDOWN || msg.Msg == Win32.Const.WM_APPCOMMAND || msg.Msg == WM_LBUTTONDOWN || " is 125.
Long Statement,MediaPortal.InputDevices,FireDTVRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTVRemote.cs,GetMapping,The length of the statement  "      if (_enabled && ((FireDTVConstants.FireDTVWindowMessages) msg.Msg == FireDTVConstants.FireDTVWindowMessages.RemoteControlEvent)) " is 128.
Long Statement,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,Register,The length of the statement  "        rid[i].dwFlags = (entry.Value.HandleHidEventsWhileInBackground ? SharpLib.Win32.RawInputDeviceFlags.RIDEV_INPUTSINK : 0); " is 121.
Long Statement,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,The length of the statement  "            HidUsageAction.ConditionalAction action = usageAction.GetAction(usage.ToString()' aHidEvent.IsBackground' aHidEvent.IsRepeat' aHidEvent.HasModifierShift' aHidEvent.HasModifierControl' aHidEvent.HasModifierAlt' aHidEvent.HasModifierWindows); " is 240.
Long Statement,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,The length of the statement  "            const int KDPadButtonOffset = 1000; //This is our magic dpad button offset. Should be good enough as it leaves us with 998 genuine buttons.  " is 139.
Long Statement,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,The length of the statement  "            HidUsageAction.ConditionalAction action = usageAction.GetAction(dpadFakeUsage.ToString()' aHidEvent.IsBackground' aHidEvent.IsRepeat' aHidEvent.HasModifierShift' aHidEvent.HasModifierControl' aHidEvent.HasModifierAlt' aHidEvent.HasModifierWindows); " is 248.
Long Statement,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,The length of the statement  "          HidUsageAction.ConditionalAction action = usageAction.GetAction(virtualKey.ToString()' aHidEvent.IsBackground' aHidEvent.IsRepeat' aHidEvent.HasModifierShift' aHidEvent.HasModifierControl' aHidEvent.HasModifierAlt' aHidEvent.HasModifierWindows); " is 245.
Long Statement,MediaPortal.InputDevices,HidListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidListener.cs,Init,The length of the statement  "        _controlEnabled = xmlreader.GetValueAsBool("remote"' "HidEnabled"' true) || xmlreader.GetValueAsBool("remote"' "MCE"' false);" is 125.
Long Statement,MediaPortal.InputDevices,HidListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidListener.cs,Init,The length of the statement  "        Verbose = xmlreader.GetValueAsBool("remote"' "HidVerbose"' false) || xmlreader.GetValueAsBool("remote"' "MCEVerboseLog"' false); " is 128.
Long Statement,MediaPortal.InputDevices,HidListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidListener.cs,GetMapping,The length of the statement  "          return new Mapping(action.Layer' action.Condition' action.ConProperty' action.Command' action.CmdProperty' action.CmdKeyChar' action.CmdKeyCode' action.Sound' action.Focus); " is 173.
Long Statement,MediaPortal.InputDevices,InputDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputDevices.cs,MapToAction,The length of the statement  "      Log.Info(string.Format("WndProc message to be processed {0}' appCommand {1}' LParam {2}' WParam {3}"' msg.Msg' Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam)' msg.LParam' msg.WParam)); " is 183.
Long Statement,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,The length of the statement  "      HidListener.LogInfo("Action: {0} / {1} / {2} / {3}"' aAction.Condition' aAction.ConProperty' aAction.Command' aAction.CmdProperty); " is 131.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.ButtonStartLearn.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.ButtonEndLearn.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpBeveledLine1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 150.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpListView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.InputMapperButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpRemotenumber.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The length of the statement  "      this.mpLabel1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Complex Conditional,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,WriteAttribute,The conditional expression  "aDefaultIsNegative && (aValue.Equals("false") || aValue.Equals("disabled") || aValue.Equals("0"))"  is complex.
Complex Conditional,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,WriteAttribute,The conditional expression  "!aDefaultIsNegative && (aValue.Equals("true") || aValue.Equals("enabled") || aValue.Equals("1"))"  is complex.
Complex Conditional,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The conditional expression  "msg.Msg == WM_KEYDOWN || msg.Msg == WM_SYSKEYDOWN || msg.Msg == Win32.Const.WM_APPCOMMAND || msg.Msg == WM_LBUTTONDOWN ||                    msg.Msg == WM_RBUTTONDOWN || msg.Msg == WM_MOUSEMOVE"  is complex.
Complex Conditional,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The conditional expression  "(_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)"  is complex.
Complex Conditional,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,AttributeValueToBoolean,The conditional expression  "val.Equals("true") || val.Equals("on") || val.Equals("enabled") || val.Equals("1")"  is complex.
Complex Conditional,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,AttributeValueToBoolean,The conditional expression  "val.Equals("false") || val.Equals("off") || val.Equals("disabled") || val.Equals("0")"  is complex.
Empty Catch Block,MediaPortal,DirectInputListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputListener.cs,DeInitDevice,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,GetActionName,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,GetActionName,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices,irremote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\irremote.cs,IRGetSystemKeyCode,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices,HidProfiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidProfiles.cs,GetExistingProfilesFileNames,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices,IrTrans,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\IrTrans\IrTRans.cs,OnDataReceived,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices.FireDTV,FireDTVControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTV interfaces\FireSATControl.cs,CloseFireDTVHandle,The method has an empty catch block.
Empty Catch Block,MediaPortal.InputDevices.FireDTV,FireDTVControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTV interfaces\FireSATControl.cs,RegisterGeneralNotifications,The method has an empty catch block.
Magic Number,MediaPortal,DirectInputListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputListener.cs,InitDevice,The following statement contains a magic number: device.Properties.SetRange(ParameterHow.ById'                                       doi.ObjectId' new InputRange(-5000' 5000));
Magic Number,MediaPortal,DirectInputListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputListener.cs,InitDevice,The following statement contains a magic number: device.Properties.SetRange(ParameterHow.ById'                                       doi.ObjectId' new InputRange(-5000' 5000));
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(286' 339);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(286' 339);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton5.Location = new System.Drawing.Point(87' 310);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton5.Location = new System.Drawing.Point(87' 310);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton5.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton5.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton5.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Location = new System.Drawing.Point(179' 316);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Location = new System.Drawing.Point(179' 316);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Size = new System.Drawing.Size(101' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Size = new System.Drawing.Size(101' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton1.Location = new System.Drawing.Point(6' 310);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton1.Location = new System.Drawing.Point(6' 310);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton1.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton1.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCodeList.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCodeList.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCodeList.Size = new System.Drawing.Size(274' 284);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCodeList.Size = new System.Drawing.Size(274' 284);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBox1.Location = new System.Drawing.Point(10' 15);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBox1.Location = new System.Drawing.Point(10' 15);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBox1.Size = new System.Drawing.Size(150' 21);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBox1.Size = new System.Drawing.Size(150' 21);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBox1.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton2.Location = new System.Drawing.Point(166' 14);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton2.Location = new System.Drawing.Point(166' 14);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton2.Size = new System.Drawing.Size(51' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton2.Size = new System.Drawing.Size(51' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton2.TabIndex = 4;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(298' 3);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(298' 3);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(228' 127);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(228' 127);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Location = new System.Drawing.Point(105' 96);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Location = new System.Drawing.Point(105' 96);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Size = new System.Drawing.Size(73' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Size = new System.Drawing.Size(73' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.TabIndex = 10;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Location = new System.Drawing.Point(10' 70);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Location = new System.Drawing.Point(10' 70);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Size = new System.Drawing.Size(35' 13);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Size = new System.Drawing.Size(35' 13);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.TabIndex = 9;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(10' 46);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(10' 46);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(18' 13);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(18' 13);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.TabIndex = 8;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox2.Location = new System.Drawing.Point(53' 70);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox2.Location = new System.Drawing.Point(53' 70);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox2.Size = new System.Drawing.Size(164' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox2.Size = new System.Drawing.Size(164' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox2.TabIndex = 7;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox1.Location = new System.Drawing.Point(53' 43);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox1.Location = new System.Drawing.Point(53' 43);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox1.Size = new System.Drawing.Size(164' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox1.Size = new System.Drawing.Size(164' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBox1.TabIndex = 6;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Location = new System.Drawing.Point(13' 96);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Location = new System.Drawing.Point(13' 96);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Size = new System.Drawing.Size(65' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Size = new System.Drawing.Size(65' 17);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.TabIndex = 5;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Location = new System.Drawing.Point(298' 136);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Location = new System.Drawing.Point(298' 136);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Size = new System.Drawing.Size(228' 81);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Size = new System.Drawing.Size(228' 81);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton4.Location = new System.Drawing.Point(7' 50);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton4.Location = new System.Drawing.Point(7' 50);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton4.Size = new System.Drawing.Size(210' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton4.Size = new System.Drawing.Size(210' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton3.Location = new System.Drawing.Point(7' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton3.Location = new System.Drawing.Point(7' 20);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton3.Size = new System.Drawing.Size(210' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpButton3.Size = new System.Drawing.Size(210' 23);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox4.Location = new System.Drawing.Point(298' 223);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox4.Location = new System.Drawing.Point(298' 223);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox4.Size = new System.Drawing.Size(228' 119);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox4.Size = new System.Drawing.Size(228' 119);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox4.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(532' 358);
Magic Number,MediaPortal.ControlDevices,LearnControlPanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\LearnCodePanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(532' 358);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxASLogo.Size = new System.Drawing.Size(595' 439);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxASLogo.Size = new System.Drawing.Size(595' 439);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxASLogo.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(504' 404);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(504' 404);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(423' 404);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(423' 404);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.TabIndex = 5;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.TabIndex = 4;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Increment = new decimal(new int[] {              50'              0'              0'              0});
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Location = new System.Drawing.Point(150' 39);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Location = new System.Drawing.Point(150' 39);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Maximum = new decimal(new int[] {              1000'              0'              0'              0});
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.TabIndex = 16;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.interCommandDelayNumUpDn.Value = new decimal(new int[] {              100'              0'              0'              0});
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(16' 41);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(16' 41);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(121' 13);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(121' 13);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 15;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.Location = new System.Drawing.Point(150' 15);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.Location = new System.Drawing.Point(150' 15);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.Maximum = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.commandRepeatNumUpDn.TabIndex = 14;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(117' 13);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(117' 13);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 13;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(6' 108);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(6' 108);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(245' 196);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(245' 196);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(257' 7);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(257' 7);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Margin = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Padding = new System.Windows.Forms.Padding(5);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(299' 297);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(299' 297);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(245' 96);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(245' 96);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Location = new System.Drawing.Point(6' 65);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Location = new System.Drawing.Point(6' 65);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Size = new System.Drawing.Size(107' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.Size = new System.Drawing.Size(107' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox3.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Location = new System.Drawing.Point(6' 42);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Location = new System.Drawing.Point(6' 42);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Size = new System.Drawing.Size(143' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox2.Size = new System.Drawing.Size(143' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Size = new System.Drawing.Size(135' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBox1.Size = new System.Drawing.Size(135' 17);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControlSettings.Location = new System.Drawing.Point(13' 62);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControlSettings.Location = new System.Drawing.Point(13' 62);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControlSettings.Size = new System.Drawing.Size(570' 336);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControlSettings.Size = new System.Drawing.Size(570' 336);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControlSettings.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(562' 310);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.TabIndex = 6;
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(6' 6);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(6' 6);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(550' 298);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(550' 298);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(595' 439);
Magic Number,MediaPortal.ControlDevices,ControlDeviceForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDeviceForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(595' 439);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpStatus.Location = new System.Drawing.Point(7' 79);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpStatus.Location = new System.Drawing.Point(7' 79);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpStatus.Size = new System.Drawing.Size(216' 165);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpStatus.Size = new System.Drawing.Size(216' 165);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpStatus.TabIndex = 5;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpSettings.Location = new System.Drawing.Point(7' 6);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpSettings.Location = new System.Drawing.Point(7' 6);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpSettings.Size = new System.Drawing.Size(437' 67);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpSettings.Size = new System.Drawing.Size(437' 67);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpSettings.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlVerbose.Location = new System.Drawing.Point(188' 19);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlVerbose.Location = new System.Drawing.Point(188' 19);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlVerbose.Size = new System.Drawing.Size(107' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlVerbose.Size = new System.Drawing.Size(107' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlVerbose.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlOutput.Location = new System.Drawing.Point(6' 42);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlOutput.Location = new System.Drawing.Point(6' 42);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlOutput.Size = new System.Drawing.Size(143' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlOutput.Size = new System.Drawing.Size(143' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlInput.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlInput.Location = new System.Drawing.Point(6' 19);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlInput.Size = new System.Drawing.Size(135' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlInput.Size = new System.Drawing.Size(135' 17);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpDevice.Location = new System.Drawing.Point(229' 79);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpDevice.Location = new System.Drawing.Point(229' 79);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpDevice.Size = new System.Drawing.Size(215' 165);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpDevice.Size = new System.Drawing.Size(215' 165);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.grpDevice.TabIndex = 6;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDevicePanel.Location = new System.Drawing.Point(9' 20);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDevicePanel.Location = new System.Drawing.Point(9' 20);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDevicePanel.Size = new System.Drawing.Size(200' 109);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDevicePanel.Size = new System.Drawing.Size(200' 109);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDevicePanel.TabIndex = 2;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlStatus.Location = new System.Drawing.Point(7' 20);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlStatus.Location = new System.Drawing.Point(7' 20);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlStatus.Size = new System.Drawing.Size(203' 139);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlStatus.Size = new System.Drawing.Size(203' 139);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDefaults.Location = new System.Drawing.Point(129' 135);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDefaults.Location = new System.Drawing.Point(129' 135);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDefaults.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDefaults.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlDefaults.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlAdvanced.Location = new System.Drawing.Point(43' 135);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlAdvanced.Location = new System.Drawing.Point(43' 135);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlAdvanced.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlAdvanced.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlAdvanced.TabIndex = 4;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlMapping.Location = new System.Drawing.Point(340' 25);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlMapping.Location = new System.Drawing.Point(340' 25);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlMapping.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlMapping.Size = new System.Drawing.Size(80' 23);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.ctrlMapping.TabIndex = 3;
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(3);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(450' 250);
Magic Number,MediaPortal.ControlDevices,ControlDevicePanel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\ControlDevices\Util\ControlDevicePanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(450' 250);
Magic Number,MediaPortal.Hooks,KeyboardHook,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Hook\KeyboardHook.cs,OnHookInvoked,The following statement contains a magic number: e.WParam == 256 && KeyDown != null
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Location = new System.Drawing.Point(16' 56);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Location = new System.Drawing.Point(16' 56);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Size = new System.Drawing.Size(397' 504);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Size = new System.Drawing.Size(397' 504);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Location = new System.Drawing.Point(413' 543);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Location = new System.Drawing.Point(413' 543);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Size = new System.Drawing.Size(13' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Size = new System.Drawing.Size(13' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.TabIndex = 29;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Location = new System.Drawing.Point(347' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Location = new System.Drawing.Point(347' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.TabIndex = 28;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Location = new System.Drawing.Point(272' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Location = new System.Drawing.Point(272' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.TabIndex = 27;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Location = new System.Drawing.Point(97' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Location = new System.Drawing.Point(97' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.TabIndex = 24;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Location = new System.Drawing.Point(16' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Location = new System.Drawing.Point(16' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.TabIndex = 23;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Location = new System.Drawing.Point(8' 601);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Location = new System.Drawing.Point(8' 601);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Size = new System.Drawing.Size(657' 2);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Size = new System.Drawing.Size(657' 2);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.TabIndex = 21;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Location = new System.Drawing.Point(428' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Location = new System.Drawing.Point(428' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.TabIndex = 20;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(509' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(509' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.TabIndex = 19;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(590' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(590' 611);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 18;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Font = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Location = new System.Drawing.Point(16' 16);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Location = new System.Drawing.Point(16' 16);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.PaddingLeft = 2;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Size = new System.Drawing.Size(643' 24);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Size = new System.Drawing.Size(643' 24);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.TabIndex = 17;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.TextFont = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Location = new System.Drawing.Point(435' 390);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Location = new System.Drawing.Point(435' 390);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Size = new System.Drawing.Size(224' 192);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Size = new System.Drawing.Size(224' 192);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.TabIndex = 16;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Location = new System.Drawing.Point(112' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Location = new System.Drawing.Point(112' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Size = new System.Drawing.Size(78' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Size = new System.Drawing.Size(78' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.TabIndex = 25;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Location = new System.Drawing.Point(152' 124);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Location = new System.Drawing.Point(152' 124);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.MaxLength = 3;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.TabIndex = 24;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(24' 128);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(24' 128);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(28' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(28' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 23;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Location = new System.Drawing.Point(72' 124);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Location = new System.Drawing.Point(72' 124);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.MaxLength = 3;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Size = new System.Drawing.Size(80' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Size = new System.Drawing.Size(80' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.TabIndex = 22;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Size = new System.Drawing.Size(62' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Size = new System.Drawing.Size(62' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.TabIndex = 21;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Location = new System.Drawing.Point(24' 156);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Location = new System.Drawing.Point(24' 156);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Size = new System.Drawing.Size(41' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Size = new System.Drawing.Size(41' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.TabIndex = 20;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Location = new System.Drawing.Point(72' 153);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Location = new System.Drawing.Point(72' 153);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Size = new System.Drawing.Size(128' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Size = new System.Drawing.Size(128' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.TabIndex = 19;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Size = new System.Drawing.Size(54' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Size = new System.Drawing.Size(54' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Size = new System.Drawing.Size(86' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Size = new System.Drawing.Size(86' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.TabIndex = 17;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Size = new System.Drawing.Size(80' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Size = new System.Drawing.Size(80' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.TabIndex = 18;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Location = new System.Drawing.Point(24' 92);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Location = new System.Drawing.Point(24' 92);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Location = new System.Drawing.Point(435' 249);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Location = new System.Drawing.Point(435' 249);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Size = new System.Drawing.Size(224' 100);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Size = new System.Drawing.Size(224' 100);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.TabIndex = 15;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.TabIndex = 9;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Size = new System.Drawing.Size(72' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Size = new System.Drawing.Size(72' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.TabIndex = 10;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Size = new System.Drawing.Size(58' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Size = new System.Drawing.Size(58' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.TabIndex = 11;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Size = new System.Drawing.Size(85' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Size = new System.Drawing.Size(85' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.TabIndex = 12;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.TabIndex = 13;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Location = new System.Drawing.Point(435' 189);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Location = new System.Drawing.Point(435' 189);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Size = new System.Drawing.Size(224' 52);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Size = new System.Drawing.Size(224' 52);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.TabIndex = 22;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Location = new System.Drawing.Point(80' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Location = new System.Drawing.Point(80' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.TabIndex = 25;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Location = new System.Drawing.Point(24' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Location = new System.Drawing.Point(24' 23);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Size = new System.Drawing.Size(36' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Size = new System.Drawing.Size(36' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.TabIndex = 16;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Location = new System.Drawing.Point(189' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Location = new System.Drawing.Point(189' 566);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.TabIndex = 26;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxButton.Location = new System.Drawing.Point(435' 46);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxButton.Location = new System.Drawing.Point(435' 46);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxButton.Size = new System.Drawing.Size(224' 137);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxButton.Size = new System.Drawing.Size(224' 137);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxButton.TabIndex = 30;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBoxCode.Location = new System.Drawing.Point(80' 19);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBoxCode.Location = new System.Drawing.Point(80' 19);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBoxCode.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBoxCode.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpComboBoxCode.TabIndex = 27;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabelCode.Location = new System.Drawing.Point(24' 22);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabelCode.Location = new System.Drawing.Point(24' 22);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabelCode.Size = new System.Drawing.Size(35' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabelCode.Size = new System.Drawing.Size(35' 13);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabelCode.TabIndex = 26;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxWindows.Location = new System.Drawing.Point(71' 108);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxWindows.Location = new System.Drawing.Point(71' 108);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxWindows.Size = new System.Drawing.Size(68' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxWindows.Size = new System.Drawing.Size(68' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxWindows.TabIndex = 5;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxShift.Location = new System.Drawing.Point(5' 84);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxShift.Location = new System.Drawing.Point(5' 84);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxShift.Size = new System.Drawing.Size(45' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxShift.Size = new System.Drawing.Size(45' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxShift.TabIndex = 4;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxAlt.Location = new System.Drawing.Point(5' 107);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxAlt.Location = new System.Drawing.Point(5' 107);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxAlt.Size = new System.Drawing.Size(36' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxAlt.Size = new System.Drawing.Size(36' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxAlt.TabIndex = 3;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxControl.Location = new System.Drawing.Point(71' 85);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxControl.Location = new System.Drawing.Point(71' 85);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxControl.Size = new System.Drawing.Size(57' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxControl.Size = new System.Drawing.Size(57' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxControl.TabIndex = 2;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxBackground.Location = new System.Drawing.Point(71' 62);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxBackground.Location = new System.Drawing.Point(71' 62);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxBackground.Size = new System.Drawing.Size(82' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxBackground.Size = new System.Drawing.Size(82' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxRepeat.Location = new System.Drawing.Point(6' 62);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxRepeat.Location = new System.Drawing.Point(6' 62);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxRepeat.Size = new System.Drawing.Size(59' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxRepeat.Size = new System.Drawing.Size(59' 17);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(675' 644);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(675' 644);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,CloseThread,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,The following statement contains a magic number: layer == 2
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,SaveMapping,The following statement contains a magic number: writer.IndentChar = (char) 9;
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,GetFriendlyName,The following statement contains a magic number: name = name.Substring(7);
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,textBoxKeyCode_KeyPress,The following statement contains a magic number: !char.IsNumber(e.KeyChar) && e.KeyChar != 8
Magic Number,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,textBoxKeyChar_KeyPress,The following statement contains a magic number: !char.IsNumber(e.KeyChar) && e.KeyChar != 8
Magic Number,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,DoMapAction,The following statement contains a magic number: switch (map.Command)        {          case "ACTION": // execute Action x            Key key = new Key(map.CmdKeyChar' map.CmdKeyCode);  #if DEBUG            Log.Info("Executing: key {0} / {1} / Action: {2} / {3}"' map.CmdKeyChar' map.CmdKeyCode' map.CmdProperty'                     ((Action.ActionType)Convert.ToInt32(map.CmdProperty)).ToString());  #endif            action = new Action(key' (Action.ActionType)Convert.ToInt32(map.CmdProperty)' 0' 0);            GUIGraphicsContext.OnAction(action);            break;          case "KEY": // send Key x            SendKeys.SendWait(map.CmdProperty);            break;          case "WINDOW": // activate Window x            GUIGraphicsContext.ResetLastActivity();            GUIMessage msg;            if ((Convert.ToInt32(map.CmdProperty) == (int)GUIWindow.Window.WINDOW_HOME) ||                (Convert.ToInt32(map.CmdProperty) == (int)GUIWindow.Window.WINDOW_SECOND_HOME))            {              if (_basicHome)              {                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0'                                     (int)GUIWindow.Window.WINDOW_SECOND_HOME' 0' null);              }              else              {                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0'                                     (int)GUIWindow.Window.WINDOW_HOME' 0' null);              }            }            else            {              msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0' Convert.ToInt32(map.CmdProperty)'                                   0' null);            }              GUIWindowManager.SendThreadMessage(msg);            break;          case "TOGGLE": // toggle Layer 1/2            if (_currentLayer == 1)            {              _currentLayer = 2;            }            else            {              _currentLayer = 1;            }            break;          case "POWER": // power down commands              if ((map.CmdProperty == "STANDBY") || (map.CmdProperty == "HIBERNATE"))            {              GUIGraphicsContext.ResetLastActivity();            }              switch (map.CmdProperty)            {              case "EXIT":                action = new Action(Action.ActionType.ACTION_EXIT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "REBOOT":                action = new Action(Action.ActionType.ACTION_REBOOT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "SHUTDOWN":                action = new Action(Action.ActionType.ACTION_SHUTDOWN' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "STANDBY":                action = new Action(Action.ActionType.ACTION_SUSPEND' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;              case "HIBERNATE":                action = new Action(Action.ActionType.ACTION_HIBERNATE' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;              case "POWEROFF":                action = new Action(Action.ActionType.ACTION_POWER_OFF' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;            }            break;          case "PROCESS":            {              GUIGraphicsContext.ResetLastActivity();              if (processID > 0)              {                Process proc = Process.GetProcessById(processID);                if (null != proc)                {                  switch (map.CmdProperty)                  {                    case "CLOSE":                      proc.CloseMainWindow();                      break;                    case "KILL":                      proc.Kill();                      break;                  }                }              }            }            break;          default:            return false;        }
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Location = new System.Drawing.Point(16' 56);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Location = new System.Drawing.Point(16' 56);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Size = new System.Drawing.Size(312' 335);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.treeMapping.Size = new System.Drawing.Size(312' 335);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Location = new System.Drawing.Point(328' 374);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Location = new System.Drawing.Point(328' 374);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Size = new System.Drawing.Size(13' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.Size = new System.Drawing.Size(13' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExpand.TabIndex = 29;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Location = new System.Drawing.Point(262' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Location = new System.Drawing.Point(262' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDefault.TabIndex = 28;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Location = new System.Drawing.Point(272' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Location = new System.Drawing.Point(272' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRemove.TabIndex = 27;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Location = new System.Drawing.Point(97' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Location = new System.Drawing.Point(97' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDown.TabIndex = 24;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Location = new System.Drawing.Point(16' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Location = new System.Drawing.Point(16' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonUp.TabIndex = 23;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Location = new System.Drawing.Point(8' 432);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Location = new System.Drawing.Point(8' 432);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Size = new System.Drawing.Size(572' 2);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.Size = new System.Drawing.Size(572' 2);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.beveledLine1.TabIndex = 21;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Location = new System.Drawing.Point(343' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Location = new System.Drawing.Point(343' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonApply.TabIndex = 20;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(424' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(424' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.TabIndex = 19;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(505' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(505' 442);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 18;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Font = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular'                                                        System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Location = new System.Drawing.Point(16' 16);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Location = new System.Drawing.Point(16' 16);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.PaddingLeft = 2;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Size = new System.Drawing.Size(558' 24);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.Size = new System.Drawing.Size(558' 24);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.TabIndex = 17;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.headerLabel.TextFont = new System.Drawing.Font("Verdana"' 14.25F' System.Drawing.FontStyle.Regular'                                                            System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Location = new System.Drawing.Point(350' 221);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Location = new System.Drawing.Point(350' 221);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Size = new System.Drawing.Size(224' 192);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.Size = new System.Drawing.Size(224' 192);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxAction.TabIndex = 16;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Location = new System.Drawing.Point(112' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Location = new System.Drawing.Point(112' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Size = new System.Drawing.Size(78' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.Size = new System.Drawing.Size(78' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGainFocus.TabIndex = 25;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Location = new System.Drawing.Point(152' 124);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Location = new System.Drawing.Point(152' 124);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.MaxLength = 3;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.Size = new System.Drawing.Size(48' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyCode.TabIndex = 24;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(24' 128);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(24' 128);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(28' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(28' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 23;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Location = new System.Drawing.Point(72' 124);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Location = new System.Drawing.Point(72' 124);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.MaxLength = 3;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Size = new System.Drawing.Size(80' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.Size = new System.Drawing.Size(80' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxKeyChar.TabIndex = 22;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Size = new System.Drawing.Size(62' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.Size = new System.Drawing.Size(62' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonProcess.TabIndex = 21;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Location = new System.Drawing.Point(24' 156);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Location = new System.Drawing.Point(24' 156);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Size = new System.Drawing.Size(41' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.Size = new System.Drawing.Size(41' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSound.TabIndex = 20;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Location = new System.Drawing.Point(72' 153);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Location = new System.Drawing.Point(72' 153);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Size = new System.Drawing.Size(128' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.Size = new System.Drawing.Size(128' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxSound.TabIndex = 19;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Size = new System.Drawing.Size(54' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.Size = new System.Drawing.Size(54' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAction.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonActWindow.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Size = new System.Drawing.Size(86' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.Size = new System.Drawing.Size(86' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonToggle.TabIndex = 17;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Size = new System.Drawing.Size(80' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.Size = new System.Drawing.Size(80' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPower.TabIndex = 18;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Location = new System.Drawing.Point(24' 92);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Location = new System.Drawing.Point(24' 92);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCmdProperty.TabIndex = 14;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Location = new System.Drawing.Point(350' 110);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Location = new System.Drawing.Point(350' 110);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Size = new System.Drawing.Size(224' 100);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.Size = new System.Drawing.Size(224' 100);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCondition.TabIndex = 15;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Location = new System.Drawing.Point(24' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.Size = new System.Drawing.Size(63' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonWindow.TabIndex = 9;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Location = new System.Drawing.Point(112' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Size = new System.Drawing.Size(72' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.Size = new System.Drawing.Size(72' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFullscreen.TabIndex = 10;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Location = new System.Drawing.Point(24' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Size = new System.Drawing.Size(58' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.Size = new System.Drawing.Size(58' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPlaying.TabIndex = 11;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Location = new System.Drawing.Point(112' 44);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Size = new System.Drawing.Size(85' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.Size = new System.Drawing.Size(85' 17);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNoCondition.TabIndex = 12;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Location = new System.Drawing.Point(24' 68);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.Size = new System.Drawing.Size(176' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCondProperty.TabIndex = 13;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Location = new System.Drawing.Point(350' 48);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Location = new System.Drawing.Point(350' 48);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Size = new System.Drawing.Size(224' 52);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.Size = new System.Drawing.Size(224' 52);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxLayer.TabIndex = 22;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Location = new System.Drawing.Point(80' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Location = new System.Drawing.Point(80' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.Size = new System.Drawing.Size(121' 21);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLayer.TabIndex = 25;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Location = new System.Drawing.Point(24' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Location = new System.Drawing.Point(24' 23);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Size = new System.Drawing.Size(36' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.Size = new System.Drawing.Size(36' 13);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLayer.TabIndex = 16;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Location = new System.Drawing.Point(189' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Location = new System.Drawing.Point(189' 397);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.Size = new System.Drawing.Size(56' 20);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNew.TabIndex = 26;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(590' 475);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(590' 475);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,CloseThread,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,LoadMapping,The following statement contains a magic number: layer == 2
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,SaveMapping,The following statement contains a magic number: writer.IndentChar = (char)9;
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,GetFriendlyName,The following statement contains a magic number: name = name.Substring(7);
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,textBoxKeyCode_KeyPress,The following statement contains a magic number: !char.IsNumber(e.KeyChar) && e.KeyChar != 8
Magic Number,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,textBoxKeyChar_KeyPress,The following statement contains a magic number: !char.IsNumber(e.KeyChar) && e.KeyChar != 8
Magic Number,MediaPortal.InputDevices,AppCommandListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\AppCommand\AppCommandListener.cs,OnKeyDown,The following statement contains a magic number: int lParam = (((keys) << 16) | (((int)e.KeyCode)));
Magic Number,MediaPortal.InputDevices,AppCommandListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\AppCommand\AppCommandListener.cs,WndProcAppCommand,The following statement contains a magic number: Environment.TickCount - InputDevices.LastHidRequestTick < 500
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,WndProc,The following statement contains a magic number: Environment.TickCount - InputDevices.LastHidRequestTick < 500
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following statement contains a magic number: switch ((Keys)msg.WParam)              {                  case Keys.ControlKey:                      break;                  case Keys.ShiftKey:                      break;                  case Keys.Menu:                      break;                  default:                      int keycode = (int)msg.WParam;                        AppCommands appCommand = (AppCommands)Win32.Macro.GET_APPCOMMAND_LPARAM(msg.LParam);                      InputDevices.LastHidRequest = appCommand;                        // Due to the non-perfect placement of the OK button we allow the user to remap the joystick to okay.                      if (_mapMouseButton)                      {                          if (msg.Msg == WM_LBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for left mouse button"' keycode);                              }                              keycode = 13;                          }                          if (msg.Msg == WM_RBUTTONDOWN)                          {                              if (_verboseLogging)                              {                                  Log.Debug("Centarea: Command \"{0}\" mapped for right mouse button"' keycode);                              }                              keycode = 10069;                          }                      }                      // Since mouse support is semi optimal we have this option to use the joystick like cursor keys                      if (_mapJoystick && GUIGraphicsContext.Fullscreen)                      {                          if (msg.Msg == WM_MOUSEMOVE)                          {                              Point p = new Point(msg.LParam.ToInt32());                              _ignoreDupMsg++;                              // since our ResetCursor() triggers a mouse move MSG as well we ignore every second event                              if (_ignoreDupMsg % 2 == 0)                              {                                  GUIGraphicsContext.ResetCursor(false);                              }                              // we ignore double actions for the configured time                              if (Environment.TickCount - _lastMouseTick < 400)                              {                                return null;                              }                                MouseDirection mmove = OnMouseMoved(p);                              _lastMouseTick = Environment.TickCount;                              _ignoreDupMsg = 0;                                switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }                              if (mmove != MouseDirection.None)                              {                                  GUIGraphicsContext.ResetCursor(false);                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped for mouse movement"' mmove.ToString());                                  }                              }                          }                      }                      // The Centarea Remote sends key combos. Therefore we use this trick to get a 1:1 mapping                      if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)                      {                          keycode += 1000;                      }                      if ((Control.ModifierKeys & Keys.Control) == Keys.Control)                      {                          keycode += 10000;                      }                      if ((Control.ModifierKeys & Keys.Alt) == Keys.Alt)                      {                          keycode += 100000;                      }                        try                      {                          result = _inputHandler.GetMapping(keycode.ToString());                          if (shouldRaiseAction)                          {                              // Get & execute Mapping                              if (_inputHandler.MapAction(keycode))                              {                                  if (_verboseLogging)                                  {                                      Log.Debug("Centarea: Command \"{0}\" mapped"' keycode);                                  }                              }                              else                              {                                  if (keycode > 0)                                  {                                      Log.Debug("Centarea: Command \"{0}\" not mapped"' keycode);                                  }                                  return null;                              }                          }                      }                      catch (ApplicationException)                      {                        return null;                      }                      msg.Result = new IntPtr(1);                      break;              }
Magic Number,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,OnMouseMoved,The following statement contains a magic number: TotalWay > 0.9
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following statement contains a magic number: actionCode = 3030 + button;
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following statement contains a magic number: (button >= 0) && (button <= 19)
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following statement contains a magic number: switch (pov[0])          {            case 0:              {                actionCode = (int)joyButton.povN;                break;              }            case 9000:              {                actionCode = (int)joyButton.povE;                break;              }            case 18000:              {                actionCode = (int)joyButton.povS;                break;              }            case 27000:              {                actionCode = (int)joyButton.povW;                break;              }          }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following statement contains a magic number: switch (pov[0])          {            case 0:              {                actionCode = (int)joyButton.povN;                break;              }            case 9000:              {                actionCode = (int)joyButton.povE;                break;              }            case 18000:              {                actionCode = (int)joyButton.povS;                break;              }            case 27000:              {                actionCode = (int)joyButton.povW;                break;              }          }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following statement contains a magic number: switch (pov[0])          {            case 0:              {                actionCode = (int)joyButton.povN;                break;              }            case 9000:              {                actionCode = (int)joyButton.povE;                break;              }            case 18000:              {                actionCode = (int)joyButton.povS;                break;              }            case 27000:              {                actionCode = (int)joyButton.povW;                break;              }          }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,VerifyAction,The following statement contains a magic number: res = (actionCode > 0) && (actionCode < 4000) && (!FilterAction(actionCode' curAxisValue));
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,GetStateAsText,The following statement contains a magic number: switch (pov[0])        {          case 0:            {              joyState += string.Format("POV     : North\n");              break;            }          case 4500:            {              joyState += string.Format("POV     : NorthEast\n");              break;            }          case 9000:            {              joyState += string.Format("POV     : East\n");              break;            }          case 13500:            {              joyState += string.Format("POV     : SouthEast\n");              break;            }          case 18000:            {              joyState += string.Format("POV     : South\n");              break;            }          case 22500:            {              joyState += string.Format("POV     : SouthWest\n");              break;            }          case 27000:            {              joyState += string.Format("POV     : West\n");              break;            }          case 31500:            {              joyState += string.Format("POV     : NorthWest\n");              break;            }          default:            {              break;            }        }
Magic Number,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,LoadSettings,The following statement contains a magic number: _delay = xmlreader.GetValueAsInt("remote"' "DirectInputDelayMS"' 150);
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,Init,The following statement contains a magic number: _buttonRelease = TimeSpan.FromMilliseconds(xmlreader.GetValueAsInt("remote"' "HCWButtonRelease"' 200));
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,Init,The following statement contains a magic number: _repeatFilter = xmlreader.GetValueAsInt("remote"' "HCWRepeatFilter"' 2);
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,Init,The following statement contains a magic number: _port = xmlreader.GetValueAsInt("remote"' "HCWHelperPort"' 2110);
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,CheckThread,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,CheckThread,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following statement contains a magic number: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Magic Number,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,LoadMapping,The following statement contains a magic number: var usageId = (uint) rawUsagePage << 16 | rawUsageCollection;
Magic Number,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,OnHidEvent,The following statement contains a magic number: const int KDPadButtonOffset = 1000;
Magic Number,MediaPortal.InputDevices,InputDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputDevices.cs,MapToAction,The following statement contains a magic number: keyPressed += 32;
Magic Number,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,The following statement contains a magic number: switch (aAction.Command)        {          case "ACTION": // execute Action x            var key = new Key(aAction.CmdKeyChar' aAction.CmdKeyCode);              HidListener.LogInfo("Executing: key {0} / {1} / Action: {2} / {3}"' aAction.CmdKeyChar' aAction.CmdKeyCode'              aAction.CmdProperty'              ((Action.ActionType)Convert.ToInt32(aAction.CmdProperty)).ToString());              action = new Action(key' (Action.ActionType)Convert.ToInt32(aAction.CmdProperty)' 0' 0);            GUIGraphicsContext.OnAction(action);            break;            case "KEY": // send Key x            SendKeys.SendWait(aAction.CmdProperty);            break;            case "WINDOW": // activate Window x            GUIGraphicsContext.ResetLastActivity();            GUIMessage msg;            if ((Convert.ToInt32(aAction.CmdProperty) == (int)GUIWindow.Window.WINDOW_HOME) ||                (Convert.ToInt32(aAction.CmdProperty) == (int)GUIWindow.Window.WINDOW_SECOND_HOME))            {              if (_basicHome)              {                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0'                  (int)GUIWindow.Window.WINDOW_SECOND_HOME' 0' null);              }              else              {                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0'                  (int)GUIWindow.Window.WINDOW_HOME' 0' null);              }            }            else            {              msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GOTO_WINDOW' 0' 0' 0'                Convert.ToInt32(aAction.CmdProperty)'                0' null);            }              GUIWindowManager.SendThreadMessage(msg);            break;            case "TOGGLE": // toggle Layer 1/2            if (_currentLayer == 1)            {              _currentLayer = 2;            }            else            {              _currentLayer = 1;            }            break;            case "POWER": // power down commands              if ((aAction.CmdProperty == "STANDBY") || (aAction.CmdProperty == "HIBERNATE"))            {              GUIGraphicsContext.ResetLastActivity();            }              switch (aAction.CmdProperty)            {              case "EXIT":                action = new Action(Action.ActionType.ACTION_EXIT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "REBOOT":                action = new Action(Action.ActionType.ACTION_REBOOT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "SHUTDOWN":                action = new Action(Action.ActionType.ACTION_SHUTDOWN' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "STANDBY":                action = new Action(Action.ActionType.ACTION_SUSPEND' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;                case "HIBERNATE":                action = new Action(Action.ActionType.ACTION_HIBERNATE' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;            }            break;            case "PROCESS":            {              GUIGraphicsContext.ResetLastActivity();              if (aProcessId > 0)              {                var proc = Process.GetProcessById(aProcessId);                if (null != proc)                {                  switch (aAction.CmdProperty)                  {                    case "CLOSE":                      proc.CloseMainWindow();                      break;                      case "KILL":                      proc.Kill();                      break;                  }                }              }            }            break;            default:            return false;        }
Magic Number,MediaPortal.InputDevices,IrTrans,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\IrTrans\IrTRans.cs,Init,The following statement contains a magic number: irTransServerPort = xmlreader.GetValueAsInt("remote"' "IRTransServerPort"' 21000);
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,Init,The following statement contains a magic number: m_IRdelay = 300;
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,Init,The following statement contains a magic number: m_IRdelay < 0 || m_IRdelay >= 1000
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,StartWinLirc,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,StartWinLirc,The following statement contains a magic number: i < 15
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,ChangeTunerChannel,The following statement contains a magic number: channelparts = command.Split(":".ToCharArray()' 3);
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,ChangeTunerChannel,The following statement contains a magic number: channelparts.Length != 3
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,ChangeTunerChannel,The following statement contains a magic number: Log.Info("WinLirc ChangeTunerChannel: Remote; " + channelparts[0] + " Channel; " + channelparts[2]);
Magic Number,MediaPortal.InputDevices,WinLirc,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\WinLirc\WinLirc.cs,ChangeTunerChannel,The following statement contains a magic number: string[] Ops = channelparts[2].Split("'".ToCharArray());
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,RemoteLearn,The following statement contains a magic number: RemoteCommand = new ArrayList(150);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,RemoteLearn,The following statement contains a magic number: MPCommand = new ArrayList(150);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,CatchKeyPress,The following statement contains a magic number: mpListView.Items[index + 5].EnsureVisible();
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,LoadMapping,The following statement contains a magic number: string[] data = new string[2];
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonStartLearn.Location = new System.Drawing.Point(325' 22);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonStartLearn.Location = new System.Drawing.Point(325' 22);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonStartLearn.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonStartLearn.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonStartLearn.TabIndex = 6;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEndLearn.Location = new System.Drawing.Point(325' 68);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEndLearn.Location = new System.Drawing.Point(325' 68);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEndLearn.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEndLearn.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEndLearn.TabIndex = 5;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpCancel.Location = new System.Drawing.Point(334' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpCancel.Location = new System.Drawing.Point(334' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpCancel.TabIndex = 3;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(172' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(172' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 2;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpBeveledLine1.Location = new System.Drawing.Point(5' 370);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpBeveledLine1.Location = new System.Drawing.Point(5' 370);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpBeveledLine1.Size = new System.Drawing.Size(424' 2);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpBeveledLine1.Size = new System.Drawing.Size(424' 2);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpApply.Location = new System.Drawing.Point(253' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpApply.Location = new System.Drawing.Point(253' 401);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpApply.Size = new System.Drawing.Size(75' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpListView.Location = new System.Drawing.Point(12' 22);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpListView.Location = new System.Drawing.Point(12' 22);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpListView.Size = new System.Drawing.Size(283' 273);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpListView.Size = new System.Drawing.Size(283' 273);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.columnHeaderMPAction.Width = 126;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.columnHeaderX10Key.Width = 152;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.InputMapperButton.Location = new System.Drawing.Point(325' 194);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.InputMapperButton.Location = new System.Drawing.Point(325' 194);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.InputMapperButton.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.InputMapperButton.Size = new System.Drawing.Size(84' 23);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.InputMapperButton.TabIndex = 7;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpRemotenumber.Location = new System.Drawing.Point(12' 330);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpRemotenumber.Location = new System.Drawing.Point(12' 330);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpRemotenumber.Size = new System.Drawing.Size(283' 21);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpRemotenumber.Size = new System.Drawing.Size(283' 21);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpRemotenumber.TabIndex = 8;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(9' 311);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(9' 311);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(107' 13);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(107' 13);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.TabIndex = 9;
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(441' 436);
Magic Number,MediaPortal.InputDevices,RemoteLearn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\RemoteLearn.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(441' 436);
Magic Number,MediaPortal.InputDevices,X10Remote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\X10Remote\X10Remote.cs,X10Command,The following statement contains a magic number: _x10UseChannelControl && (lAddress != ((_x10Channel - 1) * 16))
Magic Number,MediaPortal.InputDevices,X10Remote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\X10Remote\X10Remote.cs,X10Command,The following statement contains a magic number: (EKeyState == EX10Key.X10KEY_ON || EKeyState == EX10Key.X10KEY_REPEAT) && lSequence != 2
Magic Number,MediaPortal.InputDevices.FireDTV,FireDTVSourceFilterInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTV interfaces\FireSATSourceFilterInfo.cs,FireDTVSourceFilterInfo,The following statement contains a magic number: StringBuilder displayName = new StringBuilder(256);
Magic Number,MediaPortal.InputDevices.FireDTV,FireDTVSourceFilterInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTV interfaces\FireSATSourceFilterInfo.cs,FireDTVSourceFilterInfo,The following statement contains a magic number: StringBuilder GuidString = new StringBuilder(256);
Duplicate Code,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,getNode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((15' 38)' (41' 64))
Duplicate Code,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,getNode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((15' 37)' (40' 62))
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,The following switch statement is missing a default case: switch (condition)                {                  case "WINDOW":                    conditionString =                      GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(conProperty)));                    if (string.IsNullOrEmpty(conditionString))                    {                      continue;                    }                    break;                    case "FULLSCREEN":                    if (conProperty == "TRUE")                    {                      conditionString = "Fullscreen";                    }                    else                    {                      conditionString = "No Fullscreen";                    }                    break;                    case "PLAYER":                    conditionString = playerList[Array.IndexOf(nativePlayerList' conProperty)];                    break;                    case "*":                    conditionString = "No Condition";                    break;                }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,LoadMapping,The following switch statement is missing a default case: switch (command)                {                  case "ACTION":                    commandString = "Action \"" +                                    GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(cmdProperty))) +                                    "\"";                    break;                    case "KEY":                    commandString = "Key \"" + cmdProperty + "\"";                    break;                    case "WINDOW":                    commandString = "Window \"" +                                    GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(cmdProperty))) +                                    "\"";                    break;                    case "TOGGLE":                    commandString = "Toggle Layer";                    break;                    case "POWER":                    commandString = powerList[Array.IndexOf(nativePowerList' cmdProperty)];                    break;                    case "PROCESS":                    commandString = processList[Array.IndexOf(nativeProcessList' cmdProperty)];                    break;                }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,SaveMapping,The following switch statement is missing a default case: switch (((NodeData) commandNode.Tag).Type)                          {                            case "COMMAND":                            {                              command = (string) ((NodeData) commandNode.Tag).Parameter;                              focus = ((NodeData) commandNode.Tag).Focus;                              if (command != "KEY")                              {                                cmdProperty = ((NodeData) commandNode.Tag).Value.ToString();                              }                              else                              {                                command = "ACTION";                                var key = (Key) ((NodeData) commandNode.Tag).Value;                                cmdProperty = "93";                                cmdKeyChar = key.KeyChar.ToString();                                cmdKeyCode = key.KeyCode.ToString();                              }                            }                              break;                              case "SOUND":                              sound = (string) ((NodeData) commandNode.Tag).Value;                              break;                          }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,getNode,The following switch statement is missing a default case: switch (type)        {          case "COMMAND":            if ((data.Type == "SOUND") || (data.Type == "KEY"))            {              node = node.Parent;              foreach (TreeNode subNode in node.Nodes)              {                data = (NodeData) subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            else if (data.Type == "CONDITION")            {              foreach (TreeNode subNode in node.Nodes)              {                data = (NodeData) subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            break;            case "SOUND":            if ((data.Type == "COMMAND") || (data.Type == "KEY"))            {              node = node.Parent;              foreach (TreeNode subNode in node.Nodes)              {                data = (NodeData) subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            else if (data.Type == "CONDITION")            {              foreach (TreeNode subNode in node.Nodes)              {                data = (NodeData) subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            break;            case "CONDITION":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent;            }            break;            case "LAYER":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent;            }            if (data.Type == "CONDITION")            {              return node.Parent;            }            break;            case "BUTTON":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent.Parent;            }            if (data.Type == "CONDITION")            {              return node.Parent.Parent;            }            if (data.Type == "LAYER")            {              return node.Parent;            }            break;            case "REMOTE":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent.Parent.Parent;            }            if (data.Type == "CONDITION")            {              return node.Parent.Parent.Parent;            }            if (data.Type == "LAYER")            {              return node.Parent.Parent;            }            if (data.Type == "BUTTON")            {              return node.Parent;            }            break;        }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch (data.Type)        {          case "REMOTE":            groupBoxLayer.Enabled = false;            groupBoxCondition.Enabled = false;            groupBoxAction.Enabled = false;            groupBoxButton.Enabled = false;            comboBoxLayer.Text = "All Layers";            comboBoxCondProperty.Text = "none";            comboBoxCmdProperty.Text = "none";            comboBoxSound.Text = "none";            return;            case "BUTTON":                      groupBoxLayer.Enabled = false;            groupBoxCondition.Enabled = false;            groupBoxAction.Enabled = false;            groupBoxButton.Enabled = true;            comboBoxLayer.Text = "All Layers";            comboBoxCondProperty.Text = "none";            comboBoxCmdProperty.Text = "none";            comboBoxSound.Text = "none";            HidButtonAttributes attributes = (HidButtonAttributes)data.Parameter;            mpCheckBoxAlt.Checked = HidUsageAction.AttributeValueToBoolean(attributes.ModifierAlt);            mpCheckBoxShift.Checked = HidUsageAction.AttributeValueToBoolean(attributes.ModifierShift);            mpCheckBoxControl.Checked = HidUsageAction.AttributeValueToBoolean(attributes.ModifierControl);            mpCheckBoxWindows.Checked = HidUsageAction.AttributeValueToBoolean(attributes.ModifierWindows);            mpCheckBoxRepeat.Checked = HidUsageAction.AttributeValueToBoolean(attributes.Repeat);            mpCheckBoxBackground.Checked = HidUsageAction.AttributeValueToBoolean(attributes.Background);              //Populate our code combo box            mpComboBoxCode.Items.Clear();            mpComboBoxCode.Text = "";                        //Check our usage page and collection            TreeNode remoteNode = getNode("REMOTE");            NodeData remoteData = (NodeData)remoteNode.Tag;            HidUsageActionAttributes remoteAttributes = (HidUsageActionAttributes) remoteData.Parameter;              if (remoteAttributes.UsagePage.Equals(SharpLib.Hid.UsagePage.GenericDesktopControls.ToString()) &&                remoteAttributes.UsageCollection.Equals(SharpLib.Hid.UsageCollection.GenericDesktop.Keyboard.ToString()))            {              // Only supporting code selection for keyboard for now              Type typeOfCode = typeof(Keys);              foreach (string keyName in Enum.GetNames(typeOfCode))              {                Keys value = (Keys) Enum.Parse(typeOfCode' keyName);                if (value > Keys.None && value < Keys.KeyCode)                {                  mpComboBoxCode.Items.Add(keyName);                }              }                mpComboBoxCode.Text = attributes.Code;              mpComboBoxCode.Enabled = true;              mpCheckBoxShift.Enabled = true;              mpCheckBoxControl.Enabled = true;              mpCheckBoxAlt.Enabled = true;              mpCheckBoxWindows.Enabled = true;            }            else            {              //Disable code and modifiers check boxes for the rest              mpComboBoxCode.Enabled = false;              mpCheckBoxShift.Enabled = false;              mpCheckBoxControl.Enabled = false;              mpCheckBoxAlt.Enabled = false;              mpCheckBoxWindows.Enabled = false;            }                return;            case "LAYER":            groupBoxLayer.Enabled = true;            groupBoxCondition.Enabled = false;            groupBoxAction.Enabled = false;            groupBoxButton.Enabled = false;            comboBoxCondProperty.Text = "none";            comboBoxCmdProperty.Text = "none";            comboBoxSound.Text = "none";            comboBoxLayer.SelectedIndex = Convert.ToInt32(data.Value);            return;            case "COMMAND":          case "SOUND":          case "KEY":          case "CONDITION":          {            groupBoxButton.Enabled = false;            groupBoxCondition.Enabled = true;            groupBoxAction.Enabled = true;            groupBoxLayer.Enabled = true;            if ((data.Type == "COMMAND") || (data.Type == "SOUND"))            {              comboBoxLayer.SelectedIndex = Convert.ToInt32(((NodeData) node.Parent.Parent.Tag).Value);              node = node.Parent;              data = (NodeData) node.Tag;            }            else            {              comboBoxLayer.SelectedIndex = Convert.ToInt32(((NodeData) node.Parent.Tag).Value);            }              switch ((string) data.Parameter)            {              case "WINDOW":                radioButtonWindow.Checked = true;                comboBoxCondProperty.Enabled = true;                UpdateCombo(ref comboBoxCondProperty' windowsList'                  GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                break;                case "FULLSCREEN":                radioButtonFullscreen.Checked = true;                comboBoxCondProperty.Enabled = true;                if (Convert.ToBoolean(data.Value))                {                  UpdateCombo(ref comboBoxCondProperty' fullScreenList' "Fullscreen");                }                else                {                  UpdateCombo(ref comboBoxCondProperty' fullScreenList' "No Fullscreen");                }                break;                case "PLAYER":                radioButtonPlaying.Checked = true;                comboBoxCondProperty.Enabled = true;                UpdateCombo(ref comboBoxCondProperty' playerList'                  playerList[Array.IndexOf(nativePlayerList' (string) data.Value)]);                break;                case "*":                comboBoxCondProperty.Text = "none";                radioButtonNoCondition.Checked = true;                comboBoxCondProperty.Enabled = false;                comboBoxCondProperty.Items.Clear();                break;            }            foreach (TreeNode typeNode in node.Nodes)            {              data = (NodeData) typeNode.Tag;              switch (data.Type)              {                case "SOUND":                  if ((string) data.Value != string.Empty)                  {                    comboBoxSound.SelectedItem = data.Value;                  }                  else                  {                    comboBoxSound.SelectedItem = "none";                  }                  break;                  case "COMMAND":                  checkBoxGainFocus.Checked = data.Focus;                  switch ((string) data.Parameter)                  {                    case "ACTION":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' actionList'                        GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                      break;                      case "KEY":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                      textBoxKeyChar.Text = ((Key) data.Value).KeyChar.ToString();                      textBoxKeyCode.Text = ((Key) data.Value).KeyCode.ToString();                      comboBoxCmdProperty.Enabled = true;                      UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                      break;                      case "WINDOW":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonActWindow.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                        GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                      break;                      case "TOGGLE":                      radioButtonToggle.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = false;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      comboBoxCmdProperty.Items.Clear();                      comboBoxCmdProperty.Text = string.Empty;                      break;                      case "POWER":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonPower.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      var friendlyName = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' powerList'                        powerList[Array.IndexOf(nativePowerList' (string) data.Value)]);                      break;                      case "PROCESS":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonProcess.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' processList'                        processList[Array.IndexOf(nativeProcessList' (string) data.Value)]);                      break;                  }                  break;              }            }          }            break;        }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch ((string) data.Parameter)            {              case "WINDOW":                radioButtonWindow.Checked = true;                comboBoxCondProperty.Enabled = true;                UpdateCombo(ref comboBoxCondProperty' windowsList'                  GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                break;                case "FULLSCREEN":                radioButtonFullscreen.Checked = true;                comboBoxCondProperty.Enabled = true;                if (Convert.ToBoolean(data.Value))                {                  UpdateCombo(ref comboBoxCondProperty' fullScreenList' "Fullscreen");                }                else                {                  UpdateCombo(ref comboBoxCondProperty' fullScreenList' "No Fullscreen");                }                break;                case "PLAYER":                radioButtonPlaying.Checked = true;                comboBoxCondProperty.Enabled = true;                UpdateCombo(ref comboBoxCondProperty' playerList'                  playerList[Array.IndexOf(nativePlayerList' (string) data.Value)]);                break;                case "*":                comboBoxCondProperty.Text = "none";                radioButtonNoCondition.Checked = true;                comboBoxCondProperty.Enabled = false;                comboBoxCondProperty.Items.Clear();                break;            }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch (data.Type)              {                case "SOUND":                  if ((string) data.Value != string.Empty)                  {                    comboBoxSound.SelectedItem = data.Value;                  }                  else                  {                    comboBoxSound.SelectedItem = "none";                  }                  break;                  case "COMMAND":                  checkBoxGainFocus.Checked = data.Focus;                  switch ((string) data.Parameter)                  {                    case "ACTION":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' actionList'                        GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                      break;                      case "KEY":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                      textBoxKeyChar.Text = ((Key) data.Value).KeyChar.ToString();                      textBoxKeyCode.Text = ((Key) data.Value).KeyCode.ToString();                      comboBoxCmdProperty.Enabled = true;                      UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                      break;                      case "WINDOW":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonActWindow.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                        GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                      break;                      case "TOGGLE":                      radioButtonToggle.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = false;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      comboBoxCmdProperty.Items.Clear();                      comboBoxCmdProperty.Text = string.Empty;                      break;                      case "POWER":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonPower.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      var friendlyName = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' powerList'                        powerList[Array.IndexOf(nativePowerList' (string) data.Value)]);                      break;                      case "PROCESS":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonProcess.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' processList'                        processList[Array.IndexOf(nativeProcessList' (string) data.Value)]);                      break;                  }                  break;              }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch ((string) data.Parameter)                  {                    case "ACTION":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' actionList'                        GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                      break;                      case "KEY":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonAction.Checked = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                      textBoxKeyChar.Text = ((Key) data.Value).KeyChar.ToString();                      textBoxKeyCode.Text = ((Key) data.Value).KeyCode.ToString();                      comboBoxCmdProperty.Enabled = true;                      UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                      break;                      case "WINDOW":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonActWindow.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                        GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                      break;                      case "TOGGLE":                      radioButtonToggle.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = false;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      comboBoxCmdProperty.Items.Clear();                      comboBoxCmdProperty.Text = string.Empty;                      break;                      case "POWER":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonPower.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      var friendlyName = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' powerList'                        powerList[Array.IndexOf(nativePowerList' (string) data.Value)]);                      break;                      case "PROCESS":                      comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                      radioButtonProcess.Checked = true;                      comboBoxSound.Enabled = true;                      comboBoxCmdProperty.Enabled = true;                      textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                      textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                      UpdateCombo(ref comboBoxCmdProperty' processList'                        processList[Array.IndexOf(nativeProcessList' (string) data.Value)]);                      break;                  }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,comboBoxCondProperty_SelectionChangeCommitted,The following switch statement is missing a default case: switch ((string) data.Parameter)        {          case "WINDOW":            node.Tag = new NodeData("CONDITION"' "WINDOW"'              (int)                Enum.Parse(typeof (GUIWindow.Window)'                  GetWindowName((string) comboBoxCondProperty.SelectedItem)));            node.Text = (string) comboBoxCondProperty.SelectedItem;            break;            case "FULLSCREEN":            if ((string) comboBoxCondProperty.SelectedItem == "Fullscreen")            {              node.Tag = new NodeData("CONDITION"' "FULLSCREEN"' "true");            }            else            {              node.Tag = new NodeData("CONDITION"' "FULLSCREEN"' "false");            }            node.Text = (string) comboBoxCondProperty.SelectedItem;            break;            case "PLAYER":          {            node.Tag = new NodeData("CONDITION"' "PLAYER"'              nativePlayerList[Array.IndexOf(playerList' (string) comboBoxCondProperty.SelectedItem)]);            node.Text = (string) comboBoxCondProperty.SelectedItem;            break;          }          case "*":            break;        }
Missing Default,MediaPortal.InputDevices,HidInputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\HidInputMappingForm.cs,comboBoxCmdProperty_SelectionChangeCommitted,The following switch statement is missing a default case: switch ((string) data.Parameter)        {          case "ACTION":            if ((string) comboBoxCmdProperty.SelectedItem != "Key Pressed")            {              node.Tag = new NodeData("COMMAND"' "ACTION"'                (int)                  Enum.Parse(typeof (Action.ActionType)'                    GetActionName((string) comboBoxCmdProperty.SelectedItem)));              node.Text = "Action \"" + (string) comboBoxCmdProperty.SelectedItem + "\"";            }            else            {              textBoxKeyChar.Text = "0";              textBoxKeyCode.Text = "0";              var key = new Key(Convert.ToInt32(textBoxKeyChar.Text)' Convert.ToInt32(textBoxKeyCode.Text));              node.Tag = new NodeData("COMMAND"' "KEY"' key);              node.Text = string.Format("Key Pressed: {0} [{1}]"' textBoxKeyChar.Text' textBoxKeyCode.Text);            }            break;            case "WINDOW":            node.Tag = new NodeData("COMMAND"' "WINDOW"'              (int)                Enum.Parse(typeof (GUIWindow.Window)'                  GetWindowName((string) comboBoxCmdProperty.SelectedItem)));            node.Text = "Window \"" + (string) comboBoxCmdProperty.SelectedItem + "\"";            break;            case "POWER":            node.Tag = new NodeData("COMMAND"' "POWER"'              nativePowerList[Array.IndexOf(powerList' (string) comboBoxCmdProperty.SelectedItem)]);            node.Text = (string) comboBoxCmdProperty.SelectedItem;            break;            case "PROCESS":            node.Tag = new NodeData("COMMAND"' "PROCESS"'              nativeProcessList[Array.IndexOf(processList' (string) comboBoxCmdProperty.SelectedItem)]);            node.Text = (string) comboBoxCmdProperty.SelectedItem;            break;        }
Missing Default,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,DoMapAction,The following switch statement is missing a default case: switch (map.CmdProperty)            {              case "EXIT":                action = new Action(Action.ActionType.ACTION_EXIT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "REBOOT":                action = new Action(Action.ActionType.ACTION_REBOOT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "SHUTDOWN":                action = new Action(Action.ActionType.ACTION_SHUTDOWN' 0' 0);                GUIGraphicsContext.OnAction(action);                break;              case "STANDBY":                action = new Action(Action.ActionType.ACTION_SUSPEND' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;              case "HIBERNATE":                action = new Action(Action.ActionType.ACTION_HIBERNATE' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;              case "POWEROFF":                action = new Action(Action.ActionType.ACTION_POWER_OFF' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;            }
Missing Default,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,DoMapAction,The following switch statement is missing a default case: switch (map.CmdProperty)                  {                    case "CLOSE":                      proc.CloseMainWindow();                      break;                    case "KILL":                      proc.Kill();                      break;                  }
Missing Default,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,GetMapping,The following switch statement is missing a default case: switch (map.Condition)              {                case "*": // wildcard' no further condition                  found = map;                  break;                case "WINDOW": // Window-ID = x                  if ((!GUIWindowManager.IsOsdVisible &&                       (GUIWindowManager.ActiveWindowEx == Convert.ToInt32(map.ConProperty))) ||                      ((int)GUIWindowManager.VisibleOsd == Convert.ToInt32(map.ConProperty)))                  {                    found = map;                  }                  break;                case "FULLSCREEN": // Fullscreen = true/false                  if ((GUIGraphicsContext.IsFullScreenVideo == Convert.ToBoolean(map.ConProperty)) &&                      !GUIWindowManager.IsRouted && !GUIWindowManager.IsOsdVisible)                  {                    found = map;                  }                  break;                case "PLAYER": // Playing TV/DVD/general                  if (!GUIWindowManager.IsRouted)                  {                    switch (map.ConProperty)                    {                      case "TV":                        if (g_Player.IsTimeShifting || g_Player.IsTV || g_Player.IsTVRecording)                        {                          found = map;                        }                        break;                      case "DVD":                        if (g_Player.IsDVD)                        {                          found = map;                        }                        break;                      case "MUSIC":                        if (g_Player.Playing && g_Player.IsMusic)                        {                          found = map;                        }                        break;                      case "MEDIA":                        if (g_Player.Playing)                        {                          found = map;                        }                        break;                    }                  }                  break;              }
Missing Default,MediaPortal.InputDevices,InputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputHandler.cs,GetMapping,The following switch statement is missing a default case: switch (map.ConProperty)                    {                      case "TV":                        if (g_Player.IsTimeShifting || g_Player.IsTV || g_Player.IsTVRecording)                        {                          found = map;                        }                        break;                      case "DVD":                        if (g_Player.IsDVD)                        {                          found = map;                        }                        break;                      case "MUSIC":                        if (g_Player.Playing && g_Player.IsMusic)                        {                          found = map;                        }                        break;                      case "MEDIA":                        if (g_Player.Playing)                        {                          found = map;                        }                        break;                    }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,LoadMapping,The following switch statement is missing a default case: switch (condition)                {                  case "WINDOW":                    conditionString =                      GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(conProperty)));                    if (string.IsNullOrEmpty(conditionString))                    {                      continue;                    }                    break;                  case "FULLSCREEN":                    if (conProperty == "TRUE")                    {                      conditionString = "Fullscreen";                    }                    else                    {                      conditionString = "No Fullscreen";                    }                    break;                  case "PLAYER":                    conditionString = playerList[Array.IndexOf(nativePlayerList' conProperty)];                    break;                  case "*":                    conditionString = "No Condition";                    break;                }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,LoadMapping,The following switch statement is missing a default case: switch (command)                {                  case "ACTION":                    commandString = "Action \"" +                                    GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(cmdProperty))) +                                    "\"";                    break;                  case "KEY":                    commandString = "Key \"" + cmdProperty + "\"";                    break;                  case "WINDOW":                    commandString = "Window \"" +                                    GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(cmdProperty))) +                                    "\"";                    break;                  case "TOGGLE":                    commandString = "Toggle Layer";                    break;                  case "POWER":                    commandString = powerList[Array.IndexOf(nativePowerList' cmdProperty)];                    break;                  case "PROCESS":                    commandString = processList[Array.IndexOf(nativeProcessList' cmdProperty)];                    break;                }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,SaveMapping,The following switch statement is missing a default case: switch (((Data)commandNode.Tag).Type)                          {                            case "COMMAND":                              {                                command = (string)((Data)commandNode.Tag).Parameter;                                focus = ((Data)commandNode.Tag).Focus;                                if (command != "KEY")                                {                                  cmdProperty = ((Data)commandNode.Tag).Value.ToString();                                }                                else                                {                                  command = "ACTION";                                  Key key = (Key)((Data)commandNode.Tag).Value;                                  cmdProperty = "93";                                  cmdKeyChar = key.KeyChar.ToString();                                  cmdKeyCode = key.KeyCode.ToString();                                }                              }                              break;                            case "SOUND":                              sound = (string)((Data)commandNode.Tag).Value;                              break;                          }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,getNode,The following switch statement is missing a default case: switch (type)        {          case "COMMAND":            if ((data.Type == "SOUND") || (data.Type == "KEY"))            {              node = node.Parent;              foreach (TreeNode subNode in node.Nodes)              {                data = (Data)subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            else if (data.Type == "CONDITION")            {              foreach (TreeNode subNode in node.Nodes)              {                data = (Data)subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            break;          case "SOUND":            if ((data.Type == "COMMAND") || (data.Type == "KEY"))            {              node = node.Parent;              foreach (TreeNode subNode in node.Nodes)              {                data = (Data)subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            else if (data.Type == "CONDITION")            {              foreach (TreeNode subNode in node.Nodes)              {                data = (Data)subNode.Tag;                if (data.Type == type)                {                  return subNode;                }              }            }            break;          case "CONDITION":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent;            }            break;          case "LAYER":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent;            }            else if (data.Type == "CONDITION")            {              return node.Parent;            }            break;          case "BUTTON":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent.Parent;            }            else if (data.Type == "CONDITION")            {              return node.Parent.Parent;            }            else if (data.Type == "LAYER")            {              return node.Parent;            }            break;          case "REMOTE":            if ((data.Type == "SOUND") || (data.Type == "COMMAND") || (data.Type == "KEY"))            {              return node.Parent.Parent.Parent.Parent;            }            else if (data.Type == "CONDITION")            {              return node.Parent.Parent.Parent;            }            else if (data.Type == "LAYER")            {              return node.Parent.Parent;            }            else if (data.Type == "BUTTON")            {              return node.Parent;            }            break;        }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch (data.Type)        {          case "REMOTE":          case "BUTTON":            groupBoxLayer.Enabled = false;            groupBoxCondition.Enabled = false;            groupBoxAction.Enabled = false;            comboBoxLayer.Text = "All Layers";            comboBoxCondProperty.Text = "none";            comboBoxCmdProperty.Text = "none";            comboBoxSound.Text = "none";            return;          case "LAYER":            groupBoxLayer.Enabled = true;            groupBoxCondition.Enabled = false;            groupBoxAction.Enabled = false;            comboBoxCondProperty.Text = "none";            comboBoxCmdProperty.Text = "none";            comboBoxSound.Text = "none";            comboBoxLayer.SelectedIndex = Convert.ToInt32(data.Value);            return;          case "COMMAND":          case "SOUND":          case "KEY":          case "CONDITION":            {              groupBoxCondition.Enabled = true;              groupBoxAction.Enabled = true;              groupBoxLayer.Enabled = true;              if ((data.Type == "COMMAND") || (data.Type == "SOUND"))              {                comboBoxLayer.SelectedIndex = Convert.ToInt32(((Data)node.Parent.Parent.Tag).Value);                node = node.Parent;                data = (Data)node.Tag;              }              else              {                comboBoxLayer.SelectedIndex = Convert.ToInt32(((Data)node.Parent.Tag).Value);              }                switch ((string)data.Parameter)              {                case "WINDOW":                  radioButtonWindow.Checked = true;                  comboBoxCondProperty.Enabled = true;                  UpdateCombo(ref comboBoxCondProperty' windowsList'                              GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                  break;                case "FULLSCREEN":                  radioButtonFullscreen.Checked = true;                  comboBoxCondProperty.Enabled = true;                  if (Convert.ToBoolean(data.Value))                  {                    UpdateCombo(ref comboBoxCondProperty' fullScreenList' "Fullscreen");                  }                  else                  {                    UpdateCombo(ref comboBoxCondProperty' fullScreenList' "No Fullscreen");                  }                  break;                case "PLAYER":                  radioButtonPlaying.Checked = true;                  comboBoxCondProperty.Enabled = true;                  UpdateCombo(ref comboBoxCondProperty' playerList'                              playerList[Array.IndexOf(nativePlayerList' (string)data.Value)]);                  break;                case "*":                  comboBoxCondProperty.Text = "none";                  radioButtonNoCondition.Checked = true;                  comboBoxCondProperty.Enabled = false;                  comboBoxCondProperty.Items.Clear();                  break;              }              foreach (TreeNode typeNode in node.Nodes)              {                data = (Data)typeNode.Tag;                switch (data.Type)                {                  case "SOUND":                    if ((string)data.Value != string.Empty)                    {                      comboBoxSound.SelectedItem = data.Value;                    }                    else                    {                      comboBoxSound.SelectedItem = "none";                    }                    break;                  case "COMMAND":                    checkBoxGainFocus.Checked = data.Focus;                    switch ((string)data.Parameter)                    {                      case "ACTION":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' actionList'                                    GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                        break;                      case "KEY":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                        textBoxKeyChar.Text = ((Key)data.Value).KeyChar.ToString();                        textBoxKeyCode.Text = ((Key)data.Value).KeyCode.ToString();                        comboBoxCmdProperty.Enabled = true;                        UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                        break;                      case "WINDOW":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonActWindow.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                                    GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                        break;                      case "TOGGLE":                        radioButtonToggle.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = false;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        comboBoxCmdProperty.Items.Clear();                        comboBoxCmdProperty.Text = string.Empty;                        break;                      case "POWER":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonPower.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        string friendlyName = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' powerList'                                    powerList[Array.IndexOf(nativePowerList' (string)data.Value)]);                        break;                      case "PROCESS":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonProcess.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' processList'                                    processList[Array.IndexOf(nativeProcessList' (string)data.Value)]);                        break;                    }                    break;                }              }            }            break;        }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch ((string)data.Parameter)              {                case "WINDOW":                  radioButtonWindow.Checked = true;                  comboBoxCondProperty.Enabled = true;                  UpdateCombo(ref comboBoxCondProperty' windowsList'                              GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                  break;                case "FULLSCREEN":                  radioButtonFullscreen.Checked = true;                  comboBoxCondProperty.Enabled = true;                  if (Convert.ToBoolean(data.Value))                  {                    UpdateCombo(ref comboBoxCondProperty' fullScreenList' "Fullscreen");                  }                  else                  {                    UpdateCombo(ref comboBoxCondProperty' fullScreenList' "No Fullscreen");                  }                  break;                case "PLAYER":                  radioButtonPlaying.Checked = true;                  comboBoxCondProperty.Enabled = true;                  UpdateCombo(ref comboBoxCondProperty' playerList'                              playerList[Array.IndexOf(nativePlayerList' (string)data.Value)]);                  break;                case "*":                  comboBoxCondProperty.Text = "none";                  radioButtonNoCondition.Checked = true;                  comboBoxCondProperty.Enabled = false;                  comboBoxCondProperty.Items.Clear();                  break;              }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch (data.Type)                {                  case "SOUND":                    if ((string)data.Value != string.Empty)                    {                      comboBoxSound.SelectedItem = data.Value;                    }                    else                    {                      comboBoxSound.SelectedItem = "none";                    }                    break;                  case "COMMAND":                    checkBoxGainFocus.Checked = data.Focus;                    switch ((string)data.Parameter)                    {                      case "ACTION":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' actionList'                                    GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                        break;                      case "KEY":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                        textBoxKeyChar.Text = ((Key)data.Value).KeyChar.ToString();                        textBoxKeyCode.Text = ((Key)data.Value).KeyCode.ToString();                        comboBoxCmdProperty.Enabled = true;                        UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                        break;                      case "WINDOW":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonActWindow.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                                    GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                        break;                      case "TOGGLE":                        radioButtonToggle.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = false;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        comboBoxCmdProperty.Items.Clear();                        comboBoxCmdProperty.Text = string.Empty;                        break;                      case "POWER":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonPower.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        string friendlyName = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' powerList'                                    powerList[Array.IndexOf(nativePowerList' (string)data.Value)]);                        break;                      case "PROCESS":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonProcess.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' processList'                                    processList[Array.IndexOf(nativeProcessList' (string)data.Value)]);                        break;                    }                    break;                }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,treeMapping_AfterSelect,The following switch statement is missing a default case: switch ((string)data.Parameter)                    {                      case "ACTION":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' actionList'                                    GetFriendlyName(Enum.GetName(typeof (Action.ActionType)' Convert.ToInt32(data.Value))));                        break;                      case "KEY":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonAction.Checked = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = true;                        textBoxKeyChar.Text = ((Key)data.Value).KeyChar.ToString();                        textBoxKeyCode.Text = ((Key)data.Value).KeyCode.ToString();                        comboBoxCmdProperty.Enabled = true;                        UpdateCombo(ref comboBoxCmdProperty' actionList' "Key Pressed");                        break;                      case "WINDOW":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonActWindow.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' windowsListFiltered'                                    GetFriendlyName(Enum.GetName(typeof (GUIWindow.Window)' Convert.ToInt32(data.Value))));                        break;                      case "TOGGLE":                        radioButtonToggle.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = false;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        comboBoxCmdProperty.Items.Clear();                        comboBoxCmdProperty.Text = string.Empty;                        break;                      case "POWER":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonPower.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        string friendlyName = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' powerList'                                    powerList[Array.IndexOf(nativePowerList' (string)data.Value)]);                        break;                      case "PROCESS":                        comboBoxCmdProperty.DropDownStyle = ComboBoxStyle.DropDownList;                        radioButtonProcess.Checked = true;                        comboBoxSound.Enabled = true;                        comboBoxCmdProperty.Enabled = true;                        textBoxKeyChar.Enabled = textBoxKeyCode.Enabled = false;                        textBoxKeyChar.Text = textBoxKeyCode.Text = string.Empty;                        UpdateCombo(ref comboBoxCmdProperty' processList'                                    processList[Array.IndexOf(nativeProcessList' (string)data.Value)]);                        break;                    }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,comboBoxCondProperty_SelectionChangeCommitted,The following switch statement is missing a default case: switch ((string)data.Parameter)        {          case "WINDOW":            node.Tag = new Data("CONDITION"' "WINDOW"'                                (int)                                Enum.Parse(typeof (GUIWindow.Window)'                                           GetWindowName((string)comboBoxCondProperty.SelectedItem)));            node.Text = (string)comboBoxCondProperty.SelectedItem;            break;          case "FULLSCREEN":            if ((string)comboBoxCondProperty.SelectedItem == "Fullscreen")            {              node.Tag = new Data("CONDITION"' "FULLSCREEN"' "true");            }            else            {              node.Tag = new Data("CONDITION"' "FULLSCREEN"' "false");            }            node.Text = (string)comboBoxCondProperty.SelectedItem;            break;          case "PLAYER":            {              node.Tag = new Data("CONDITION"' "PLAYER"'                                  nativePlayerList[Array.IndexOf(playerList' (string)comboBoxCondProperty.SelectedItem)]);              node.Text = (string)comboBoxCondProperty.SelectedItem;              break;            }          case "*":            break;        }
Missing Default,MediaPortal.InputDevices,InputMappingForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputMapper\InputMappingForm.cs,comboBoxCmdProperty_SelectionChangeCommitted,The following switch statement is missing a default case: switch ((string)data.Parameter)        {          case "ACTION":            if ((string)comboBoxCmdProperty.SelectedItem != "Key Pressed")            {              node.Tag = new Data("COMMAND"' "ACTION"'                                  (int)                                  Enum.Parse(typeof (Action.ActionType)'                                             GetActionName((string)comboBoxCmdProperty.SelectedItem)));              node.Text = "Action \"" + (string)comboBoxCmdProperty.SelectedItem + "\"";            }            else            {              textBoxKeyChar.Text = "0";              textBoxKeyCode.Text = "0";              Key key = new Key(Convert.ToInt32(textBoxKeyChar.Text)' Convert.ToInt32(textBoxKeyCode.Text));              node.Tag = new Data("COMMAND"' "KEY"' key);              node.Text = string.Format("Key Pressed: {0} [{1}]"' textBoxKeyChar.Text' textBoxKeyCode.Text);            }            break;          case "WINDOW":            node.Tag = new Data("COMMAND"' "WINDOW"'                                (int)                                Enum.Parse(typeof (GUIWindow.Window)'                                           GetWindowName((string)comboBoxCmdProperty.SelectedItem)));            node.Text = "Window \"" + (string)comboBoxCmdProperty.SelectedItem + "\"";            break;          case "POWER":            node.Tag = new Data("COMMAND"' "POWER"'                                nativePowerList[Array.IndexOf(powerList' (string)comboBoxCmdProperty.SelectedItem)]);            node.Text = (string)comboBoxCmdProperty.SelectedItem;            break;          case "PROCESS":            node.Tag = new Data("COMMAND"' "PROCESS"'                                nativeProcessList[Array.IndexOf(processList' (string)comboBoxCmdProperty.SelectedItem)]);            node.Text = (string)comboBoxCmdProperty.SelectedItem;            break;        }
Missing Default,MediaPortal.InputDevices,AppCommandListener,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\AppCommand\AppCommandListener.cs,KeyCodeToAppCommand,The following switch statement is missing a default case: switch (keyCode)             {                 case Keys.MediaNextTrack:                     return AppCommands.MediaNextTrack;                 case Keys.MediaPlayPause:                     return AppCommands.MediaPlayPause;                 case Keys.MediaPreviousTrack:                     return AppCommands.MediaPreviousTrack;                 case Keys.MediaStop:                     return AppCommands.MediaStop;                 case Keys.VolumeDown:                     return AppCommands.VolumeDown;                 case Keys.VolumeMute:                     return AppCommands.VolumeMute;                 case Keys.VolumeUp:                     return AppCommands.VolumeUp;             }
Missing Default,MediaPortal.InputDevices,CentareaRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\CentareaHID\CentareaRemote.cs,MapWndProcMessage,The following switch statement is missing a default case: switch (mmove)                              {                                  case MouseDirection.Up:                                      keycode = 38;                                      break;                                  case MouseDirection.Right:                                      keycode = 39;                                      break;                                  case MouseDirection.Down:                                      keycode = 40;                                      break;                                  case MouseDirection.Left:                                      keycode = 37;                                      break;                              }
Missing Default,MediaPortal.InputDevices,DirectInputHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\DirectInputRemote\DirectInputHandler.cs,SendActions,The following switch statement is missing a default case: switch (pov[0])          {            case 0:              {                actionCode = (int)joyButton.povN;                break;              }            case 9000:              {                actionCode = (int)joyButton.povE;                break;              }            case 18000:              {                actionCode = (int)joyButton.povS;                break;              }            case 27000:              {                actionCode = (int)joyButton.povW;                break;              }          }
Missing Default,MediaPortal.InputDevices,FireDTVRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\FireDTV\FireDTVRemote.cs,WndProc,The following switch statement is missing a default case: switch ((FireDTVConstants.FireDTVWindowMessages)msg.Msg)       {         case FireDTVConstants.FireDTVWindowMessages.DeviceAttached:           Log.Info("FireDTVRemote: DeviceAttached");           StartFireDTVComms();           break;          case FireDTVConstants.FireDTVWindowMessages.DeviceDetached:           Log.Info("FireDTVRemote: DeviceDetached");           _fireDTV.SourceFilters.RemoveByHandle((uint)msg.WParam);           break;          case FireDTVConstants.FireDTVWindowMessages.DeviceChanged:           Log.Info("FireDTVRemote: DeviceChanged");           StartFireDTVComms();           break;          case FireDTVConstants.FireDTVWindowMessages.RemoteControlEvent:           if (_enabled)           {             int remoteKeyCode = msg.LParam.ToInt32();             if (_logVerbose)             {               Log.Info("FireDTVRemote: RemoteControlEvent {0}"' remoteKeyCode);             }              if (!_inputHandler.MapAction(remoteKeyCode))             {               return false;             }              msg.Result = new IntPtr(1);             return true;           }           break;       }
Missing Default,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,OnReceive,The following switch statement is missing a default case: switch (msg.Split('|')[0])        {          case "CMD":            {              // Time of button press - Use this for repeat delay calculations              DateTime sentTime = DateTime.FromBinary(Convert.ToInt64(msg.Split('|')[2]));              int newCommand = Convert.ToInt16(msg.Split('|')[1]);                if (_logVerbose)              {                Log.Info("HCW: elapsed time: {0}"' ((TimeSpan)(sentTime - _lastTime)).Milliseconds);              }              if (_logVerbose)              {                Log.Info("HCW: sameCommandCount: {0}"' _sameCommandCount.ToString());              }                if (_lastCommand == newCommand)              {                // button release time elapsed since last identical command                // if so' reset counter & start new session                if ((sentTime - _lastTime) > _buttonRelease)                {                  _sameCommandCount = 0; // new session with this button                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout true");                  }                }                else                {                  if (_logVerbose)                  {                    Log.Info("HCW: same command' timeout false");                  }                  _sameCommandCount++; // button release time not elapsed                }              }              else              {                _sameCommandCount = 0; // we got a new button              }                bool executeKey = false;                // new button / session              if (_sameCommandCount == 0)              {                executeKey = true;                //here              }                //// we got the identical button often enough to accept it              if (_sameCommandCount == _repeatFilter)              {                executeKey = true;              }                // we got the identical button accepted and still pressed' repeat with repeatSpeed              if ((_sameCommandCount > _repeatFilter) && (_sameCommandCount > _lastExecutedCommandCount + _repeatSpeed))              {                executeKey = true;              }                if (HCWKeyPressed != null)              {                _filterDoubleKlicks = true;              }                // double click filter              if (executeKey && _filterDoubleKlicks)              {                int keyCode = newCommand;                  // strip remote type                if (keyCode > 2000)                {                  keyCode = keyCode - 2000;                }                else if (keyCode > 1000)                {                  keyCode = keyCode - 1000;                }                  if ((_sameCommandCount > 0) &&                    (keyCode == 46 || //46 = fullscreen/green button                     keyCode == 37 || //37 = OK button                     keyCode == 56 || //56 = yellow button                     keyCode == 11 || //11 = red button                     keyCode == 41 || //41 = blue button                     keyCode == 13 || //13 = menu button                     keyCode == 15 || //15 = mute button                     keyCode == 48)) //48 = pause button                {                  executeKey = false;                  if (_logVerbose)                  {                    Log.Info("HCW: doubleclick supressed: {0}"' newCommand.ToString());                  }                }                else                {                  //Send command for remote control learning                  if (HCWKeyPressed != null)                  {                    HCWKeyPressed(newCommand);                  }                }              }                if (executeKey)              {                _lastExecutedCommandCount = _sameCommandCount;                _lastCommand = newCommand;                //Send command to application...                if (_inputHandler != null)                {                  if (!_inputHandler.MapAction(newCommand))                  {                    Log.Info("HCW: No mapping found");                  }                  else                  {                    if (_logVerbose)                    {                      Log.Info("HCW: repeat filter accepted: {0}"' newCommand.ToString());                    }                  }                }              }              _lastTime = sentTime;            }            break;          case "APP":              if (msg.Split('|')[1] == "STOP")            {              if (_logVerbose)              {                Log.Info("HCW: received STOP from HcwHelper");              }              _controlEnabled = false;              _exit = true;              StopHcw();            }            break;        }
Missing Default,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg)          {            case WM_POWERBROADCAST:              if (msg.WParam.ToInt32() == PBT_APMRESUMEAUTOMATIC)              {                try                {                  StartHcw();                }                catch (Exception e)                {                  Log.Error("StartHCW failed. Exception is: {0}"' e.Message);                }                return true;              }              break;              case WM_ACTIVATE:              if (_allowExternal && !_keepControl)              {                switch ((int)msg.WParam)                {                  case WA_INACTIVE:                    if (_logVerbose)                    {                      Log.Info("HCW: lost focus");                    }                    {                      StopHcw();                      return true;                    }                  case WA_ACTIVE:                  case WA_CLICKACTIVE:                    if (_logVerbose)                    {                      Log.Info("HCW: got focus");                    }                    {                      StartHcw();                      return true;                    }                }              }              break;          }
Missing Default,MediaPortal.InputDevices,HcwRemote,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\HcwRemote\HcwRemote.cs,WndProc,The following switch statement is missing a default case: switch ((int)msg.WParam)                {                  case WA_INACTIVE:                    if (_logVerbose)                    {                      Log.Info("HCW: lost focus");                    }                    {                      StopHcw();                      return true;                    }                  case WA_ACTIVE:                  case WA_CLICKACTIVE:                    if (_logVerbose)                    {                      Log.Info("HCW: got focus");                    }                    {                      StartHcw();                      return true;                    }                }
Missing Default,MediaPortal.InputDevices,HidHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidHandler.cs,LoadMapping,The following switch statement is missing a default case: switch (rawUsagePage)            {              case (ushort) Hid.UsagePage.WindowsMediaCenterRemoteControl:              {                if (!TryParseEnum<Hid.UsageCollection.WindowsMediaCenter>(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse UsageCollectionWindowsMediaCenter {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                usageAction.Load(usageActionNode' TryParseWindowsMediaCenterRemoteControl);              }                break;                case (ushort) Hid.UsagePage.GenericDesktopControls:              {                if (!TryParseEnum<Hid.UsageCollection.GenericDesktop>(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse UsageCollectionGenericDesktop {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                if (rawUsageCollection == (ushort)Hid.UsageCollection.GenericDesktop.Keyboard)                {                  //Special case for keyboards                  //Try to parse virtual keys                  usageAction.Load(usageActionNode' TryParseEnum < System.Windows.Forms.Keys>);                }                else                {                  //Generic case                  usageAction.Load(usageActionNode' TryParseEnum<Hid.Usage.GenericDesktop>);                }                              }                break;                case (ushort) Hid.UsagePage.Consumer:              {                if (!TryParseEnum<Hid.UsageCollection.Consumer>(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse UsageCollectionConsumer {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                usageAction.Load(usageActionNode' TryParseEnum<Hid.Usage.ConsumerControl>);              }                break;                case (ushort) Hid.UsagePage.SimulationControls:              {                if (!TryParseDefault(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse SimulationControls collection {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                usageAction.Load(usageActionNode' TryParseEnum<Hid.Usage.SimulationControl>);              }                break;                case (ushort) Hid.UsagePage.GameControls:              {                if (!TryParseDefault(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse GameControls collection {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                usageAction.Load(usageActionNode' TryParseEnum<Hid.Usage.GameControl>);              }                break;                case (ushort) Hid.UsagePage.Telephony:              {                if (!TryParseDefault(usageCollectionName' out rawUsageCollection))                {                  Log.Error("HID: XML configuration could not parse Telephony collection {0}"' usageCollectionName);                  continue;                }                  //Now parse usage action mapping                usageAction.Load(usageActionNode' TryParseEnum<Hid.Usage.TelephonyDevice>);              }                break;            }
Missing Default,MediaPortal.InputDevices,InputDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\InputDevices.cs,MapToAction,The following switch statement is missing a default case: switch (mapping.Command)            {              case "ACTION": // execute Action x                Key key = new Key(mapping.CmdKeyChar' mapping.CmdKeyCode);                Log.Info("MappingToAction: key {0} / {1} / Action: {2} / {3}"' mapping.CmdKeyChar' mapping.CmdKeyCode'                  mapping.CmdProperty'                  ((Action.ActionType) Convert.ToInt32(mapping.CmdProperty)).ToString());                result = new Action(key' (Action.ActionType) Convert.ToInt32(mapping.CmdProperty)' 0' 0);                break;              case "KEY": // Try and map the key to the Keys enum and process that way                var tmpKey = Keys.A;                if (Enum.TryParse<Keys>(mapping.CmdProperty' out tmpKey))                  result = MapToAction((int) tmpKey);                break;            }
Missing Default,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,The following switch statement is missing a default case: switch (aAction.CmdProperty)            {              case "EXIT":                action = new Action(Action.ActionType.ACTION_EXIT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "REBOOT":                action = new Action(Action.ActionType.ACTION_REBOOT' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "SHUTDOWN":                action = new Action(Action.ActionType.ACTION_SHUTDOWN' 0' 0);                GUIGraphicsContext.OnAction(action);                break;                case "STANDBY":                action = new Action(Action.ActionType.ACTION_SUSPEND' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;                case "HIBERNATE":                action = new Action(Action.ActionType.ACTION_HIBERNATE' 1' 0); //1 = ignore prompt                GUIGraphicsContext.OnAction(action);                break;            }
Missing Default,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,ExecuteActionIfNeeded,The following switch statement is missing a default case: switch (aAction.CmdProperty)                  {                    case "CLOSE":                      proc.CloseMainWindow();                      break;                      case "KILL":                      proc.Kill();                      break;                  }
Missing Default,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,GetAction,The following switch statement is missing a default case: switch (map.Condition)              {                case "*": // wildcard' no further condition                  found = map;                  break;                  case "WINDOW": // Window-ID = x                  if ((!GUIWindowManager.IsOsdVisible &&                       (GUIWindowManager.ActiveWindowEx == Convert.ToInt32(map.ConProperty))) ||                      ((int) GUIWindowManager.VisibleOsd == Convert.ToInt32(map.ConProperty)))                  {                    found = map;                  }                  break;                  case "FULLSCREEN": // Fullscreen = true/false                  if ((GUIGraphicsContext.IsFullScreenVideo == Convert.ToBoolean(map.ConProperty)) &&                      !GUIWindowManager.IsRouted && !GUIWindowManager.IsOsdVisible)                  {                    found = map;                  }                  break;                  case "PLAYER": // Playing TV/DVD/general                  if (!GUIWindowManager.IsRouted)                  {                    switch (map.ConProperty)                    {                      case "TV":                        if (g_Player.IsTimeShifting || g_Player.IsTV || g_Player.IsTVRecording)                        {                          found = map;                        }                        break;                        case "DVD":                        if (g_Player.IsDVD)                        {                          found = map;                        }                        break;                        case "MUSIC":                        if (g_Player.Playing && g_Player.IsMusic)                        {                          found = map;                        }                        break;                        case "MEDIA":                        if (g_Player.Playing)                        {                          found = map;                        }                        break;                    }                  }                  break;              }
Missing Default,MediaPortal.InputDevices,HidUsageAction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\RemotePlugins\Remotes\Hid\HidUsageAction.cs,GetAction,The following switch statement is missing a default case: switch (map.ConProperty)                    {                      case "TV":                        if (g_Player.IsTimeShifting || g_Player.IsTV || g_Player.IsTVRecording)                        {                          found = map;                        }                        break;                        case "DVD":                        if (g_Player.IsDVD)                        {                          found = map;                        }                        break;                        case "MUSIC":                        if (g_Player.Playing && g_Player.IsMusic)                        {                          found = map;                        }                        break;                        case "MEDIA":                        if (g_Player.Playing)                        {                          found = map;                        }                        break;                    }
